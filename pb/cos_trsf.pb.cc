// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cos_trsf.proto

#include "cos_trsf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_cosv4_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SseInfo_cosv4_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cosv4_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UploadAttr_cosv4_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CosTransferReqMsg_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CosTransferRspMsg_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FileTrsfReq_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileTrsfRsp_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmsInfo_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiRegionList_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartCopyFinishReq_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartCopyReq_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartCopyRsp_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutObjCopyReq_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutObjCopyRsp_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SseCInfo_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskProgressReq_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskProgressRsp_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferNotify_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferNotifyRsp_cos_5ftrsf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrsfSseInfo_cos_5ftrsf_2eproto;
namespace FTN {
class CosTransferReqMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CosTransferReqMsg> _instance;
} _CosTransferReqMsg_default_instance_;
class CosTransferRspMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CosTransferRspMsg> _instance;
} _CosTransferRspMsg_default_instance_;
class FileTrsfReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileTrsfReq> _instance;
} _FileTrsfReq_default_instance_;
class MultiRegionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRegionList> _instance;
} _MultiRegionList_default_instance_;
class PutObjCopyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutObjCopyReq> _instance;
} _PutObjCopyReq_default_instance_;
class PartCopyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartCopyReq> _instance;
} _PartCopyReq_default_instance_;
class PartCopyFinishReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartCopyFinishReq> _instance;
} _PartCopyFinishReq_default_instance_;
class TrsfSseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrsfSseInfo> _instance;
} _TrsfSseInfo_default_instance_;
class SseCInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SseCInfo> _instance;
} _SseCInfo_default_instance_;
class KmsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KmsInfo> _instance;
} _KmsInfo_default_instance_;
class FileTrsfRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileTrsfRsp> _instance;
} _FileTrsfRsp_default_instance_;
class PutObjCopyRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutObjCopyRsp> _instance;
} _PutObjCopyRsp_default_instance_;
class PartCopyRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartCopyRsp> _instance;
} _PartCopyRsp_default_instance_;
class TransferNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferNotify> _instance;
} _TransferNotify_default_instance_;
class TransferNotifyRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferNotifyRsp> _instance;
} _TransferNotifyRsp_default_instance_;
class TaskProgressReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskProgressReq> _instance;
} _TaskProgressReq_default_instance_;
class TaskProgressRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskProgressRsp> _instance;
} _TaskProgressRsp_default_instance_;
}  // namespace FTN
static void InitDefaultsscc_info_CosTransferReqMsg_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_CosTransferReqMsg_default_instance_;
    new (ptr) ::FTN::CosTransferReqMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CosTransferReqMsg_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CosTransferReqMsg_cos_5ftrsf_2eproto}, {
      &scc_info_FileTrsfReq_cos_5ftrsf_2eproto.base,
      &scc_info_TaskProgressReq_cos_5ftrsf_2eproto.base,
      &scc_info_PutObjCopyReq_cos_5ftrsf_2eproto.base,
      &scc_info_PartCopyReq_cos_5ftrsf_2eproto.base,
      &scc_info_PartCopyFinishReq_cos_5ftrsf_2eproto.base,}};

static void InitDefaultsscc_info_CosTransferRspMsg_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_CosTransferRspMsg_default_instance_;
    new (ptr) ::FTN::CosTransferRspMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CosTransferRspMsg_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CosTransferRspMsg_cos_5ftrsf_2eproto}, {
      &scc_info_FileTrsfRsp_cos_5ftrsf_2eproto.base,
      &scc_info_TaskProgressRsp_cos_5ftrsf_2eproto.base,
      &scc_info_TransferNotify_cos_5ftrsf_2eproto.base,
      &scc_info_TransferNotifyRsp_cos_5ftrsf_2eproto.base,
      &scc_info_PutObjCopyRsp_cos_5ftrsf_2eproto.base,
      &scc_info_PartCopyRsp_cos_5ftrsf_2eproto.base,}};

static void InitDefaultsscc_info_FileTrsfReq_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_FileTrsfReq_default_instance_;
    new (ptr) ::FTN::FileTrsfReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FileTrsfReq_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FileTrsfReq_cos_5ftrsf_2eproto}, {
      &scc_info_TrsfSseInfo_cos_5ftrsf_2eproto.base,
      &scc_info_UploadAttr_cosv4_5fclient_2eproto.base,
      &scc_info_MultiRegionList_cos_5ftrsf_2eproto.base,}};

static void InitDefaultsscc_info_FileTrsfRsp_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_FileTrsfRsp_default_instance_;
    new (ptr) ::FTN::FileTrsfRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileTrsfRsp_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileTrsfRsp_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_KmsInfo_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_KmsInfo_default_instance_;
    new (ptr) ::FTN::KmsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmsInfo_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KmsInfo_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_MultiRegionList_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_MultiRegionList_default_instance_;
    new (ptr) ::FTN::MultiRegionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiRegionList_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiRegionList_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_PartCopyFinishReq_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_PartCopyFinishReq_default_instance_;
    new (ptr) ::FTN::PartCopyFinishReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartCopyFinishReq_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartCopyFinishReq_cos_5ftrsf_2eproto}, {
      &scc_info_MultiRegionList_cos_5ftrsf_2eproto.base,}};

static void InitDefaultsscc_info_PartCopyReq_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_PartCopyReq_default_instance_;
    new (ptr) ::FTN::PartCopyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartCopyReq_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartCopyReq_cos_5ftrsf_2eproto}, {
      &scc_info_TrsfSseInfo_cos_5ftrsf_2eproto.base,}};

static void InitDefaultsscc_info_PartCopyRsp_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_PartCopyRsp_default_instance_;
    new (ptr) ::FTN::PartCopyRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartCopyRsp_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartCopyRsp_cos_5ftrsf_2eproto}, {
      &scc_info_SseInfo_cosv4_5fclient_2eproto.base,}};

static void InitDefaultsscc_info_PutObjCopyReq_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_PutObjCopyReq_default_instance_;
    new (ptr) ::FTN::PutObjCopyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutObjCopyReq_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PutObjCopyReq_cos_5ftrsf_2eproto}, {
      &scc_info_TrsfSseInfo_cos_5ftrsf_2eproto.base,
      &scc_info_UploadAttr_cosv4_5fclient_2eproto.base,}};

static void InitDefaultsscc_info_PutObjCopyRsp_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_PutObjCopyRsp_default_instance_;
    new (ptr) ::FTN::PutObjCopyRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutObjCopyRsp_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutObjCopyRsp_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_SseCInfo_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_SseCInfo_default_instance_;
    new (ptr) ::FTN::SseCInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SseCInfo_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SseCInfo_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_TaskProgressReq_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_TaskProgressReq_default_instance_;
    new (ptr) ::FTN::TaskProgressReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskProgressReq_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskProgressReq_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_TaskProgressRsp_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_TaskProgressRsp_default_instance_;
    new (ptr) ::FTN::TaskProgressRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskProgressRsp_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskProgressRsp_cos_5ftrsf_2eproto}, {
      &scc_info_TrsfSseInfo_cos_5ftrsf_2eproto.base,}};

static void InitDefaultsscc_info_TransferNotify_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_TransferNotify_default_instance_;
    new (ptr) ::FTN::TransferNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferNotify_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferNotify_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_TransferNotifyRsp_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_TransferNotifyRsp_default_instance_;
    new (ptr) ::FTN::TransferNotifyRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferNotifyRsp_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferNotifyRsp_cos_5ftrsf_2eproto}, {}};

static void InitDefaultsscc_info_TrsfSseInfo_cos_5ftrsf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_TrsfSseInfo_default_instance_;
    new (ptr) ::FTN::TrsfSseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrsfSseInfo_cos_5ftrsf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrsfSseInfo_cos_5ftrsf_2eproto}, {
      &scc_info_SseCInfo_cos_5ftrsf_2eproto.base,
      &scc_info_KmsInfo_cos_5ftrsf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cos_5ftrsf_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cos_5ftrsf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cos_5ftrsf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cos_5ftrsf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, clientip_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, request_id_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, sub_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, filetrsfreq_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, taskprogressreq_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, putobjcopyreq_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, partcopyreq_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferReqMsg, partcopyfinishreq_body_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, retcode_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, retmsg_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, sub_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, filetrsfrsp_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, taskprogressrsp_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, transfernotify_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, transfernotifyrsp_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, putobjcopyrsp_body_),
  PROTOBUF_FIELD_OFFSET(::FTN::CosTransferRspMsg, partcopyrsp_body_),
  7,
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, srcpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, srcidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, storagetype_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, dstpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, dstidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, delsrc_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, set_replication_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, srcstart_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, srcend_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, dststart_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, notifyflag_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, notifyip_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, notifyport_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, notifysmcd_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, version_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, retry_times_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, platform_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, dst_uploadkey_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, dst_block_num_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, sseinfo_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, uploadattr_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, src_platform_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, part_verify_content_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, region_list_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, multi_region_seq_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfReq, cgi_args_),
  0,
  1,
  2,
  3,
  4,
  15,
  16,
  13,
  14,
  19,
  17,
  5,
  18,
  21,
  6,
  24,
  25,
  7,
  20,
  10,
  11,
  23,
  8,
  12,
  22,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FTN::MultiRegionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::MultiRegionList, regions_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, srcpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, srcidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, storagetype_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, dstpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, dstidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, src_sha_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, file_size_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, slice_size_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, file_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, src_version_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, src_obj_attr_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, platform_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, sseinfo_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, uploadattr_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, uin_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, is_modify_cmtime_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, src_platform_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyReq, cgi_args_),
  0,
  1,
  2,
  3,
  4,
  5,
  12,
  13,
  14,
  6,
  7,
  16,
  10,
  11,
  8,
  15,
  17,
  9,
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, srcpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, srcidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, dstpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, dstidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, src_file_size_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, platform_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, src_version_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, srcstart_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, srcend_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, dst_uploadkey_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, dst_block_num_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, src_platform_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyReq, sseinfo_),
  0,
  1,
  2,
  3,
  7,
  11,
  4,
  8,
  9,
  5,
  10,
  12,
  6,
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, srcfile_attr_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, ukey_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, finish_json_message_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, srcpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, srcidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, dstpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, dstidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, storagetype_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, version_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, platform_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, retry_times_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, delay_time_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyFinishReq, region_list_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  12,
  10,
  9,
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, src_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, src_algorithm_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, dst_type_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, dst_algorithm_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, src_ssec_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, dst_ssec_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, src_kms_),
  PROTOBUF_FIELD_OFFSET(::FTN::TrsfSseInfo, dst_kms_),
  6,
  0,
  7,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::FTN::SseCInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::SseCInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::SseCInfo, ssec_key_),
  PROTOBUF_FIELD_OFFSET(::FTN::SseCInfo, ssec_key_md5_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FTN::KmsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::KmsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::KmsInfo, kms_key_id_),
  PROTOBUF_FIELD_OFFSET(::FTN::KmsInfo, kms_context_),
  PROTOBUF_FIELD_OFFSET(::FTN::KmsInfo, kms_datakey_),
  PROTOBUF_FIELD_OFFSET(::FTN::KmsInfo, kms_datakey_encryp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::FileTrsfRsp, task_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::PutObjCopyRsp, task_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyRsp, task_key_),
  PROTOBUF_FIELD_OFFSET(::FTN::PartCopyRsp, srcsseinfo_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, task_key_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, srcpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, dstpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, dstidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, task_ctime_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, task_endtime_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotify, task_progress_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotifyRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotifyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::TransferNotifyRsp, task_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressReq, task_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, task_progress_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, srcpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dstpath_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dstidc_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, storagetype_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, task_ctime_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, srcstart_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, srcend_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dststart_range_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dst_version_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dst_sk_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dst_uploadkey_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dst_ctime_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, dst_block_num_),
  PROTOBUF_FIELD_OFFSET(::FTN::TaskProgressRsp, sseinfo_),
  14,
  0,
  1,
  2,
  3,
  9,
  10,
  11,
  12,
  4,
  5,
  6,
  7,
  13,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::FTN::CosTransferReqMsg)},
  { 21, 35, sizeof(::FTN::CosTransferRspMsg)},
  { 44, 75, sizeof(::FTN::FileTrsfReq)},
  { 101, -1, sizeof(::FTN::MultiRegionList)},
  { 107, 130, sizeof(::FTN::PutObjCopyReq)},
  { 148, 166, sizeof(::FTN::PartCopyReq)},
  { 179, 197, sizeof(::FTN::PartCopyFinishReq)},
  { 210, 223, sizeof(::FTN::TrsfSseInfo)},
  { 231, 238, sizeof(::FTN::SseCInfo)},
  { 240, 249, sizeof(::FTN::KmsInfo)},
  { 253, 259, sizeof(::FTN::FileTrsfRsp)},
  { 260, 266, sizeof(::FTN::PutObjCopyRsp)},
  { 267, 274, sizeof(::FTN::PartCopyRsp)},
  { 276, 288, sizeof(::FTN::TransferNotify)},
  { 295, 301, sizeof(::FTN::TransferNotifyRsp)},
  { 302, 308, sizeof(::FTN::TaskProgressReq)},
  { 309, 329, sizeof(::FTN::TaskProgressRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_CosTransferReqMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_CosTransferRspMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_FileTrsfReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_MultiRegionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_PutObjCopyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_PartCopyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_PartCopyFinishReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_TrsfSseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_SseCInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_KmsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_FileTrsfRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_PutObjCopyRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_PartCopyRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_TransferNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_TransferNotifyRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_TaskProgressReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_TaskProgressRsp_default_instance_),
};

const char descriptor_table_protodef_cos_5ftrsf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016cos_trsf.proto\022\003FTN\032\rftncomm.proto\032\022co"
  "sv4_client.proto\"\330\003\n\021CosTransferReqMsg\022\020"
  "\n\010clientip\030\001 \002(\t\022\022\n\nrequest_id\030\002 \001(\t\0220\n\010"
  "sub_type\030\n \002(\0162\036.FTN.CosTransferReqMsg.S"
  "ubType\022*\n\020FileTrsfReq_body\030\013 \001(\0132\020.FTN.F"
  "ileTrsfReq\0222\n\024TaskProgressReq_body\030\014 \001(\013"
  "2\024.FTN.TaskProgressReq\022.\n\022PutObjCopyReq_"
  "body\030\r \001(\0132\022.FTN.PutObjCopyReq\022*\n\020PartCo"
  "pyReq_body\030\016 \001(\0132\020.FTN.PartCopyReq\0226\n\026Pa"
  "rtCopyFinishReq_body\030\017 \001(\0132\026.FTN.PartCop"
  "yFinishReq\"w\n\007SubType\022\013\n\007Invalid\020\000\022\017\n\013Fi"
  "leTrsfReq\020\001\022\023\n\017TaskProgressReq\020\002\022\021\n\rPutO"
  "bjCopyReq\020\003\022\017\n\013PartCopyReq\020\004\022\025\n\021PartCopy"
  "FinishReq\020\005\"\232\004\n\021CosTransferRspMsg\022\017\n\007ret"
  "code\030\001 \002(\005\022\016\n\006retmsg\030\002 \002(\t\0220\n\010sub_type\030\n"
  " \001(\0162\036.FTN.CosTransferRspMsg.SubType\022*\n\020"
  "FileTrsfRsp_body\030\013 \001(\0132\020.FTN.FileTrsfRsp"
  "\0222\n\024TaskProgressRsp_body\030\014 \001(\0132\024.FTN.Tas"
  "kProgressRsp\0220\n\023TransferNotify_body\030\r \001("
  "\0132\023.FTN.TransferNotify\0226\n\026TransferNotify"
  "Rsp_body\030\016 \001(\0132\026.FTN.TransferNotifyRsp\022."
  "\n\022PutObjCopyRsp_body\030\017 \001(\0132\022.FTN.PutObjC"
  "opyRsp\022*\n\020PartCopyRsp_body\030\020 \001(\0132\020.FTN.P"
  "artCopyRsp\"\213\001\n\007SubType\022\013\n\007Invalid\020\000\022\017\n\013F"
  "ileTrsfRsp\020\001\022\023\n\017TaskProgressRsp\020\002\022\022\n\016Tra"
  "nsferNotify\020\003\022\025\n\021TransferNotifyRsp\020\004\022\021\n\r"
  "PutObjCopyRsp\020\005\022\017\n\013PartCopyRsp\020\006\"\371\004\n\013Fil"
  "eTrsfReq\022\017\n\007srcpath\030\001 \002(\t\022\016\n\006srcidc\030\002 \002("
  "\t\022\023\n\013storagetype\030\003 \002(\t\022\017\n\007dstpath\030\004 \002(\t\022"
  "\016\n\006dstidc\030\005 \002(\t\022\016\n\006delsrc\030\006 \002(\010\022\027\n\017set_r"
  "eplication\030\007 \002(\010\022\026\n\016srcstart_range\030\010 \001(\004"
  "\022\024\n\014srcend_range\030\t \001(\004\022\026\n\016dststart_range"
  "\030\n \001(\004\022\031\n\nnotifyflag\030\013 \002(\010:\005false\022\020\n\010not"
  "ifyip\030\014 \001(\t\022\022\n\nnotifyport\030\r \001(\r\022\022\n\nnotif"
  "ysmcd\030\016 \001(\r\022\017\n\007version\030\017 \001(\t\022\026\n\013retry_ti"
  "mes\030\020 \001(\r:\0011\022\030\n\rplatform_type\030\021 \001(\r:\0011\022\025"
  "\n\rdst_uploadkey\030\022 \001(\t\022\025\n\rdst_block_num\030\023"
  " \001(\004\022!\n\007sseinfo\030\024 \001(\0132\020.FTN.TrsfSseInfo\022"
  ")\n\nuploadattr\030\025 \001(\0132\025.ClientCos.UploadAt"
  "tr\022\034\n\021src_platform_type\030\026 \001(\r:\0011\022\033\n\023part"
  "_verify_content\030\027 \001(\t\022)\n\013region_list\030\030 \001"
  "(\0132\024.FTN.MultiRegionList\022\030\n\020multi_region"
  "_seq\030\031 \001(\r\022\020\n\010cgi_args\030\032 \001(\014\"\"\n\017MultiReg"
  "ionList\022\017\n\007regions\030\001 \003(\t\"\242\003\n\rPutObjCopyR"
  "eq\022\017\n\007srcpath\030\001 \002(\t\022\016\n\006srcidc\030\002 \002(\t\022\023\n\013s"
  "toragetype\030\003 \002(\t\022\017\n\007dstpath\030\004 \002(\t\022\016\n\006dst"
  "idc\030\005 \002(\t\022\017\n\007src_sha\030\006 \002(\t\022\021\n\tfile_size\030"
  "\007 \002(\004\022\022\n\nslice_size\030\010 \002(\004\022\021\n\tfile_type\030\t"
  " \002(\r\022\023\n\013src_version\030\n \001(\t\022\024\n\014src_obj_att"
  "r\030\013 \001(\014\022\030\n\rplatform_type\030\014 \001(\r:\0011\022!\n\007sse"
  "info\030\r \001(\0132\020.FTN.TrsfSseInfo\022)\n\nuploadat"
  "tr\030\016 \001(\0132\025.ClientCos.UploadAttr\022\013\n\003uin\030\017"
  " \001(\t\022\037\n\020is_modify_cmtime\030\020 \001(\010:\005false\022\034\n"
  "\021src_platform_type\030\021 \001(\r:\0011\022\020\n\010cgi_args\030"
  "\022 \001(\014\"\262\002\n\013PartCopyReq\022\017\n\007srcpath\030\001 \002(\t\022\016"
  "\n\006srcidc\030\002 \002(\t\022\017\n\007dstpath\030\003 \002(\t\022\016\n\006dstid"
  "c\030\004 \002(\t\022\025\n\rsrc_file_size\030\005 \002(\004\022\030\n\rplatfo"
  "rm_type\030\006 \001(\r:\0011\022\023\n\013src_version\030\007 \001(\t\022\026\n"
  "\016srcstart_range\030\010 \002(\004\022\024\n\014srcend_range\030\t "
  "\002(\004\022\025\n\rdst_uploadkey\030\n \002(\t\022\025\n\rdst_block_"
  "num\030\013 \002(\004\022\034\n\021src_platform_type\030\014 \001(\r:\0011\022"
  "!\n\007sseinfo\030\r \001(\0132\020.FTN.TrsfSseInfo\"\255\002\n\021P"
  "artCopyFinishReq\022\024\n\014srcfile_attr\030\001 \002(\014\022\014"
  "\n\004ukey\030\002 \002(\t\022\033\n\023finish_json_message\030\003 \002("
  "\t\022\017\n\007srcpath\030\004 \002(\t\022\016\n\006srcidc\030\005 \002(\t\022\017\n\007ds"
  "tpath\030\006 \002(\t\022\016\n\006dstidc\030\007 \002(\t\022\023\n\013storagety"
  "pe\030\010 \002(\t\022\017\n\007version\030\t \001(\t\022\030\n\rplatform_ty"
  "pe\030\n \001(\r:\0011\022\026\n\013retry_times\030\013 \001(\r:\0013\022\022\n\nd"
  "elay_time\030\014 \001(\r\022)\n\013region_list\030\r \001(\0132\024.F"
  "TN.MultiRegionList\"\337\001\n\013TrsfSseInfo\022\020\n\010sr"
  "c_type\030\001 \001(\r\022\025\n\rsrc_algorithm\030\002 \001(\t\022\020\n\010d"
  "st_type\030\003 \001(\r\022\025\n\rdst_algorithm\030\004 \001(\t\022\037\n\010"
  "src_ssec\030\005 \001(\0132\r.FTN.SseCInfo\022\037\n\010dst_sse"
  "c\030\006 \001(\0132\r.FTN.SseCInfo\022\035\n\007src_kms\030\007 \001(\0132"
  "\014.FTN.KmsInfo\022\035\n\007dst_kms\030\010 \001(\0132\014.FTN.Kms"
  "Info\"2\n\010SseCInfo\022\020\n\010ssec_key\030\007 \001(\t\022\024\n\014ss"
  "ec_key_md5\030\010 \001(\t\"c\n\007KmsInfo\022\022\n\nkms_key_i"
  "d\030\t \001(\t\022\023\n\013kms_context\030\n \001(\014\022\023\n\013kms_data"
  "key\030\013 \001(\t\022\032\n\022kms_datakey_encryp\030\014 \001(\014\"\037\n"
  "\013FileTrsfRsp\022\020\n\010task_key\030\001 \002(\t\"!\n\rPutObj"
  "CopyRsp\022\020\n\010task_key\030\001 \002(\t\"G\n\013PartCopyRsp"
  "\022\020\n\010task_key\030\001 \002(\t\022&\n\nsrcsseinfo\030\002 \001(\0132\022"
  ".ClientCos.SseInfo\"\225\001\n\016TransferNotify\022\020\n"
  "\010task_key\030\001 \002(\t\022\017\n\007srcpath\030\002 \002(\t\022\017\n\007dstp"
  "ath\030\003 \002(\t\022\016\n\006dstidc\030\004 \002(\t\022\022\n\ntask_ctime\030"
  "\005 \002(\004\022\024\n\014task_endtime\030\006 \002(\004\022\025\n\rtask_prog"
  "ress\030\007 \002(\r\"%\n\021TransferNotifyRsp\022\020\n\010task_"
  "key\030\001 \002(\t\"#\n\017TaskProgressReq\022\020\n\010task_key"
  "\030\001 \002(\t\"\322\002\n\017TaskProgressRsp\022\025\n\rtask_progr"
  "ess\030\001 \002(\r\022\017\n\007srcpath\030\002 \002(\t\022\017\n\007dstpath\030\003 "
  "\002(\t\022\016\n\006dstidc\030\004 \002(\t\022\023\n\013storagetype\030\005 \002(\t"
  "\022\022\n\ntask_ctime\030\006 \002(\004\022\026\n\016srcstart_range\030\007"
  " \001(\004\022\024\n\014srcend_range\030\010 \001(\004\022\026\n\016dststart_r"
  "ange\030\t \001(\004\022\023\n\013dst_version\030\n \001(\t\022\016\n\006dst_s"
  "k\030\013 \001(\t\022\025\n\rdst_uploadkey\030\014 \001(\t\022\021\n\tdst_ct"
  "ime\030\r \001(\t\022\025\n\rdst_block_num\030\016 \001(\004\022!\n\007ssei"
  "nfo\030\017 \001(\0132\020.FTN.TrsfSseInfo:C\n\026CosTransf"
  "erReqMsg_body\022\013.FTN.AppMsg\030v \001(\0132\026.FTN.C"
  "osTransferReqMsg:C\n\026CosTransferRspMsg_bo"
  "dy\022\013.FTN.AppMsg\030w \001(\0132\026.FTN.CosTransferR"
  "spMsg"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cos_5ftrsf_2eproto_deps[2] = {
  &::descriptor_table_cosv4_5fclient_2eproto,
  &::descriptor_table_ftncomm_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cos_5ftrsf_2eproto_sccs[17] = {
  &scc_info_CosTransferReqMsg_cos_5ftrsf_2eproto.base,
  &scc_info_CosTransferRspMsg_cos_5ftrsf_2eproto.base,
  &scc_info_FileTrsfReq_cos_5ftrsf_2eproto.base,
  &scc_info_FileTrsfRsp_cos_5ftrsf_2eproto.base,
  &scc_info_KmsInfo_cos_5ftrsf_2eproto.base,
  &scc_info_MultiRegionList_cos_5ftrsf_2eproto.base,
  &scc_info_PartCopyFinishReq_cos_5ftrsf_2eproto.base,
  &scc_info_PartCopyReq_cos_5ftrsf_2eproto.base,
  &scc_info_PartCopyRsp_cos_5ftrsf_2eproto.base,
  &scc_info_PutObjCopyReq_cos_5ftrsf_2eproto.base,
  &scc_info_PutObjCopyRsp_cos_5ftrsf_2eproto.base,
  &scc_info_SseCInfo_cos_5ftrsf_2eproto.base,
  &scc_info_TaskProgressReq_cos_5ftrsf_2eproto.base,
  &scc_info_TaskProgressRsp_cos_5ftrsf_2eproto.base,
  &scc_info_TransferNotify_cos_5ftrsf_2eproto.base,
  &scc_info_TransferNotifyRsp_cos_5ftrsf_2eproto.base,
  &scc_info_TrsfSseInfo_cos_5ftrsf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cos_5ftrsf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cos_5ftrsf_2eproto = {
  false, false, descriptor_table_protodef_cos_5ftrsf_2eproto, "cos_trsf.proto", 4005,
  &descriptor_table_cos_5ftrsf_2eproto_once, descriptor_table_cos_5ftrsf_2eproto_sccs, descriptor_table_cos_5ftrsf_2eproto_deps, 17, 2,
  schemas, file_default_instances, TableStruct_cos_5ftrsf_2eproto::offsets,
  file_level_metadata_cos_5ftrsf_2eproto, 17, file_level_enum_descriptors_cos_5ftrsf_2eproto, file_level_service_descriptors_cos_5ftrsf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cos_5ftrsf_2eproto(&descriptor_table_cos_5ftrsf_2eproto);
namespace FTN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CosTransferReqMsg_SubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cos_5ftrsf_2eproto);
  return file_level_enum_descriptors_cos_5ftrsf_2eproto[0];
}
bool CosTransferReqMsg_SubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::Invalid;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::FileTrsfReq;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::TaskProgressReq;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::PutObjCopyReq;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::PartCopyReq;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::PartCopyFinishReq;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::SubType_MIN;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg::SubType_MAX;
constexpr int CosTransferReqMsg::SubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CosTransferRspMsg_SubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cos_5ftrsf_2eproto);
  return file_level_enum_descriptors_cos_5ftrsf_2eproto[1];
}
bool CosTransferRspMsg_SubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::Invalid;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::FileTrsfRsp;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::TaskProgressRsp;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::TransferNotify;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::TransferNotifyRsp;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::PutObjCopyRsp;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::PartCopyRsp;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::SubType_MIN;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg::SubType_MAX;
constexpr int CosTransferRspMsg::SubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CosTransferReqMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CosTransferReqMsg>()._has_bits_);
  static void set_has_clientip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::FTN::FileTrsfReq& filetrsfreq_body(const CosTransferReqMsg* msg);
  static void set_has_filetrsfreq_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::FTN::TaskProgressReq& taskprogressreq_body(const CosTransferReqMsg* msg);
  static void set_has_taskprogressreq_body(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::FTN::PutObjCopyReq& putobjcopyreq_body(const CosTransferReqMsg* msg);
  static void set_has_putobjcopyreq_body(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::FTN::PartCopyReq& partcopyreq_body(const CosTransferReqMsg* msg);
  static void set_has_partcopyreq_body(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::FTN::PartCopyFinishReq& partcopyfinishreq_body(const CosTransferReqMsg* msg);
  static void set_has_partcopyfinishreq_body(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000081) ^ 0x00000081) != 0;
  }
};

const ::FTN::FileTrsfReq&
CosTransferReqMsg::_Internal::filetrsfreq_body(const CosTransferReqMsg* msg) {
  return *msg->filetrsfreq_body_;
}
const ::FTN::TaskProgressReq&
CosTransferReqMsg::_Internal::taskprogressreq_body(const CosTransferReqMsg* msg) {
  return *msg->taskprogressreq_body_;
}
const ::FTN::PutObjCopyReq&
CosTransferReqMsg::_Internal::putobjcopyreq_body(const CosTransferReqMsg* msg) {
  return *msg->putobjcopyreq_body_;
}
const ::FTN::PartCopyReq&
CosTransferReqMsg::_Internal::partcopyreq_body(const CosTransferReqMsg* msg) {
  return *msg->partcopyreq_body_;
}
const ::FTN::PartCopyFinishReq&
CosTransferReqMsg::_Internal::partcopyfinishreq_body(const CosTransferReqMsg* msg) {
  return *msg->partcopyfinishreq_body_;
}
CosTransferReqMsg::CosTransferReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.CosTransferReqMsg)
}
CosTransferReqMsg::CosTransferReqMsg(const CosTransferReqMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientip()) {
    clientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientip(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_request_id()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  if (from._internal_has_filetrsfreq_body()) {
    filetrsfreq_body_ = new ::FTN::FileTrsfReq(*from.filetrsfreq_body_);
  } else {
    filetrsfreq_body_ = nullptr;
  }
  if (from._internal_has_taskprogressreq_body()) {
    taskprogressreq_body_ = new ::FTN::TaskProgressReq(*from.taskprogressreq_body_);
  } else {
    taskprogressreq_body_ = nullptr;
  }
  if (from._internal_has_putobjcopyreq_body()) {
    putobjcopyreq_body_ = new ::FTN::PutObjCopyReq(*from.putobjcopyreq_body_);
  } else {
    putobjcopyreq_body_ = nullptr;
  }
  if (from._internal_has_partcopyreq_body()) {
    partcopyreq_body_ = new ::FTN::PartCopyReq(*from.partcopyreq_body_);
  } else {
    partcopyreq_body_ = nullptr;
  }
  if (from._internal_has_partcopyfinishreq_body()) {
    partcopyfinishreq_body_ = new ::FTN::PartCopyFinishReq(*from.partcopyfinishreq_body_);
  } else {
    partcopyfinishreq_body_ = nullptr;
  }
  sub_type_ = from.sub_type_;
  // @@protoc_insertion_point(copy_constructor:FTN.CosTransferReqMsg)
}

void CosTransferReqMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CosTransferReqMsg_cos_5ftrsf_2eproto.base);
  clientip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&filetrsfreq_body_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&filetrsfreq_body_)) + sizeof(sub_type_));
}

CosTransferReqMsg::~CosTransferReqMsg() {
  // @@protoc_insertion_point(destructor:FTN.CosTransferReqMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CosTransferReqMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filetrsfreq_body_;
  if (this != internal_default_instance()) delete taskprogressreq_body_;
  if (this != internal_default_instance()) delete putobjcopyreq_body_;
  if (this != internal_default_instance()) delete partcopyreq_body_;
  if (this != internal_default_instance()) delete partcopyfinishreq_body_;
}

void CosTransferReqMsg::ArenaDtor(void* object) {
  CosTransferReqMsg* _this = reinterpret_cast< CosTransferReqMsg* >(object);
  (void)_this;
}
void CosTransferReqMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CosTransferReqMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CosTransferReqMsg& CosTransferReqMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CosTransferReqMsg_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void CosTransferReqMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.CosTransferReqMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      clientip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(filetrsfreq_body_ != nullptr);
      filetrsfreq_body_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(taskprogressreq_body_ != nullptr);
      taskprogressreq_body_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(putobjcopyreq_body_ != nullptr);
      putobjcopyreq_body_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(partcopyreq_body_ != nullptr);
      partcopyreq_body_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(partcopyfinishreq_body_ != nullptr);
      partcopyfinishreq_body_->Clear();
    }
  }
  sub_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosTransferReqMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string clientip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.CosTransferReqMsg.clientip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.CosTransferReqMsg.request_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .FTN.CosTransferReqMsg.SubType sub_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FTN::CosTransferReqMsg_SubType_IsValid(val))) {
            _internal_set_sub_type(static_cast<::FTN::CosTransferReqMsg_SubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .FTN.FileTrsfReq FileTrsfReq_body = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_filetrsfreq_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TaskProgressReq TaskProgressReq_body = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskprogressreq_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.PutObjCopyReq PutObjCopyReq_body = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_putobjcopyreq_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.PartCopyReq PartCopyReq_body = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_partcopyreq_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.PartCopyFinishReq PartCopyFinishReq_body = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_partcopyfinishreq_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CosTransferReqMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.CosTransferReqMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.CosTransferReqMsg.clientip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientip(), target);
  }

  // optional string request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.CosTransferReqMsg.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // required .FTN.CosTransferReqMsg.SubType sub_type = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_sub_type(), target);
  }

  // optional .FTN.FileTrsfReq FileTrsfReq_body = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::filetrsfreq_body(this), target, stream);
  }

  // optional .FTN.TaskProgressReq TaskProgressReq_body = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::taskprogressreq_body(this), target, stream);
  }

  // optional .FTN.PutObjCopyReq PutObjCopyReq_body = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::putobjcopyreq_body(this), target, stream);
  }

  // optional .FTN.PartCopyReq PartCopyReq_body = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::partcopyreq_body(this), target, stream);
  }

  // optional .FTN.PartCopyFinishReq PartCopyFinishReq_body = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::partcopyfinishreq_body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.CosTransferReqMsg)
  return target;
}

size_t CosTransferReqMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.CosTransferReqMsg)
  size_t total_size = 0;

  if (_internal_has_clientip()) {
    // required string clientip = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  if (_internal_has_sub_type()) {
    // required .FTN.CosTransferReqMsg.SubType sub_type = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  return total_size;
}
size_t CosTransferReqMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.CosTransferReqMsg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required string clientip = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());

    // required .FTN.CosTransferReqMsg.SubType sub_type = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional string request_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_id());
    }

    // optional .FTN.FileTrsfReq FileTrsfReq_body = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filetrsfreq_body_);
    }

    // optional .FTN.TaskProgressReq TaskProgressReq_body = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *taskprogressreq_body_);
    }

    // optional .FTN.PutObjCopyReq PutObjCopyReq_body = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *putobjcopyreq_body_);
    }

    // optional .FTN.PartCopyReq PartCopyReq_body = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partcopyreq_body_);
    }

    // optional .FTN.PartCopyFinishReq PartCopyFinishReq_body = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partcopyfinishreq_body_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosTransferReqMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.CosTransferReqMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CosTransferReqMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CosTransferReqMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.CosTransferReqMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.CosTransferReqMsg)
    MergeFrom(*source);
  }
}

void CosTransferReqMsg::MergeFrom(const CosTransferReqMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.CosTransferReqMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clientip(from._internal_clientip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_request_id(from._internal_request_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_filetrsfreq_body()->::FTN::FileTrsfReq::MergeFrom(from._internal_filetrsfreq_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_taskprogressreq_body()->::FTN::TaskProgressReq::MergeFrom(from._internal_taskprogressreq_body());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_putobjcopyreq_body()->::FTN::PutObjCopyReq::MergeFrom(from._internal_putobjcopyreq_body());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_partcopyreq_body()->::FTN::PartCopyReq::MergeFrom(from._internal_partcopyreq_body());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_partcopyfinishreq_body()->::FTN::PartCopyFinishReq::MergeFrom(from._internal_partcopyfinishreq_body());
    }
    if (cached_has_bits & 0x00000080u) {
      sub_type_ = from.sub_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CosTransferReqMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.CosTransferReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosTransferReqMsg::CopyFrom(const CosTransferReqMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.CosTransferReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosTransferReqMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_filetrsfreq_body()) {
    if (!filetrsfreq_body_->IsInitialized()) return false;
  }
  if (_internal_has_taskprogressreq_body()) {
    if (!taskprogressreq_body_->IsInitialized()) return false;
  }
  if (_internal_has_putobjcopyreq_body()) {
    if (!putobjcopyreq_body_->IsInitialized()) return false;
  }
  if (_internal_has_partcopyreq_body()) {
    if (!partcopyreq_body_->IsInitialized()) return false;
  }
  if (_internal_has_partcopyfinishreq_body()) {
    if (!partcopyfinishreq_body_->IsInitialized()) return false;
  }
  return true;
}

void CosTransferReqMsg::InternalSwap(CosTransferReqMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientip_.Swap(&other->clientip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CosTransferReqMsg, sub_type_)
      + sizeof(CosTransferReqMsg::sub_type_)
      - PROTOBUF_FIELD_OFFSET(CosTransferReqMsg, filetrsfreq_body_)>(
          reinterpret_cast<char*>(&filetrsfreq_body_),
          reinterpret_cast<char*>(&other->filetrsfreq_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CosTransferReqMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CosTransferRspMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CosTransferRspMsg>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_retmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::FTN::FileTrsfRsp& filetrsfrsp_body(const CosTransferRspMsg* msg);
  static void set_has_filetrsfrsp_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::FTN::TaskProgressRsp& taskprogressrsp_body(const CosTransferRspMsg* msg);
  static void set_has_taskprogressrsp_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::FTN::TransferNotify& transfernotify_body(const CosTransferRspMsg* msg);
  static void set_has_transfernotify_body(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::FTN::TransferNotifyRsp& transfernotifyrsp_body(const CosTransferRspMsg* msg);
  static void set_has_transfernotifyrsp_body(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::FTN::PutObjCopyRsp& putobjcopyrsp_body(const CosTransferRspMsg* msg);
  static void set_has_putobjcopyrsp_body(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::FTN::PartCopyRsp& partcopyrsp_body(const CosTransferRspMsg* msg);
  static void set_has_partcopyrsp_body(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000081) ^ 0x00000081) != 0;
  }
};

const ::FTN::FileTrsfRsp&
CosTransferRspMsg::_Internal::filetrsfrsp_body(const CosTransferRspMsg* msg) {
  return *msg->filetrsfrsp_body_;
}
const ::FTN::TaskProgressRsp&
CosTransferRspMsg::_Internal::taskprogressrsp_body(const CosTransferRspMsg* msg) {
  return *msg->taskprogressrsp_body_;
}
const ::FTN::TransferNotify&
CosTransferRspMsg::_Internal::transfernotify_body(const CosTransferRspMsg* msg) {
  return *msg->transfernotify_body_;
}
const ::FTN::TransferNotifyRsp&
CosTransferRspMsg::_Internal::transfernotifyrsp_body(const CosTransferRspMsg* msg) {
  return *msg->transfernotifyrsp_body_;
}
const ::FTN::PutObjCopyRsp&
CosTransferRspMsg::_Internal::putobjcopyrsp_body(const CosTransferRspMsg* msg) {
  return *msg->putobjcopyrsp_body_;
}
const ::FTN::PartCopyRsp&
CosTransferRspMsg::_Internal::partcopyrsp_body(const CosTransferRspMsg* msg) {
  return *msg->partcopyrsp_body_;
}
CosTransferRspMsg::CosTransferRspMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.CosTransferRspMsg)
}
CosTransferRspMsg::CosTransferRspMsg(const CosTransferRspMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_retmsg()) {
    retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_retmsg(), 
      GetArena());
  }
  if (from._internal_has_filetrsfrsp_body()) {
    filetrsfrsp_body_ = new ::FTN::FileTrsfRsp(*from.filetrsfrsp_body_);
  } else {
    filetrsfrsp_body_ = nullptr;
  }
  if (from._internal_has_taskprogressrsp_body()) {
    taskprogressrsp_body_ = new ::FTN::TaskProgressRsp(*from.taskprogressrsp_body_);
  } else {
    taskprogressrsp_body_ = nullptr;
  }
  if (from._internal_has_transfernotify_body()) {
    transfernotify_body_ = new ::FTN::TransferNotify(*from.transfernotify_body_);
  } else {
    transfernotify_body_ = nullptr;
  }
  if (from._internal_has_transfernotifyrsp_body()) {
    transfernotifyrsp_body_ = new ::FTN::TransferNotifyRsp(*from.transfernotifyrsp_body_);
  } else {
    transfernotifyrsp_body_ = nullptr;
  }
  if (from._internal_has_putobjcopyrsp_body()) {
    putobjcopyrsp_body_ = new ::FTN::PutObjCopyRsp(*from.putobjcopyrsp_body_);
  } else {
    putobjcopyrsp_body_ = nullptr;
  }
  if (from._internal_has_partcopyrsp_body()) {
    partcopyrsp_body_ = new ::FTN::PartCopyRsp(*from.partcopyrsp_body_);
  } else {
    partcopyrsp_body_ = nullptr;
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(sub_type_));
  // @@protoc_insertion_point(copy_constructor:FTN.CosTransferRspMsg)
}

void CosTransferRspMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CosTransferRspMsg_cos_5ftrsf_2eproto.base);
  retmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&filetrsfrsp_body_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&filetrsfrsp_body_)) + sizeof(sub_type_));
}

CosTransferRspMsg::~CosTransferRspMsg() {
  // @@protoc_insertion_point(destructor:FTN.CosTransferRspMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CosTransferRspMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  retmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filetrsfrsp_body_;
  if (this != internal_default_instance()) delete taskprogressrsp_body_;
  if (this != internal_default_instance()) delete transfernotify_body_;
  if (this != internal_default_instance()) delete transfernotifyrsp_body_;
  if (this != internal_default_instance()) delete putobjcopyrsp_body_;
  if (this != internal_default_instance()) delete partcopyrsp_body_;
}

void CosTransferRspMsg::ArenaDtor(void* object) {
  CosTransferRspMsg* _this = reinterpret_cast< CosTransferRspMsg* >(object);
  (void)_this;
}
void CosTransferRspMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CosTransferRspMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CosTransferRspMsg& CosTransferRspMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CosTransferRspMsg_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void CosTransferRspMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.CosTransferRspMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      retmsg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(filetrsfrsp_body_ != nullptr);
      filetrsfrsp_body_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(taskprogressrsp_body_ != nullptr);
      taskprogressrsp_body_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(transfernotify_body_ != nullptr);
      transfernotify_body_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(transfernotifyrsp_body_ != nullptr);
      transfernotifyrsp_body_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(putobjcopyrsp_body_ != nullptr);
      putobjcopyrsp_body_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(partcopyrsp_body_ != nullptr);
      partcopyrsp_body_->Clear();
    }
  }
  retcode_ = 0;
  sub_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosTransferRspMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string retmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_retmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.CosTransferRspMsg.retmsg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.CosTransferRspMsg.SubType sub_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FTN::CosTransferRspMsg_SubType_IsValid(val))) {
            _internal_set_sub_type(static_cast<::FTN::CosTransferRspMsg_SubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .FTN.FileTrsfRsp FileTrsfRsp_body = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_filetrsfrsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TaskProgressRsp TaskProgressRsp_body = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskprogressrsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TransferNotify TransferNotify_body = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfernotify_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TransferNotifyRsp TransferNotifyRsp_body = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfernotifyrsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.PutObjCopyRsp PutObjCopyRsp_body = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_putobjcopyrsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.PartCopyRsp PartCopyRsp_body = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_partcopyrsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CosTransferRspMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.CosTransferRspMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 retcode = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_retcode(), target);
  }

  // required string retmsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_retmsg().data(), static_cast<int>(this->_internal_retmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.CosTransferRspMsg.retmsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_retmsg(), target);
  }

  // optional .FTN.CosTransferRspMsg.SubType sub_type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_sub_type(), target);
  }

  // optional .FTN.FileTrsfRsp FileTrsfRsp_body = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::filetrsfrsp_body(this), target, stream);
  }

  // optional .FTN.TaskProgressRsp TaskProgressRsp_body = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::taskprogressrsp_body(this), target, stream);
  }

  // optional .FTN.TransferNotify TransferNotify_body = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::transfernotify_body(this), target, stream);
  }

  // optional .FTN.TransferNotifyRsp TransferNotifyRsp_body = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::transfernotifyrsp_body(this), target, stream);
  }

  // optional .FTN.PutObjCopyRsp PutObjCopyRsp_body = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::putobjcopyrsp_body(this), target, stream);
  }

  // optional .FTN.PartCopyRsp PartCopyRsp_body = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::partcopyrsp_body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.CosTransferRspMsg)
  return target;
}

size_t CosTransferRspMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.CosTransferRspMsg)
  size_t total_size = 0;

  if (_internal_has_retmsg()) {
    // required string retmsg = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_retmsg());
  }

  if (_internal_has_retcode()) {
    // required int32 retcode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retcode());
  }

  return total_size;
}
size_t CosTransferRspMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.CosTransferRspMsg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required string retmsg = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_retmsg());

    // required int32 retcode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .FTN.FileTrsfRsp FileTrsfRsp_body = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filetrsfrsp_body_);
    }

    // optional .FTN.TaskProgressRsp TaskProgressRsp_body = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *taskprogressrsp_body_);
    }

    // optional .FTN.TransferNotify TransferNotify_body = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transfernotify_body_);
    }

    // optional .FTN.TransferNotifyRsp TransferNotifyRsp_body = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transfernotifyrsp_body_);
    }

    // optional .FTN.PutObjCopyRsp PutObjCopyRsp_body = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *putobjcopyrsp_body_);
    }

    // optional .FTN.PartCopyRsp PartCopyRsp_body = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partcopyrsp_body_);
    }

  }
  // optional .FTN.CosTransferRspMsg.SubType sub_type = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosTransferRspMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.CosTransferRspMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CosTransferRspMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CosTransferRspMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.CosTransferRspMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.CosTransferRspMsg)
    MergeFrom(*source);
  }
}

void CosTransferRspMsg::MergeFrom(const CosTransferRspMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.CosTransferRspMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_retmsg(from._internal_retmsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_filetrsfrsp_body()->::FTN::FileTrsfRsp::MergeFrom(from._internal_filetrsfrsp_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_taskprogressrsp_body()->::FTN::TaskProgressRsp::MergeFrom(from._internal_taskprogressrsp_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_transfernotify_body()->::FTN::TransferNotify::MergeFrom(from._internal_transfernotify_body());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_transfernotifyrsp_body()->::FTN::TransferNotifyRsp::MergeFrom(from._internal_transfernotifyrsp_body());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_putobjcopyrsp_body()->::FTN::PutObjCopyRsp::MergeFrom(from._internal_putobjcopyrsp_body());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_partcopyrsp_body()->::FTN::PartCopyRsp::MergeFrom(from._internal_partcopyrsp_body());
    }
    if (cached_has_bits & 0x00000080u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_sub_type(from._internal_sub_type());
  }
}

void CosTransferRspMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.CosTransferRspMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosTransferRspMsg::CopyFrom(const CosTransferRspMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.CosTransferRspMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosTransferRspMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_filetrsfrsp_body()) {
    if (!filetrsfrsp_body_->IsInitialized()) return false;
  }
  if (_internal_has_taskprogressrsp_body()) {
    if (!taskprogressrsp_body_->IsInitialized()) return false;
  }
  if (_internal_has_transfernotify_body()) {
    if (!transfernotify_body_->IsInitialized()) return false;
  }
  if (_internal_has_transfernotifyrsp_body()) {
    if (!transfernotifyrsp_body_->IsInitialized()) return false;
  }
  if (_internal_has_putobjcopyrsp_body()) {
    if (!putobjcopyrsp_body_->IsInitialized()) return false;
  }
  if (_internal_has_partcopyrsp_body()) {
    if (!partcopyrsp_body_->IsInitialized()) return false;
  }
  return true;
}

void CosTransferRspMsg::InternalSwap(CosTransferRspMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  retmsg_.Swap(&other->retmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CosTransferRspMsg, sub_type_)
      + sizeof(CosTransferRspMsg::sub_type_)
      - PROTOBUF_FIELD_OFFSET(CosTransferRspMsg, filetrsfrsp_body_)>(
          reinterpret_cast<char*>(&filetrsfrsp_body_),
          reinterpret_cast<char*>(&other->filetrsfrsp_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CosTransferRspMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileTrsfReq::_Internal {
 public:
  using HasBits = decltype(std::declval<FileTrsfReq>()._has_bits_);
  static void set_has_srcpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_srcidc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_storagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dstpath(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dstidc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delsrc(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_set_replication(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_srcstart_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_srcend_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dststart_range(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_notifyflag(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_notifyip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_notifyport(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_notifysmcd(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_retry_times(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_dst_uploadkey(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dst_block_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::FTN::TrsfSseInfo& sseinfo(const FileTrsfReq* msg);
  static void set_has_sseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ClientCos::UploadAttr& uploadattr(const FileTrsfReq* msg);
  static void set_has_uploadattr(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_src_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_part_verify_content(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::FTN::MultiRegionList& region_list(const FileTrsfReq* msg);
  static void set_has_region_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_multi_region_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_cgi_args(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0003801f) ^ 0x0003801f) != 0;
  }
};

const ::FTN::TrsfSseInfo&
FileTrsfReq::_Internal::sseinfo(const FileTrsfReq* msg) {
  return *msg->sseinfo_;
}
const ::ClientCos::UploadAttr&
FileTrsfReq::_Internal::uploadattr(const FileTrsfReq* msg) {
  return *msg->uploadattr_;
}
const ::FTN::MultiRegionList&
FileTrsfReq::_Internal::region_list(const FileTrsfReq* msg) {
  return *msg->region_list_;
}
void FileTrsfReq::clear_uploadattr() {
  if (uploadattr_ != nullptr) uploadattr_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
FileTrsfReq::FileTrsfReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.FileTrsfReq)
}
FileTrsfReq::FileTrsfReq(const FileTrsfReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcpath()) {
    srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcpath(), 
      GetArena());
  }
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcidc()) {
    srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcidc(), 
      GetArena());
  }
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_storagetype()) {
    storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_storagetype(), 
      GetArena());
  }
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstpath()) {
    dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstpath(), 
      GetArena());
  }
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstidc()) {
    dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstidc(), 
      GetArena());
  }
  notifyip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notifyip()) {
    notifyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notifyip(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  dst_uploadkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_uploadkey()) {
    dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_uploadkey(), 
      GetArena());
  }
  part_verify_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_part_verify_content()) {
    part_verify_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_part_verify_content(), 
      GetArena());
  }
  cgi_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cgi_args()) {
    cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cgi_args(), 
      GetArena());
  }
  if (from._internal_has_sseinfo()) {
    sseinfo_ = new ::FTN::TrsfSseInfo(*from.sseinfo_);
  } else {
    sseinfo_ = nullptr;
  }
  if (from._internal_has_uploadattr()) {
    uploadattr_ = new ::ClientCos::UploadAttr(*from.uploadattr_);
  } else {
    uploadattr_ = nullptr;
  }
  if (from._internal_has_region_list()) {
    region_list_ = new ::FTN::MultiRegionList(*from.region_list_);
  } else {
    region_list_ = nullptr;
  }
  ::memcpy(&srcstart_range_, &from.srcstart_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&platform_type_) -
    reinterpret_cast<char*>(&srcstart_range_)) + sizeof(platform_type_));
  // @@protoc_insertion_point(copy_constructor:FTN.FileTrsfReq)
}

void FileTrsfReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileTrsfReq_cos_5ftrsf_2eproto.base);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notifyip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_uploadkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  part_verify_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cgi_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sseinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multi_region_seq_) -
      reinterpret_cast<char*>(&sseinfo_)) + sizeof(multi_region_seq_));
  src_platform_type_ = 1u;
  retry_times_ = 1u;
  platform_type_ = 1u;
}

FileTrsfReq::~FileTrsfReq() {
  // @@protoc_insertion_point(destructor:FTN.FileTrsfReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileTrsfReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notifyip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_uploadkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  part_verify_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cgi_args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sseinfo_;
  if (this != internal_default_instance()) delete uploadattr_;
  if (this != internal_default_instance()) delete region_list_;
}

void FileTrsfReq::ArenaDtor(void* object) {
  FileTrsfReq* _this = reinterpret_cast< FileTrsfReq* >(object);
  (void)_this;
}
void FileTrsfReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileTrsfReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTrsfReq& FileTrsfReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileTrsfReq_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void FileTrsfReq::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.FileTrsfReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      srcpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      srcidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      storagetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dstpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      dstidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      notifyip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      dst_uploadkey_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      part_verify_content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      cgi_args_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(sseinfo_ != nullptr);
      sseinfo_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(uploadattr_ != nullptr);
      uploadattr_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(region_list_ != nullptr);
      region_list_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&srcstart_range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delsrc_) -
        reinterpret_cast<char*>(&srcstart_range_)) + sizeof(delsrc_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&set_replication_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multi_region_seq_) -
        reinterpret_cast<char*>(&set_replication_)) + sizeof(multi_region_seq_));
    src_platform_type_ = 1u;
  }
  if (cached_has_bits & 0x03000000u) {
    retry_times_ = 1u;
    platform_type_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTrsfReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string srcpath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_srcpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.srcpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string srcidc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_srcidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.srcidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string storagetype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_storagetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.storagetype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstpath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.dstpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstidc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dstidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.dstidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool delsrc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_delsrc(&has_bits);
          delsrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool set_replication = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_set_replication(&has_bits);
          set_replication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 srcstart_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_srcstart_range(&has_bits);
          srcstart_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 srcend_range = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_srcend_range(&has_bits);
          srcend_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dststart_range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_dststart_range(&has_bits);
          dststart_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool notifyflag = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_notifyflag(&has_bits);
          notifyflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notifyip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_notifyip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.notifyip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 notifyport = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_notifyport(&has_bits);
          notifyport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 notifysmcd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_notifysmcd(&has_bits);
          notifysmcd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retry_times = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_retry_times(&has_bits);
          retry_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform_type = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_platform_type(&has_bits);
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_uploadkey = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_dst_uploadkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.dst_uploadkey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dst_block_num = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_dst_block_num(&has_bits);
          dst_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TrsfSseInfo sseinfo = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_sseinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ClientCos.UploadAttr uploadattr = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_uploadattr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_platform_type = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_src_platform_type(&has_bits);
          src_platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string part_verify_content = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_part_verify_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfReq.part_verify_content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.MultiRegionList region_list = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multi_region_seq = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_multi_region_seq(&has_bits);
          multi_region_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes cgi_args = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_cgi_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTrsfReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.FileTrsfReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string srcpath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcpath().data(), static_cast<int>(this->_internal_srcpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.srcpath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcpath(), target);
  }

  // required string srcidc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcidc().data(), static_cast<int>(this->_internal_srcidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.srcidc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcidc(), target);
  }

  // required string storagetype = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_storagetype().data(), static_cast<int>(this->_internal_storagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.storagetype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_storagetype(), target);
  }

  // required string dstpath = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.dstpath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dstpath(), target);
  }

  // required string dstidc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstidc().data(), static_cast<int>(this->_internal_dstidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.dstidc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dstidc(), target);
  }

  // required bool delsrc = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_delsrc(), target);
  }

  // required bool set_replication = 7;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_set_replication(), target);
  }

  // optional uint64 srcstart_range = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_srcstart_range(), target);
  }

  // optional uint64 srcend_range = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_srcend_range(), target);
  }

  // optional uint64 dststart_range = 10;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_dststart_range(), target);
  }

  // required bool notifyflag = 11 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_notifyflag(), target);
  }

  // optional string notifyip = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notifyip().data(), static_cast<int>(this->_internal_notifyip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.notifyip");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_notifyip(), target);
  }

  // optional uint32 notifyport = 13;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_notifyport(), target);
  }

  // optional uint32 notifysmcd = 14;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_notifysmcd(), target);
  }

  // optional string version = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.version");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_version(), target);
  }

  // optional uint32 retry_times = 16 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_retry_times(), target);
  }

  // optional uint32 platform_type = 17 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_platform_type(), target);
  }

  // optional string dst_uploadkey = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_uploadkey().data(), static_cast<int>(this->_internal_dst_uploadkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.dst_uploadkey");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_dst_uploadkey(), target);
  }

  // optional uint64 dst_block_num = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_dst_block_num(), target);
  }

  // optional .FTN.TrsfSseInfo sseinfo = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::sseinfo(this), target, stream);
  }

  // optional .ClientCos.UploadAttr uploadattr = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::uploadattr(this), target, stream);
  }

  // optional uint32 src_platform_type = 22 [default = 1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_src_platform_type(), target);
  }

  // optional string part_verify_content = 23;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_part_verify_content().data(), static_cast<int>(this->_internal_part_verify_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfReq.part_verify_content");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_part_verify_content(), target);
  }

  // optional .FTN.MultiRegionList region_list = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::region_list(this), target, stream);
  }

  // optional uint32 multi_region_seq = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_multi_region_seq(), target);
  }

  // optional bytes cgi_args = 26;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_cgi_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.FileTrsfReq)
  return target;
}

size_t FileTrsfReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.FileTrsfReq)
  size_t total_size = 0;

  if (_internal_has_srcpath()) {
    // required string srcpath = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());
  }

  if (_internal_has_srcidc()) {
    // required string srcidc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());
  }

  if (_internal_has_storagetype()) {
    // required string storagetype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());
  }

  if (_internal_has_dstpath()) {
    // required string dstpath = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (_internal_has_dstidc()) {
    // required string dstidc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());
  }

  if (_internal_has_delsrc()) {
    // required bool delsrc = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_set_replication()) {
    // required bool set_replication = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_notifyflag()) {
    // required bool notifyflag = 11 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FileTrsfReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.FileTrsfReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0003801f) ^ 0x0003801f) == 0) {  // All required fields are present.
    // required string srcpath = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());

    // required string srcidc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());

    // required string storagetype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());

    // required string dstpath = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());

    // required string dstidc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());

    // required bool delsrc = 6;
    total_size += 1 + 1;

    // required bool set_replication = 7;
    total_size += 1 + 1;

    // required bool notifyflag = 11 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional string notifyip = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notifyip());
    }

    // optional string version = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string dst_uploadkey = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_uploadkey());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional string part_verify_content = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_part_verify_content());
    }

    // optional bytes cgi_args = 26;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cgi_args());
    }

    // optional .FTN.TrsfSseInfo sseinfo = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sseinfo_);
    }

    // optional .ClientCos.UploadAttr uploadattr = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uploadattr_);
    }

    // optional .FTN.MultiRegionList region_list = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_list_);
    }

    // optional uint64 srcstart_range = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_srcstart_range());
    }

    // optional uint64 srcend_range = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_srcend_range());
    }

  }
  if (cached_has_bits & 0x00fc0000u) {
    // optional uint32 notifyport = 13;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_notifyport());
    }

    // optional uint64 dststart_range = 10;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dststart_range());
    }

    // optional uint64 dst_block_num = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dst_block_num());
    }

    // optional uint32 notifysmcd = 14;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_notifysmcd());
    }

    // optional uint32 multi_region_seq = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multi_region_seq());
    }

    // optional uint32 src_platform_type = 22 [default = 1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_platform_type());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional uint32 retry_times = 16 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retry_times());
    }

    // optional uint32 platform_type = 17 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTrsfReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.FileTrsfReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTrsfReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTrsfReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.FileTrsfReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.FileTrsfReq)
    MergeFrom(*source);
  }
}

void FileTrsfReq::MergeFrom(const FileTrsfReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.FileTrsfReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srcpath(from._internal_srcpath());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_srcidc(from._internal_srcidc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_storagetype(from._internal_storagetype());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dstpath(from._internal_dstpath());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dstidc(from._internal_dstidc());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_notifyip(from._internal_notifyip());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_dst_uploadkey(from._internal_dst_uploadkey());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_part_verify_content(from._internal_part_verify_content());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_cgi_args(from._internal_cgi_args());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_sseinfo()->::FTN::TrsfSseInfo::MergeFrom(from._internal_sseinfo());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_uploadattr()->::ClientCos::UploadAttr::MergeFrom(from._internal_uploadattr());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_region_list()->::FTN::MultiRegionList::MergeFrom(from._internal_region_list());
    }
    if (cached_has_bits & 0x00002000u) {
      srcstart_range_ = from.srcstart_range_;
    }
    if (cached_has_bits & 0x00004000u) {
      srcend_range_ = from.srcend_range_;
    }
    if (cached_has_bits & 0x00008000u) {
      delsrc_ = from.delsrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      set_replication_ = from.set_replication_;
    }
    if (cached_has_bits & 0x00020000u) {
      notifyflag_ = from.notifyflag_;
    }
    if (cached_has_bits & 0x00040000u) {
      notifyport_ = from.notifyport_;
    }
    if (cached_has_bits & 0x00080000u) {
      dststart_range_ = from.dststart_range_;
    }
    if (cached_has_bits & 0x00100000u) {
      dst_block_num_ = from.dst_block_num_;
    }
    if (cached_has_bits & 0x00200000u) {
      notifysmcd_ = from.notifysmcd_;
    }
    if (cached_has_bits & 0x00400000u) {
      multi_region_seq_ = from.multi_region_seq_;
    }
    if (cached_has_bits & 0x00800000u) {
      src_platform_type_ = from.src_platform_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      retry_times_ = from.retry_times_;
    }
    if (cached_has_bits & 0x02000000u) {
      platform_type_ = from.platform_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileTrsfReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.FileTrsfReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTrsfReq::CopyFrom(const FileTrsfReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.FileTrsfReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTrsfReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uploadattr()) {
    if (!uploadattr_->IsInitialized()) return false;
  }
  return true;
}

void FileTrsfReq::InternalSwap(FileTrsfReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcpath_.Swap(&other->srcpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcidc_.Swap(&other->srcidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storagetype_.Swap(&other->storagetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstidc_.Swap(&other->dstidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notifyip_.Swap(&other->notifyip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_uploadkey_.Swap(&other->dst_uploadkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  part_verify_content_.Swap(&other->part_verify_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cgi_args_.Swap(&other->cgi_args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileTrsfReq, multi_region_seq_)
      + sizeof(FileTrsfReq::multi_region_seq_)
      - PROTOBUF_FIELD_OFFSET(FileTrsfReq, sseinfo_)>(
          reinterpret_cast<char*>(&sseinfo_),
          reinterpret_cast<char*>(&other->sseinfo_));
  swap(src_platform_type_, other->src_platform_type_);
  swap(retry_times_, other->retry_times_);
  swap(platform_type_, other->platform_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTrsfReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiRegionList::_Internal {
 public:
};

MultiRegionList::MultiRegionList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.MultiRegionList)
}
MultiRegionList::MultiRegionList(const MultiRegionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FTN.MultiRegionList)
}

void MultiRegionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRegionList_cos_5ftrsf_2eproto.base);
}

MultiRegionList::~MultiRegionList() {
  // @@protoc_insertion_point(destructor:FTN.MultiRegionList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiRegionList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiRegionList::ArenaDtor(void* object) {
  MultiRegionList* _this = reinterpret_cast< MultiRegionList* >(object);
  (void)_this;
}
void MultiRegionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiRegionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRegionList& MultiRegionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRegionList_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void MultiRegionList::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.MultiRegionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiRegionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_regions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.MultiRegionList.regions");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRegionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.MultiRegionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string regions = 1;
  for (int i = 0, n = this->_internal_regions_size(); i < n; i++) {
    const auto& s = this->_internal_regions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.MultiRegionList.regions");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.MultiRegionList)
  return target;
}

size_t MultiRegionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.MultiRegionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string regions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(regions_.size());
  for (int i = 0, n = regions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      regions_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRegionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.MultiRegionList)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRegionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRegionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.MultiRegionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.MultiRegionList)
    MergeFrom(*source);
  }
}

void MultiRegionList::MergeFrom(const MultiRegionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.MultiRegionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
}

void MultiRegionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.MultiRegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRegionList::CopyFrom(const MultiRegionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.MultiRegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRegionList::IsInitialized() const {
  return true;
}

void MultiRegionList::InternalSwap(MultiRegionList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  regions_.InternalSwap(&other->regions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRegionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PutObjCopyReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PutObjCopyReq>()._has_bits_);
  static void set_has_srcpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_srcidc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_storagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dstpath(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dstidc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_src_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_slice_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_src_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_src_obj_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::FTN::TrsfSseInfo& sseinfo(const PutObjCopyReq* msg);
  static void set_has_sseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ClientCos::UploadAttr& uploadattr(const PutObjCopyReq* msg);
  static void set_has_uploadattr(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_uin(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_modify_cmtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_src_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cgi_args(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000703f) ^ 0x0000703f) != 0;
  }
};

const ::FTN::TrsfSseInfo&
PutObjCopyReq::_Internal::sseinfo(const PutObjCopyReq* msg) {
  return *msg->sseinfo_;
}
const ::ClientCos::UploadAttr&
PutObjCopyReq::_Internal::uploadattr(const PutObjCopyReq* msg) {
  return *msg->uploadattr_;
}
void PutObjCopyReq::clear_uploadattr() {
  if (uploadattr_ != nullptr) uploadattr_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
PutObjCopyReq::PutObjCopyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.PutObjCopyReq)
}
PutObjCopyReq::PutObjCopyReq(const PutObjCopyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcpath()) {
    srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcpath(), 
      GetArena());
  }
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcidc()) {
    srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcidc(), 
      GetArena());
  }
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_storagetype()) {
    storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_storagetype(), 
      GetArena());
  }
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstpath()) {
    dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstpath(), 
      GetArena());
  }
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstidc()) {
    dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstidc(), 
      GetArena());
  }
  src_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_sha()) {
    src_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_sha(), 
      GetArena());
  }
  src_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_version()) {
    src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_version(), 
      GetArena());
  }
  src_obj_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_obj_attr()) {
    src_obj_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_obj_attr(), 
      GetArena());
  }
  uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uin()) {
    uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uin(), 
      GetArena());
  }
  cgi_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cgi_args()) {
    cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cgi_args(), 
      GetArena());
  }
  if (from._internal_has_sseinfo()) {
    sseinfo_ = new ::FTN::TrsfSseInfo(*from.sseinfo_);
  } else {
    sseinfo_ = nullptr;
  }
  if (from._internal_has_uploadattr()) {
    uploadattr_ = new ::ClientCos::UploadAttr(*from.uploadattr_);
  } else {
    uploadattr_ = nullptr;
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_platform_type_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(src_platform_type_));
  // @@protoc_insertion_point(copy_constructor:FTN.PutObjCopyReq)
}

void PutObjCopyReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutObjCopyReq_cos_5ftrsf_2eproto.base);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_obj_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cgi_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sseinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_modify_cmtime_) -
      reinterpret_cast<char*>(&sseinfo_)) + sizeof(is_modify_cmtime_));
  platform_type_ = 1u;
  src_platform_type_ = 1u;
}

PutObjCopyReq::~PutObjCopyReq() {
  // @@protoc_insertion_point(destructor:FTN.PutObjCopyReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PutObjCopyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_obj_attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cgi_args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sseinfo_;
  if (this != internal_default_instance()) delete uploadattr_;
}

void PutObjCopyReq::ArenaDtor(void* object) {
  PutObjCopyReq* _this = reinterpret_cast< PutObjCopyReq* >(object);
  (void)_this;
}
void PutObjCopyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutObjCopyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutObjCopyReq& PutObjCopyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutObjCopyReq_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void PutObjCopyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.PutObjCopyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      srcpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      srcidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      storagetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dstpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      dstidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      src_sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      src_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      src_obj_attr_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      uin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      cgi_args_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(sseinfo_ != nullptr);
      sseinfo_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(uploadattr_ != nullptr);
      uploadattr_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&file_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_modify_cmtime_) -
        reinterpret_cast<char*>(&file_size_)) + sizeof(is_modify_cmtime_));
  }
  if (cached_has_bits & 0x00030000u) {
    platform_type_ = 1u;
    src_platform_type_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutObjCopyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string srcpath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_srcpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.srcpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string srcidc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_srcidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.srcidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string storagetype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_storagetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.storagetype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstpath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.dstpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstidc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dstidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.dstidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string src_sha = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_src_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.src_sha");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 file_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 slice_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_slice_size(&has_bits);
          slice_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 file_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_file_type(&has_bits);
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_src_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.src_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes src_obj_attr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_src_obj_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform_type = 12 [default = 1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_platform_type(&has_bits);
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TrsfSseInfo sseinfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sseinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ClientCos.UploadAttr uploadattr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_uploadattr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uin = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_uin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyReq.uin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_modify_cmtime = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_modify_cmtime(&has_bits);
          is_modify_cmtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_platform_type = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_src_platform_type(&has_bits);
          src_platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes cgi_args = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_cgi_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutObjCopyReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.PutObjCopyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string srcpath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcpath().data(), static_cast<int>(this->_internal_srcpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.srcpath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcpath(), target);
  }

  // required string srcidc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcidc().data(), static_cast<int>(this->_internal_srcidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.srcidc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcidc(), target);
  }

  // required string storagetype = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_storagetype().data(), static_cast<int>(this->_internal_storagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.storagetype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_storagetype(), target);
  }

  // required string dstpath = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.dstpath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dstpath(), target);
  }

  // required string dstidc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstidc().data(), static_cast<int>(this->_internal_dstidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.dstidc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dstidc(), target);
  }

  // required string src_sha = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_sha().data(), static_cast<int>(this->_internal_src_sha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.src_sha");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_src_sha(), target);
  }

  // required uint64 file_size = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_file_size(), target);
  }

  // required uint64 slice_size = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_slice_size(), target);
  }

  // required uint32 file_type = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_file_type(), target);
  }

  // optional string src_version = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_version().data(), static_cast<int>(this->_internal_src_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.src_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_src_version(), target);
  }

  // optional bytes src_obj_attr = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_src_obj_attr(), target);
  }

  // optional uint32 platform_type = 12 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_platform_type(), target);
  }

  // optional .FTN.TrsfSseInfo sseinfo = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sseinfo(this), target, stream);
  }

  // optional .ClientCos.UploadAttr uploadattr = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::uploadattr(this), target, stream);
  }

  // optional string uin = 15;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uin().data(), static_cast<int>(this->_internal_uin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyReq.uin");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_uin(), target);
  }

  // optional bool is_modify_cmtime = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_modify_cmtime(), target);
  }

  // optional uint32 src_platform_type = 17 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_src_platform_type(), target);
  }

  // optional bytes cgi_args = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_cgi_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.PutObjCopyReq)
  return target;
}

size_t PutObjCopyReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.PutObjCopyReq)
  size_t total_size = 0;

  if (_internal_has_srcpath()) {
    // required string srcpath = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());
  }

  if (_internal_has_srcidc()) {
    // required string srcidc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());
  }

  if (_internal_has_storagetype()) {
    // required string storagetype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());
  }

  if (_internal_has_dstpath()) {
    // required string dstpath = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (_internal_has_dstidc()) {
    // required string dstidc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());
  }

  if (_internal_has_src_sha()) {
    // required string src_sha = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_sha());
  }

  if (_internal_has_file_size()) {
    // required uint64 file_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_size());
  }

  if (_internal_has_slice_size()) {
    // required uint64 slice_size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_slice_size());
  }

  if (_internal_has_file_type()) {
    // required uint32 file_type = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_type());
  }

  return total_size;
}
size_t PutObjCopyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.PutObjCopyReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000703f) ^ 0x0000703f) == 0) {  // All required fields are present.
    // required string srcpath = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());

    // required string srcidc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());

    // required string storagetype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());

    // required string dstpath = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());

    // required string dstidc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());

    // required string src_sha = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_sha());

    // required uint64 file_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_size());

    // required uint64 slice_size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_slice_size());

    // required uint32 file_type = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000c0u) {
    // optional string src_version = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_version());
    }

    // optional bytes src_obj_attr = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_src_obj_attr());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string uin = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uin());
    }

    // optional bytes cgi_args = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cgi_args());
    }

    // optional .FTN.TrsfSseInfo sseinfo = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sseinfo_);
    }

    // optional .ClientCos.UploadAttr uploadattr = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uploadattr_);
    }

  }
  // optional bool is_modify_cmtime = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    total_size += 2 + 1;
  }

  if (cached_has_bits & 0x00030000u) {
    // optional uint32 platform_type = 12 [default = 1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform_type());
    }

    // optional uint32 src_platform_type = 17 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_platform_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutObjCopyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.PutObjCopyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PutObjCopyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutObjCopyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.PutObjCopyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.PutObjCopyReq)
    MergeFrom(*source);
  }
}

void PutObjCopyReq::MergeFrom(const PutObjCopyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.PutObjCopyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srcpath(from._internal_srcpath());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_srcidc(from._internal_srcidc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_storagetype(from._internal_storagetype());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dstpath(from._internal_dstpath());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dstidc(from._internal_dstidc());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_src_sha(from._internal_src_sha());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_src_version(from._internal_src_version());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_src_obj_attr(from._internal_src_obj_attr());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_uin(from._internal_uin());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_cgi_args(from._internal_cgi_args());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_sseinfo()->::FTN::TrsfSseInfo::MergeFrom(from._internal_sseinfo());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_uploadattr()->::ClientCos::UploadAttr::MergeFrom(from._internal_uploadattr());
    }
    if (cached_has_bits & 0x00001000u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      slice_size_ = from.slice_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_modify_cmtime_ = from.is_modify_cmtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      platform_type_ = from.platform_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      src_platform_type_ = from.src_platform_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PutObjCopyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.PutObjCopyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjCopyReq::CopyFrom(const PutObjCopyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.PutObjCopyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjCopyReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uploadattr()) {
    if (!uploadattr_->IsInitialized()) return false;
  }
  return true;
}

void PutObjCopyReq::InternalSwap(PutObjCopyReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcpath_.Swap(&other->srcpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcidc_.Swap(&other->srcidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storagetype_.Swap(&other->storagetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstidc_.Swap(&other->dstidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_sha_.Swap(&other->src_sha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_version_.Swap(&other->src_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_obj_attr_.Swap(&other->src_obj_attr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uin_.Swap(&other->uin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cgi_args_.Swap(&other->cgi_args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutObjCopyReq, is_modify_cmtime_)
      + sizeof(PutObjCopyReq::is_modify_cmtime_)
      - PROTOBUF_FIELD_OFFSET(PutObjCopyReq, sseinfo_)>(
          reinterpret_cast<char*>(&sseinfo_),
          reinterpret_cast<char*>(&other->sseinfo_));
  swap(platform_type_, other->platform_type_);
  swap(src_platform_type_, other->src_platform_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutObjCopyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartCopyReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PartCopyReq>()._has_bits_);
  static void set_has_srcpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_srcidc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dstpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dstidc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_src_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_src_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_srcstart_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_srcend_range(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dst_uploadkey(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dst_block_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_src_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::FTN::TrsfSseInfo& sseinfo(const PartCopyReq* msg);
  static void set_has_sseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007af) ^ 0x000007af) != 0;
  }
};

const ::FTN::TrsfSseInfo&
PartCopyReq::_Internal::sseinfo(const PartCopyReq* msg) {
  return *msg->sseinfo_;
}
PartCopyReq::PartCopyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.PartCopyReq)
}
PartCopyReq::PartCopyReq(const PartCopyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcpath()) {
    srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcpath(), 
      GetArena());
  }
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcidc()) {
    srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcidc(), 
      GetArena());
  }
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstpath()) {
    dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstpath(), 
      GetArena());
  }
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstidc()) {
    dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstidc(), 
      GetArena());
  }
  src_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_version()) {
    src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_version(), 
      GetArena());
  }
  dst_uploadkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_uploadkey()) {
    dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_uploadkey(), 
      GetArena());
  }
  if (from._internal_has_sseinfo()) {
    sseinfo_ = new ::FTN::TrsfSseInfo(*from.sseinfo_);
  } else {
    sseinfo_ = nullptr;
  }
  ::memcpy(&src_file_size_, &from.src_file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_platform_type_) -
    reinterpret_cast<char*>(&src_file_size_)) + sizeof(src_platform_type_));
  // @@protoc_insertion_point(copy_constructor:FTN.PartCopyReq)
}

void PartCopyReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartCopyReq_cos_5ftrsf_2eproto.base);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_uploadkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sseinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dst_block_num_) -
      reinterpret_cast<char*>(&sseinfo_)) + sizeof(dst_block_num_));
  platform_type_ = 1u;
  src_platform_type_ = 1u;
}

PartCopyReq::~PartCopyReq() {
  // @@protoc_insertion_point(destructor:FTN.PartCopyReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartCopyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_uploadkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sseinfo_;
}

void PartCopyReq::ArenaDtor(void* object) {
  PartCopyReq* _this = reinterpret_cast< PartCopyReq* >(object);
  (void)_this;
}
void PartCopyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartCopyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartCopyReq& PartCopyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartCopyReq_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void PartCopyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.PartCopyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      srcpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      srcidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      dstpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dstidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      src_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      dst_uploadkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sseinfo_ != nullptr);
      sseinfo_->Clear();
    }
  }
  src_file_size_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&srcstart_range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_block_num_) -
        reinterpret_cast<char*>(&srcstart_range_)) + sizeof(dst_block_num_));
    platform_type_ = 1u;
    src_platform_type_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartCopyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string srcpath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_srcpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyReq.srcpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string srcidc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_srcidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyReq.srcidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyReq.dstpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstidc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dstidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyReq.dstidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 src_file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_src_file_size(&has_bits);
          src_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform_type = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_platform_type(&has_bits);
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_src_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyReq.src_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 srcstart_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_srcstart_range(&has_bits);
          srcstart_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 srcend_range = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_srcend_range(&has_bits);
          srcend_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dst_uploadkey = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_dst_uploadkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyReq.dst_uploadkey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 dst_block_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_dst_block_num(&has_bits);
          dst_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_platform_type = 12 [default = 1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_src_platform_type(&has_bits);
          src_platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TrsfSseInfo sseinfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sseinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartCopyReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.PartCopyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string srcpath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcpath().data(), static_cast<int>(this->_internal_srcpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyReq.srcpath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcpath(), target);
  }

  // required string srcidc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcidc().data(), static_cast<int>(this->_internal_srcidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyReq.srcidc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcidc(), target);
  }

  // required string dstpath = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyReq.dstpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dstpath(), target);
  }

  // required string dstidc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstidc().data(), static_cast<int>(this->_internal_dstidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyReq.dstidc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dstidc(), target);
  }

  // required uint64 src_file_size = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_src_file_size(), target);
  }

  // optional uint32 platform_type = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_platform_type(), target);
  }

  // optional string src_version = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_version().data(), static_cast<int>(this->_internal_src_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyReq.src_version");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_src_version(), target);
  }

  // required uint64 srcstart_range = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_srcstart_range(), target);
  }

  // required uint64 srcend_range = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_srcend_range(), target);
  }

  // required string dst_uploadkey = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_uploadkey().data(), static_cast<int>(this->_internal_dst_uploadkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyReq.dst_uploadkey");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_dst_uploadkey(), target);
  }

  // required uint64 dst_block_num = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_dst_block_num(), target);
  }

  // optional uint32 src_platform_type = 12 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_src_platform_type(), target);
  }

  // optional .FTN.TrsfSseInfo sseinfo = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sseinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.PartCopyReq)
  return target;
}

size_t PartCopyReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.PartCopyReq)
  size_t total_size = 0;

  if (_internal_has_srcpath()) {
    // required string srcpath = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());
  }

  if (_internal_has_srcidc()) {
    // required string srcidc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());
  }

  if (_internal_has_dstpath()) {
    // required string dstpath = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (_internal_has_dstidc()) {
    // required string dstidc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());
  }

  if (_internal_has_dst_uploadkey()) {
    // required string dst_uploadkey = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_uploadkey());
  }

  if (_internal_has_src_file_size()) {
    // required uint64 src_file_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_src_file_size());
  }

  if (_internal_has_srcstart_range()) {
    // required uint64 srcstart_range = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_srcstart_range());
  }

  if (_internal_has_srcend_range()) {
    // required uint64 srcend_range = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_srcend_range());
  }

  if (_internal_has_dst_block_num()) {
    // required uint64 dst_block_num = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dst_block_num());
  }

  return total_size;
}
size_t PartCopyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.PartCopyReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007af) ^ 0x000007af) == 0) {  // All required fields are present.
    // required string srcpath = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());

    // required string srcidc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());

    // required string dstpath = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());

    // required string dstidc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());

    // required string dst_uploadkey = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_uploadkey());

    // required uint64 src_file_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_src_file_size());

    // required uint64 srcstart_range = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_srcstart_range());

    // required uint64 srcend_range = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_srcend_range());

    // required uint64 dst_block_num = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dst_block_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string src_version = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_version());
  }

  // optional .FTN.TrsfSseInfo sseinfo = 13;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sseinfo_);
  }

  if (cached_has_bits & 0x00001800u) {
    // optional uint32 platform_type = 6 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform_type());
    }

    // optional uint32 src_platform_type = 12 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_platform_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartCopyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.PartCopyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PartCopyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartCopyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.PartCopyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.PartCopyReq)
    MergeFrom(*source);
  }
}

void PartCopyReq::MergeFrom(const PartCopyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.PartCopyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srcpath(from._internal_srcpath());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_srcidc(from._internal_srcidc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_dstpath(from._internal_dstpath());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dstidc(from._internal_dstidc());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_src_version(from._internal_src_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_dst_uploadkey(from._internal_dst_uploadkey());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_sseinfo()->::FTN::TrsfSseInfo::MergeFrom(from._internal_sseinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      src_file_size_ = from.src_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      srcstart_range_ = from.srcstart_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      srcend_range_ = from.srcend_range_;
    }
    if (cached_has_bits & 0x00000400u) {
      dst_block_num_ = from.dst_block_num_;
    }
    if (cached_has_bits & 0x00000800u) {
      platform_type_ = from.platform_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      src_platform_type_ = from.src_platform_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartCopyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.PartCopyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartCopyReq::CopyFrom(const PartCopyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.PartCopyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartCopyReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PartCopyReq::InternalSwap(PartCopyReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcpath_.Swap(&other->srcpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcidc_.Swap(&other->srcidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstidc_.Swap(&other->dstidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  src_version_.Swap(&other->src_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_uploadkey_.Swap(&other->dst_uploadkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartCopyReq, dst_block_num_)
      + sizeof(PartCopyReq::dst_block_num_)
      - PROTOBUF_FIELD_OFFSET(PartCopyReq, sseinfo_)>(
          reinterpret_cast<char*>(&sseinfo_),
          reinterpret_cast<char*>(&other->sseinfo_));
  swap(platform_type_, other->platform_type_);
  swap(src_platform_type_, other->src_platform_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartCopyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartCopyFinishReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PartCopyFinishReq>()._has_bits_);
  static void set_has_srcfile_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ukey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_finish_json_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_srcpath(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_srcidc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dstpath(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dstidc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_storagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_retry_times(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_delay_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::FTN::MultiRegionList& region_list(const PartCopyFinishReq* msg);
  static void set_has_region_list(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::FTN::MultiRegionList&
PartCopyFinishReq::_Internal::region_list(const PartCopyFinishReq* msg) {
  return *msg->region_list_;
}
PartCopyFinishReq::PartCopyFinishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.PartCopyFinishReq)
}
PartCopyFinishReq::PartCopyFinishReq(const PartCopyFinishReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcfile_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcfile_attr()) {
    srcfile_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcfile_attr(), 
      GetArena());
  }
  ukey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ukey()) {
    ukey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ukey(), 
      GetArena());
  }
  finish_json_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_finish_json_message()) {
    finish_json_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_finish_json_message(), 
      GetArena());
  }
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcpath()) {
    srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcpath(), 
      GetArena());
  }
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcidc()) {
    srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcidc(), 
      GetArena());
  }
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstpath()) {
    dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstpath(), 
      GetArena());
  }
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstidc()) {
    dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstidc(), 
      GetArena());
  }
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_storagetype()) {
    storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_storagetype(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_region_list()) {
    region_list_ = new ::FTN::MultiRegionList(*from.region_list_);
  } else {
    region_list_ = nullptr;
  }
  ::memcpy(&delay_time_, &from.delay_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_times_) -
    reinterpret_cast<char*>(&delay_time_)) + sizeof(retry_times_));
  // @@protoc_insertion_point(copy_constructor:FTN.PartCopyFinishReq)
}

void PartCopyFinishReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartCopyFinishReq_cos_5ftrsf_2eproto.base);
  srcfile_attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ukey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  finish_json_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_list_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&delay_time_) -
      reinterpret_cast<char*>(&region_list_)) + sizeof(delay_time_));
  platform_type_ = 1u;
  retry_times_ = 3u;
}

PartCopyFinishReq::~PartCopyFinishReq() {
  // @@protoc_insertion_point(destructor:FTN.PartCopyFinishReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartCopyFinishReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcfile_attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ukey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  finish_json_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_list_;
}

void PartCopyFinishReq::ArenaDtor(void* object) {
  PartCopyFinishReq* _this = reinterpret_cast< PartCopyFinishReq* >(object);
  (void)_this;
}
void PartCopyFinishReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartCopyFinishReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartCopyFinishReq& PartCopyFinishReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartCopyFinishReq_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void PartCopyFinishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.PartCopyFinishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      srcfile_attr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ukey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      finish_json_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      srcpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      srcidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      dstpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      dstidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      storagetype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(region_list_ != nullptr);
      region_list_->Clear();
    }
  }
  if (cached_has_bits & 0x00001c00u) {
    delay_time_ = 0u;
    platform_type_ = 1u;
    retry_times_ = 3u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartCopyFinishReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes srcfile_attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_srcfile_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ukey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ukey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.ukey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string finish_json_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_finish_json_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.finish_json_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string srcpath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_srcpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.srcpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string srcidc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_srcidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.srcidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstpath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.dstpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstidc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_dstidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.dstidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string storagetype = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_storagetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.storagetype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyFinishReq.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform_type = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_platform_type(&has_bits);
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retry_times = 11 [default = 3];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_retry_times(&has_bits);
          retry_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_delay_time(&has_bits);
          delay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.MultiRegionList region_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartCopyFinishReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.PartCopyFinishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes srcfile_attr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_srcfile_attr(), target);
  }

  // required string ukey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ukey().data(), static_cast<int>(this->_internal_ukey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.ukey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ukey(), target);
  }

  // required string finish_json_message = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_finish_json_message().data(), static_cast<int>(this->_internal_finish_json_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.finish_json_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_finish_json_message(), target);
  }

  // required string srcpath = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcpath().data(), static_cast<int>(this->_internal_srcpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.srcpath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_srcpath(), target);
  }

  // required string srcidc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcidc().data(), static_cast<int>(this->_internal_srcidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.srcidc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_srcidc(), target);
  }

  // required string dstpath = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.dstpath");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dstpath(), target);
  }

  // required string dstidc = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstidc().data(), static_cast<int>(this->_internal_dstidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.dstidc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dstidc(), target);
  }

  // required string storagetype = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_storagetype().data(), static_cast<int>(this->_internal_storagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.storagetype");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_storagetype(), target);
  }

  // optional string version = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyFinishReq.version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_version(), target);
  }

  // optional uint32 platform_type = 10 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_platform_type(), target);
  }

  // optional uint32 retry_times = 11 [default = 3];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_retry_times(), target);
  }

  // optional uint32 delay_time = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_delay_time(), target);
  }

  // optional .FTN.MultiRegionList region_list = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::region_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.PartCopyFinishReq)
  return target;
}

size_t PartCopyFinishReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.PartCopyFinishReq)
  size_t total_size = 0;

  if (_internal_has_srcfile_attr()) {
    // required bytes srcfile_attr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcfile_attr());
  }

  if (_internal_has_ukey()) {
    // required string ukey = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ukey());
  }

  if (_internal_has_finish_json_message()) {
    // required string finish_json_message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_finish_json_message());
  }

  if (_internal_has_srcpath()) {
    // required string srcpath = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());
  }

  if (_internal_has_srcidc()) {
    // required string srcidc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());
  }

  if (_internal_has_dstpath()) {
    // required string dstpath = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (_internal_has_dstidc()) {
    // required string dstidc = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());
  }

  if (_internal_has_storagetype()) {
    // required string storagetype = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());
  }

  return total_size;
}
size_t PartCopyFinishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.PartCopyFinishReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes srcfile_attr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcfile_attr());

    // required string ukey = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ukey());

    // required string finish_json_message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_finish_json_message());

    // required string srcpath = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());

    // required string srcidc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcidc());

    // required string dstpath = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());

    // required string dstidc = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());

    // required string storagetype = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001f00u) {
    // optional string version = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .FTN.MultiRegionList region_list = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_list_);
    }

    // optional uint32 delay_time = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay_time());
    }

    // optional uint32 platform_type = 10 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform_type());
    }

    // optional uint32 retry_times = 11 [default = 3];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retry_times());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartCopyFinishReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.PartCopyFinishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PartCopyFinishReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartCopyFinishReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.PartCopyFinishReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.PartCopyFinishReq)
    MergeFrom(*source);
  }
}

void PartCopyFinishReq::MergeFrom(const PartCopyFinishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.PartCopyFinishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srcfile_attr(from._internal_srcfile_attr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ukey(from._internal_ukey());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_finish_json_message(from._internal_finish_json_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_srcpath(from._internal_srcpath());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_srcidc(from._internal_srcidc());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_dstpath(from._internal_dstpath());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_dstidc(from._internal_dstidc());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_storagetype(from._internal_storagetype());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_region_list()->::FTN::MultiRegionList::MergeFrom(from._internal_region_list());
    }
    if (cached_has_bits & 0x00000400u) {
      delay_time_ = from.delay_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      platform_type_ = from.platform_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      retry_times_ = from.retry_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartCopyFinishReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.PartCopyFinishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartCopyFinishReq::CopyFrom(const PartCopyFinishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.PartCopyFinishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartCopyFinishReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PartCopyFinishReq::InternalSwap(PartCopyFinishReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcfile_attr_.Swap(&other->srcfile_attr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ukey_.Swap(&other->ukey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  finish_json_message_.Swap(&other->finish_json_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcpath_.Swap(&other->srcpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcidc_.Swap(&other->srcidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstidc_.Swap(&other->dstidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storagetype_.Swap(&other->storagetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartCopyFinishReq, delay_time_)
      + sizeof(PartCopyFinishReq::delay_time_)
      - PROTOBUF_FIELD_OFFSET(PartCopyFinishReq, region_list_)>(
          reinterpret_cast<char*>(&region_list_),
          reinterpret_cast<char*>(&other->region_list_));
  swap(platform_type_, other->platform_type_);
  swap(retry_times_, other->retry_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartCopyFinishReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrsfSseInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TrsfSseInfo>()._has_bits_);
  static void set_has_src_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_src_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dst_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dst_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::FTN::SseCInfo& src_ssec(const TrsfSseInfo* msg);
  static void set_has_src_ssec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::FTN::SseCInfo& dst_ssec(const TrsfSseInfo* msg);
  static void set_has_dst_ssec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::FTN::KmsInfo& src_kms(const TrsfSseInfo* msg);
  static void set_has_src_kms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::FTN::KmsInfo& dst_kms(const TrsfSseInfo* msg);
  static void set_has_dst_kms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::FTN::SseCInfo&
TrsfSseInfo::_Internal::src_ssec(const TrsfSseInfo* msg) {
  return *msg->src_ssec_;
}
const ::FTN::SseCInfo&
TrsfSseInfo::_Internal::dst_ssec(const TrsfSseInfo* msg) {
  return *msg->dst_ssec_;
}
const ::FTN::KmsInfo&
TrsfSseInfo::_Internal::src_kms(const TrsfSseInfo* msg) {
  return *msg->src_kms_;
}
const ::FTN::KmsInfo&
TrsfSseInfo::_Internal::dst_kms(const TrsfSseInfo* msg) {
  return *msg->dst_kms_;
}
TrsfSseInfo::TrsfSseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.TrsfSseInfo)
}
TrsfSseInfo::TrsfSseInfo(const TrsfSseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_algorithm()) {
    src_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_algorithm(), 
      GetArena());
  }
  dst_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_algorithm()) {
    dst_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_algorithm(), 
      GetArena());
  }
  if (from._internal_has_src_ssec()) {
    src_ssec_ = new ::FTN::SseCInfo(*from.src_ssec_);
  } else {
    src_ssec_ = nullptr;
  }
  if (from._internal_has_dst_ssec()) {
    dst_ssec_ = new ::FTN::SseCInfo(*from.dst_ssec_);
  } else {
    dst_ssec_ = nullptr;
  }
  if (from._internal_has_src_kms()) {
    src_kms_ = new ::FTN::KmsInfo(*from.src_kms_);
  } else {
    src_kms_ = nullptr;
  }
  if (from._internal_has_dst_kms()) {
    dst_kms_ = new ::FTN::KmsInfo(*from.dst_kms_);
  } else {
    dst_kms_ = nullptr;
  }
  ::memcpy(&src_type_, &from.src_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_type_) -
    reinterpret_cast<char*>(&src_type_)) + sizeof(dst_type_));
  // @@protoc_insertion_point(copy_constructor:FTN.TrsfSseInfo)
}

void TrsfSseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrsfSseInfo_cos_5ftrsf_2eproto.base);
  src_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_ssec_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dst_type_) -
      reinterpret_cast<char*>(&src_ssec_)) + sizeof(dst_type_));
}

TrsfSseInfo::~TrsfSseInfo() {
  // @@protoc_insertion_point(destructor:FTN.TrsfSseInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrsfSseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_ssec_;
  if (this != internal_default_instance()) delete dst_ssec_;
  if (this != internal_default_instance()) delete src_kms_;
  if (this != internal_default_instance()) delete dst_kms_;
}

void TrsfSseInfo::ArenaDtor(void* object) {
  TrsfSseInfo* _this = reinterpret_cast< TrsfSseInfo* >(object);
  (void)_this;
}
void TrsfSseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrsfSseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrsfSseInfo& TrsfSseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrsfSseInfo_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void TrsfSseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.TrsfSseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      src_algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dst_algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(src_ssec_ != nullptr);
      src_ssec_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dst_ssec_ != nullptr);
      dst_ssec_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(src_kms_ != nullptr);
      src_kms_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dst_kms_ != nullptr);
      dst_kms_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&src_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_type_) -
        reinterpret_cast<char*>(&src_type_)) + sizeof(dst_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrsfSseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 src_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_src_type(&has_bits);
          src_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_src_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TrsfSseInfo.src_algorithm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dst_type(&has_bits);
          dst_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_algorithm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dst_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TrsfSseInfo.dst_algorithm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.SseCInfo src_ssec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_ssec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.SseCInfo dst_ssec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_ssec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.KmsInfo src_kms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_kms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.KmsInfo dst_kms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_kms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrsfSseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.TrsfSseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 src_type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_type(), target);
  }

  // optional string src_algorithm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_algorithm().data(), static_cast<int>(this->_internal_src_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TrsfSseInfo.src_algorithm");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_algorithm(), target);
  }

  // optional uint32 dst_type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dst_type(), target);
  }

  // optional string dst_algorithm = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_algorithm().data(), static_cast<int>(this->_internal_dst_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TrsfSseInfo.dst_algorithm");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dst_algorithm(), target);
  }

  // optional .FTN.SseCInfo src_ssec = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::src_ssec(this), target, stream);
  }

  // optional .FTN.SseCInfo dst_ssec = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dst_ssec(this), target, stream);
  }

  // optional .FTN.KmsInfo src_kms = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::src_kms(this), target, stream);
  }

  // optional .FTN.KmsInfo dst_kms = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dst_kms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.TrsfSseInfo)
  return target;
}

size_t TrsfSseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.TrsfSseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string src_algorithm = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_algorithm());
    }

    // optional string dst_algorithm = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_algorithm());
    }

    // optional .FTN.SseCInfo src_ssec = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *src_ssec_);
    }

    // optional .FTN.SseCInfo dst_ssec = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_ssec_);
    }

    // optional .FTN.KmsInfo src_kms = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *src_kms_);
    }

    // optional .FTN.KmsInfo dst_kms = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_kms_);
    }

    // optional uint32 src_type = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_type());
    }

    // optional uint32 dst_type = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dst_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrsfSseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.TrsfSseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrsfSseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrsfSseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.TrsfSseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.TrsfSseInfo)
    MergeFrom(*source);
  }
}

void TrsfSseInfo::MergeFrom(const TrsfSseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.TrsfSseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_src_algorithm(from._internal_src_algorithm());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dst_algorithm(from._internal_dst_algorithm());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_src_ssec()->::FTN::SseCInfo::MergeFrom(from._internal_src_ssec());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dst_ssec()->::FTN::SseCInfo::MergeFrom(from._internal_dst_ssec());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_src_kms()->::FTN::KmsInfo::MergeFrom(from._internal_src_kms());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dst_kms()->::FTN::KmsInfo::MergeFrom(from._internal_dst_kms());
    }
    if (cached_has_bits & 0x00000040u) {
      src_type_ = from.src_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      dst_type_ = from.dst_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrsfSseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.TrsfSseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrsfSseInfo::CopyFrom(const TrsfSseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.TrsfSseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrsfSseInfo::IsInitialized() const {
  return true;
}

void TrsfSseInfo::InternalSwap(TrsfSseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_algorithm_.Swap(&other->src_algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_algorithm_.Swap(&other->dst_algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrsfSseInfo, dst_type_)
      + sizeof(TrsfSseInfo::dst_type_)
      - PROTOBUF_FIELD_OFFSET(TrsfSseInfo, src_ssec_)>(
          reinterpret_cast<char*>(&src_ssec_),
          reinterpret_cast<char*>(&other->src_ssec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrsfSseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SseCInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SseCInfo>()._has_bits_);
  static void set_has_ssec_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ssec_key_md5(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SseCInfo::SseCInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.SseCInfo)
}
SseCInfo::SseCInfo(const SseCInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssec_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ssec_key()) {
    ssec_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssec_key(), 
      GetArena());
  }
  ssec_key_md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ssec_key_md5()) {
    ssec_key_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssec_key_md5(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:FTN.SseCInfo)
}

void SseCInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SseCInfo_cos_5ftrsf_2eproto.base);
  ssec_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssec_key_md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SseCInfo::~SseCInfo() {
  // @@protoc_insertion_point(destructor:FTN.SseCInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SseCInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssec_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssec_key_md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SseCInfo::ArenaDtor(void* object) {
  SseCInfo* _this = reinterpret_cast< SseCInfo* >(object);
  (void)_this;
}
void SseCInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SseCInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SseCInfo& SseCInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SseCInfo_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void SseCInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.SseCInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ssec_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ssec_key_md5_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SseCInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ssec_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ssec_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.SseCInfo.ssec_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ssec_key_md5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ssec_key_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.SseCInfo.ssec_key_md5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SseCInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.SseCInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ssec_key = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ssec_key().data(), static_cast<int>(this->_internal_ssec_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.SseCInfo.ssec_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ssec_key(), target);
  }

  // optional string ssec_key_md5 = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ssec_key_md5().data(), static_cast<int>(this->_internal_ssec_key_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.SseCInfo.ssec_key_md5");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ssec_key_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.SseCInfo)
  return target;
}

size_t SseCInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.SseCInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ssec_key = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ssec_key());
    }

    // optional string ssec_key_md5 = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ssec_key_md5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SseCInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.SseCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SseCInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SseCInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.SseCInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.SseCInfo)
    MergeFrom(*source);
  }
}

void SseCInfo::MergeFrom(const SseCInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.SseCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ssec_key(from._internal_ssec_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ssec_key_md5(from._internal_ssec_key_md5());
    }
  }
}

void SseCInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.SseCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SseCInfo::CopyFrom(const SseCInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.SseCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SseCInfo::IsInitialized() const {
  return true;
}

void SseCInfo::InternalSwap(SseCInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ssec_key_.Swap(&other->ssec_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ssec_key_md5_.Swap(&other->ssec_key_md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SseCInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KmsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<KmsInfo>()._has_bits_);
  static void set_has_kms_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kms_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kms_datakey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kms_datakey_encryp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KmsInfo::KmsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.KmsInfo)
}
KmsInfo::KmsInfo(const KmsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kms_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kms_key_id()) {
    kms_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kms_key_id(), 
      GetArena());
  }
  kms_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kms_context()) {
    kms_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kms_context(), 
      GetArena());
  }
  kms_datakey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kms_datakey()) {
    kms_datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kms_datakey(), 
      GetArena());
  }
  kms_datakey_encryp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kms_datakey_encryp()) {
    kms_datakey_encryp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kms_datakey_encryp(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:FTN.KmsInfo)
}

void KmsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KmsInfo_cos_5ftrsf_2eproto.base);
  kms_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_datakey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_datakey_encryp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KmsInfo::~KmsInfo() {
  // @@protoc_insertion_point(destructor:FTN.KmsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KmsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  kms_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_datakey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_datakey_encryp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KmsInfo::ArenaDtor(void* object) {
  KmsInfo* _this = reinterpret_cast< KmsInfo* >(object);
  (void)_this;
}
void KmsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KmsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KmsInfo& KmsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KmsInfo_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void KmsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.KmsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      kms_key_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      kms_context_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      kms_datakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      kms_datakey_encryp_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KmsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string kms_key_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_kms_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.KmsInfo.kms_key_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes kms_context = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_kms_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string kms_datakey = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_kms_datakey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.KmsInfo.kms_datakey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes kms_datakey_encryp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_kms_datakey_encryp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KmsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.KmsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string kms_key_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kms_key_id().data(), static_cast<int>(this->_internal_kms_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.KmsInfo.kms_key_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_kms_key_id(), target);
  }

  // optional bytes kms_context = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_kms_context(), target);
  }

  // optional string kms_datakey = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kms_datakey().data(), static_cast<int>(this->_internal_kms_datakey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.KmsInfo.kms_datakey");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_kms_datakey(), target);
  }

  // optional bytes kms_datakey_encryp = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_kms_datakey_encryp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.KmsInfo)
  return target;
}

size_t KmsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.KmsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string kms_key_id = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kms_key_id());
    }

    // optional bytes kms_context = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kms_context());
    }

    // optional string kms_datakey = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kms_datakey());
    }

    // optional bytes kms_datakey_encryp = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kms_datakey_encryp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KmsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.KmsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const KmsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KmsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.KmsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.KmsInfo)
    MergeFrom(*source);
  }
}

void KmsInfo::MergeFrom(const KmsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.KmsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_kms_key_id(from._internal_kms_key_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_kms_context(from._internal_kms_context());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_kms_datakey(from._internal_kms_datakey());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_kms_datakey_encryp(from._internal_kms_datakey_encryp());
    }
  }
}

void KmsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.KmsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KmsInfo::CopyFrom(const KmsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.KmsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KmsInfo::IsInitialized() const {
  return true;
}

void KmsInfo::InternalSwap(KmsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kms_key_id_.Swap(&other->kms_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kms_context_.Swap(&other->kms_context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kms_datakey_.Swap(&other->kms_datakey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kms_datakey_encryp_.Swap(&other->kms_datakey_encryp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KmsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileTrsfRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<FileTrsfRsp>()._has_bits_);
  static void set_has_task_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FileTrsfRsp::FileTrsfRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.FileTrsfRsp)
}
FileTrsfRsp::FileTrsfRsp(const FileTrsfRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_task_key()) {
    task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:FTN.FileTrsfRsp)
}

void FileTrsfRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileTrsfRsp_cos_5ftrsf_2eproto.base);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileTrsfRsp::~FileTrsfRsp() {
  // @@protoc_insertion_point(destructor:FTN.FileTrsfRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileTrsfRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileTrsfRsp::ArenaDtor(void* object) {
  FileTrsfRsp* _this = reinterpret_cast< FileTrsfRsp* >(object);
  (void)_this;
}
void FileTrsfRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileTrsfRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTrsfRsp& FileTrsfRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileTrsfRsp_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void FileTrsfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.FileTrsfRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    task_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTrsfRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string task_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.FileTrsfRsp.task_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTrsfRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.FileTrsfRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_key().data(), static_cast<int>(this->_internal_task_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.FileTrsfRsp.task_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.FileTrsfRsp)
  return target;
}

size_t FileTrsfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.FileTrsfRsp)
  size_t total_size = 0;

  // required string task_key = 1;
  if (_internal_has_task_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTrsfRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.FileTrsfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTrsfRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTrsfRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.FileTrsfRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.FileTrsfRsp)
    MergeFrom(*source);
  }
}

void FileTrsfRsp::MergeFrom(const FileTrsfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.FileTrsfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_key()) {
    _internal_set_task_key(from._internal_task_key());
  }
}

void FileTrsfRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.FileTrsfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTrsfRsp::CopyFrom(const FileTrsfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.FileTrsfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTrsfRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FileTrsfRsp::InternalSwap(FileTrsfRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_key_.Swap(&other->task_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTrsfRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PutObjCopyRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<PutObjCopyRsp>()._has_bits_);
  static void set_has_task_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PutObjCopyRsp::PutObjCopyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.PutObjCopyRsp)
}
PutObjCopyRsp::PutObjCopyRsp(const PutObjCopyRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_task_key()) {
    task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:FTN.PutObjCopyRsp)
}

void PutObjCopyRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutObjCopyRsp_cos_5ftrsf_2eproto.base);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PutObjCopyRsp::~PutObjCopyRsp() {
  // @@protoc_insertion_point(destructor:FTN.PutObjCopyRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PutObjCopyRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PutObjCopyRsp::ArenaDtor(void* object) {
  PutObjCopyRsp* _this = reinterpret_cast< PutObjCopyRsp* >(object);
  (void)_this;
}
void PutObjCopyRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PutObjCopyRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutObjCopyRsp& PutObjCopyRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutObjCopyRsp_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void PutObjCopyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.PutObjCopyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    task_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutObjCopyRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string task_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PutObjCopyRsp.task_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutObjCopyRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.PutObjCopyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_key().data(), static_cast<int>(this->_internal_task_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PutObjCopyRsp.task_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.PutObjCopyRsp)
  return target;
}

size_t PutObjCopyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.PutObjCopyRsp)
  size_t total_size = 0;

  // required string task_key = 1;
  if (_internal_has_task_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutObjCopyRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.PutObjCopyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PutObjCopyRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutObjCopyRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.PutObjCopyRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.PutObjCopyRsp)
    MergeFrom(*source);
  }
}

void PutObjCopyRsp::MergeFrom(const PutObjCopyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.PutObjCopyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_key()) {
    _internal_set_task_key(from._internal_task_key());
  }
}

void PutObjCopyRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.PutObjCopyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutObjCopyRsp::CopyFrom(const PutObjCopyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.PutObjCopyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutObjCopyRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PutObjCopyRsp::InternalSwap(PutObjCopyRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_key_.Swap(&other->task_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PutObjCopyRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartCopyRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<PartCopyRsp>()._has_bits_);
  static void set_has_task_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ClientCos::SseInfo& srcsseinfo(const PartCopyRsp* msg);
  static void set_has_srcsseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::ClientCos::SseInfo&
PartCopyRsp::_Internal::srcsseinfo(const PartCopyRsp* msg) {
  return *msg->srcsseinfo_;
}
void PartCopyRsp::clear_srcsseinfo() {
  if (srcsseinfo_ != nullptr) srcsseinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PartCopyRsp::PartCopyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.PartCopyRsp)
}
PartCopyRsp::PartCopyRsp(const PartCopyRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_task_key()) {
    task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_key(), 
      GetArena());
  }
  if (from._internal_has_srcsseinfo()) {
    srcsseinfo_ = new ::ClientCos::SseInfo(*from.srcsseinfo_);
  } else {
    srcsseinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:FTN.PartCopyRsp)
}

void PartCopyRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartCopyRsp_cos_5ftrsf_2eproto.base);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcsseinfo_ = nullptr;
}

PartCopyRsp::~PartCopyRsp() {
  // @@protoc_insertion_point(destructor:FTN.PartCopyRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartCopyRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete srcsseinfo_;
}

void PartCopyRsp::ArenaDtor(void* object) {
  PartCopyRsp* _this = reinterpret_cast< PartCopyRsp* >(object);
  (void)_this;
}
void PartCopyRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartCopyRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartCopyRsp& PartCopyRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartCopyRsp_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void PartCopyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.PartCopyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      task_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(srcsseinfo_ != nullptr);
      srcsseinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartCopyRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string task_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.PartCopyRsp.task_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ClientCos.SseInfo srcsseinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcsseinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartCopyRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.PartCopyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_key().data(), static_cast<int>(this->_internal_task_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.PartCopyRsp.task_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_key(), target);
  }

  // optional .ClientCos.SseInfo srcsseinfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::srcsseinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.PartCopyRsp)
  return target;
}

size_t PartCopyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.PartCopyRsp)
  size_t total_size = 0;

  // required string task_key = 1;
  if (_internal_has_task_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ClientCos.SseInfo srcsseinfo = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srcsseinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartCopyRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.PartCopyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PartCopyRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartCopyRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.PartCopyRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.PartCopyRsp)
    MergeFrom(*source);
  }
}

void PartCopyRsp::MergeFrom(const PartCopyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.PartCopyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_task_key(from._internal_task_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_srcsseinfo()->::ClientCos::SseInfo::MergeFrom(from._internal_srcsseinfo());
    }
  }
}

void PartCopyRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.PartCopyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartCopyRsp::CopyFrom(const PartCopyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.PartCopyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartCopyRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PartCopyRsp::InternalSwap(PartCopyRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_key_.Swap(&other->task_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(srcsseinfo_, other->srcsseinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartCopyRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferNotify>()._has_bits_);
  static void set_has_task_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_srcpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dstpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dstidc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_task_ctime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_task_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_task_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

TransferNotify::TransferNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.TransferNotify)
}
TransferNotify::TransferNotify(const TransferNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_task_key()) {
    task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_key(), 
      GetArena());
  }
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcpath()) {
    srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcpath(), 
      GetArena());
  }
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstpath()) {
    dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstpath(), 
      GetArena());
  }
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstidc()) {
    dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstidc(), 
      GetArena());
  }
  ::memcpy(&task_ctime_, &from.task_ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_progress_) -
    reinterpret_cast<char*>(&task_ctime_)) + sizeof(task_progress_));
  // @@protoc_insertion_point(copy_constructor:FTN.TransferNotify)
}

void TransferNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferNotify_cos_5ftrsf_2eproto.base);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_ctime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&task_progress_) -
      reinterpret_cast<char*>(&task_ctime_)) + sizeof(task_progress_));
}

TransferNotify::~TransferNotify() {
  // @@protoc_insertion_point(destructor:FTN.TransferNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferNotify::ArenaDtor(void* object) {
  TransferNotify* _this = reinterpret_cast< TransferNotify* >(object);
  (void)_this;
}
void TransferNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferNotify& TransferNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferNotify_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void TransferNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.TransferNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      task_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      srcpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      dstpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dstidc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&task_ctime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&task_progress_) -
        reinterpret_cast<char*>(&task_ctime_)) + sizeof(task_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string task_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TransferNotify.task_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string srcpath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_srcpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TransferNotify.srcpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TransferNotify.dstpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstidc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dstidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TransferNotify.dstidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 task_ctime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_task_ctime(&has_bits);
          task_ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 task_endtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_task_endtime(&has_bits);
          task_endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 task_progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_task_progress(&has_bits);
          task_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.TransferNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_key().data(), static_cast<int>(this->_internal_task_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TransferNotify.task_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_key(), target);
  }

  // required string srcpath = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcpath().data(), static_cast<int>(this->_internal_srcpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TransferNotify.srcpath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcpath(), target);
  }

  // required string dstpath = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TransferNotify.dstpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dstpath(), target);
  }

  // required string dstidc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstidc().data(), static_cast<int>(this->_internal_dstidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TransferNotify.dstidc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dstidc(), target);
  }

  // required uint64 task_ctime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_task_ctime(), target);
  }

  // required uint64 task_endtime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_task_endtime(), target);
  }

  // required uint32 task_progress = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_task_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.TransferNotify)
  return target;
}

size_t TransferNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.TransferNotify)
  size_t total_size = 0;

  if (_internal_has_task_key()) {
    // required string task_key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_key());
  }

  if (_internal_has_srcpath()) {
    // required string srcpath = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());
  }

  if (_internal_has_dstpath()) {
    // required string dstpath = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (_internal_has_dstidc()) {
    // required string dstidc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());
  }

  if (_internal_has_task_ctime()) {
    // required uint64 task_ctime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_ctime());
  }

  if (_internal_has_task_endtime()) {
    // required uint64 task_endtime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_endtime());
  }

  if (_internal_has_task_progress()) {
    // required uint32 task_progress = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_progress());
  }

  return total_size;
}
size_t TransferNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.TransferNotify)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string task_key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_key());

    // required string srcpath = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());

    // required string dstpath = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());

    // required string dstidc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());

    // required uint64 task_ctime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_ctime());

    // required uint64 task_endtime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_endtime());

    // required uint32 task_progress = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_progress());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.TransferNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.TransferNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.TransferNotify)
    MergeFrom(*source);
  }
}

void TransferNotify::MergeFrom(const TransferNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.TransferNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_task_key(from._internal_task_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_srcpath(from._internal_srcpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_dstpath(from._internal_dstpath());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dstidc(from._internal_dstidc());
    }
    if (cached_has_bits & 0x00000010u) {
      task_ctime_ = from.task_ctime_;
    }
    if (cached_has_bits & 0x00000020u) {
      task_endtime_ = from.task_endtime_;
    }
    if (cached_has_bits & 0x00000040u) {
      task_progress_ = from.task_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransferNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.TransferNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferNotify::CopyFrom(const TransferNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.TransferNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TransferNotify::InternalSwap(TransferNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_key_.Swap(&other->task_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcpath_.Swap(&other->srcpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstidc_.Swap(&other->dstidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferNotify, task_progress_)
      + sizeof(TransferNotify::task_progress_)
      - PROTOBUF_FIELD_OFFSET(TransferNotify, task_ctime_)>(
          reinterpret_cast<char*>(&task_ctime_),
          reinterpret_cast<char*>(&other->task_ctime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferNotifyRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferNotifyRsp>()._has_bits_);
  static void set_has_task_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TransferNotifyRsp::TransferNotifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.TransferNotifyRsp)
}
TransferNotifyRsp::TransferNotifyRsp(const TransferNotifyRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_task_key()) {
    task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:FTN.TransferNotifyRsp)
}

void TransferNotifyRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferNotifyRsp_cos_5ftrsf_2eproto.base);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransferNotifyRsp::~TransferNotifyRsp() {
  // @@protoc_insertion_point(destructor:FTN.TransferNotifyRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferNotifyRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferNotifyRsp::ArenaDtor(void* object) {
  TransferNotifyRsp* _this = reinterpret_cast< TransferNotifyRsp* >(object);
  (void)_this;
}
void TransferNotifyRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferNotifyRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferNotifyRsp& TransferNotifyRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferNotifyRsp_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void TransferNotifyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.TransferNotifyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    task_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferNotifyRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string task_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TransferNotifyRsp.task_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferNotifyRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.TransferNotifyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_key().data(), static_cast<int>(this->_internal_task_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TransferNotifyRsp.task_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.TransferNotifyRsp)
  return target;
}

size_t TransferNotifyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.TransferNotifyRsp)
  size_t total_size = 0;

  // required string task_key = 1;
  if (_internal_has_task_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferNotifyRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.TransferNotifyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferNotifyRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferNotifyRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.TransferNotifyRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.TransferNotifyRsp)
    MergeFrom(*source);
  }
}

void TransferNotifyRsp::MergeFrom(const TransferNotifyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.TransferNotifyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_key()) {
    _internal_set_task_key(from._internal_task_key());
  }
}

void TransferNotifyRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.TransferNotifyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferNotifyRsp::CopyFrom(const TransferNotifyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.TransferNotifyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferNotifyRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TransferNotifyRsp::InternalSwap(TransferNotifyRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_key_.Swap(&other->task_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferNotifyRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskProgressReq::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskProgressReq>()._has_bits_);
  static void set_has_task_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TaskProgressReq::TaskProgressReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.TaskProgressReq)
}
TaskProgressReq::TaskProgressReq(const TaskProgressReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_task_key()) {
    task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:FTN.TaskProgressReq)
}

void TaskProgressReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskProgressReq_cos_5ftrsf_2eproto.base);
  task_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaskProgressReq::~TaskProgressReq() {
  // @@protoc_insertion_point(destructor:FTN.TaskProgressReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskProgressReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskProgressReq::ArenaDtor(void* object) {
  TaskProgressReq* _this = reinterpret_cast< TaskProgressReq* >(object);
  (void)_this;
}
void TaskProgressReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskProgressReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskProgressReq& TaskProgressReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskProgressReq_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void TaskProgressReq::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.TaskProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    task_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskProgressReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string task_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressReq.task_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskProgressReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.TaskProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_key().data(), static_cast<int>(this->_internal_task_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressReq.task_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.TaskProgressReq)
  return target;
}

size_t TaskProgressReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.TaskProgressReq)
  size_t total_size = 0;

  // required string task_key = 1;
  if (_internal_has_task_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskProgressReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.TaskProgressReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskProgressReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskProgressReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.TaskProgressReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.TaskProgressReq)
    MergeFrom(*source);
  }
}

void TaskProgressReq::MergeFrom(const TaskProgressReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.TaskProgressReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_key()) {
    _internal_set_task_key(from._internal_task_key());
  }
}

void TaskProgressReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.TaskProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskProgressReq::CopyFrom(const TaskProgressReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.TaskProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskProgressReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TaskProgressReq::InternalSwap(TaskProgressReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_key_.Swap(&other->task_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskProgressReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskProgressRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskProgressRsp>()._has_bits_);
  static void set_has_task_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_srcpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dstpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dstidc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_storagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_task_ctime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_srcstart_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_srcend_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dststart_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dst_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dst_sk(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dst_uploadkey(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dst_ctime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dst_block_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::FTN::TrsfSseInfo& sseinfo(const TaskProgressRsp* msg);
  static void set_has_sseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000420f) ^ 0x0000420f) != 0;
  }
};

const ::FTN::TrsfSseInfo&
TaskProgressRsp::_Internal::sseinfo(const TaskProgressRsp* msg) {
  return *msg->sseinfo_;
}
TaskProgressRsp::TaskProgressRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.TaskProgressRsp)
}
TaskProgressRsp::TaskProgressRsp(const TaskProgressRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_srcpath()) {
    srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcpath(), 
      GetArena());
  }
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstpath()) {
    dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstpath(), 
      GetArena());
  }
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dstidc()) {
    dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstidc(), 
      GetArena());
  }
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_storagetype()) {
    storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_storagetype(), 
      GetArena());
  }
  dst_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_version()) {
    dst_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_version(), 
      GetArena());
  }
  dst_sk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_sk()) {
    dst_sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_sk(), 
      GetArena());
  }
  dst_uploadkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_uploadkey()) {
    dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_uploadkey(), 
      GetArena());
  }
  dst_ctime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_ctime()) {
    dst_ctime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_ctime(), 
      GetArena());
  }
  if (from._internal_has_sseinfo()) {
    sseinfo_ = new ::FTN::TrsfSseInfo(*from.sseinfo_);
  } else {
    sseinfo_ = nullptr;
  }
  ::memcpy(&task_ctime_, &from.task_ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_progress_) -
    reinterpret_cast<char*>(&task_ctime_)) + sizeof(task_progress_));
  // @@protoc_insertion_point(copy_constructor:FTN.TaskProgressRsp)
}

void TaskProgressRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskProgressRsp_cos_5ftrsf_2eproto.base);
  srcpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_sk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_uploadkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ctime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sseinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&task_progress_) -
      reinterpret_cast<char*>(&sseinfo_)) + sizeof(task_progress_));
}

TaskProgressRsp::~TaskProgressRsp() {
  // @@protoc_insertion_point(destructor:FTN.TaskProgressRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskProgressRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstidc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storagetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_sk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_uploadkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ctime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sseinfo_;
}

void TaskProgressRsp::ArenaDtor(void* object) {
  TaskProgressRsp* _this = reinterpret_cast< TaskProgressRsp* >(object);
  (void)_this;
}
void TaskProgressRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskProgressRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskProgressRsp& TaskProgressRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskProgressRsp_cos_5ftrsf_2eproto.base);
  return *internal_default_instance();
}


void TaskProgressRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.TaskProgressRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      srcpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dstpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      dstidc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      storagetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      dst_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      dst_sk_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      dst_uploadkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      dst_ctime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(sseinfo_ != nullptr);
    sseinfo_->Clear();
  }
  if (cached_has_bits & 0x00007e00u) {
    ::memset(&task_ctime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&task_progress_) -
        reinterpret_cast<char*>(&task_ctime_)) + sizeof(task_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskProgressRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 task_progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_task_progress(&has_bits);
          task_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string srcpath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_srcpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.srcpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.dstpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dstidc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dstidc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.dstidc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string storagetype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_storagetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.storagetype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 task_ctime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_task_ctime(&has_bits);
          task_ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 srcstart_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_srcstart_range(&has_bits);
          srcstart_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 srcend_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_srcend_range(&has_bits);
          srcend_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dststart_range = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_dststart_range(&has_bits);
          dststart_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_dst_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.dst_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_sk = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dst_sk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.dst_sk");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_uploadkey = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_dst_uploadkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.dst_uploadkey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_ctime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_dst_ctime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTN.TaskProgressRsp.dst_ctime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dst_block_num = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dst_block_num(&has_bits);
          dst_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FTN.TrsfSseInfo sseinfo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_sseinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskProgressRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.TaskProgressRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 task_progress = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_task_progress(), target);
  }

  // required string srcpath = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_srcpath().data(), static_cast<int>(this->_internal_srcpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.srcpath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcpath(), target);
  }

  // required string dstpath = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.dstpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dstpath(), target);
  }

  // required string dstidc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dstidc().data(), static_cast<int>(this->_internal_dstidc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.dstidc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dstidc(), target);
  }

  // required string storagetype = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_storagetype().data(), static_cast<int>(this->_internal_storagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.storagetype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_storagetype(), target);
  }

  // required uint64 task_ctime = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_task_ctime(), target);
  }

  // optional uint64 srcstart_range = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_srcstart_range(), target);
  }

  // optional uint64 srcend_range = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_srcend_range(), target);
  }

  // optional uint64 dststart_range = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_dststart_range(), target);
  }

  // optional string dst_version = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_version().data(), static_cast<int>(this->_internal_dst_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.dst_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_dst_version(), target);
  }

  // optional string dst_sk = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_sk().data(), static_cast<int>(this->_internal_dst_sk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.dst_sk");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dst_sk(), target);
  }

  // optional string dst_uploadkey = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_uploadkey().data(), static_cast<int>(this->_internal_dst_uploadkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.dst_uploadkey");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_dst_uploadkey(), target);
  }

  // optional string dst_ctime = 13;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_ctime().data(), static_cast<int>(this->_internal_dst_ctime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FTN.TaskProgressRsp.dst_ctime");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_dst_ctime(), target);
  }

  // optional uint64 dst_block_num = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_dst_block_num(), target);
  }

  // optional .FTN.TrsfSseInfo sseinfo = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::sseinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.TaskProgressRsp)
  return target;
}

size_t TaskProgressRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.TaskProgressRsp)
  size_t total_size = 0;

  if (_internal_has_srcpath()) {
    // required string srcpath = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());
  }

  if (_internal_has_dstpath()) {
    // required string dstpath = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (_internal_has_dstidc()) {
    // required string dstidc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());
  }

  if (_internal_has_storagetype()) {
    // required string storagetype = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());
  }

  if (_internal_has_task_ctime()) {
    // required uint64 task_ctime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_ctime());
  }

  if (_internal_has_task_progress()) {
    // required uint32 task_progress = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_progress());
  }

  return total_size;
}
size_t TaskProgressRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.TaskProgressRsp)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000420f) ^ 0x0000420f) == 0) {  // All required fields are present.
    // required string srcpath = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcpath());

    // required string dstpath = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());

    // required string dstidc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstidc());

    // required string storagetype = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storagetype());

    // required uint64 task_ctime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_ctime());

    // required uint32 task_progress = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_progress());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional string dst_version = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_version());
    }

    // optional string dst_sk = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_sk());
    }

    // optional string dst_uploadkey = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_uploadkey());
    }

    // optional string dst_ctime = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_ctime());
    }

  }
  // optional .FTN.TrsfSseInfo sseinfo = 15;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sseinfo_);
  }

  if (cached_has_bits & 0x00003c00u) {
    // optional uint64 srcstart_range = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_srcstart_range());
    }

    // optional uint64 srcend_range = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_srcend_range());
    }

    // optional uint64 dststart_range = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dststart_range());
    }

    // optional uint64 dst_block_num = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dst_block_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskProgressRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.TaskProgressRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskProgressRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskProgressRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.TaskProgressRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.TaskProgressRsp)
    MergeFrom(*source);
  }
}

void TaskProgressRsp::MergeFrom(const TaskProgressRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.TaskProgressRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_srcpath(from._internal_srcpath());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dstpath(from._internal_dstpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_dstidc(from._internal_dstidc());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_storagetype(from._internal_storagetype());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dst_version(from._internal_dst_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_dst_sk(from._internal_dst_sk());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_dst_uploadkey(from._internal_dst_uploadkey());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_dst_ctime(from._internal_dst_ctime());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_sseinfo()->::FTN::TrsfSseInfo::MergeFrom(from._internal_sseinfo());
    }
    if (cached_has_bits & 0x00000200u) {
      task_ctime_ = from.task_ctime_;
    }
    if (cached_has_bits & 0x00000400u) {
      srcstart_range_ = from.srcstart_range_;
    }
    if (cached_has_bits & 0x00000800u) {
      srcend_range_ = from.srcend_range_;
    }
    if (cached_has_bits & 0x00001000u) {
      dststart_range_ = from.dststart_range_;
    }
    if (cached_has_bits & 0x00002000u) {
      dst_block_num_ = from.dst_block_num_;
    }
    if (cached_has_bits & 0x00004000u) {
      task_progress_ = from.task_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskProgressRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.TaskProgressRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskProgressRsp::CopyFrom(const TaskProgressRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.TaskProgressRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskProgressRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TaskProgressRsp::InternalSwap(TaskProgressRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcpath_.Swap(&other->srcpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstidc_.Swap(&other->dstidc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storagetype_.Swap(&other->storagetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_version_.Swap(&other->dst_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_sk_.Swap(&other->dst_sk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_uploadkey_.Swap(&other->dst_uploadkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_ctime_.Swap(&other->dst_ctime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskProgressRsp, task_progress_)
      + sizeof(TaskProgressRsp::task_progress_)
      - PROTOBUF_FIELD_OFFSET(TaskProgressRsp, sseinfo_)>(
          reinterpret_cast<char*>(&sseinfo_),
          reinterpret_cast<char*>(&other->sseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskProgressRsp::GetMetadata() const {
  return GetMetadataStatic();
}

PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::FTN::AppMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::FTN::CosTransferReqMsg >, 11, false >
  CosTransferReqMsg_body(kCosTransferReqMsgBodyFieldNumber, ::FTN::CosTransferReqMsg::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::FTN::AppMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::FTN::CosTransferRspMsg >, 11, false >
  CosTransferRspMsg_body(kCosTransferRspMsgBodyFieldNumber, ::FTN::CosTransferRspMsg::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace FTN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FTN::CosTransferReqMsg* Arena::CreateMaybeMessage< ::FTN::CosTransferReqMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::CosTransferReqMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::CosTransferRspMsg* Arena::CreateMaybeMessage< ::FTN::CosTransferRspMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::CosTransferRspMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::FileTrsfReq* Arena::CreateMaybeMessage< ::FTN::FileTrsfReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::FileTrsfReq >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::MultiRegionList* Arena::CreateMaybeMessage< ::FTN::MultiRegionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::MultiRegionList >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::PutObjCopyReq* Arena::CreateMaybeMessage< ::FTN::PutObjCopyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::PutObjCopyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::PartCopyReq* Arena::CreateMaybeMessage< ::FTN::PartCopyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::PartCopyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::PartCopyFinishReq* Arena::CreateMaybeMessage< ::FTN::PartCopyFinishReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::PartCopyFinishReq >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::TrsfSseInfo* Arena::CreateMaybeMessage< ::FTN::TrsfSseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::TrsfSseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::SseCInfo* Arena::CreateMaybeMessage< ::FTN::SseCInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::SseCInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::KmsInfo* Arena::CreateMaybeMessage< ::FTN::KmsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::KmsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::FileTrsfRsp* Arena::CreateMaybeMessage< ::FTN::FileTrsfRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::FileTrsfRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::PutObjCopyRsp* Arena::CreateMaybeMessage< ::FTN::PutObjCopyRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::PutObjCopyRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::PartCopyRsp* Arena::CreateMaybeMessage< ::FTN::PartCopyRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::PartCopyRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::TransferNotify* Arena::CreateMaybeMessage< ::FTN::TransferNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::TransferNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::TransferNotifyRsp* Arena::CreateMaybeMessage< ::FTN::TransferNotifyRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::TransferNotifyRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::TaskProgressReq* Arena::CreateMaybeMessage< ::FTN::TaskProgressReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::TaskProgressReq >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::TaskProgressRsp* Arena::CreateMaybeMessage< ::FTN::TaskProgressRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::TaskProgressRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
