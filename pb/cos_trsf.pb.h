// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cos_trsf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cos_5ftrsf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cos_5ftrsf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ftncomm.pb.h"
#include "cosv4_client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cos_5ftrsf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cos_5ftrsf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cos_5ftrsf_2eproto;
namespace FTN {
class CosTransferReqMsg;
class CosTransferReqMsgDefaultTypeInternal;
extern CosTransferReqMsgDefaultTypeInternal _CosTransferReqMsg_default_instance_;
class CosTransferRspMsg;
class CosTransferRspMsgDefaultTypeInternal;
extern CosTransferRspMsgDefaultTypeInternal _CosTransferRspMsg_default_instance_;
class FileTrsfReq;
class FileTrsfReqDefaultTypeInternal;
extern FileTrsfReqDefaultTypeInternal _FileTrsfReq_default_instance_;
class FileTrsfRsp;
class FileTrsfRspDefaultTypeInternal;
extern FileTrsfRspDefaultTypeInternal _FileTrsfRsp_default_instance_;
class KmsInfo;
class KmsInfoDefaultTypeInternal;
extern KmsInfoDefaultTypeInternal _KmsInfo_default_instance_;
class MultiRegionList;
class MultiRegionListDefaultTypeInternal;
extern MultiRegionListDefaultTypeInternal _MultiRegionList_default_instance_;
class PartCopyFinishReq;
class PartCopyFinishReqDefaultTypeInternal;
extern PartCopyFinishReqDefaultTypeInternal _PartCopyFinishReq_default_instance_;
class PartCopyReq;
class PartCopyReqDefaultTypeInternal;
extern PartCopyReqDefaultTypeInternal _PartCopyReq_default_instance_;
class PartCopyRsp;
class PartCopyRspDefaultTypeInternal;
extern PartCopyRspDefaultTypeInternal _PartCopyRsp_default_instance_;
class PutObjCopyReq;
class PutObjCopyReqDefaultTypeInternal;
extern PutObjCopyReqDefaultTypeInternal _PutObjCopyReq_default_instance_;
class PutObjCopyRsp;
class PutObjCopyRspDefaultTypeInternal;
extern PutObjCopyRspDefaultTypeInternal _PutObjCopyRsp_default_instance_;
class SseCInfo;
class SseCInfoDefaultTypeInternal;
extern SseCInfoDefaultTypeInternal _SseCInfo_default_instance_;
class TaskProgressReq;
class TaskProgressReqDefaultTypeInternal;
extern TaskProgressReqDefaultTypeInternal _TaskProgressReq_default_instance_;
class TaskProgressRsp;
class TaskProgressRspDefaultTypeInternal;
extern TaskProgressRspDefaultTypeInternal _TaskProgressRsp_default_instance_;
class TransferNotify;
class TransferNotifyDefaultTypeInternal;
extern TransferNotifyDefaultTypeInternal _TransferNotify_default_instance_;
class TransferNotifyRsp;
class TransferNotifyRspDefaultTypeInternal;
extern TransferNotifyRspDefaultTypeInternal _TransferNotifyRsp_default_instance_;
class TrsfSseInfo;
class TrsfSseInfoDefaultTypeInternal;
extern TrsfSseInfoDefaultTypeInternal _TrsfSseInfo_default_instance_;
}  // namespace FTN
PROTOBUF_NAMESPACE_OPEN
template<> ::FTN::CosTransferReqMsg* Arena::CreateMaybeMessage<::FTN::CosTransferReqMsg>(Arena*);
template<> ::FTN::CosTransferRspMsg* Arena::CreateMaybeMessage<::FTN::CosTransferRspMsg>(Arena*);
template<> ::FTN::FileTrsfReq* Arena::CreateMaybeMessage<::FTN::FileTrsfReq>(Arena*);
template<> ::FTN::FileTrsfRsp* Arena::CreateMaybeMessage<::FTN::FileTrsfRsp>(Arena*);
template<> ::FTN::KmsInfo* Arena::CreateMaybeMessage<::FTN::KmsInfo>(Arena*);
template<> ::FTN::MultiRegionList* Arena::CreateMaybeMessage<::FTN::MultiRegionList>(Arena*);
template<> ::FTN::PartCopyFinishReq* Arena::CreateMaybeMessage<::FTN::PartCopyFinishReq>(Arena*);
template<> ::FTN::PartCopyReq* Arena::CreateMaybeMessage<::FTN::PartCopyReq>(Arena*);
template<> ::FTN::PartCopyRsp* Arena::CreateMaybeMessage<::FTN::PartCopyRsp>(Arena*);
template<> ::FTN::PutObjCopyReq* Arena::CreateMaybeMessage<::FTN::PutObjCopyReq>(Arena*);
template<> ::FTN::PutObjCopyRsp* Arena::CreateMaybeMessage<::FTN::PutObjCopyRsp>(Arena*);
template<> ::FTN::SseCInfo* Arena::CreateMaybeMessage<::FTN::SseCInfo>(Arena*);
template<> ::FTN::TaskProgressReq* Arena::CreateMaybeMessage<::FTN::TaskProgressReq>(Arena*);
template<> ::FTN::TaskProgressRsp* Arena::CreateMaybeMessage<::FTN::TaskProgressRsp>(Arena*);
template<> ::FTN::TransferNotify* Arena::CreateMaybeMessage<::FTN::TransferNotify>(Arena*);
template<> ::FTN::TransferNotifyRsp* Arena::CreateMaybeMessage<::FTN::TransferNotifyRsp>(Arena*);
template<> ::FTN::TrsfSseInfo* Arena::CreateMaybeMessage<::FTN::TrsfSseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FTN {

enum CosTransferReqMsg_SubType : int {
  CosTransferReqMsg_SubType_Invalid = 0,
  CosTransferReqMsg_SubType_FileTrsfReq = 1,
  CosTransferReqMsg_SubType_TaskProgressReq = 2,
  CosTransferReqMsg_SubType_PutObjCopyReq = 3,
  CosTransferReqMsg_SubType_PartCopyReq = 4,
  CosTransferReqMsg_SubType_PartCopyFinishReq = 5
};
bool CosTransferReqMsg_SubType_IsValid(int value);
constexpr CosTransferReqMsg_SubType CosTransferReqMsg_SubType_SubType_MIN = CosTransferReqMsg_SubType_Invalid;
constexpr CosTransferReqMsg_SubType CosTransferReqMsg_SubType_SubType_MAX = CosTransferReqMsg_SubType_PartCopyFinishReq;
constexpr int CosTransferReqMsg_SubType_SubType_ARRAYSIZE = CosTransferReqMsg_SubType_SubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CosTransferReqMsg_SubType_descriptor();
template<typename T>
inline const std::string& CosTransferReqMsg_SubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CosTransferReqMsg_SubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CosTransferReqMsg_SubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CosTransferReqMsg_SubType_descriptor(), enum_t_value);
}
inline bool CosTransferReqMsg_SubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CosTransferReqMsg_SubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CosTransferReqMsg_SubType>(
    CosTransferReqMsg_SubType_descriptor(), name, value);
}
enum CosTransferRspMsg_SubType : int {
  CosTransferRspMsg_SubType_Invalid = 0,
  CosTransferRspMsg_SubType_FileTrsfRsp = 1,
  CosTransferRspMsg_SubType_TaskProgressRsp = 2,
  CosTransferRspMsg_SubType_TransferNotify = 3,
  CosTransferRspMsg_SubType_TransferNotifyRsp = 4,
  CosTransferRspMsg_SubType_PutObjCopyRsp = 5,
  CosTransferRspMsg_SubType_PartCopyRsp = 6
};
bool CosTransferRspMsg_SubType_IsValid(int value);
constexpr CosTransferRspMsg_SubType CosTransferRspMsg_SubType_SubType_MIN = CosTransferRspMsg_SubType_Invalid;
constexpr CosTransferRspMsg_SubType CosTransferRspMsg_SubType_SubType_MAX = CosTransferRspMsg_SubType_PartCopyRsp;
constexpr int CosTransferRspMsg_SubType_SubType_ARRAYSIZE = CosTransferRspMsg_SubType_SubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CosTransferRspMsg_SubType_descriptor();
template<typename T>
inline const std::string& CosTransferRspMsg_SubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CosTransferRspMsg_SubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CosTransferRspMsg_SubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CosTransferRspMsg_SubType_descriptor(), enum_t_value);
}
inline bool CosTransferRspMsg_SubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CosTransferRspMsg_SubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CosTransferRspMsg_SubType>(
    CosTransferRspMsg_SubType_descriptor(), name, value);
}
// ===================================================================

class CosTransferReqMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.CosTransferReqMsg) */ {
 public:
  inline CosTransferReqMsg() : CosTransferReqMsg(nullptr) {}
  virtual ~CosTransferReqMsg();

  CosTransferReqMsg(const CosTransferReqMsg& from);
  CosTransferReqMsg(CosTransferReqMsg&& from) noexcept
    : CosTransferReqMsg() {
    *this = ::std::move(from);
  }

  inline CosTransferReqMsg& operator=(const CosTransferReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosTransferReqMsg& operator=(CosTransferReqMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosTransferReqMsg& default_instance();

  static inline const CosTransferReqMsg* internal_default_instance() {
    return reinterpret_cast<const CosTransferReqMsg*>(
               &_CosTransferReqMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CosTransferReqMsg& a, CosTransferReqMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CosTransferReqMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosTransferReqMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosTransferReqMsg* New() const final {
    return CreateMaybeMessage<CosTransferReqMsg>(nullptr);
  }

  CosTransferReqMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosTransferReqMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosTransferReqMsg& from);
  void MergeFrom(const CosTransferReqMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosTransferReqMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.CosTransferReqMsg";
  }
  protected:
  explicit CosTransferReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CosTransferReqMsg_SubType SubType;
  static constexpr SubType Invalid =
    CosTransferReqMsg_SubType_Invalid;
  static constexpr SubType FileTrsfReq =
    CosTransferReqMsg_SubType_FileTrsfReq;
  static constexpr SubType TaskProgressReq =
    CosTransferReqMsg_SubType_TaskProgressReq;
  static constexpr SubType PutObjCopyReq =
    CosTransferReqMsg_SubType_PutObjCopyReq;
  static constexpr SubType PartCopyReq =
    CosTransferReqMsg_SubType_PartCopyReq;
  static constexpr SubType PartCopyFinishReq =
    CosTransferReqMsg_SubType_PartCopyFinishReq;
  static inline bool SubType_IsValid(int value) {
    return CosTransferReqMsg_SubType_IsValid(value);
  }
  static constexpr SubType SubType_MIN =
    CosTransferReqMsg_SubType_SubType_MIN;
  static constexpr SubType SubType_MAX =
    CosTransferReqMsg_SubType_SubType_MAX;
  static constexpr int SubType_ARRAYSIZE =
    CosTransferReqMsg_SubType_SubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubType_descriptor() {
    return CosTransferReqMsg_SubType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubType_Name.");
    return CosTransferReqMsg_SubType_Name(enum_t_value);
  }
  static inline bool SubType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubType* value) {
    return CosTransferReqMsg_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClientipFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kFileTrsfReqBodyFieldNumber = 11,
    kTaskProgressReqBodyFieldNumber = 12,
    kPutObjCopyReqBodyFieldNumber = 13,
    kPartCopyReqBodyFieldNumber = 14,
    kPartCopyFinishReqBodyFieldNumber = 15,
    kSubTypeFieldNumber = 10,
  };
  // required string clientip = 1;
  bool has_clientip() const;
  private:
  bool _internal_has_clientip() const;
  public:
  void clear_clientip();
  const std::string& clientip() const;
  void set_clientip(const std::string& value);
  void set_clientip(std::string&& value);
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  std::string* mutable_clientip();
  std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // optional string request_id = 2;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional .FTN.FileTrsfReq FileTrsfReq_body = 11;
  bool has_filetrsfreq_body() const;
  private:
  bool _internal_has_filetrsfreq_body() const;
  public:
  void clear_filetrsfreq_body();
  const ::FTN::FileTrsfReq& filetrsfreq_body() const;
  ::FTN::FileTrsfReq* release_filetrsfreq_body();
  ::FTN::FileTrsfReq* mutable_filetrsfreq_body();
  void set_allocated_filetrsfreq_body(::FTN::FileTrsfReq* filetrsfreq_body);
  private:
  const ::FTN::FileTrsfReq& _internal_filetrsfreq_body() const;
  ::FTN::FileTrsfReq* _internal_mutable_filetrsfreq_body();
  public:
  void unsafe_arena_set_allocated_filetrsfreq_body(
      ::FTN::FileTrsfReq* filetrsfreq_body);
  ::FTN::FileTrsfReq* unsafe_arena_release_filetrsfreq_body();

  // optional .FTN.TaskProgressReq TaskProgressReq_body = 12;
  bool has_taskprogressreq_body() const;
  private:
  bool _internal_has_taskprogressreq_body() const;
  public:
  void clear_taskprogressreq_body();
  const ::FTN::TaskProgressReq& taskprogressreq_body() const;
  ::FTN::TaskProgressReq* release_taskprogressreq_body();
  ::FTN::TaskProgressReq* mutable_taskprogressreq_body();
  void set_allocated_taskprogressreq_body(::FTN::TaskProgressReq* taskprogressreq_body);
  private:
  const ::FTN::TaskProgressReq& _internal_taskprogressreq_body() const;
  ::FTN::TaskProgressReq* _internal_mutable_taskprogressreq_body();
  public:
  void unsafe_arena_set_allocated_taskprogressreq_body(
      ::FTN::TaskProgressReq* taskprogressreq_body);
  ::FTN::TaskProgressReq* unsafe_arena_release_taskprogressreq_body();

  // optional .FTN.PutObjCopyReq PutObjCopyReq_body = 13;
  bool has_putobjcopyreq_body() const;
  private:
  bool _internal_has_putobjcopyreq_body() const;
  public:
  void clear_putobjcopyreq_body();
  const ::FTN::PutObjCopyReq& putobjcopyreq_body() const;
  ::FTN::PutObjCopyReq* release_putobjcopyreq_body();
  ::FTN::PutObjCopyReq* mutable_putobjcopyreq_body();
  void set_allocated_putobjcopyreq_body(::FTN::PutObjCopyReq* putobjcopyreq_body);
  private:
  const ::FTN::PutObjCopyReq& _internal_putobjcopyreq_body() const;
  ::FTN::PutObjCopyReq* _internal_mutable_putobjcopyreq_body();
  public:
  void unsafe_arena_set_allocated_putobjcopyreq_body(
      ::FTN::PutObjCopyReq* putobjcopyreq_body);
  ::FTN::PutObjCopyReq* unsafe_arena_release_putobjcopyreq_body();

  // optional .FTN.PartCopyReq PartCopyReq_body = 14;
  bool has_partcopyreq_body() const;
  private:
  bool _internal_has_partcopyreq_body() const;
  public:
  void clear_partcopyreq_body();
  const ::FTN::PartCopyReq& partcopyreq_body() const;
  ::FTN::PartCopyReq* release_partcopyreq_body();
  ::FTN::PartCopyReq* mutable_partcopyreq_body();
  void set_allocated_partcopyreq_body(::FTN::PartCopyReq* partcopyreq_body);
  private:
  const ::FTN::PartCopyReq& _internal_partcopyreq_body() const;
  ::FTN::PartCopyReq* _internal_mutable_partcopyreq_body();
  public:
  void unsafe_arena_set_allocated_partcopyreq_body(
      ::FTN::PartCopyReq* partcopyreq_body);
  ::FTN::PartCopyReq* unsafe_arena_release_partcopyreq_body();

  // optional .FTN.PartCopyFinishReq PartCopyFinishReq_body = 15;
  bool has_partcopyfinishreq_body() const;
  private:
  bool _internal_has_partcopyfinishreq_body() const;
  public:
  void clear_partcopyfinishreq_body();
  const ::FTN::PartCopyFinishReq& partcopyfinishreq_body() const;
  ::FTN::PartCopyFinishReq* release_partcopyfinishreq_body();
  ::FTN::PartCopyFinishReq* mutable_partcopyfinishreq_body();
  void set_allocated_partcopyfinishreq_body(::FTN::PartCopyFinishReq* partcopyfinishreq_body);
  private:
  const ::FTN::PartCopyFinishReq& _internal_partcopyfinishreq_body() const;
  ::FTN::PartCopyFinishReq* _internal_mutable_partcopyfinishreq_body();
  public:
  void unsafe_arena_set_allocated_partcopyfinishreq_body(
      ::FTN::PartCopyFinishReq* partcopyfinishreq_body);
  ::FTN::PartCopyFinishReq* unsafe_arena_release_partcopyfinishreq_body();

  // required .FTN.CosTransferReqMsg.SubType sub_type = 10;
  bool has_sub_type() const;
  private:
  bool _internal_has_sub_type() const;
  public:
  void clear_sub_type();
  ::FTN::CosTransferReqMsg_SubType sub_type() const;
  void set_sub_type(::FTN::CosTransferReqMsg_SubType value);
  private:
  ::FTN::CosTransferReqMsg_SubType _internal_sub_type() const;
  void _internal_set_sub_type(::FTN::CosTransferReqMsg_SubType value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.CosTransferReqMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::FTN::FileTrsfReq* filetrsfreq_body_;
  ::FTN::TaskProgressReq* taskprogressreq_body_;
  ::FTN::PutObjCopyReq* putobjcopyreq_body_;
  ::FTN::PartCopyReq* partcopyreq_body_;
  ::FTN::PartCopyFinishReq* partcopyfinishreq_body_;
  int sub_type_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class CosTransferRspMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.CosTransferRspMsg) */ {
 public:
  inline CosTransferRspMsg() : CosTransferRspMsg(nullptr) {}
  virtual ~CosTransferRspMsg();

  CosTransferRspMsg(const CosTransferRspMsg& from);
  CosTransferRspMsg(CosTransferRspMsg&& from) noexcept
    : CosTransferRspMsg() {
    *this = ::std::move(from);
  }

  inline CosTransferRspMsg& operator=(const CosTransferRspMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosTransferRspMsg& operator=(CosTransferRspMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosTransferRspMsg& default_instance();

  static inline const CosTransferRspMsg* internal_default_instance() {
    return reinterpret_cast<const CosTransferRspMsg*>(
               &_CosTransferRspMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CosTransferRspMsg& a, CosTransferRspMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CosTransferRspMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosTransferRspMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosTransferRspMsg* New() const final {
    return CreateMaybeMessage<CosTransferRspMsg>(nullptr);
  }

  CosTransferRspMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosTransferRspMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosTransferRspMsg& from);
  void MergeFrom(const CosTransferRspMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosTransferRspMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.CosTransferRspMsg";
  }
  protected:
  explicit CosTransferRspMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CosTransferRspMsg_SubType SubType;
  static constexpr SubType Invalid =
    CosTransferRspMsg_SubType_Invalid;
  static constexpr SubType FileTrsfRsp =
    CosTransferRspMsg_SubType_FileTrsfRsp;
  static constexpr SubType TaskProgressRsp =
    CosTransferRspMsg_SubType_TaskProgressRsp;
  static constexpr SubType TransferNotify =
    CosTransferRspMsg_SubType_TransferNotify;
  static constexpr SubType TransferNotifyRsp =
    CosTransferRspMsg_SubType_TransferNotifyRsp;
  static constexpr SubType PutObjCopyRsp =
    CosTransferRspMsg_SubType_PutObjCopyRsp;
  static constexpr SubType PartCopyRsp =
    CosTransferRspMsg_SubType_PartCopyRsp;
  static inline bool SubType_IsValid(int value) {
    return CosTransferRspMsg_SubType_IsValid(value);
  }
  static constexpr SubType SubType_MIN =
    CosTransferRspMsg_SubType_SubType_MIN;
  static constexpr SubType SubType_MAX =
    CosTransferRspMsg_SubType_SubType_MAX;
  static constexpr int SubType_ARRAYSIZE =
    CosTransferRspMsg_SubType_SubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubType_descriptor() {
    return CosTransferRspMsg_SubType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubType_Name.");
    return CosTransferRspMsg_SubType_Name(enum_t_value);
  }
  static inline bool SubType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubType* value) {
    return CosTransferRspMsg_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetmsgFieldNumber = 2,
    kFileTrsfRspBodyFieldNumber = 11,
    kTaskProgressRspBodyFieldNumber = 12,
    kTransferNotifyBodyFieldNumber = 13,
    kTransferNotifyRspBodyFieldNumber = 14,
    kPutObjCopyRspBodyFieldNumber = 15,
    kPartCopyRspBodyFieldNumber = 16,
    kRetcodeFieldNumber = 1,
    kSubTypeFieldNumber = 10,
  };
  // required string retmsg = 2;
  bool has_retmsg() const;
  private:
  bool _internal_has_retmsg() const;
  public:
  void clear_retmsg();
  const std::string& retmsg() const;
  void set_retmsg(const std::string& value);
  void set_retmsg(std::string&& value);
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  std::string* mutable_retmsg();
  std::string* release_retmsg();
  void set_allocated_retmsg(std::string* retmsg);
  private:
  const std::string& _internal_retmsg() const;
  void _internal_set_retmsg(const std::string& value);
  std::string* _internal_mutable_retmsg();
  public:

  // optional .FTN.FileTrsfRsp FileTrsfRsp_body = 11;
  bool has_filetrsfrsp_body() const;
  private:
  bool _internal_has_filetrsfrsp_body() const;
  public:
  void clear_filetrsfrsp_body();
  const ::FTN::FileTrsfRsp& filetrsfrsp_body() const;
  ::FTN::FileTrsfRsp* release_filetrsfrsp_body();
  ::FTN::FileTrsfRsp* mutable_filetrsfrsp_body();
  void set_allocated_filetrsfrsp_body(::FTN::FileTrsfRsp* filetrsfrsp_body);
  private:
  const ::FTN::FileTrsfRsp& _internal_filetrsfrsp_body() const;
  ::FTN::FileTrsfRsp* _internal_mutable_filetrsfrsp_body();
  public:
  void unsafe_arena_set_allocated_filetrsfrsp_body(
      ::FTN::FileTrsfRsp* filetrsfrsp_body);
  ::FTN::FileTrsfRsp* unsafe_arena_release_filetrsfrsp_body();

  // optional .FTN.TaskProgressRsp TaskProgressRsp_body = 12;
  bool has_taskprogressrsp_body() const;
  private:
  bool _internal_has_taskprogressrsp_body() const;
  public:
  void clear_taskprogressrsp_body();
  const ::FTN::TaskProgressRsp& taskprogressrsp_body() const;
  ::FTN::TaskProgressRsp* release_taskprogressrsp_body();
  ::FTN::TaskProgressRsp* mutable_taskprogressrsp_body();
  void set_allocated_taskprogressrsp_body(::FTN::TaskProgressRsp* taskprogressrsp_body);
  private:
  const ::FTN::TaskProgressRsp& _internal_taskprogressrsp_body() const;
  ::FTN::TaskProgressRsp* _internal_mutable_taskprogressrsp_body();
  public:
  void unsafe_arena_set_allocated_taskprogressrsp_body(
      ::FTN::TaskProgressRsp* taskprogressrsp_body);
  ::FTN::TaskProgressRsp* unsafe_arena_release_taskprogressrsp_body();

  // optional .FTN.TransferNotify TransferNotify_body = 13;
  bool has_transfernotify_body() const;
  private:
  bool _internal_has_transfernotify_body() const;
  public:
  void clear_transfernotify_body();
  const ::FTN::TransferNotify& transfernotify_body() const;
  ::FTN::TransferNotify* release_transfernotify_body();
  ::FTN::TransferNotify* mutable_transfernotify_body();
  void set_allocated_transfernotify_body(::FTN::TransferNotify* transfernotify_body);
  private:
  const ::FTN::TransferNotify& _internal_transfernotify_body() const;
  ::FTN::TransferNotify* _internal_mutable_transfernotify_body();
  public:
  void unsafe_arena_set_allocated_transfernotify_body(
      ::FTN::TransferNotify* transfernotify_body);
  ::FTN::TransferNotify* unsafe_arena_release_transfernotify_body();

  // optional .FTN.TransferNotifyRsp TransferNotifyRsp_body = 14;
  bool has_transfernotifyrsp_body() const;
  private:
  bool _internal_has_transfernotifyrsp_body() const;
  public:
  void clear_transfernotifyrsp_body();
  const ::FTN::TransferNotifyRsp& transfernotifyrsp_body() const;
  ::FTN::TransferNotifyRsp* release_transfernotifyrsp_body();
  ::FTN::TransferNotifyRsp* mutable_transfernotifyrsp_body();
  void set_allocated_transfernotifyrsp_body(::FTN::TransferNotifyRsp* transfernotifyrsp_body);
  private:
  const ::FTN::TransferNotifyRsp& _internal_transfernotifyrsp_body() const;
  ::FTN::TransferNotifyRsp* _internal_mutable_transfernotifyrsp_body();
  public:
  void unsafe_arena_set_allocated_transfernotifyrsp_body(
      ::FTN::TransferNotifyRsp* transfernotifyrsp_body);
  ::FTN::TransferNotifyRsp* unsafe_arena_release_transfernotifyrsp_body();

  // optional .FTN.PutObjCopyRsp PutObjCopyRsp_body = 15;
  bool has_putobjcopyrsp_body() const;
  private:
  bool _internal_has_putobjcopyrsp_body() const;
  public:
  void clear_putobjcopyrsp_body();
  const ::FTN::PutObjCopyRsp& putobjcopyrsp_body() const;
  ::FTN::PutObjCopyRsp* release_putobjcopyrsp_body();
  ::FTN::PutObjCopyRsp* mutable_putobjcopyrsp_body();
  void set_allocated_putobjcopyrsp_body(::FTN::PutObjCopyRsp* putobjcopyrsp_body);
  private:
  const ::FTN::PutObjCopyRsp& _internal_putobjcopyrsp_body() const;
  ::FTN::PutObjCopyRsp* _internal_mutable_putobjcopyrsp_body();
  public:
  void unsafe_arena_set_allocated_putobjcopyrsp_body(
      ::FTN::PutObjCopyRsp* putobjcopyrsp_body);
  ::FTN::PutObjCopyRsp* unsafe_arena_release_putobjcopyrsp_body();

  // optional .FTN.PartCopyRsp PartCopyRsp_body = 16;
  bool has_partcopyrsp_body() const;
  private:
  bool _internal_has_partcopyrsp_body() const;
  public:
  void clear_partcopyrsp_body();
  const ::FTN::PartCopyRsp& partcopyrsp_body() const;
  ::FTN::PartCopyRsp* release_partcopyrsp_body();
  ::FTN::PartCopyRsp* mutable_partcopyrsp_body();
  void set_allocated_partcopyrsp_body(::FTN::PartCopyRsp* partcopyrsp_body);
  private:
  const ::FTN::PartCopyRsp& _internal_partcopyrsp_body() const;
  ::FTN::PartCopyRsp* _internal_mutable_partcopyrsp_body();
  public:
  void unsafe_arena_set_allocated_partcopyrsp_body(
      ::FTN::PartCopyRsp* partcopyrsp_body);
  ::FTN::PartCopyRsp* unsafe_arena_release_partcopyrsp_body();

  // required int32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::int32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .FTN.CosTransferRspMsg.SubType sub_type = 10;
  bool has_sub_type() const;
  private:
  bool _internal_has_sub_type() const;
  public:
  void clear_sub_type();
  ::FTN::CosTransferRspMsg_SubType sub_type() const;
  void set_sub_type(::FTN::CosTransferRspMsg_SubType value);
  private:
  ::FTN::CosTransferRspMsg_SubType _internal_sub_type() const;
  void _internal_set_sub_type(::FTN::CosTransferRspMsg_SubType value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.CosTransferRspMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retmsg_;
  ::FTN::FileTrsfRsp* filetrsfrsp_body_;
  ::FTN::TaskProgressRsp* taskprogressrsp_body_;
  ::FTN::TransferNotify* transfernotify_body_;
  ::FTN::TransferNotifyRsp* transfernotifyrsp_body_;
  ::FTN::PutObjCopyRsp* putobjcopyrsp_body_;
  ::FTN::PartCopyRsp* partcopyrsp_body_;
  ::PROTOBUF_NAMESPACE_ID::int32 retcode_;
  int sub_type_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class FileTrsfReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.FileTrsfReq) */ {
 public:
  inline FileTrsfReq() : FileTrsfReq(nullptr) {}
  virtual ~FileTrsfReq();

  FileTrsfReq(const FileTrsfReq& from);
  FileTrsfReq(FileTrsfReq&& from) noexcept
    : FileTrsfReq() {
    *this = ::std::move(from);
  }

  inline FileTrsfReq& operator=(const FileTrsfReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTrsfReq& operator=(FileTrsfReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileTrsfReq& default_instance();

  static inline const FileTrsfReq* internal_default_instance() {
    return reinterpret_cast<const FileTrsfReq*>(
               &_FileTrsfReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileTrsfReq& a, FileTrsfReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTrsfReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTrsfReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileTrsfReq* New() const final {
    return CreateMaybeMessage<FileTrsfReq>(nullptr);
  }

  FileTrsfReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileTrsfReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileTrsfReq& from);
  void MergeFrom(const FileTrsfReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTrsfReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.FileTrsfReq";
  }
  protected:
  explicit FileTrsfReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcpathFieldNumber = 1,
    kSrcidcFieldNumber = 2,
    kStoragetypeFieldNumber = 3,
    kDstpathFieldNumber = 4,
    kDstidcFieldNumber = 5,
    kNotifyipFieldNumber = 12,
    kVersionFieldNumber = 15,
    kDstUploadkeyFieldNumber = 18,
    kPartVerifyContentFieldNumber = 23,
    kCgiArgsFieldNumber = 26,
    kSseinfoFieldNumber = 20,
    kUploadattrFieldNumber = 21,
    kRegionListFieldNumber = 24,
    kSrcstartRangeFieldNumber = 8,
    kSrcendRangeFieldNumber = 9,
    kDelsrcFieldNumber = 6,
    kSetReplicationFieldNumber = 7,
    kNotifyflagFieldNumber = 11,
    kNotifyportFieldNumber = 13,
    kDststartRangeFieldNumber = 10,
    kDstBlockNumFieldNumber = 19,
    kNotifysmcdFieldNumber = 14,
    kMultiRegionSeqFieldNumber = 25,
    kSrcPlatformTypeFieldNumber = 22,
    kRetryTimesFieldNumber = 16,
    kPlatformTypeFieldNumber = 17,
  };
  // required string srcpath = 1;
  bool has_srcpath() const;
  private:
  bool _internal_has_srcpath() const;
  public:
  void clear_srcpath();
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);
  private:
  const std::string& _internal_srcpath() const;
  void _internal_set_srcpath(const std::string& value);
  std::string* _internal_mutable_srcpath();
  public:

  // required string srcidc = 2;
  bool has_srcidc() const;
  private:
  bool _internal_has_srcidc() const;
  public:
  void clear_srcidc();
  const std::string& srcidc() const;
  void set_srcidc(const std::string& value);
  void set_srcidc(std::string&& value);
  void set_srcidc(const char* value);
  void set_srcidc(const char* value, size_t size);
  std::string* mutable_srcidc();
  std::string* release_srcidc();
  void set_allocated_srcidc(std::string* srcidc);
  private:
  const std::string& _internal_srcidc() const;
  void _internal_set_srcidc(const std::string& value);
  std::string* _internal_mutable_srcidc();
  public:

  // required string storagetype = 3;
  bool has_storagetype() const;
  private:
  bool _internal_has_storagetype() const;
  public:
  void clear_storagetype();
  const std::string& storagetype() const;
  void set_storagetype(const std::string& value);
  void set_storagetype(std::string&& value);
  void set_storagetype(const char* value);
  void set_storagetype(const char* value, size_t size);
  std::string* mutable_storagetype();
  std::string* release_storagetype();
  void set_allocated_storagetype(std::string* storagetype);
  private:
  const std::string& _internal_storagetype() const;
  void _internal_set_storagetype(const std::string& value);
  std::string* _internal_mutable_storagetype();
  public:

  // required string dstpath = 4;
  bool has_dstpath() const;
  private:
  bool _internal_has_dstpath() const;
  public:
  void clear_dstpath();
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);
  private:
  const std::string& _internal_dstpath() const;
  void _internal_set_dstpath(const std::string& value);
  std::string* _internal_mutable_dstpath();
  public:

  // required string dstidc = 5;
  bool has_dstidc() const;
  private:
  bool _internal_has_dstidc() const;
  public:
  void clear_dstidc();
  const std::string& dstidc() const;
  void set_dstidc(const std::string& value);
  void set_dstidc(std::string&& value);
  void set_dstidc(const char* value);
  void set_dstidc(const char* value, size_t size);
  std::string* mutable_dstidc();
  std::string* release_dstidc();
  void set_allocated_dstidc(std::string* dstidc);
  private:
  const std::string& _internal_dstidc() const;
  void _internal_set_dstidc(const std::string& value);
  std::string* _internal_mutable_dstidc();
  public:

  // optional string notifyip = 12;
  bool has_notifyip() const;
  private:
  bool _internal_has_notifyip() const;
  public:
  void clear_notifyip();
  const std::string& notifyip() const;
  void set_notifyip(const std::string& value);
  void set_notifyip(std::string&& value);
  void set_notifyip(const char* value);
  void set_notifyip(const char* value, size_t size);
  std::string* mutable_notifyip();
  std::string* release_notifyip();
  void set_allocated_notifyip(std::string* notifyip);
  private:
  const std::string& _internal_notifyip() const;
  void _internal_set_notifyip(const std::string& value);
  std::string* _internal_mutable_notifyip();
  public:

  // optional string version = 15;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string dst_uploadkey = 18;
  bool has_dst_uploadkey() const;
  private:
  bool _internal_has_dst_uploadkey() const;
  public:
  void clear_dst_uploadkey();
  const std::string& dst_uploadkey() const;
  void set_dst_uploadkey(const std::string& value);
  void set_dst_uploadkey(std::string&& value);
  void set_dst_uploadkey(const char* value);
  void set_dst_uploadkey(const char* value, size_t size);
  std::string* mutable_dst_uploadkey();
  std::string* release_dst_uploadkey();
  void set_allocated_dst_uploadkey(std::string* dst_uploadkey);
  private:
  const std::string& _internal_dst_uploadkey() const;
  void _internal_set_dst_uploadkey(const std::string& value);
  std::string* _internal_mutable_dst_uploadkey();
  public:

  // optional string part_verify_content = 23;
  bool has_part_verify_content() const;
  private:
  bool _internal_has_part_verify_content() const;
  public:
  void clear_part_verify_content();
  const std::string& part_verify_content() const;
  void set_part_verify_content(const std::string& value);
  void set_part_verify_content(std::string&& value);
  void set_part_verify_content(const char* value);
  void set_part_verify_content(const char* value, size_t size);
  std::string* mutable_part_verify_content();
  std::string* release_part_verify_content();
  void set_allocated_part_verify_content(std::string* part_verify_content);
  private:
  const std::string& _internal_part_verify_content() const;
  void _internal_set_part_verify_content(const std::string& value);
  std::string* _internal_mutable_part_verify_content();
  public:

  // optional bytes cgi_args = 26;
  bool has_cgi_args() const;
  private:
  bool _internal_has_cgi_args() const;
  public:
  void clear_cgi_args();
  const std::string& cgi_args() const;
  void set_cgi_args(const std::string& value);
  void set_cgi_args(std::string&& value);
  void set_cgi_args(const char* value);
  void set_cgi_args(const void* value, size_t size);
  std::string* mutable_cgi_args();
  std::string* release_cgi_args();
  void set_allocated_cgi_args(std::string* cgi_args);
  private:
  const std::string& _internal_cgi_args() const;
  void _internal_set_cgi_args(const std::string& value);
  std::string* _internal_mutable_cgi_args();
  public:

  // optional .FTN.TrsfSseInfo sseinfo = 20;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::FTN::TrsfSseInfo& sseinfo() const;
  ::FTN::TrsfSseInfo* release_sseinfo();
  ::FTN::TrsfSseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo);
  private:
  const ::FTN::TrsfSseInfo& _internal_sseinfo() const;
  ::FTN::TrsfSseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::FTN::TrsfSseInfo* sseinfo);
  ::FTN::TrsfSseInfo* unsafe_arena_release_sseinfo();

  // optional .ClientCos.UploadAttr uploadattr = 21;
  bool has_uploadattr() const;
  private:
  bool _internal_has_uploadattr() const;
  public:
  void clear_uploadattr();
  const ::ClientCos::UploadAttr& uploadattr() const;
  ::ClientCos::UploadAttr* release_uploadattr();
  ::ClientCos::UploadAttr* mutable_uploadattr();
  void set_allocated_uploadattr(::ClientCos::UploadAttr* uploadattr);
  private:
  const ::ClientCos::UploadAttr& _internal_uploadattr() const;
  ::ClientCos::UploadAttr* _internal_mutable_uploadattr();
  public:
  void unsafe_arena_set_allocated_uploadattr(
      ::ClientCos::UploadAttr* uploadattr);
  ::ClientCos::UploadAttr* unsafe_arena_release_uploadattr();

  // optional .FTN.MultiRegionList region_list = 24;
  bool has_region_list() const;
  private:
  bool _internal_has_region_list() const;
  public:
  void clear_region_list();
  const ::FTN::MultiRegionList& region_list() const;
  ::FTN::MultiRegionList* release_region_list();
  ::FTN::MultiRegionList* mutable_region_list();
  void set_allocated_region_list(::FTN::MultiRegionList* region_list);
  private:
  const ::FTN::MultiRegionList& _internal_region_list() const;
  ::FTN::MultiRegionList* _internal_mutable_region_list();
  public:
  void unsafe_arena_set_allocated_region_list(
      ::FTN::MultiRegionList* region_list);
  ::FTN::MultiRegionList* unsafe_arena_release_region_list();

  // optional uint64 srcstart_range = 8;
  bool has_srcstart_range() const;
  private:
  bool _internal_has_srcstart_range() const;
  public:
  void clear_srcstart_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 srcstart_range() const;
  void set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_srcstart_range() const;
  void _internal_set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 srcend_range = 9;
  bool has_srcend_range() const;
  private:
  bool _internal_has_srcend_range() const;
  public:
  void clear_srcend_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 srcend_range() const;
  void set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_srcend_range() const;
  void _internal_set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool delsrc = 6;
  bool has_delsrc() const;
  private:
  bool _internal_has_delsrc() const;
  public:
  void clear_delsrc();
  bool delsrc() const;
  void set_delsrc(bool value);
  private:
  bool _internal_delsrc() const;
  void _internal_set_delsrc(bool value);
  public:

  // required bool set_replication = 7;
  bool has_set_replication() const;
  private:
  bool _internal_has_set_replication() const;
  public:
  void clear_set_replication();
  bool set_replication() const;
  void set_set_replication(bool value);
  private:
  bool _internal_set_replication() const;
  void _internal_set_set_replication(bool value);
  public:

  // required bool notifyflag = 11 [default = false];
  bool has_notifyflag() const;
  private:
  bool _internal_has_notifyflag() const;
  public:
  void clear_notifyflag();
  bool notifyflag() const;
  void set_notifyflag(bool value);
  private:
  bool _internal_notifyflag() const;
  void _internal_set_notifyflag(bool value);
  public:

  // optional uint32 notifyport = 13;
  bool has_notifyport() const;
  private:
  bool _internal_has_notifyport() const;
  public:
  void clear_notifyport();
  ::PROTOBUF_NAMESPACE_ID::uint32 notifyport() const;
  void set_notifyport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notifyport() const;
  void _internal_set_notifyport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 dststart_range = 10;
  bool has_dststart_range() const;
  private:
  bool _internal_has_dststart_range() const;
  public:
  void clear_dststart_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 dststart_range() const;
  void set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dststart_range() const;
  void _internal_set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 dst_block_num = 19;
  bool has_dst_block_num() const;
  private:
  bool _internal_has_dst_block_num() const;
  public:
  void clear_dst_block_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_block_num() const;
  void set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dst_block_num() const;
  void _internal_set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 notifysmcd = 14;
  bool has_notifysmcd() const;
  private:
  bool _internal_has_notifysmcd() const;
  public:
  void clear_notifysmcd();
  ::PROTOBUF_NAMESPACE_ID::uint32 notifysmcd() const;
  void set_notifysmcd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notifysmcd() const;
  void _internal_set_notifysmcd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 multi_region_seq = 25;
  bool has_multi_region_seq() const;
  private:
  bool _internal_has_multi_region_seq() const;
  public:
  void clear_multi_region_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_region_seq() const;
  void set_multi_region_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multi_region_seq() const;
  void _internal_set_multi_region_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 src_platform_type = 22 [default = 1];
  bool has_src_platform_type() const;
  private:
  bool _internal_has_src_platform_type() const;
  public:
  void clear_src_platform_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_platform_type() const;
  void set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_platform_type() const;
  void _internal_set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 retry_times = 16 [default = 1];
  bool has_retry_times() const;
  private:
  bool _internal_has_retry_times() const;
  public:
  void clear_retry_times();
  ::PROTOBUF_NAMESPACE_ID::uint32 retry_times() const;
  void set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retry_times() const;
  void _internal_set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 platform_type = 17 [default = 1];
  bool has_platform_type() const;
  private:
  bool _internal_has_platform_type() const;
  public:
  void clear_platform_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type() const;
  void set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_platform_type() const;
  void _internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.FileTrsfReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notifyip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_uploadkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_verify_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgi_args_;
  ::FTN::TrsfSseInfo* sseinfo_;
  ::ClientCos::UploadAttr* uploadattr_;
  ::FTN::MultiRegionList* region_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 srcstart_range_;
  ::PROTOBUF_NAMESPACE_ID::uint64 srcend_range_;
  bool delsrc_;
  bool set_replication_;
  bool notifyflag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notifyport_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dststart_range_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notifysmcd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_region_seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_platform_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retry_times_;
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class MultiRegionList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.MultiRegionList) */ {
 public:
  inline MultiRegionList() : MultiRegionList(nullptr) {}
  virtual ~MultiRegionList();

  MultiRegionList(const MultiRegionList& from);
  MultiRegionList(MultiRegionList&& from) noexcept
    : MultiRegionList() {
    *this = ::std::move(from);
  }

  inline MultiRegionList& operator=(const MultiRegionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiRegionList& operator=(MultiRegionList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiRegionList& default_instance();

  static inline const MultiRegionList* internal_default_instance() {
    return reinterpret_cast<const MultiRegionList*>(
               &_MultiRegionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MultiRegionList& a, MultiRegionList& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiRegionList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiRegionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiRegionList* New() const final {
    return CreateMaybeMessage<MultiRegionList>(nullptr);
  }

  MultiRegionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiRegionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiRegionList& from);
  void MergeFrom(const MultiRegionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiRegionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.MultiRegionList";
  }
  protected:
  explicit MultiRegionList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionsFieldNumber = 1,
  };
  // repeated string regions = 1;
  int regions_size() const;
  private:
  int _internal_regions_size() const;
  public:
  void clear_regions();
  const std::string& regions(int index) const;
  std::string* mutable_regions(int index);
  void set_regions(int index, const std::string& value);
  void set_regions(int index, std::string&& value);
  void set_regions(int index, const char* value);
  void set_regions(int index, const char* value, size_t size);
  std::string* add_regions();
  void add_regions(const std::string& value);
  void add_regions(std::string&& value);
  void add_regions(const char* value);
  void add_regions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& regions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_regions();
  private:
  const std::string& _internal_regions(int index) const;
  std::string* _internal_add_regions();
  public:

  // @@protoc_insertion_point(class_scope:FTN.MultiRegionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> regions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class PutObjCopyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.PutObjCopyReq) */ {
 public:
  inline PutObjCopyReq() : PutObjCopyReq(nullptr) {}
  virtual ~PutObjCopyReq();

  PutObjCopyReq(const PutObjCopyReq& from);
  PutObjCopyReq(PutObjCopyReq&& from) noexcept
    : PutObjCopyReq() {
    *this = ::std::move(from);
  }

  inline PutObjCopyReq& operator=(const PutObjCopyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutObjCopyReq& operator=(PutObjCopyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutObjCopyReq& default_instance();

  static inline const PutObjCopyReq* internal_default_instance() {
    return reinterpret_cast<const PutObjCopyReq*>(
               &_PutObjCopyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutObjCopyReq& a, PutObjCopyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PutObjCopyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutObjCopyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutObjCopyReq* New() const final {
    return CreateMaybeMessage<PutObjCopyReq>(nullptr);
  }

  PutObjCopyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutObjCopyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutObjCopyReq& from);
  void MergeFrom(const PutObjCopyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutObjCopyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.PutObjCopyReq";
  }
  protected:
  explicit PutObjCopyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcpathFieldNumber = 1,
    kSrcidcFieldNumber = 2,
    kStoragetypeFieldNumber = 3,
    kDstpathFieldNumber = 4,
    kDstidcFieldNumber = 5,
    kSrcShaFieldNumber = 6,
    kSrcVersionFieldNumber = 10,
    kSrcObjAttrFieldNumber = 11,
    kUinFieldNumber = 15,
    kCgiArgsFieldNumber = 18,
    kSseinfoFieldNumber = 13,
    kUploadattrFieldNumber = 14,
    kFileSizeFieldNumber = 7,
    kSliceSizeFieldNumber = 8,
    kFileTypeFieldNumber = 9,
    kIsModifyCmtimeFieldNumber = 16,
    kPlatformTypeFieldNumber = 12,
    kSrcPlatformTypeFieldNumber = 17,
  };
  // required string srcpath = 1;
  bool has_srcpath() const;
  private:
  bool _internal_has_srcpath() const;
  public:
  void clear_srcpath();
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);
  private:
  const std::string& _internal_srcpath() const;
  void _internal_set_srcpath(const std::string& value);
  std::string* _internal_mutable_srcpath();
  public:

  // required string srcidc = 2;
  bool has_srcidc() const;
  private:
  bool _internal_has_srcidc() const;
  public:
  void clear_srcidc();
  const std::string& srcidc() const;
  void set_srcidc(const std::string& value);
  void set_srcidc(std::string&& value);
  void set_srcidc(const char* value);
  void set_srcidc(const char* value, size_t size);
  std::string* mutable_srcidc();
  std::string* release_srcidc();
  void set_allocated_srcidc(std::string* srcidc);
  private:
  const std::string& _internal_srcidc() const;
  void _internal_set_srcidc(const std::string& value);
  std::string* _internal_mutable_srcidc();
  public:

  // required string storagetype = 3;
  bool has_storagetype() const;
  private:
  bool _internal_has_storagetype() const;
  public:
  void clear_storagetype();
  const std::string& storagetype() const;
  void set_storagetype(const std::string& value);
  void set_storagetype(std::string&& value);
  void set_storagetype(const char* value);
  void set_storagetype(const char* value, size_t size);
  std::string* mutable_storagetype();
  std::string* release_storagetype();
  void set_allocated_storagetype(std::string* storagetype);
  private:
  const std::string& _internal_storagetype() const;
  void _internal_set_storagetype(const std::string& value);
  std::string* _internal_mutable_storagetype();
  public:

  // required string dstpath = 4;
  bool has_dstpath() const;
  private:
  bool _internal_has_dstpath() const;
  public:
  void clear_dstpath();
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);
  private:
  const std::string& _internal_dstpath() const;
  void _internal_set_dstpath(const std::string& value);
  std::string* _internal_mutable_dstpath();
  public:

  // required string dstidc = 5;
  bool has_dstidc() const;
  private:
  bool _internal_has_dstidc() const;
  public:
  void clear_dstidc();
  const std::string& dstidc() const;
  void set_dstidc(const std::string& value);
  void set_dstidc(std::string&& value);
  void set_dstidc(const char* value);
  void set_dstidc(const char* value, size_t size);
  std::string* mutable_dstidc();
  std::string* release_dstidc();
  void set_allocated_dstidc(std::string* dstidc);
  private:
  const std::string& _internal_dstidc() const;
  void _internal_set_dstidc(const std::string& value);
  std::string* _internal_mutable_dstidc();
  public:

  // required string src_sha = 6;
  bool has_src_sha() const;
  private:
  bool _internal_has_src_sha() const;
  public:
  void clear_src_sha();
  const std::string& src_sha() const;
  void set_src_sha(const std::string& value);
  void set_src_sha(std::string&& value);
  void set_src_sha(const char* value);
  void set_src_sha(const char* value, size_t size);
  std::string* mutable_src_sha();
  std::string* release_src_sha();
  void set_allocated_src_sha(std::string* src_sha);
  private:
  const std::string& _internal_src_sha() const;
  void _internal_set_src_sha(const std::string& value);
  std::string* _internal_mutable_src_sha();
  public:

  // optional string src_version = 10;
  bool has_src_version() const;
  private:
  bool _internal_has_src_version() const;
  public:
  void clear_src_version();
  const std::string& src_version() const;
  void set_src_version(const std::string& value);
  void set_src_version(std::string&& value);
  void set_src_version(const char* value);
  void set_src_version(const char* value, size_t size);
  std::string* mutable_src_version();
  std::string* release_src_version();
  void set_allocated_src_version(std::string* src_version);
  private:
  const std::string& _internal_src_version() const;
  void _internal_set_src_version(const std::string& value);
  std::string* _internal_mutable_src_version();
  public:

  // optional bytes src_obj_attr = 11;
  bool has_src_obj_attr() const;
  private:
  bool _internal_has_src_obj_attr() const;
  public:
  void clear_src_obj_attr();
  const std::string& src_obj_attr() const;
  void set_src_obj_attr(const std::string& value);
  void set_src_obj_attr(std::string&& value);
  void set_src_obj_attr(const char* value);
  void set_src_obj_attr(const void* value, size_t size);
  std::string* mutable_src_obj_attr();
  std::string* release_src_obj_attr();
  void set_allocated_src_obj_attr(std::string* src_obj_attr);
  private:
  const std::string& _internal_src_obj_attr() const;
  void _internal_set_src_obj_attr(const std::string& value);
  std::string* _internal_mutable_src_obj_attr();
  public:

  // optional string uin = 15;
  bool has_uin() const;
  private:
  bool _internal_has_uin() const;
  public:
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const char* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // optional bytes cgi_args = 18;
  bool has_cgi_args() const;
  private:
  bool _internal_has_cgi_args() const;
  public:
  void clear_cgi_args();
  const std::string& cgi_args() const;
  void set_cgi_args(const std::string& value);
  void set_cgi_args(std::string&& value);
  void set_cgi_args(const char* value);
  void set_cgi_args(const void* value, size_t size);
  std::string* mutable_cgi_args();
  std::string* release_cgi_args();
  void set_allocated_cgi_args(std::string* cgi_args);
  private:
  const std::string& _internal_cgi_args() const;
  void _internal_set_cgi_args(const std::string& value);
  std::string* _internal_mutable_cgi_args();
  public:

  // optional .FTN.TrsfSseInfo sseinfo = 13;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::FTN::TrsfSseInfo& sseinfo() const;
  ::FTN::TrsfSseInfo* release_sseinfo();
  ::FTN::TrsfSseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo);
  private:
  const ::FTN::TrsfSseInfo& _internal_sseinfo() const;
  ::FTN::TrsfSseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::FTN::TrsfSseInfo* sseinfo);
  ::FTN::TrsfSseInfo* unsafe_arena_release_sseinfo();

  // optional .ClientCos.UploadAttr uploadattr = 14;
  bool has_uploadattr() const;
  private:
  bool _internal_has_uploadattr() const;
  public:
  void clear_uploadattr();
  const ::ClientCos::UploadAttr& uploadattr() const;
  ::ClientCos::UploadAttr* release_uploadattr();
  ::ClientCos::UploadAttr* mutable_uploadattr();
  void set_allocated_uploadattr(::ClientCos::UploadAttr* uploadattr);
  private:
  const ::ClientCos::UploadAttr& _internal_uploadattr() const;
  ::ClientCos::UploadAttr* _internal_mutable_uploadattr();
  public:
  void unsafe_arena_set_allocated_uploadattr(
      ::ClientCos::UploadAttr* uploadattr);
  ::ClientCos::UploadAttr* unsafe_arena_release_uploadattr();

  // required uint64 file_size = 7;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 slice_size = 8;
  bool has_slice_size() const;
  private:
  bool _internal_has_slice_size() const;
  public:
  void clear_slice_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_size() const;
  void set_slice_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_slice_size() const;
  void _internal_set_slice_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 file_type = 9;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type() const;
  void set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_type() const;
  void _internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_modify_cmtime = 16 [default = false];
  bool has_is_modify_cmtime() const;
  private:
  bool _internal_has_is_modify_cmtime() const;
  public:
  void clear_is_modify_cmtime();
  bool is_modify_cmtime() const;
  void set_is_modify_cmtime(bool value);
  private:
  bool _internal_is_modify_cmtime() const;
  void _internal_set_is_modify_cmtime(bool value);
  public:

  // optional uint32 platform_type = 12 [default = 1];
  bool has_platform_type() const;
  private:
  bool _internal_has_platform_type() const;
  public:
  void clear_platform_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type() const;
  void set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_platform_type() const;
  void _internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 src_platform_type = 17 [default = 1];
  bool has_src_platform_type() const;
  private:
  bool _internal_has_src_platform_type() const;
  public:
  void clear_src_platform_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_platform_type() const;
  void set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_platform_type() const;
  void _internal_set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.PutObjCopyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_obj_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgi_args_;
  ::FTN::TrsfSseInfo* sseinfo_;
  ::ClientCos::UploadAttr* uploadattr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type_;
  bool is_modify_cmtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_platform_type_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class PartCopyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.PartCopyReq) */ {
 public:
  inline PartCopyReq() : PartCopyReq(nullptr) {}
  virtual ~PartCopyReq();

  PartCopyReq(const PartCopyReq& from);
  PartCopyReq(PartCopyReq&& from) noexcept
    : PartCopyReq() {
    *this = ::std::move(from);
  }

  inline PartCopyReq& operator=(const PartCopyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartCopyReq& operator=(PartCopyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartCopyReq& default_instance();

  static inline const PartCopyReq* internal_default_instance() {
    return reinterpret_cast<const PartCopyReq*>(
               &_PartCopyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PartCopyReq& a, PartCopyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PartCopyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartCopyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartCopyReq* New() const final {
    return CreateMaybeMessage<PartCopyReq>(nullptr);
  }

  PartCopyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartCopyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartCopyReq& from);
  void MergeFrom(const PartCopyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartCopyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.PartCopyReq";
  }
  protected:
  explicit PartCopyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcpathFieldNumber = 1,
    kSrcidcFieldNumber = 2,
    kDstpathFieldNumber = 3,
    kDstidcFieldNumber = 4,
    kSrcVersionFieldNumber = 7,
    kDstUploadkeyFieldNumber = 10,
    kSseinfoFieldNumber = 13,
    kSrcFileSizeFieldNumber = 5,
    kSrcstartRangeFieldNumber = 8,
    kSrcendRangeFieldNumber = 9,
    kDstBlockNumFieldNumber = 11,
    kPlatformTypeFieldNumber = 6,
    kSrcPlatformTypeFieldNumber = 12,
  };
  // required string srcpath = 1;
  bool has_srcpath() const;
  private:
  bool _internal_has_srcpath() const;
  public:
  void clear_srcpath();
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);
  private:
  const std::string& _internal_srcpath() const;
  void _internal_set_srcpath(const std::string& value);
  std::string* _internal_mutable_srcpath();
  public:

  // required string srcidc = 2;
  bool has_srcidc() const;
  private:
  bool _internal_has_srcidc() const;
  public:
  void clear_srcidc();
  const std::string& srcidc() const;
  void set_srcidc(const std::string& value);
  void set_srcidc(std::string&& value);
  void set_srcidc(const char* value);
  void set_srcidc(const char* value, size_t size);
  std::string* mutable_srcidc();
  std::string* release_srcidc();
  void set_allocated_srcidc(std::string* srcidc);
  private:
  const std::string& _internal_srcidc() const;
  void _internal_set_srcidc(const std::string& value);
  std::string* _internal_mutable_srcidc();
  public:

  // required string dstpath = 3;
  bool has_dstpath() const;
  private:
  bool _internal_has_dstpath() const;
  public:
  void clear_dstpath();
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);
  private:
  const std::string& _internal_dstpath() const;
  void _internal_set_dstpath(const std::string& value);
  std::string* _internal_mutable_dstpath();
  public:

  // required string dstidc = 4;
  bool has_dstidc() const;
  private:
  bool _internal_has_dstidc() const;
  public:
  void clear_dstidc();
  const std::string& dstidc() const;
  void set_dstidc(const std::string& value);
  void set_dstidc(std::string&& value);
  void set_dstidc(const char* value);
  void set_dstidc(const char* value, size_t size);
  std::string* mutable_dstidc();
  std::string* release_dstidc();
  void set_allocated_dstidc(std::string* dstidc);
  private:
  const std::string& _internal_dstidc() const;
  void _internal_set_dstidc(const std::string& value);
  std::string* _internal_mutable_dstidc();
  public:

  // optional string src_version = 7;
  bool has_src_version() const;
  private:
  bool _internal_has_src_version() const;
  public:
  void clear_src_version();
  const std::string& src_version() const;
  void set_src_version(const std::string& value);
  void set_src_version(std::string&& value);
  void set_src_version(const char* value);
  void set_src_version(const char* value, size_t size);
  std::string* mutable_src_version();
  std::string* release_src_version();
  void set_allocated_src_version(std::string* src_version);
  private:
  const std::string& _internal_src_version() const;
  void _internal_set_src_version(const std::string& value);
  std::string* _internal_mutable_src_version();
  public:

  // required string dst_uploadkey = 10;
  bool has_dst_uploadkey() const;
  private:
  bool _internal_has_dst_uploadkey() const;
  public:
  void clear_dst_uploadkey();
  const std::string& dst_uploadkey() const;
  void set_dst_uploadkey(const std::string& value);
  void set_dst_uploadkey(std::string&& value);
  void set_dst_uploadkey(const char* value);
  void set_dst_uploadkey(const char* value, size_t size);
  std::string* mutable_dst_uploadkey();
  std::string* release_dst_uploadkey();
  void set_allocated_dst_uploadkey(std::string* dst_uploadkey);
  private:
  const std::string& _internal_dst_uploadkey() const;
  void _internal_set_dst_uploadkey(const std::string& value);
  std::string* _internal_mutable_dst_uploadkey();
  public:

  // optional .FTN.TrsfSseInfo sseinfo = 13;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::FTN::TrsfSseInfo& sseinfo() const;
  ::FTN::TrsfSseInfo* release_sseinfo();
  ::FTN::TrsfSseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo);
  private:
  const ::FTN::TrsfSseInfo& _internal_sseinfo() const;
  ::FTN::TrsfSseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::FTN::TrsfSseInfo* sseinfo);
  ::FTN::TrsfSseInfo* unsafe_arena_release_sseinfo();

  // required uint64 src_file_size = 5;
  bool has_src_file_size() const;
  private:
  bool _internal_has_src_file_size() const;
  public:
  void clear_src_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 src_file_size() const;
  void set_src_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_src_file_size() const;
  void _internal_set_src_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 srcstart_range = 8;
  bool has_srcstart_range() const;
  private:
  bool _internal_has_srcstart_range() const;
  public:
  void clear_srcstart_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 srcstart_range() const;
  void set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_srcstart_range() const;
  void _internal_set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 srcend_range = 9;
  bool has_srcend_range() const;
  private:
  bool _internal_has_srcend_range() const;
  public:
  void clear_srcend_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 srcend_range() const;
  void set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_srcend_range() const;
  void _internal_set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 dst_block_num = 11;
  bool has_dst_block_num() const;
  private:
  bool _internal_has_dst_block_num() const;
  public:
  void clear_dst_block_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_block_num() const;
  void set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dst_block_num() const;
  void _internal_set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 platform_type = 6 [default = 1];
  bool has_platform_type() const;
  private:
  bool _internal_has_platform_type() const;
  public:
  void clear_platform_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type() const;
  void set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_platform_type() const;
  void _internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 src_platform_type = 12 [default = 1];
  bool has_src_platform_type() const;
  private:
  bool _internal_has_src_platform_type() const;
  public:
  void clear_src_platform_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_platform_type() const;
  void set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_platform_type() const;
  void _internal_set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.PartCopyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_uploadkey_;
  ::FTN::TrsfSseInfo* sseinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 src_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 srcstart_range_;
  ::PROTOBUF_NAMESPACE_ID::uint64 srcend_range_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_platform_type_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class PartCopyFinishReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.PartCopyFinishReq) */ {
 public:
  inline PartCopyFinishReq() : PartCopyFinishReq(nullptr) {}
  virtual ~PartCopyFinishReq();

  PartCopyFinishReq(const PartCopyFinishReq& from);
  PartCopyFinishReq(PartCopyFinishReq&& from) noexcept
    : PartCopyFinishReq() {
    *this = ::std::move(from);
  }

  inline PartCopyFinishReq& operator=(const PartCopyFinishReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartCopyFinishReq& operator=(PartCopyFinishReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartCopyFinishReq& default_instance();

  static inline const PartCopyFinishReq* internal_default_instance() {
    return reinterpret_cast<const PartCopyFinishReq*>(
               &_PartCopyFinishReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PartCopyFinishReq& a, PartCopyFinishReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PartCopyFinishReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartCopyFinishReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartCopyFinishReq* New() const final {
    return CreateMaybeMessage<PartCopyFinishReq>(nullptr);
  }

  PartCopyFinishReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartCopyFinishReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartCopyFinishReq& from);
  void MergeFrom(const PartCopyFinishReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartCopyFinishReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.PartCopyFinishReq";
  }
  protected:
  explicit PartCopyFinishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcfileAttrFieldNumber = 1,
    kUkeyFieldNumber = 2,
    kFinishJsonMessageFieldNumber = 3,
    kSrcpathFieldNumber = 4,
    kSrcidcFieldNumber = 5,
    kDstpathFieldNumber = 6,
    kDstidcFieldNumber = 7,
    kStoragetypeFieldNumber = 8,
    kVersionFieldNumber = 9,
    kRegionListFieldNumber = 13,
    kDelayTimeFieldNumber = 12,
    kPlatformTypeFieldNumber = 10,
    kRetryTimesFieldNumber = 11,
  };
  // required bytes srcfile_attr = 1;
  bool has_srcfile_attr() const;
  private:
  bool _internal_has_srcfile_attr() const;
  public:
  void clear_srcfile_attr();
  const std::string& srcfile_attr() const;
  void set_srcfile_attr(const std::string& value);
  void set_srcfile_attr(std::string&& value);
  void set_srcfile_attr(const char* value);
  void set_srcfile_attr(const void* value, size_t size);
  std::string* mutable_srcfile_attr();
  std::string* release_srcfile_attr();
  void set_allocated_srcfile_attr(std::string* srcfile_attr);
  private:
  const std::string& _internal_srcfile_attr() const;
  void _internal_set_srcfile_attr(const std::string& value);
  std::string* _internal_mutable_srcfile_attr();
  public:

  // required string ukey = 2;
  bool has_ukey() const;
  private:
  bool _internal_has_ukey() const;
  public:
  void clear_ukey();
  const std::string& ukey() const;
  void set_ukey(const std::string& value);
  void set_ukey(std::string&& value);
  void set_ukey(const char* value);
  void set_ukey(const char* value, size_t size);
  std::string* mutable_ukey();
  std::string* release_ukey();
  void set_allocated_ukey(std::string* ukey);
  private:
  const std::string& _internal_ukey() const;
  void _internal_set_ukey(const std::string& value);
  std::string* _internal_mutable_ukey();
  public:

  // required string finish_json_message = 3;
  bool has_finish_json_message() const;
  private:
  bool _internal_has_finish_json_message() const;
  public:
  void clear_finish_json_message();
  const std::string& finish_json_message() const;
  void set_finish_json_message(const std::string& value);
  void set_finish_json_message(std::string&& value);
  void set_finish_json_message(const char* value);
  void set_finish_json_message(const char* value, size_t size);
  std::string* mutable_finish_json_message();
  std::string* release_finish_json_message();
  void set_allocated_finish_json_message(std::string* finish_json_message);
  private:
  const std::string& _internal_finish_json_message() const;
  void _internal_set_finish_json_message(const std::string& value);
  std::string* _internal_mutable_finish_json_message();
  public:

  // required string srcpath = 4;
  bool has_srcpath() const;
  private:
  bool _internal_has_srcpath() const;
  public:
  void clear_srcpath();
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);
  private:
  const std::string& _internal_srcpath() const;
  void _internal_set_srcpath(const std::string& value);
  std::string* _internal_mutable_srcpath();
  public:

  // required string srcidc = 5;
  bool has_srcidc() const;
  private:
  bool _internal_has_srcidc() const;
  public:
  void clear_srcidc();
  const std::string& srcidc() const;
  void set_srcidc(const std::string& value);
  void set_srcidc(std::string&& value);
  void set_srcidc(const char* value);
  void set_srcidc(const char* value, size_t size);
  std::string* mutable_srcidc();
  std::string* release_srcidc();
  void set_allocated_srcidc(std::string* srcidc);
  private:
  const std::string& _internal_srcidc() const;
  void _internal_set_srcidc(const std::string& value);
  std::string* _internal_mutable_srcidc();
  public:

  // required string dstpath = 6;
  bool has_dstpath() const;
  private:
  bool _internal_has_dstpath() const;
  public:
  void clear_dstpath();
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);
  private:
  const std::string& _internal_dstpath() const;
  void _internal_set_dstpath(const std::string& value);
  std::string* _internal_mutable_dstpath();
  public:

  // required string dstidc = 7;
  bool has_dstidc() const;
  private:
  bool _internal_has_dstidc() const;
  public:
  void clear_dstidc();
  const std::string& dstidc() const;
  void set_dstidc(const std::string& value);
  void set_dstidc(std::string&& value);
  void set_dstidc(const char* value);
  void set_dstidc(const char* value, size_t size);
  std::string* mutable_dstidc();
  std::string* release_dstidc();
  void set_allocated_dstidc(std::string* dstidc);
  private:
  const std::string& _internal_dstidc() const;
  void _internal_set_dstidc(const std::string& value);
  std::string* _internal_mutable_dstidc();
  public:

  // required string storagetype = 8;
  bool has_storagetype() const;
  private:
  bool _internal_has_storagetype() const;
  public:
  void clear_storagetype();
  const std::string& storagetype() const;
  void set_storagetype(const std::string& value);
  void set_storagetype(std::string&& value);
  void set_storagetype(const char* value);
  void set_storagetype(const char* value, size_t size);
  std::string* mutable_storagetype();
  std::string* release_storagetype();
  void set_allocated_storagetype(std::string* storagetype);
  private:
  const std::string& _internal_storagetype() const;
  void _internal_set_storagetype(const std::string& value);
  std::string* _internal_mutable_storagetype();
  public:

  // optional string version = 9;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional .FTN.MultiRegionList region_list = 13;
  bool has_region_list() const;
  private:
  bool _internal_has_region_list() const;
  public:
  void clear_region_list();
  const ::FTN::MultiRegionList& region_list() const;
  ::FTN::MultiRegionList* release_region_list();
  ::FTN::MultiRegionList* mutable_region_list();
  void set_allocated_region_list(::FTN::MultiRegionList* region_list);
  private:
  const ::FTN::MultiRegionList& _internal_region_list() const;
  ::FTN::MultiRegionList* _internal_mutable_region_list();
  public:
  void unsafe_arena_set_allocated_region_list(
      ::FTN::MultiRegionList* region_list);
  ::FTN::MultiRegionList* unsafe_arena_release_region_list();

  // optional uint32 delay_time = 12;
  bool has_delay_time() const;
  private:
  bool _internal_has_delay_time() const;
  public:
  void clear_delay_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_time() const;
  void set_delay_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay_time() const;
  void _internal_set_delay_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 platform_type = 10 [default = 1];
  bool has_platform_type() const;
  private:
  bool _internal_has_platform_type() const;
  public:
  void clear_platform_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type() const;
  void set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_platform_type() const;
  void _internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 retry_times = 11 [default = 3];
  bool has_retry_times() const;
  private:
  bool _internal_has_retry_times() const;
  public:
  void clear_retry_times();
  ::PROTOBUF_NAMESPACE_ID::uint32 retry_times() const;
  void set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retry_times() const;
  void _internal_set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.PartCopyFinishReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcfile_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ukey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finish_json_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::FTN::MultiRegionList* region_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retry_times_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class TrsfSseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.TrsfSseInfo) */ {
 public:
  inline TrsfSseInfo() : TrsfSseInfo(nullptr) {}
  virtual ~TrsfSseInfo();

  TrsfSseInfo(const TrsfSseInfo& from);
  TrsfSseInfo(TrsfSseInfo&& from) noexcept
    : TrsfSseInfo() {
    *this = ::std::move(from);
  }

  inline TrsfSseInfo& operator=(const TrsfSseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrsfSseInfo& operator=(TrsfSseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrsfSseInfo& default_instance();

  static inline const TrsfSseInfo* internal_default_instance() {
    return reinterpret_cast<const TrsfSseInfo*>(
               &_TrsfSseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrsfSseInfo& a, TrsfSseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TrsfSseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrsfSseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrsfSseInfo* New() const final {
    return CreateMaybeMessage<TrsfSseInfo>(nullptr);
  }

  TrsfSseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrsfSseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrsfSseInfo& from);
  void MergeFrom(const TrsfSseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrsfSseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.TrsfSseInfo";
  }
  protected:
  explicit TrsfSseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcAlgorithmFieldNumber = 2,
    kDstAlgorithmFieldNumber = 4,
    kSrcSsecFieldNumber = 5,
    kDstSsecFieldNumber = 6,
    kSrcKmsFieldNumber = 7,
    kDstKmsFieldNumber = 8,
    kSrcTypeFieldNumber = 1,
    kDstTypeFieldNumber = 3,
  };
  // optional string src_algorithm = 2;
  bool has_src_algorithm() const;
  private:
  bool _internal_has_src_algorithm() const;
  public:
  void clear_src_algorithm();
  const std::string& src_algorithm() const;
  void set_src_algorithm(const std::string& value);
  void set_src_algorithm(std::string&& value);
  void set_src_algorithm(const char* value);
  void set_src_algorithm(const char* value, size_t size);
  std::string* mutable_src_algorithm();
  std::string* release_src_algorithm();
  void set_allocated_src_algorithm(std::string* src_algorithm);
  private:
  const std::string& _internal_src_algorithm() const;
  void _internal_set_src_algorithm(const std::string& value);
  std::string* _internal_mutable_src_algorithm();
  public:

  // optional string dst_algorithm = 4;
  bool has_dst_algorithm() const;
  private:
  bool _internal_has_dst_algorithm() const;
  public:
  void clear_dst_algorithm();
  const std::string& dst_algorithm() const;
  void set_dst_algorithm(const std::string& value);
  void set_dst_algorithm(std::string&& value);
  void set_dst_algorithm(const char* value);
  void set_dst_algorithm(const char* value, size_t size);
  std::string* mutable_dst_algorithm();
  std::string* release_dst_algorithm();
  void set_allocated_dst_algorithm(std::string* dst_algorithm);
  private:
  const std::string& _internal_dst_algorithm() const;
  void _internal_set_dst_algorithm(const std::string& value);
  std::string* _internal_mutable_dst_algorithm();
  public:

  // optional .FTN.SseCInfo src_ssec = 5;
  bool has_src_ssec() const;
  private:
  bool _internal_has_src_ssec() const;
  public:
  void clear_src_ssec();
  const ::FTN::SseCInfo& src_ssec() const;
  ::FTN::SseCInfo* release_src_ssec();
  ::FTN::SseCInfo* mutable_src_ssec();
  void set_allocated_src_ssec(::FTN::SseCInfo* src_ssec);
  private:
  const ::FTN::SseCInfo& _internal_src_ssec() const;
  ::FTN::SseCInfo* _internal_mutable_src_ssec();
  public:
  void unsafe_arena_set_allocated_src_ssec(
      ::FTN::SseCInfo* src_ssec);
  ::FTN::SseCInfo* unsafe_arena_release_src_ssec();

  // optional .FTN.SseCInfo dst_ssec = 6;
  bool has_dst_ssec() const;
  private:
  bool _internal_has_dst_ssec() const;
  public:
  void clear_dst_ssec();
  const ::FTN::SseCInfo& dst_ssec() const;
  ::FTN::SseCInfo* release_dst_ssec();
  ::FTN::SseCInfo* mutable_dst_ssec();
  void set_allocated_dst_ssec(::FTN::SseCInfo* dst_ssec);
  private:
  const ::FTN::SseCInfo& _internal_dst_ssec() const;
  ::FTN::SseCInfo* _internal_mutable_dst_ssec();
  public:
  void unsafe_arena_set_allocated_dst_ssec(
      ::FTN::SseCInfo* dst_ssec);
  ::FTN::SseCInfo* unsafe_arena_release_dst_ssec();

  // optional .FTN.KmsInfo src_kms = 7;
  bool has_src_kms() const;
  private:
  bool _internal_has_src_kms() const;
  public:
  void clear_src_kms();
  const ::FTN::KmsInfo& src_kms() const;
  ::FTN::KmsInfo* release_src_kms();
  ::FTN::KmsInfo* mutable_src_kms();
  void set_allocated_src_kms(::FTN::KmsInfo* src_kms);
  private:
  const ::FTN::KmsInfo& _internal_src_kms() const;
  ::FTN::KmsInfo* _internal_mutable_src_kms();
  public:
  void unsafe_arena_set_allocated_src_kms(
      ::FTN::KmsInfo* src_kms);
  ::FTN::KmsInfo* unsafe_arena_release_src_kms();

  // optional .FTN.KmsInfo dst_kms = 8;
  bool has_dst_kms() const;
  private:
  bool _internal_has_dst_kms() const;
  public:
  void clear_dst_kms();
  const ::FTN::KmsInfo& dst_kms() const;
  ::FTN::KmsInfo* release_dst_kms();
  ::FTN::KmsInfo* mutable_dst_kms();
  void set_allocated_dst_kms(::FTN::KmsInfo* dst_kms);
  private:
  const ::FTN::KmsInfo& _internal_dst_kms() const;
  ::FTN::KmsInfo* _internal_mutable_dst_kms();
  public:
  void unsafe_arena_set_allocated_dst_kms(
      ::FTN::KmsInfo* dst_kms);
  ::FTN::KmsInfo* unsafe_arena_release_dst_kms();

  // optional uint32 src_type = 1;
  bool has_src_type() const;
  private:
  bool _internal_has_src_type() const;
  public:
  void clear_src_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_type() const;
  void set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_type() const;
  void _internal_set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dst_type = 3;
  bool has_dst_type() const;
  private:
  bool _internal_has_dst_type() const;
  public:
  void clear_dst_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_type() const;
  void set_dst_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_type() const;
  void _internal_set_dst_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.TrsfSseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_algorithm_;
  ::FTN::SseCInfo* src_ssec_;
  ::FTN::SseCInfo* dst_ssec_;
  ::FTN::KmsInfo* src_kms_;
  ::FTN::KmsInfo* dst_kms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_type_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class SseCInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.SseCInfo) */ {
 public:
  inline SseCInfo() : SseCInfo(nullptr) {}
  virtual ~SseCInfo();

  SseCInfo(const SseCInfo& from);
  SseCInfo(SseCInfo&& from) noexcept
    : SseCInfo() {
    *this = ::std::move(from);
  }

  inline SseCInfo& operator=(const SseCInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SseCInfo& operator=(SseCInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SseCInfo& default_instance();

  static inline const SseCInfo* internal_default_instance() {
    return reinterpret_cast<const SseCInfo*>(
               &_SseCInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SseCInfo& a, SseCInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SseCInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SseCInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SseCInfo* New() const final {
    return CreateMaybeMessage<SseCInfo>(nullptr);
  }

  SseCInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SseCInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SseCInfo& from);
  void MergeFrom(const SseCInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SseCInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.SseCInfo";
  }
  protected:
  explicit SseCInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsecKeyFieldNumber = 7,
    kSsecKeyMd5FieldNumber = 8,
  };
  // optional string ssec_key = 7;
  bool has_ssec_key() const;
  private:
  bool _internal_has_ssec_key() const;
  public:
  void clear_ssec_key();
  const std::string& ssec_key() const;
  void set_ssec_key(const std::string& value);
  void set_ssec_key(std::string&& value);
  void set_ssec_key(const char* value);
  void set_ssec_key(const char* value, size_t size);
  std::string* mutable_ssec_key();
  std::string* release_ssec_key();
  void set_allocated_ssec_key(std::string* ssec_key);
  private:
  const std::string& _internal_ssec_key() const;
  void _internal_set_ssec_key(const std::string& value);
  std::string* _internal_mutable_ssec_key();
  public:

  // optional string ssec_key_md5 = 8;
  bool has_ssec_key_md5() const;
  private:
  bool _internal_has_ssec_key_md5() const;
  public:
  void clear_ssec_key_md5();
  const std::string& ssec_key_md5() const;
  void set_ssec_key_md5(const std::string& value);
  void set_ssec_key_md5(std::string&& value);
  void set_ssec_key_md5(const char* value);
  void set_ssec_key_md5(const char* value, size_t size);
  std::string* mutable_ssec_key_md5();
  std::string* release_ssec_key_md5();
  void set_allocated_ssec_key_md5(std::string* ssec_key_md5);
  private:
  const std::string& _internal_ssec_key_md5() const;
  void _internal_set_ssec_key_md5(const std::string& value);
  std::string* _internal_mutable_ssec_key_md5();
  public:

  // @@protoc_insertion_point(class_scope:FTN.SseCInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssec_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssec_key_md5_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class KmsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.KmsInfo) */ {
 public:
  inline KmsInfo() : KmsInfo(nullptr) {}
  virtual ~KmsInfo();

  KmsInfo(const KmsInfo& from);
  KmsInfo(KmsInfo&& from) noexcept
    : KmsInfo() {
    *this = ::std::move(from);
  }

  inline KmsInfo& operator=(const KmsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline KmsInfo& operator=(KmsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KmsInfo& default_instance();

  static inline const KmsInfo* internal_default_instance() {
    return reinterpret_cast<const KmsInfo*>(
               &_KmsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KmsInfo& a, KmsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(KmsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KmsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KmsInfo* New() const final {
    return CreateMaybeMessage<KmsInfo>(nullptr);
  }

  KmsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KmsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KmsInfo& from);
  void MergeFrom(const KmsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KmsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.KmsInfo";
  }
  protected:
  explicit KmsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKmsKeyIdFieldNumber = 9,
    kKmsContextFieldNumber = 10,
    kKmsDatakeyFieldNumber = 11,
    kKmsDatakeyEncrypFieldNumber = 12,
  };
  // optional string kms_key_id = 9;
  bool has_kms_key_id() const;
  private:
  bool _internal_has_kms_key_id() const;
  public:
  void clear_kms_key_id();
  const std::string& kms_key_id() const;
  void set_kms_key_id(const std::string& value);
  void set_kms_key_id(std::string&& value);
  void set_kms_key_id(const char* value);
  void set_kms_key_id(const char* value, size_t size);
  std::string* mutable_kms_key_id();
  std::string* release_kms_key_id();
  void set_allocated_kms_key_id(std::string* kms_key_id);
  private:
  const std::string& _internal_kms_key_id() const;
  void _internal_set_kms_key_id(const std::string& value);
  std::string* _internal_mutable_kms_key_id();
  public:

  // optional bytes kms_context = 10;
  bool has_kms_context() const;
  private:
  bool _internal_has_kms_context() const;
  public:
  void clear_kms_context();
  const std::string& kms_context() const;
  void set_kms_context(const std::string& value);
  void set_kms_context(std::string&& value);
  void set_kms_context(const char* value);
  void set_kms_context(const void* value, size_t size);
  std::string* mutable_kms_context();
  std::string* release_kms_context();
  void set_allocated_kms_context(std::string* kms_context);
  private:
  const std::string& _internal_kms_context() const;
  void _internal_set_kms_context(const std::string& value);
  std::string* _internal_mutable_kms_context();
  public:

  // optional string kms_datakey = 11;
  bool has_kms_datakey() const;
  private:
  bool _internal_has_kms_datakey() const;
  public:
  void clear_kms_datakey();
  const std::string& kms_datakey() const;
  void set_kms_datakey(const std::string& value);
  void set_kms_datakey(std::string&& value);
  void set_kms_datakey(const char* value);
  void set_kms_datakey(const char* value, size_t size);
  std::string* mutable_kms_datakey();
  std::string* release_kms_datakey();
  void set_allocated_kms_datakey(std::string* kms_datakey);
  private:
  const std::string& _internal_kms_datakey() const;
  void _internal_set_kms_datakey(const std::string& value);
  std::string* _internal_mutable_kms_datakey();
  public:

  // optional bytes kms_datakey_encryp = 12;
  bool has_kms_datakey_encryp() const;
  private:
  bool _internal_has_kms_datakey_encryp() const;
  public:
  void clear_kms_datakey_encryp();
  const std::string& kms_datakey_encryp() const;
  void set_kms_datakey_encryp(const std::string& value);
  void set_kms_datakey_encryp(std::string&& value);
  void set_kms_datakey_encryp(const char* value);
  void set_kms_datakey_encryp(const void* value, size_t size);
  std::string* mutable_kms_datakey_encryp();
  std::string* release_kms_datakey_encryp();
  void set_allocated_kms_datakey_encryp(std::string* kms_datakey_encryp);
  private:
  const std::string& _internal_kms_datakey_encryp() const;
  void _internal_set_kms_datakey_encryp(const std::string& value);
  std::string* _internal_mutable_kms_datakey_encryp();
  public:

  // @@protoc_insertion_point(class_scope:FTN.KmsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_datakey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_datakey_encryp_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class FileTrsfRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.FileTrsfRsp) */ {
 public:
  inline FileTrsfRsp() : FileTrsfRsp(nullptr) {}
  virtual ~FileTrsfRsp();

  FileTrsfRsp(const FileTrsfRsp& from);
  FileTrsfRsp(FileTrsfRsp&& from) noexcept
    : FileTrsfRsp() {
    *this = ::std::move(from);
  }

  inline FileTrsfRsp& operator=(const FileTrsfRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTrsfRsp& operator=(FileTrsfRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileTrsfRsp& default_instance();

  static inline const FileTrsfRsp* internal_default_instance() {
    return reinterpret_cast<const FileTrsfRsp*>(
               &_FileTrsfRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FileTrsfRsp& a, FileTrsfRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTrsfRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTrsfRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileTrsfRsp* New() const final {
    return CreateMaybeMessage<FileTrsfRsp>(nullptr);
  }

  FileTrsfRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileTrsfRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileTrsfRsp& from);
  void MergeFrom(const FileTrsfRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTrsfRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.FileTrsfRsp";
  }
  protected:
  explicit FileTrsfRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskKeyFieldNumber = 1,
  };
  // required string task_key = 1;
  bool has_task_key() const;
  private:
  bool _internal_has_task_key() const;
  public:
  void clear_task_key();
  const std::string& task_key() const;
  void set_task_key(const std::string& value);
  void set_task_key(std::string&& value);
  void set_task_key(const char* value);
  void set_task_key(const char* value, size_t size);
  std::string* mutable_task_key();
  std::string* release_task_key();
  void set_allocated_task_key(std::string* task_key);
  private:
  const std::string& _internal_task_key() const;
  void _internal_set_task_key(const std::string& value);
  std::string* _internal_mutable_task_key();
  public:

  // @@protoc_insertion_point(class_scope:FTN.FileTrsfRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_key_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class PutObjCopyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.PutObjCopyRsp) */ {
 public:
  inline PutObjCopyRsp() : PutObjCopyRsp(nullptr) {}
  virtual ~PutObjCopyRsp();

  PutObjCopyRsp(const PutObjCopyRsp& from);
  PutObjCopyRsp(PutObjCopyRsp&& from) noexcept
    : PutObjCopyRsp() {
    *this = ::std::move(from);
  }

  inline PutObjCopyRsp& operator=(const PutObjCopyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutObjCopyRsp& operator=(PutObjCopyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutObjCopyRsp& default_instance();

  static inline const PutObjCopyRsp* internal_default_instance() {
    return reinterpret_cast<const PutObjCopyRsp*>(
               &_PutObjCopyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PutObjCopyRsp& a, PutObjCopyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PutObjCopyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutObjCopyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutObjCopyRsp* New() const final {
    return CreateMaybeMessage<PutObjCopyRsp>(nullptr);
  }

  PutObjCopyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutObjCopyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutObjCopyRsp& from);
  void MergeFrom(const PutObjCopyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutObjCopyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.PutObjCopyRsp";
  }
  protected:
  explicit PutObjCopyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskKeyFieldNumber = 1,
  };
  // required string task_key = 1;
  bool has_task_key() const;
  private:
  bool _internal_has_task_key() const;
  public:
  void clear_task_key();
  const std::string& task_key() const;
  void set_task_key(const std::string& value);
  void set_task_key(std::string&& value);
  void set_task_key(const char* value);
  void set_task_key(const char* value, size_t size);
  std::string* mutable_task_key();
  std::string* release_task_key();
  void set_allocated_task_key(std::string* task_key);
  private:
  const std::string& _internal_task_key() const;
  void _internal_set_task_key(const std::string& value);
  std::string* _internal_mutable_task_key();
  public:

  // @@protoc_insertion_point(class_scope:FTN.PutObjCopyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_key_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class PartCopyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.PartCopyRsp) */ {
 public:
  inline PartCopyRsp() : PartCopyRsp(nullptr) {}
  virtual ~PartCopyRsp();

  PartCopyRsp(const PartCopyRsp& from);
  PartCopyRsp(PartCopyRsp&& from) noexcept
    : PartCopyRsp() {
    *this = ::std::move(from);
  }

  inline PartCopyRsp& operator=(const PartCopyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartCopyRsp& operator=(PartCopyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartCopyRsp& default_instance();

  static inline const PartCopyRsp* internal_default_instance() {
    return reinterpret_cast<const PartCopyRsp*>(
               &_PartCopyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PartCopyRsp& a, PartCopyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PartCopyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartCopyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartCopyRsp* New() const final {
    return CreateMaybeMessage<PartCopyRsp>(nullptr);
  }

  PartCopyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartCopyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartCopyRsp& from);
  void MergeFrom(const PartCopyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartCopyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.PartCopyRsp";
  }
  protected:
  explicit PartCopyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskKeyFieldNumber = 1,
    kSrcsseinfoFieldNumber = 2,
  };
  // required string task_key = 1;
  bool has_task_key() const;
  private:
  bool _internal_has_task_key() const;
  public:
  void clear_task_key();
  const std::string& task_key() const;
  void set_task_key(const std::string& value);
  void set_task_key(std::string&& value);
  void set_task_key(const char* value);
  void set_task_key(const char* value, size_t size);
  std::string* mutable_task_key();
  std::string* release_task_key();
  void set_allocated_task_key(std::string* task_key);
  private:
  const std::string& _internal_task_key() const;
  void _internal_set_task_key(const std::string& value);
  std::string* _internal_mutable_task_key();
  public:

  // optional .ClientCos.SseInfo srcsseinfo = 2;
  bool has_srcsseinfo() const;
  private:
  bool _internal_has_srcsseinfo() const;
  public:
  void clear_srcsseinfo();
  const ::ClientCos::SseInfo& srcsseinfo() const;
  ::ClientCos::SseInfo* release_srcsseinfo();
  ::ClientCos::SseInfo* mutable_srcsseinfo();
  void set_allocated_srcsseinfo(::ClientCos::SseInfo* srcsseinfo);
  private:
  const ::ClientCos::SseInfo& _internal_srcsseinfo() const;
  ::ClientCos::SseInfo* _internal_mutable_srcsseinfo();
  public:
  void unsafe_arena_set_allocated_srcsseinfo(
      ::ClientCos::SseInfo* srcsseinfo);
  ::ClientCos::SseInfo* unsafe_arena_release_srcsseinfo();

  // @@protoc_insertion_point(class_scope:FTN.PartCopyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_key_;
  ::ClientCos::SseInfo* srcsseinfo_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class TransferNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.TransferNotify) */ {
 public:
  inline TransferNotify() : TransferNotify(nullptr) {}
  virtual ~TransferNotify();

  TransferNotify(const TransferNotify& from);
  TransferNotify(TransferNotify&& from) noexcept
    : TransferNotify() {
    *this = ::std::move(from);
  }

  inline TransferNotify& operator=(const TransferNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferNotify& operator=(TransferNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferNotify& default_instance();

  static inline const TransferNotify* internal_default_instance() {
    return reinterpret_cast<const TransferNotify*>(
               &_TransferNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TransferNotify& a, TransferNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferNotify* New() const final {
    return CreateMaybeMessage<TransferNotify>(nullptr);
  }

  TransferNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferNotify& from);
  void MergeFrom(const TransferNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.TransferNotify";
  }
  protected:
  explicit TransferNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskKeyFieldNumber = 1,
    kSrcpathFieldNumber = 2,
    kDstpathFieldNumber = 3,
    kDstidcFieldNumber = 4,
    kTaskCtimeFieldNumber = 5,
    kTaskEndtimeFieldNumber = 6,
    kTaskProgressFieldNumber = 7,
  };
  // required string task_key = 1;
  bool has_task_key() const;
  private:
  bool _internal_has_task_key() const;
  public:
  void clear_task_key();
  const std::string& task_key() const;
  void set_task_key(const std::string& value);
  void set_task_key(std::string&& value);
  void set_task_key(const char* value);
  void set_task_key(const char* value, size_t size);
  std::string* mutable_task_key();
  std::string* release_task_key();
  void set_allocated_task_key(std::string* task_key);
  private:
  const std::string& _internal_task_key() const;
  void _internal_set_task_key(const std::string& value);
  std::string* _internal_mutable_task_key();
  public:

  // required string srcpath = 2;
  bool has_srcpath() const;
  private:
  bool _internal_has_srcpath() const;
  public:
  void clear_srcpath();
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);
  private:
  const std::string& _internal_srcpath() const;
  void _internal_set_srcpath(const std::string& value);
  std::string* _internal_mutable_srcpath();
  public:

  // required string dstpath = 3;
  bool has_dstpath() const;
  private:
  bool _internal_has_dstpath() const;
  public:
  void clear_dstpath();
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);
  private:
  const std::string& _internal_dstpath() const;
  void _internal_set_dstpath(const std::string& value);
  std::string* _internal_mutable_dstpath();
  public:

  // required string dstidc = 4;
  bool has_dstidc() const;
  private:
  bool _internal_has_dstidc() const;
  public:
  void clear_dstidc();
  const std::string& dstidc() const;
  void set_dstidc(const std::string& value);
  void set_dstidc(std::string&& value);
  void set_dstidc(const char* value);
  void set_dstidc(const char* value, size_t size);
  std::string* mutable_dstidc();
  std::string* release_dstidc();
  void set_allocated_dstidc(std::string* dstidc);
  private:
  const std::string& _internal_dstidc() const;
  void _internal_set_dstidc(const std::string& value);
  std::string* _internal_mutable_dstidc();
  public:

  // required uint64 task_ctime = 5;
  bool has_task_ctime() const;
  private:
  bool _internal_has_task_ctime() const;
  public:
  void clear_task_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 task_ctime() const;
  void set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_task_ctime() const;
  void _internal_set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 task_endtime = 6;
  bool has_task_endtime() const;
  private:
  bool _internal_has_task_endtime() const;
  public:
  void clear_task_endtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 task_endtime() const;
  void set_task_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_task_endtime() const;
  void _internal_set_task_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 task_progress = 7;
  bool has_task_progress() const;
  private:
  bool _internal_has_task_progress() const;
  public:
  void clear_task_progress();
  ::PROTOBUF_NAMESPACE_ID::uint32 task_progress() const;
  void set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_task_progress() const;
  void _internal_set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.TransferNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstidc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 task_ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 task_endtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 task_progress_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class TransferNotifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.TransferNotifyRsp) */ {
 public:
  inline TransferNotifyRsp() : TransferNotifyRsp(nullptr) {}
  virtual ~TransferNotifyRsp();

  TransferNotifyRsp(const TransferNotifyRsp& from);
  TransferNotifyRsp(TransferNotifyRsp&& from) noexcept
    : TransferNotifyRsp() {
    *this = ::std::move(from);
  }

  inline TransferNotifyRsp& operator=(const TransferNotifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferNotifyRsp& operator=(TransferNotifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferNotifyRsp& default_instance();

  static inline const TransferNotifyRsp* internal_default_instance() {
    return reinterpret_cast<const TransferNotifyRsp*>(
               &_TransferNotifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TransferNotifyRsp& a, TransferNotifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferNotifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferNotifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferNotifyRsp* New() const final {
    return CreateMaybeMessage<TransferNotifyRsp>(nullptr);
  }

  TransferNotifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferNotifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferNotifyRsp& from);
  void MergeFrom(const TransferNotifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferNotifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.TransferNotifyRsp";
  }
  protected:
  explicit TransferNotifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskKeyFieldNumber = 1,
  };
  // required string task_key = 1;
  bool has_task_key() const;
  private:
  bool _internal_has_task_key() const;
  public:
  void clear_task_key();
  const std::string& task_key() const;
  void set_task_key(const std::string& value);
  void set_task_key(std::string&& value);
  void set_task_key(const char* value);
  void set_task_key(const char* value, size_t size);
  std::string* mutable_task_key();
  std::string* release_task_key();
  void set_allocated_task_key(std::string* task_key);
  private:
  const std::string& _internal_task_key() const;
  void _internal_set_task_key(const std::string& value);
  std::string* _internal_mutable_task_key();
  public:

  // @@protoc_insertion_point(class_scope:FTN.TransferNotifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_key_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class TaskProgressReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.TaskProgressReq) */ {
 public:
  inline TaskProgressReq() : TaskProgressReq(nullptr) {}
  virtual ~TaskProgressReq();

  TaskProgressReq(const TaskProgressReq& from);
  TaskProgressReq(TaskProgressReq&& from) noexcept
    : TaskProgressReq() {
    *this = ::std::move(from);
  }

  inline TaskProgressReq& operator=(const TaskProgressReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskProgressReq& operator=(TaskProgressReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskProgressReq& default_instance();

  static inline const TaskProgressReq* internal_default_instance() {
    return reinterpret_cast<const TaskProgressReq*>(
               &_TaskProgressReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TaskProgressReq& a, TaskProgressReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskProgressReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskProgressReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskProgressReq* New() const final {
    return CreateMaybeMessage<TaskProgressReq>(nullptr);
  }

  TaskProgressReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskProgressReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskProgressReq& from);
  void MergeFrom(const TaskProgressReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskProgressReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.TaskProgressReq";
  }
  protected:
  explicit TaskProgressReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskKeyFieldNumber = 1,
  };
  // required string task_key = 1;
  bool has_task_key() const;
  private:
  bool _internal_has_task_key() const;
  public:
  void clear_task_key();
  const std::string& task_key() const;
  void set_task_key(const std::string& value);
  void set_task_key(std::string&& value);
  void set_task_key(const char* value);
  void set_task_key(const char* value, size_t size);
  std::string* mutable_task_key();
  std::string* release_task_key();
  void set_allocated_task_key(std::string* task_key);
  private:
  const std::string& _internal_task_key() const;
  void _internal_set_task_key(const std::string& value);
  std::string* _internal_mutable_task_key();
  public:

  // @@protoc_insertion_point(class_scope:FTN.TaskProgressReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_key_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// -------------------------------------------------------------------

class TaskProgressRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.TaskProgressRsp) */ {
 public:
  inline TaskProgressRsp() : TaskProgressRsp(nullptr) {}
  virtual ~TaskProgressRsp();

  TaskProgressRsp(const TaskProgressRsp& from);
  TaskProgressRsp(TaskProgressRsp&& from) noexcept
    : TaskProgressRsp() {
    *this = ::std::move(from);
  }

  inline TaskProgressRsp& operator=(const TaskProgressRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskProgressRsp& operator=(TaskProgressRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskProgressRsp& default_instance();

  static inline const TaskProgressRsp* internal_default_instance() {
    return reinterpret_cast<const TaskProgressRsp*>(
               &_TaskProgressRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TaskProgressRsp& a, TaskProgressRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskProgressRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskProgressRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskProgressRsp* New() const final {
    return CreateMaybeMessage<TaskProgressRsp>(nullptr);
  }

  TaskProgressRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskProgressRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskProgressRsp& from);
  void MergeFrom(const TaskProgressRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskProgressRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.TaskProgressRsp";
  }
  protected:
  explicit TaskProgressRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5ftrsf_2eproto);
    return ::descriptor_table_cos_5ftrsf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcpathFieldNumber = 2,
    kDstpathFieldNumber = 3,
    kDstidcFieldNumber = 4,
    kStoragetypeFieldNumber = 5,
    kDstVersionFieldNumber = 10,
    kDstSkFieldNumber = 11,
    kDstUploadkeyFieldNumber = 12,
    kDstCtimeFieldNumber = 13,
    kSseinfoFieldNumber = 15,
    kTaskCtimeFieldNumber = 6,
    kSrcstartRangeFieldNumber = 7,
    kSrcendRangeFieldNumber = 8,
    kDststartRangeFieldNumber = 9,
    kDstBlockNumFieldNumber = 14,
    kTaskProgressFieldNumber = 1,
  };
  // required string srcpath = 2;
  bool has_srcpath() const;
  private:
  bool _internal_has_srcpath() const;
  public:
  void clear_srcpath();
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);
  private:
  const std::string& _internal_srcpath() const;
  void _internal_set_srcpath(const std::string& value);
  std::string* _internal_mutable_srcpath();
  public:

  // required string dstpath = 3;
  bool has_dstpath() const;
  private:
  bool _internal_has_dstpath() const;
  public:
  void clear_dstpath();
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);
  private:
  const std::string& _internal_dstpath() const;
  void _internal_set_dstpath(const std::string& value);
  std::string* _internal_mutable_dstpath();
  public:

  // required string dstidc = 4;
  bool has_dstidc() const;
  private:
  bool _internal_has_dstidc() const;
  public:
  void clear_dstidc();
  const std::string& dstidc() const;
  void set_dstidc(const std::string& value);
  void set_dstidc(std::string&& value);
  void set_dstidc(const char* value);
  void set_dstidc(const char* value, size_t size);
  std::string* mutable_dstidc();
  std::string* release_dstidc();
  void set_allocated_dstidc(std::string* dstidc);
  private:
  const std::string& _internal_dstidc() const;
  void _internal_set_dstidc(const std::string& value);
  std::string* _internal_mutable_dstidc();
  public:

  // required string storagetype = 5;
  bool has_storagetype() const;
  private:
  bool _internal_has_storagetype() const;
  public:
  void clear_storagetype();
  const std::string& storagetype() const;
  void set_storagetype(const std::string& value);
  void set_storagetype(std::string&& value);
  void set_storagetype(const char* value);
  void set_storagetype(const char* value, size_t size);
  std::string* mutable_storagetype();
  std::string* release_storagetype();
  void set_allocated_storagetype(std::string* storagetype);
  private:
  const std::string& _internal_storagetype() const;
  void _internal_set_storagetype(const std::string& value);
  std::string* _internal_mutable_storagetype();
  public:

  // optional string dst_version = 10;
  bool has_dst_version() const;
  private:
  bool _internal_has_dst_version() const;
  public:
  void clear_dst_version();
  const std::string& dst_version() const;
  void set_dst_version(const std::string& value);
  void set_dst_version(std::string&& value);
  void set_dst_version(const char* value);
  void set_dst_version(const char* value, size_t size);
  std::string* mutable_dst_version();
  std::string* release_dst_version();
  void set_allocated_dst_version(std::string* dst_version);
  private:
  const std::string& _internal_dst_version() const;
  void _internal_set_dst_version(const std::string& value);
  std::string* _internal_mutable_dst_version();
  public:

  // optional string dst_sk = 11;
  bool has_dst_sk() const;
  private:
  bool _internal_has_dst_sk() const;
  public:
  void clear_dst_sk();
  const std::string& dst_sk() const;
  void set_dst_sk(const std::string& value);
  void set_dst_sk(std::string&& value);
  void set_dst_sk(const char* value);
  void set_dst_sk(const char* value, size_t size);
  std::string* mutable_dst_sk();
  std::string* release_dst_sk();
  void set_allocated_dst_sk(std::string* dst_sk);
  private:
  const std::string& _internal_dst_sk() const;
  void _internal_set_dst_sk(const std::string& value);
  std::string* _internal_mutable_dst_sk();
  public:

  // optional string dst_uploadkey = 12;
  bool has_dst_uploadkey() const;
  private:
  bool _internal_has_dst_uploadkey() const;
  public:
  void clear_dst_uploadkey();
  const std::string& dst_uploadkey() const;
  void set_dst_uploadkey(const std::string& value);
  void set_dst_uploadkey(std::string&& value);
  void set_dst_uploadkey(const char* value);
  void set_dst_uploadkey(const char* value, size_t size);
  std::string* mutable_dst_uploadkey();
  std::string* release_dst_uploadkey();
  void set_allocated_dst_uploadkey(std::string* dst_uploadkey);
  private:
  const std::string& _internal_dst_uploadkey() const;
  void _internal_set_dst_uploadkey(const std::string& value);
  std::string* _internal_mutable_dst_uploadkey();
  public:

  // optional string dst_ctime = 13;
  bool has_dst_ctime() const;
  private:
  bool _internal_has_dst_ctime() const;
  public:
  void clear_dst_ctime();
  const std::string& dst_ctime() const;
  void set_dst_ctime(const std::string& value);
  void set_dst_ctime(std::string&& value);
  void set_dst_ctime(const char* value);
  void set_dst_ctime(const char* value, size_t size);
  std::string* mutable_dst_ctime();
  std::string* release_dst_ctime();
  void set_allocated_dst_ctime(std::string* dst_ctime);
  private:
  const std::string& _internal_dst_ctime() const;
  void _internal_set_dst_ctime(const std::string& value);
  std::string* _internal_mutable_dst_ctime();
  public:

  // optional .FTN.TrsfSseInfo sseinfo = 15;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::FTN::TrsfSseInfo& sseinfo() const;
  ::FTN::TrsfSseInfo* release_sseinfo();
  ::FTN::TrsfSseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo);
  private:
  const ::FTN::TrsfSseInfo& _internal_sseinfo() const;
  ::FTN::TrsfSseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::FTN::TrsfSseInfo* sseinfo);
  ::FTN::TrsfSseInfo* unsafe_arena_release_sseinfo();

  // required uint64 task_ctime = 6;
  bool has_task_ctime() const;
  private:
  bool _internal_has_task_ctime() const;
  public:
  void clear_task_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 task_ctime() const;
  void set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_task_ctime() const;
  void _internal_set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 srcstart_range = 7;
  bool has_srcstart_range() const;
  private:
  bool _internal_has_srcstart_range() const;
  public:
  void clear_srcstart_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 srcstart_range() const;
  void set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_srcstart_range() const;
  void _internal_set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 srcend_range = 8;
  bool has_srcend_range() const;
  private:
  bool _internal_has_srcend_range() const;
  public:
  void clear_srcend_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 srcend_range() const;
  void set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_srcend_range() const;
  void _internal_set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 dststart_range = 9;
  bool has_dststart_range() const;
  private:
  bool _internal_has_dststart_range() const;
  public:
  void clear_dststart_range();
  ::PROTOBUF_NAMESPACE_ID::uint64 dststart_range() const;
  void set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dststart_range() const;
  void _internal_set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 dst_block_num = 14;
  bool has_dst_block_num() const;
  private:
  bool _internal_has_dst_block_num() const;
  public:
  void clear_dst_block_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_block_num() const;
  void set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dst_block_num() const;
  void _internal_set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 task_progress = 1;
  bool has_task_progress() const;
  private:
  bool _internal_has_task_progress() const;
  public:
  void clear_task_progress();
  ::PROTOBUF_NAMESPACE_ID::uint32 task_progress() const;
  void set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_task_progress() const;
  void _internal_set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.TaskProgressRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstidc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_sk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_uploadkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ctime_;
  ::FTN::TrsfSseInfo* sseinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 task_ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 srcstart_range_;
  ::PROTOBUF_NAMESPACE_ID::uint64 srcend_range_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dststart_range_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 task_progress_;
  friend struct ::TableStruct_cos_5ftrsf_2eproto;
};
// ===================================================================

static const int kCosTransferReqMsgBodyFieldNumber = 118;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::FTN::AppMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::FTN::CosTransferReqMsg >, 11, false >
  CosTransferReqMsg_body;
static const int kCosTransferRspMsgBodyFieldNumber = 119;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::FTN::AppMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::FTN::CosTransferRspMsg >, 11, false >
  CosTransferRspMsg_body;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CosTransferReqMsg

// required string clientip = 1;
inline bool CosTransferReqMsg::_internal_has_clientip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosTransferReqMsg::has_clientip() const {
  return _internal_has_clientip();
}
inline void CosTransferReqMsg::clear_clientip() {
  clientip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosTransferReqMsg::clientip() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.clientip)
  return _internal_clientip();
}
inline void CosTransferReqMsg::set_clientip(const std::string& value) {
  _internal_set_clientip(value);
  // @@protoc_insertion_point(field_set:FTN.CosTransferReqMsg.clientip)
}
inline std::string* CosTransferReqMsg::mutable_clientip() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferReqMsg.clientip)
  return _internal_mutable_clientip();
}
inline const std::string& CosTransferReqMsg::_internal_clientip() const {
  return clientip_.Get();
}
inline void CosTransferReqMsg::_internal_set_clientip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosTransferReqMsg::set_clientip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.CosTransferReqMsg.clientip)
}
inline void CosTransferReqMsg::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.CosTransferReqMsg.clientip)
}
inline void CosTransferReqMsg::set_clientip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.CosTransferReqMsg.clientip)
}
inline std::string* CosTransferReqMsg::_internal_mutable_clientip() {
  _has_bits_[0] |= 0x00000001u;
  return clientip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosTransferReqMsg::release_clientip() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferReqMsg.clientip)
  if (!_internal_has_clientip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosTransferReqMsg::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferReqMsg.clientip)
}

// optional string request_id = 2;
inline bool CosTransferReqMsg::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosTransferReqMsg::has_request_id() const {
  return _internal_has_request_id();
}
inline void CosTransferReqMsg::clear_request_id() {
  request_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CosTransferReqMsg::request_id() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.request_id)
  return _internal_request_id();
}
inline void CosTransferReqMsg::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:FTN.CosTransferReqMsg.request_id)
}
inline std::string* CosTransferReqMsg::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferReqMsg.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CosTransferReqMsg::_internal_request_id() const {
  return request_id_.Get();
}
inline void CosTransferReqMsg::_internal_set_request_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosTransferReqMsg::set_request_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.CosTransferReqMsg.request_id)
}
inline void CosTransferReqMsg::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.CosTransferReqMsg.request_id)
}
inline void CosTransferReqMsg::set_request_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.CosTransferReqMsg.request_id)
}
inline std::string* CosTransferReqMsg::_internal_mutable_request_id() {
  _has_bits_[0] |= 0x00000002u;
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosTransferReqMsg::release_request_id() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferReqMsg.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return request_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosTransferReqMsg::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferReqMsg.request_id)
}

// required .FTN.CosTransferReqMsg.SubType sub_type = 10;
inline bool CosTransferReqMsg::_internal_has_sub_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CosTransferReqMsg::has_sub_type() const {
  return _internal_has_sub_type();
}
inline void CosTransferReqMsg::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::FTN::CosTransferReqMsg_SubType CosTransferReqMsg::_internal_sub_type() const {
  return static_cast< ::FTN::CosTransferReqMsg_SubType >(sub_type_);
}
inline ::FTN::CosTransferReqMsg_SubType CosTransferReqMsg::sub_type() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.sub_type)
  return _internal_sub_type();
}
inline void CosTransferReqMsg::_internal_set_sub_type(::FTN::CosTransferReqMsg_SubType value) {
  assert(::FTN::CosTransferReqMsg_SubType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  sub_type_ = value;
}
inline void CosTransferReqMsg::set_sub_type(::FTN::CosTransferReqMsg_SubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:FTN.CosTransferReqMsg.sub_type)
}

// optional .FTN.FileTrsfReq FileTrsfReq_body = 11;
inline bool CosTransferReqMsg::_internal_has_filetrsfreq_body() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || filetrsfreq_body_ != nullptr);
  return value;
}
inline bool CosTransferReqMsg::has_filetrsfreq_body() const {
  return _internal_has_filetrsfreq_body();
}
inline void CosTransferReqMsg::clear_filetrsfreq_body() {
  if (filetrsfreq_body_ != nullptr) filetrsfreq_body_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::FTN::FileTrsfReq& CosTransferReqMsg::_internal_filetrsfreq_body() const {
  const ::FTN::FileTrsfReq* p = filetrsfreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::FileTrsfReq&>(
      ::FTN::_FileTrsfReq_default_instance_);
}
inline const ::FTN::FileTrsfReq& CosTransferReqMsg::filetrsfreq_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.FileTrsfReq_body)
  return _internal_filetrsfreq_body();
}
inline void CosTransferReqMsg::unsafe_arena_set_allocated_filetrsfreq_body(
    ::FTN::FileTrsfReq* filetrsfreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filetrsfreq_body_);
  }
  filetrsfreq_body_ = filetrsfreq_body;
  if (filetrsfreq_body) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferReqMsg.FileTrsfReq_body)
}
inline ::FTN::FileTrsfReq* CosTransferReqMsg::release_filetrsfreq_body() {
  _has_bits_[0] &= ~0x00000004u;
  ::FTN::FileTrsfReq* temp = filetrsfreq_body_;
  filetrsfreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::FileTrsfReq* CosTransferReqMsg::unsafe_arena_release_filetrsfreq_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferReqMsg.FileTrsfReq_body)
  _has_bits_[0] &= ~0x00000004u;
  ::FTN::FileTrsfReq* temp = filetrsfreq_body_;
  filetrsfreq_body_ = nullptr;
  return temp;
}
inline ::FTN::FileTrsfReq* CosTransferReqMsg::_internal_mutable_filetrsfreq_body() {
  _has_bits_[0] |= 0x00000004u;
  if (filetrsfreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::FileTrsfReq>(GetArena());
    filetrsfreq_body_ = p;
  }
  return filetrsfreq_body_;
}
inline ::FTN::FileTrsfReq* CosTransferReqMsg::mutable_filetrsfreq_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferReqMsg.FileTrsfReq_body)
  return _internal_mutable_filetrsfreq_body();
}
inline void CosTransferReqMsg::set_allocated_filetrsfreq_body(::FTN::FileTrsfReq* filetrsfreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filetrsfreq_body_;
  }
  if (filetrsfreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filetrsfreq_body);
    if (message_arena != submessage_arena) {
      filetrsfreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filetrsfreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  filetrsfreq_body_ = filetrsfreq_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferReqMsg.FileTrsfReq_body)
}

// optional .FTN.TaskProgressReq TaskProgressReq_body = 12;
inline bool CosTransferReqMsg::_internal_has_taskprogressreq_body() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || taskprogressreq_body_ != nullptr);
  return value;
}
inline bool CosTransferReqMsg::has_taskprogressreq_body() const {
  return _internal_has_taskprogressreq_body();
}
inline void CosTransferReqMsg::clear_taskprogressreq_body() {
  if (taskprogressreq_body_ != nullptr) taskprogressreq_body_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::FTN::TaskProgressReq& CosTransferReqMsg::_internal_taskprogressreq_body() const {
  const ::FTN::TaskProgressReq* p = taskprogressreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TaskProgressReq&>(
      ::FTN::_TaskProgressReq_default_instance_);
}
inline const ::FTN::TaskProgressReq& CosTransferReqMsg::taskprogressreq_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.TaskProgressReq_body)
  return _internal_taskprogressreq_body();
}
inline void CosTransferReqMsg::unsafe_arena_set_allocated_taskprogressreq_body(
    ::FTN::TaskProgressReq* taskprogressreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(taskprogressreq_body_);
  }
  taskprogressreq_body_ = taskprogressreq_body;
  if (taskprogressreq_body) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferReqMsg.TaskProgressReq_body)
}
inline ::FTN::TaskProgressReq* CosTransferReqMsg::release_taskprogressreq_body() {
  _has_bits_[0] &= ~0x00000008u;
  ::FTN::TaskProgressReq* temp = taskprogressreq_body_;
  taskprogressreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TaskProgressReq* CosTransferReqMsg::unsafe_arena_release_taskprogressreq_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferReqMsg.TaskProgressReq_body)
  _has_bits_[0] &= ~0x00000008u;
  ::FTN::TaskProgressReq* temp = taskprogressreq_body_;
  taskprogressreq_body_ = nullptr;
  return temp;
}
inline ::FTN::TaskProgressReq* CosTransferReqMsg::_internal_mutable_taskprogressreq_body() {
  _has_bits_[0] |= 0x00000008u;
  if (taskprogressreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TaskProgressReq>(GetArena());
    taskprogressreq_body_ = p;
  }
  return taskprogressreq_body_;
}
inline ::FTN::TaskProgressReq* CosTransferReqMsg::mutable_taskprogressreq_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferReqMsg.TaskProgressReq_body)
  return _internal_mutable_taskprogressreq_body();
}
inline void CosTransferReqMsg::set_allocated_taskprogressreq_body(::FTN::TaskProgressReq* taskprogressreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete taskprogressreq_body_;
  }
  if (taskprogressreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(taskprogressreq_body);
    if (message_arena != submessage_arena) {
      taskprogressreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskprogressreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  taskprogressreq_body_ = taskprogressreq_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferReqMsg.TaskProgressReq_body)
}

// optional .FTN.PutObjCopyReq PutObjCopyReq_body = 13;
inline bool CosTransferReqMsg::_internal_has_putobjcopyreq_body() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || putobjcopyreq_body_ != nullptr);
  return value;
}
inline bool CosTransferReqMsg::has_putobjcopyreq_body() const {
  return _internal_has_putobjcopyreq_body();
}
inline void CosTransferReqMsg::clear_putobjcopyreq_body() {
  if (putobjcopyreq_body_ != nullptr) putobjcopyreq_body_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::FTN::PutObjCopyReq& CosTransferReqMsg::_internal_putobjcopyreq_body() const {
  const ::FTN::PutObjCopyReq* p = putobjcopyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::PutObjCopyReq&>(
      ::FTN::_PutObjCopyReq_default_instance_);
}
inline const ::FTN::PutObjCopyReq& CosTransferReqMsg::putobjcopyreq_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.PutObjCopyReq_body)
  return _internal_putobjcopyreq_body();
}
inline void CosTransferReqMsg::unsafe_arena_set_allocated_putobjcopyreq_body(
    ::FTN::PutObjCopyReq* putobjcopyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(putobjcopyreq_body_);
  }
  putobjcopyreq_body_ = putobjcopyreq_body;
  if (putobjcopyreq_body) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferReqMsg.PutObjCopyReq_body)
}
inline ::FTN::PutObjCopyReq* CosTransferReqMsg::release_putobjcopyreq_body() {
  _has_bits_[0] &= ~0x00000010u;
  ::FTN::PutObjCopyReq* temp = putobjcopyreq_body_;
  putobjcopyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::PutObjCopyReq* CosTransferReqMsg::unsafe_arena_release_putobjcopyreq_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferReqMsg.PutObjCopyReq_body)
  _has_bits_[0] &= ~0x00000010u;
  ::FTN::PutObjCopyReq* temp = putobjcopyreq_body_;
  putobjcopyreq_body_ = nullptr;
  return temp;
}
inline ::FTN::PutObjCopyReq* CosTransferReqMsg::_internal_mutable_putobjcopyreq_body() {
  _has_bits_[0] |= 0x00000010u;
  if (putobjcopyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::PutObjCopyReq>(GetArena());
    putobjcopyreq_body_ = p;
  }
  return putobjcopyreq_body_;
}
inline ::FTN::PutObjCopyReq* CosTransferReqMsg::mutable_putobjcopyreq_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferReqMsg.PutObjCopyReq_body)
  return _internal_mutable_putobjcopyreq_body();
}
inline void CosTransferReqMsg::set_allocated_putobjcopyreq_body(::FTN::PutObjCopyReq* putobjcopyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete putobjcopyreq_body_;
  }
  if (putobjcopyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(putobjcopyreq_body);
    if (message_arena != submessage_arena) {
      putobjcopyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, putobjcopyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  putobjcopyreq_body_ = putobjcopyreq_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferReqMsg.PutObjCopyReq_body)
}

// optional .FTN.PartCopyReq PartCopyReq_body = 14;
inline bool CosTransferReqMsg::_internal_has_partcopyreq_body() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || partcopyreq_body_ != nullptr);
  return value;
}
inline bool CosTransferReqMsg::has_partcopyreq_body() const {
  return _internal_has_partcopyreq_body();
}
inline void CosTransferReqMsg::clear_partcopyreq_body() {
  if (partcopyreq_body_ != nullptr) partcopyreq_body_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::FTN::PartCopyReq& CosTransferReqMsg::_internal_partcopyreq_body() const {
  const ::FTN::PartCopyReq* p = partcopyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::PartCopyReq&>(
      ::FTN::_PartCopyReq_default_instance_);
}
inline const ::FTN::PartCopyReq& CosTransferReqMsg::partcopyreq_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.PartCopyReq_body)
  return _internal_partcopyreq_body();
}
inline void CosTransferReqMsg::unsafe_arena_set_allocated_partcopyreq_body(
    ::FTN::PartCopyReq* partcopyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partcopyreq_body_);
  }
  partcopyreq_body_ = partcopyreq_body;
  if (partcopyreq_body) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferReqMsg.PartCopyReq_body)
}
inline ::FTN::PartCopyReq* CosTransferReqMsg::release_partcopyreq_body() {
  _has_bits_[0] &= ~0x00000020u;
  ::FTN::PartCopyReq* temp = partcopyreq_body_;
  partcopyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::PartCopyReq* CosTransferReqMsg::unsafe_arena_release_partcopyreq_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferReqMsg.PartCopyReq_body)
  _has_bits_[0] &= ~0x00000020u;
  ::FTN::PartCopyReq* temp = partcopyreq_body_;
  partcopyreq_body_ = nullptr;
  return temp;
}
inline ::FTN::PartCopyReq* CosTransferReqMsg::_internal_mutable_partcopyreq_body() {
  _has_bits_[0] |= 0x00000020u;
  if (partcopyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::PartCopyReq>(GetArena());
    partcopyreq_body_ = p;
  }
  return partcopyreq_body_;
}
inline ::FTN::PartCopyReq* CosTransferReqMsg::mutable_partcopyreq_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferReqMsg.PartCopyReq_body)
  return _internal_mutable_partcopyreq_body();
}
inline void CosTransferReqMsg::set_allocated_partcopyreq_body(::FTN::PartCopyReq* partcopyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete partcopyreq_body_;
  }
  if (partcopyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(partcopyreq_body);
    if (message_arena != submessage_arena) {
      partcopyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partcopyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  partcopyreq_body_ = partcopyreq_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferReqMsg.PartCopyReq_body)
}

// optional .FTN.PartCopyFinishReq PartCopyFinishReq_body = 15;
inline bool CosTransferReqMsg::_internal_has_partcopyfinishreq_body() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || partcopyfinishreq_body_ != nullptr);
  return value;
}
inline bool CosTransferReqMsg::has_partcopyfinishreq_body() const {
  return _internal_has_partcopyfinishreq_body();
}
inline void CosTransferReqMsg::clear_partcopyfinishreq_body() {
  if (partcopyfinishreq_body_ != nullptr) partcopyfinishreq_body_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::FTN::PartCopyFinishReq& CosTransferReqMsg::_internal_partcopyfinishreq_body() const {
  const ::FTN::PartCopyFinishReq* p = partcopyfinishreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::PartCopyFinishReq&>(
      ::FTN::_PartCopyFinishReq_default_instance_);
}
inline const ::FTN::PartCopyFinishReq& CosTransferReqMsg::partcopyfinishreq_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferReqMsg.PartCopyFinishReq_body)
  return _internal_partcopyfinishreq_body();
}
inline void CosTransferReqMsg::unsafe_arena_set_allocated_partcopyfinishreq_body(
    ::FTN::PartCopyFinishReq* partcopyfinishreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partcopyfinishreq_body_);
  }
  partcopyfinishreq_body_ = partcopyfinishreq_body;
  if (partcopyfinishreq_body) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferReqMsg.PartCopyFinishReq_body)
}
inline ::FTN::PartCopyFinishReq* CosTransferReqMsg::release_partcopyfinishreq_body() {
  _has_bits_[0] &= ~0x00000040u;
  ::FTN::PartCopyFinishReq* temp = partcopyfinishreq_body_;
  partcopyfinishreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::PartCopyFinishReq* CosTransferReqMsg::unsafe_arena_release_partcopyfinishreq_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferReqMsg.PartCopyFinishReq_body)
  _has_bits_[0] &= ~0x00000040u;
  ::FTN::PartCopyFinishReq* temp = partcopyfinishreq_body_;
  partcopyfinishreq_body_ = nullptr;
  return temp;
}
inline ::FTN::PartCopyFinishReq* CosTransferReqMsg::_internal_mutable_partcopyfinishreq_body() {
  _has_bits_[0] |= 0x00000040u;
  if (partcopyfinishreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::PartCopyFinishReq>(GetArena());
    partcopyfinishreq_body_ = p;
  }
  return partcopyfinishreq_body_;
}
inline ::FTN::PartCopyFinishReq* CosTransferReqMsg::mutable_partcopyfinishreq_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferReqMsg.PartCopyFinishReq_body)
  return _internal_mutable_partcopyfinishreq_body();
}
inline void CosTransferReqMsg::set_allocated_partcopyfinishreq_body(::FTN::PartCopyFinishReq* partcopyfinishreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete partcopyfinishreq_body_;
  }
  if (partcopyfinishreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(partcopyfinishreq_body);
    if (message_arena != submessage_arena) {
      partcopyfinishreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partcopyfinishreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  partcopyfinishreq_body_ = partcopyfinishreq_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferReqMsg.PartCopyFinishReq_body)
}

// -------------------------------------------------------------------

// CosTransferRspMsg

// required int32 retcode = 1;
inline bool CosTransferRspMsg::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CosTransferRspMsg::has_retcode() const {
  return _internal_has_retcode();
}
inline void CosTransferRspMsg::clear_retcode() {
  retcode_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CosTransferRspMsg::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CosTransferRspMsg::retcode() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.retcode)
  return _internal_retcode();
}
inline void CosTransferRspMsg::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  retcode_ = value;
}
inline void CosTransferRspMsg::set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:FTN.CosTransferRspMsg.retcode)
}

// required string retmsg = 2;
inline bool CosTransferRspMsg::_internal_has_retmsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosTransferRspMsg::has_retmsg() const {
  return _internal_has_retmsg();
}
inline void CosTransferRspMsg::clear_retmsg() {
  retmsg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosTransferRspMsg::retmsg() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.retmsg)
  return _internal_retmsg();
}
inline void CosTransferRspMsg::set_retmsg(const std::string& value) {
  _internal_set_retmsg(value);
  // @@protoc_insertion_point(field_set:FTN.CosTransferRspMsg.retmsg)
}
inline std::string* CosTransferRspMsg::mutable_retmsg() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferRspMsg.retmsg)
  return _internal_mutable_retmsg();
}
inline const std::string& CosTransferRspMsg::_internal_retmsg() const {
  return retmsg_.Get();
}
inline void CosTransferRspMsg::_internal_set_retmsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosTransferRspMsg::set_retmsg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.CosTransferRspMsg.retmsg)
}
inline void CosTransferRspMsg::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.CosTransferRspMsg.retmsg)
}
inline void CosTransferRspMsg::set_retmsg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.CosTransferRspMsg.retmsg)
}
inline std::string* CosTransferRspMsg::_internal_mutable_retmsg() {
  _has_bits_[0] |= 0x00000001u;
  return retmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosTransferRspMsg::release_retmsg() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferRspMsg.retmsg)
  if (!_internal_has_retmsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return retmsg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosTransferRspMsg::set_allocated_retmsg(std::string* retmsg) {
  if (retmsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  retmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferRspMsg.retmsg)
}

// optional .FTN.CosTransferRspMsg.SubType sub_type = 10;
inline bool CosTransferRspMsg::_internal_has_sub_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CosTransferRspMsg::has_sub_type() const {
  return _internal_has_sub_type();
}
inline void CosTransferRspMsg::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::FTN::CosTransferRspMsg_SubType CosTransferRspMsg::_internal_sub_type() const {
  return static_cast< ::FTN::CosTransferRspMsg_SubType >(sub_type_);
}
inline ::FTN::CosTransferRspMsg_SubType CosTransferRspMsg::sub_type() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.sub_type)
  return _internal_sub_type();
}
inline void CosTransferRspMsg::_internal_set_sub_type(::FTN::CosTransferRspMsg_SubType value) {
  assert(::FTN::CosTransferRspMsg_SubType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  sub_type_ = value;
}
inline void CosTransferRspMsg::set_sub_type(::FTN::CosTransferRspMsg_SubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:FTN.CosTransferRspMsg.sub_type)
}

// optional .FTN.FileTrsfRsp FileTrsfRsp_body = 11;
inline bool CosTransferRspMsg::_internal_has_filetrsfrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || filetrsfrsp_body_ != nullptr);
  return value;
}
inline bool CosTransferRspMsg::has_filetrsfrsp_body() const {
  return _internal_has_filetrsfrsp_body();
}
inline void CosTransferRspMsg::clear_filetrsfrsp_body() {
  if (filetrsfrsp_body_ != nullptr) filetrsfrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::FTN::FileTrsfRsp& CosTransferRspMsg::_internal_filetrsfrsp_body() const {
  const ::FTN::FileTrsfRsp* p = filetrsfrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::FileTrsfRsp&>(
      ::FTN::_FileTrsfRsp_default_instance_);
}
inline const ::FTN::FileTrsfRsp& CosTransferRspMsg::filetrsfrsp_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.FileTrsfRsp_body)
  return _internal_filetrsfrsp_body();
}
inline void CosTransferRspMsg::unsafe_arena_set_allocated_filetrsfrsp_body(
    ::FTN::FileTrsfRsp* filetrsfrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filetrsfrsp_body_);
  }
  filetrsfrsp_body_ = filetrsfrsp_body;
  if (filetrsfrsp_body) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferRspMsg.FileTrsfRsp_body)
}
inline ::FTN::FileTrsfRsp* CosTransferRspMsg::release_filetrsfrsp_body() {
  _has_bits_[0] &= ~0x00000002u;
  ::FTN::FileTrsfRsp* temp = filetrsfrsp_body_;
  filetrsfrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::FileTrsfRsp* CosTransferRspMsg::unsafe_arena_release_filetrsfrsp_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferRspMsg.FileTrsfRsp_body)
  _has_bits_[0] &= ~0x00000002u;
  ::FTN::FileTrsfRsp* temp = filetrsfrsp_body_;
  filetrsfrsp_body_ = nullptr;
  return temp;
}
inline ::FTN::FileTrsfRsp* CosTransferRspMsg::_internal_mutable_filetrsfrsp_body() {
  _has_bits_[0] |= 0x00000002u;
  if (filetrsfrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::FileTrsfRsp>(GetArena());
    filetrsfrsp_body_ = p;
  }
  return filetrsfrsp_body_;
}
inline ::FTN::FileTrsfRsp* CosTransferRspMsg::mutable_filetrsfrsp_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferRspMsg.FileTrsfRsp_body)
  return _internal_mutable_filetrsfrsp_body();
}
inline void CosTransferRspMsg::set_allocated_filetrsfrsp_body(::FTN::FileTrsfRsp* filetrsfrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filetrsfrsp_body_;
  }
  if (filetrsfrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filetrsfrsp_body);
    if (message_arena != submessage_arena) {
      filetrsfrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filetrsfrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filetrsfrsp_body_ = filetrsfrsp_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferRspMsg.FileTrsfRsp_body)
}

// optional .FTN.TaskProgressRsp TaskProgressRsp_body = 12;
inline bool CosTransferRspMsg::_internal_has_taskprogressrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || taskprogressrsp_body_ != nullptr);
  return value;
}
inline bool CosTransferRspMsg::has_taskprogressrsp_body() const {
  return _internal_has_taskprogressrsp_body();
}
inline void CosTransferRspMsg::clear_taskprogressrsp_body() {
  if (taskprogressrsp_body_ != nullptr) taskprogressrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::FTN::TaskProgressRsp& CosTransferRspMsg::_internal_taskprogressrsp_body() const {
  const ::FTN::TaskProgressRsp* p = taskprogressrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TaskProgressRsp&>(
      ::FTN::_TaskProgressRsp_default_instance_);
}
inline const ::FTN::TaskProgressRsp& CosTransferRspMsg::taskprogressrsp_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.TaskProgressRsp_body)
  return _internal_taskprogressrsp_body();
}
inline void CosTransferRspMsg::unsafe_arena_set_allocated_taskprogressrsp_body(
    ::FTN::TaskProgressRsp* taskprogressrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(taskprogressrsp_body_);
  }
  taskprogressrsp_body_ = taskprogressrsp_body;
  if (taskprogressrsp_body) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferRspMsg.TaskProgressRsp_body)
}
inline ::FTN::TaskProgressRsp* CosTransferRspMsg::release_taskprogressrsp_body() {
  _has_bits_[0] &= ~0x00000004u;
  ::FTN::TaskProgressRsp* temp = taskprogressrsp_body_;
  taskprogressrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TaskProgressRsp* CosTransferRspMsg::unsafe_arena_release_taskprogressrsp_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferRspMsg.TaskProgressRsp_body)
  _has_bits_[0] &= ~0x00000004u;
  ::FTN::TaskProgressRsp* temp = taskprogressrsp_body_;
  taskprogressrsp_body_ = nullptr;
  return temp;
}
inline ::FTN::TaskProgressRsp* CosTransferRspMsg::_internal_mutable_taskprogressrsp_body() {
  _has_bits_[0] |= 0x00000004u;
  if (taskprogressrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TaskProgressRsp>(GetArena());
    taskprogressrsp_body_ = p;
  }
  return taskprogressrsp_body_;
}
inline ::FTN::TaskProgressRsp* CosTransferRspMsg::mutable_taskprogressrsp_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferRspMsg.TaskProgressRsp_body)
  return _internal_mutable_taskprogressrsp_body();
}
inline void CosTransferRspMsg::set_allocated_taskprogressrsp_body(::FTN::TaskProgressRsp* taskprogressrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete taskprogressrsp_body_;
  }
  if (taskprogressrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(taskprogressrsp_body);
    if (message_arena != submessage_arena) {
      taskprogressrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskprogressrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  taskprogressrsp_body_ = taskprogressrsp_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferRspMsg.TaskProgressRsp_body)
}

// optional .FTN.TransferNotify TransferNotify_body = 13;
inline bool CosTransferRspMsg::_internal_has_transfernotify_body() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || transfernotify_body_ != nullptr);
  return value;
}
inline bool CosTransferRspMsg::has_transfernotify_body() const {
  return _internal_has_transfernotify_body();
}
inline void CosTransferRspMsg::clear_transfernotify_body() {
  if (transfernotify_body_ != nullptr) transfernotify_body_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::FTN::TransferNotify& CosTransferRspMsg::_internal_transfernotify_body() const {
  const ::FTN::TransferNotify* p = transfernotify_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TransferNotify&>(
      ::FTN::_TransferNotify_default_instance_);
}
inline const ::FTN::TransferNotify& CosTransferRspMsg::transfernotify_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.TransferNotify_body)
  return _internal_transfernotify_body();
}
inline void CosTransferRspMsg::unsafe_arena_set_allocated_transfernotify_body(
    ::FTN::TransferNotify* transfernotify_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfernotify_body_);
  }
  transfernotify_body_ = transfernotify_body;
  if (transfernotify_body) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferRspMsg.TransferNotify_body)
}
inline ::FTN::TransferNotify* CosTransferRspMsg::release_transfernotify_body() {
  _has_bits_[0] &= ~0x00000008u;
  ::FTN::TransferNotify* temp = transfernotify_body_;
  transfernotify_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TransferNotify* CosTransferRspMsg::unsafe_arena_release_transfernotify_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferRspMsg.TransferNotify_body)
  _has_bits_[0] &= ~0x00000008u;
  ::FTN::TransferNotify* temp = transfernotify_body_;
  transfernotify_body_ = nullptr;
  return temp;
}
inline ::FTN::TransferNotify* CosTransferRspMsg::_internal_mutable_transfernotify_body() {
  _has_bits_[0] |= 0x00000008u;
  if (transfernotify_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TransferNotify>(GetArena());
    transfernotify_body_ = p;
  }
  return transfernotify_body_;
}
inline ::FTN::TransferNotify* CosTransferRspMsg::mutable_transfernotify_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferRspMsg.TransferNotify_body)
  return _internal_mutable_transfernotify_body();
}
inline void CosTransferRspMsg::set_allocated_transfernotify_body(::FTN::TransferNotify* transfernotify_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transfernotify_body_;
  }
  if (transfernotify_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfernotify_body);
    if (message_arena != submessage_arena) {
      transfernotify_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfernotify_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  transfernotify_body_ = transfernotify_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferRspMsg.TransferNotify_body)
}

// optional .FTN.TransferNotifyRsp TransferNotifyRsp_body = 14;
inline bool CosTransferRspMsg::_internal_has_transfernotifyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || transfernotifyrsp_body_ != nullptr);
  return value;
}
inline bool CosTransferRspMsg::has_transfernotifyrsp_body() const {
  return _internal_has_transfernotifyrsp_body();
}
inline void CosTransferRspMsg::clear_transfernotifyrsp_body() {
  if (transfernotifyrsp_body_ != nullptr) transfernotifyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::FTN::TransferNotifyRsp& CosTransferRspMsg::_internal_transfernotifyrsp_body() const {
  const ::FTN::TransferNotifyRsp* p = transfernotifyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TransferNotifyRsp&>(
      ::FTN::_TransferNotifyRsp_default_instance_);
}
inline const ::FTN::TransferNotifyRsp& CosTransferRspMsg::transfernotifyrsp_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.TransferNotifyRsp_body)
  return _internal_transfernotifyrsp_body();
}
inline void CosTransferRspMsg::unsafe_arena_set_allocated_transfernotifyrsp_body(
    ::FTN::TransferNotifyRsp* transfernotifyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfernotifyrsp_body_);
  }
  transfernotifyrsp_body_ = transfernotifyrsp_body;
  if (transfernotifyrsp_body) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferRspMsg.TransferNotifyRsp_body)
}
inline ::FTN::TransferNotifyRsp* CosTransferRspMsg::release_transfernotifyrsp_body() {
  _has_bits_[0] &= ~0x00000010u;
  ::FTN::TransferNotifyRsp* temp = transfernotifyrsp_body_;
  transfernotifyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TransferNotifyRsp* CosTransferRspMsg::unsafe_arena_release_transfernotifyrsp_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferRspMsg.TransferNotifyRsp_body)
  _has_bits_[0] &= ~0x00000010u;
  ::FTN::TransferNotifyRsp* temp = transfernotifyrsp_body_;
  transfernotifyrsp_body_ = nullptr;
  return temp;
}
inline ::FTN::TransferNotifyRsp* CosTransferRspMsg::_internal_mutable_transfernotifyrsp_body() {
  _has_bits_[0] |= 0x00000010u;
  if (transfernotifyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TransferNotifyRsp>(GetArena());
    transfernotifyrsp_body_ = p;
  }
  return transfernotifyrsp_body_;
}
inline ::FTN::TransferNotifyRsp* CosTransferRspMsg::mutable_transfernotifyrsp_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferRspMsg.TransferNotifyRsp_body)
  return _internal_mutable_transfernotifyrsp_body();
}
inline void CosTransferRspMsg::set_allocated_transfernotifyrsp_body(::FTN::TransferNotifyRsp* transfernotifyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transfernotifyrsp_body_;
  }
  if (transfernotifyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfernotifyrsp_body);
    if (message_arena != submessage_arena) {
      transfernotifyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfernotifyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  transfernotifyrsp_body_ = transfernotifyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferRspMsg.TransferNotifyRsp_body)
}

// optional .FTN.PutObjCopyRsp PutObjCopyRsp_body = 15;
inline bool CosTransferRspMsg::_internal_has_putobjcopyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || putobjcopyrsp_body_ != nullptr);
  return value;
}
inline bool CosTransferRspMsg::has_putobjcopyrsp_body() const {
  return _internal_has_putobjcopyrsp_body();
}
inline void CosTransferRspMsg::clear_putobjcopyrsp_body() {
  if (putobjcopyrsp_body_ != nullptr) putobjcopyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::FTN::PutObjCopyRsp& CosTransferRspMsg::_internal_putobjcopyrsp_body() const {
  const ::FTN::PutObjCopyRsp* p = putobjcopyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::PutObjCopyRsp&>(
      ::FTN::_PutObjCopyRsp_default_instance_);
}
inline const ::FTN::PutObjCopyRsp& CosTransferRspMsg::putobjcopyrsp_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.PutObjCopyRsp_body)
  return _internal_putobjcopyrsp_body();
}
inline void CosTransferRspMsg::unsafe_arena_set_allocated_putobjcopyrsp_body(
    ::FTN::PutObjCopyRsp* putobjcopyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(putobjcopyrsp_body_);
  }
  putobjcopyrsp_body_ = putobjcopyrsp_body;
  if (putobjcopyrsp_body) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferRspMsg.PutObjCopyRsp_body)
}
inline ::FTN::PutObjCopyRsp* CosTransferRspMsg::release_putobjcopyrsp_body() {
  _has_bits_[0] &= ~0x00000020u;
  ::FTN::PutObjCopyRsp* temp = putobjcopyrsp_body_;
  putobjcopyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::PutObjCopyRsp* CosTransferRspMsg::unsafe_arena_release_putobjcopyrsp_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferRspMsg.PutObjCopyRsp_body)
  _has_bits_[0] &= ~0x00000020u;
  ::FTN::PutObjCopyRsp* temp = putobjcopyrsp_body_;
  putobjcopyrsp_body_ = nullptr;
  return temp;
}
inline ::FTN::PutObjCopyRsp* CosTransferRspMsg::_internal_mutable_putobjcopyrsp_body() {
  _has_bits_[0] |= 0x00000020u;
  if (putobjcopyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::PutObjCopyRsp>(GetArena());
    putobjcopyrsp_body_ = p;
  }
  return putobjcopyrsp_body_;
}
inline ::FTN::PutObjCopyRsp* CosTransferRspMsg::mutable_putobjcopyrsp_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferRspMsg.PutObjCopyRsp_body)
  return _internal_mutable_putobjcopyrsp_body();
}
inline void CosTransferRspMsg::set_allocated_putobjcopyrsp_body(::FTN::PutObjCopyRsp* putobjcopyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete putobjcopyrsp_body_;
  }
  if (putobjcopyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(putobjcopyrsp_body);
    if (message_arena != submessage_arena) {
      putobjcopyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, putobjcopyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  putobjcopyrsp_body_ = putobjcopyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferRspMsg.PutObjCopyRsp_body)
}

// optional .FTN.PartCopyRsp PartCopyRsp_body = 16;
inline bool CosTransferRspMsg::_internal_has_partcopyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || partcopyrsp_body_ != nullptr);
  return value;
}
inline bool CosTransferRspMsg::has_partcopyrsp_body() const {
  return _internal_has_partcopyrsp_body();
}
inline void CosTransferRspMsg::clear_partcopyrsp_body() {
  if (partcopyrsp_body_ != nullptr) partcopyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::FTN::PartCopyRsp& CosTransferRspMsg::_internal_partcopyrsp_body() const {
  const ::FTN::PartCopyRsp* p = partcopyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::PartCopyRsp&>(
      ::FTN::_PartCopyRsp_default_instance_);
}
inline const ::FTN::PartCopyRsp& CosTransferRspMsg::partcopyrsp_body() const {
  // @@protoc_insertion_point(field_get:FTN.CosTransferRspMsg.PartCopyRsp_body)
  return _internal_partcopyrsp_body();
}
inline void CosTransferRspMsg::unsafe_arena_set_allocated_partcopyrsp_body(
    ::FTN::PartCopyRsp* partcopyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partcopyrsp_body_);
  }
  partcopyrsp_body_ = partcopyrsp_body;
  if (partcopyrsp_body) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.CosTransferRspMsg.PartCopyRsp_body)
}
inline ::FTN::PartCopyRsp* CosTransferRspMsg::release_partcopyrsp_body() {
  _has_bits_[0] &= ~0x00000040u;
  ::FTN::PartCopyRsp* temp = partcopyrsp_body_;
  partcopyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::PartCopyRsp* CosTransferRspMsg::unsafe_arena_release_partcopyrsp_body() {
  // @@protoc_insertion_point(field_release:FTN.CosTransferRspMsg.PartCopyRsp_body)
  _has_bits_[0] &= ~0x00000040u;
  ::FTN::PartCopyRsp* temp = partcopyrsp_body_;
  partcopyrsp_body_ = nullptr;
  return temp;
}
inline ::FTN::PartCopyRsp* CosTransferRspMsg::_internal_mutable_partcopyrsp_body() {
  _has_bits_[0] |= 0x00000040u;
  if (partcopyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::PartCopyRsp>(GetArena());
    partcopyrsp_body_ = p;
  }
  return partcopyrsp_body_;
}
inline ::FTN::PartCopyRsp* CosTransferRspMsg::mutable_partcopyrsp_body() {
  // @@protoc_insertion_point(field_mutable:FTN.CosTransferRspMsg.PartCopyRsp_body)
  return _internal_mutable_partcopyrsp_body();
}
inline void CosTransferRspMsg::set_allocated_partcopyrsp_body(::FTN::PartCopyRsp* partcopyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete partcopyrsp_body_;
  }
  if (partcopyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(partcopyrsp_body);
    if (message_arena != submessage_arena) {
      partcopyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partcopyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  partcopyrsp_body_ = partcopyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:FTN.CosTransferRspMsg.PartCopyRsp_body)
}

// -------------------------------------------------------------------

// FileTrsfReq

// required string srcpath = 1;
inline bool FileTrsfReq::_internal_has_srcpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileTrsfReq::has_srcpath() const {
  return _internal_has_srcpath();
}
inline void FileTrsfReq::clear_srcpath() {
  srcpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileTrsfReq::srcpath() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.srcpath)
  return _internal_srcpath();
}
inline void FileTrsfReq::set_srcpath(const std::string& value) {
  _internal_set_srcpath(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.srcpath)
}
inline std::string* FileTrsfReq::mutable_srcpath() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.srcpath)
  return _internal_mutable_srcpath();
}
inline const std::string& FileTrsfReq::_internal_srcpath() const {
  return srcpath_.Get();
}
inline void FileTrsfReq::_internal_set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.srcpath)
}
inline void FileTrsfReq::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.srcpath)
}
inline void FileTrsfReq::set_srcpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.srcpath)
}
inline std::string* FileTrsfReq::_internal_mutable_srcpath() {
  _has_bits_[0] |= 0x00000001u;
  return srcpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_srcpath() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.srcpath)
  if (!_internal_has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return srcpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  srcpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.srcpath)
}

// required string srcidc = 2;
inline bool FileTrsfReq::_internal_has_srcidc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileTrsfReq::has_srcidc() const {
  return _internal_has_srcidc();
}
inline void FileTrsfReq::clear_srcidc() {
  srcidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileTrsfReq::srcidc() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.srcidc)
  return _internal_srcidc();
}
inline void FileTrsfReq::set_srcidc(const std::string& value) {
  _internal_set_srcidc(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.srcidc)
}
inline std::string* FileTrsfReq::mutable_srcidc() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.srcidc)
  return _internal_mutable_srcidc();
}
inline const std::string& FileTrsfReq::_internal_srcidc() const {
  return srcidc_.Get();
}
inline void FileTrsfReq::_internal_set_srcidc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_srcidc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.srcidc)
}
inline void FileTrsfReq::set_srcidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.srcidc)
}
inline void FileTrsfReq::set_srcidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.srcidc)
}
inline std::string* FileTrsfReq::_internal_mutable_srcidc() {
  _has_bits_[0] |= 0x00000002u;
  return srcidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_srcidc() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.srcidc)
  if (!_internal_has_srcidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return srcidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_srcidc(std::string* srcidc) {
  if (srcidc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  srcidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.srcidc)
}

// required string storagetype = 3;
inline bool FileTrsfReq::_internal_has_storagetype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileTrsfReq::has_storagetype() const {
  return _internal_has_storagetype();
}
inline void FileTrsfReq::clear_storagetype() {
  storagetype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileTrsfReq::storagetype() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.storagetype)
  return _internal_storagetype();
}
inline void FileTrsfReq::set_storagetype(const std::string& value) {
  _internal_set_storagetype(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.storagetype)
}
inline std::string* FileTrsfReq::mutable_storagetype() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.storagetype)
  return _internal_mutable_storagetype();
}
inline const std::string& FileTrsfReq::_internal_storagetype() const {
  return storagetype_.Get();
}
inline void FileTrsfReq::_internal_set_storagetype(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_storagetype(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.storagetype)
}
inline void FileTrsfReq::set_storagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.storagetype)
}
inline void FileTrsfReq::set_storagetype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.storagetype)
}
inline std::string* FileTrsfReq::_internal_mutable_storagetype() {
  _has_bits_[0] |= 0x00000004u;
  return storagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_storagetype() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.storagetype)
  if (!_internal_has_storagetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return storagetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_storagetype(std::string* storagetype) {
  if (storagetype != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.storagetype)
}

// required string dstpath = 4;
inline bool FileTrsfReq::_internal_has_dstpath() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileTrsfReq::has_dstpath() const {
  return _internal_has_dstpath();
}
inline void FileTrsfReq::clear_dstpath() {
  dstpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FileTrsfReq::dstpath() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.dstpath)
  return _internal_dstpath();
}
inline void FileTrsfReq::set_dstpath(const std::string& value) {
  _internal_set_dstpath(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.dstpath)
}
inline std::string* FileTrsfReq::mutable_dstpath() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.dstpath)
  return _internal_mutable_dstpath();
}
inline const std::string& FileTrsfReq::_internal_dstpath() const {
  return dstpath_.Get();
}
inline void FileTrsfReq::_internal_set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.dstpath)
}
inline void FileTrsfReq::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.dstpath)
}
inline void FileTrsfReq::set_dstpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.dstpath)
}
inline std::string* FileTrsfReq::_internal_mutable_dstpath() {
  _has_bits_[0] |= 0x00000008u;
  return dstpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_dstpath() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.dstpath)
  if (!_internal_has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dstpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dstpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.dstpath)
}

// required string dstidc = 5;
inline bool FileTrsfReq::_internal_has_dstidc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileTrsfReq::has_dstidc() const {
  return _internal_has_dstidc();
}
inline void FileTrsfReq::clear_dstidc() {
  dstidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FileTrsfReq::dstidc() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.dstidc)
  return _internal_dstidc();
}
inline void FileTrsfReq::set_dstidc(const std::string& value) {
  _internal_set_dstidc(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.dstidc)
}
inline std::string* FileTrsfReq::mutable_dstidc() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.dstidc)
  return _internal_mutable_dstidc();
}
inline const std::string& FileTrsfReq::_internal_dstidc() const {
  return dstidc_.Get();
}
inline void FileTrsfReq::_internal_set_dstidc(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_dstidc(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.dstidc)
}
inline void FileTrsfReq::set_dstidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.dstidc)
}
inline void FileTrsfReq::set_dstidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.dstidc)
}
inline std::string* FileTrsfReq::_internal_mutable_dstidc() {
  _has_bits_[0] |= 0x00000010u;
  return dstidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_dstidc() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.dstidc)
  if (!_internal_has_dstidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return dstidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_dstidc(std::string* dstidc) {
  if (dstidc != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dstidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.dstidc)
}

// required bool delsrc = 6;
inline bool FileTrsfReq::_internal_has_delsrc() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_delsrc() const {
  return _internal_has_delsrc();
}
inline void FileTrsfReq::clear_delsrc() {
  delsrc_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool FileTrsfReq::_internal_delsrc() const {
  return delsrc_;
}
inline bool FileTrsfReq::delsrc() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.delsrc)
  return _internal_delsrc();
}
inline void FileTrsfReq::_internal_set_delsrc(bool value) {
  _has_bits_[0] |= 0x00008000u;
  delsrc_ = value;
}
inline void FileTrsfReq::set_delsrc(bool value) {
  _internal_set_delsrc(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.delsrc)
}

// required bool set_replication = 7;
inline bool FileTrsfReq::_internal_has_set_replication() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_set_replication() const {
  return _internal_has_set_replication();
}
inline void FileTrsfReq::clear_set_replication() {
  set_replication_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool FileTrsfReq::_internal_set_replication() const {
  return set_replication_;
}
inline bool FileTrsfReq::set_replication() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.set_replication)
  return _internal_set_replication();
}
inline void FileTrsfReq::_internal_set_set_replication(bool value) {
  _has_bits_[0] |= 0x00010000u;
  set_replication_ = value;
}
inline void FileTrsfReq::set_set_replication(bool value) {
  _internal_set_set_replication(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.set_replication)
}

// optional uint64 srcstart_range = 8;
inline bool FileTrsfReq::_internal_has_srcstart_range() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_srcstart_range() const {
  return _internal_has_srcstart_range();
}
inline void FileTrsfReq::clear_srcstart_range() {
  srcstart_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::_internal_srcstart_range() const {
  return srcstart_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::srcstart_range() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.srcstart_range)
  return _internal_srcstart_range();
}
inline void FileTrsfReq::_internal_set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  srcstart_range_ = value;
}
inline void FileTrsfReq::set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_srcstart_range(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.srcstart_range)
}

// optional uint64 srcend_range = 9;
inline bool FileTrsfReq::_internal_has_srcend_range() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_srcend_range() const {
  return _internal_has_srcend_range();
}
inline void FileTrsfReq::clear_srcend_range() {
  srcend_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::_internal_srcend_range() const {
  return srcend_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::srcend_range() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.srcend_range)
  return _internal_srcend_range();
}
inline void FileTrsfReq::_internal_set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  srcend_range_ = value;
}
inline void FileTrsfReq::set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_srcend_range(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.srcend_range)
}

// optional uint64 dststart_range = 10;
inline bool FileTrsfReq::_internal_has_dststart_range() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_dststart_range() const {
  return _internal_has_dststart_range();
}
inline void FileTrsfReq::clear_dststart_range() {
  dststart_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::_internal_dststart_range() const {
  return dststart_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::dststart_range() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.dststart_range)
  return _internal_dststart_range();
}
inline void FileTrsfReq::_internal_set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00080000u;
  dststart_range_ = value;
}
inline void FileTrsfReq::set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dststart_range(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.dststart_range)
}

// required bool notifyflag = 11 [default = false];
inline bool FileTrsfReq::_internal_has_notifyflag() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_notifyflag() const {
  return _internal_has_notifyflag();
}
inline void FileTrsfReq::clear_notifyflag() {
  notifyflag_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool FileTrsfReq::_internal_notifyflag() const {
  return notifyflag_;
}
inline bool FileTrsfReq::notifyflag() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.notifyflag)
  return _internal_notifyflag();
}
inline void FileTrsfReq::_internal_set_notifyflag(bool value) {
  _has_bits_[0] |= 0x00020000u;
  notifyflag_ = value;
}
inline void FileTrsfReq::set_notifyflag(bool value) {
  _internal_set_notifyflag(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.notifyflag)
}

// optional string notifyip = 12;
inline bool FileTrsfReq::_internal_has_notifyip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FileTrsfReq::has_notifyip() const {
  return _internal_has_notifyip();
}
inline void FileTrsfReq::clear_notifyip() {
  notifyip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& FileTrsfReq::notifyip() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.notifyip)
  return _internal_notifyip();
}
inline void FileTrsfReq::set_notifyip(const std::string& value) {
  _internal_set_notifyip(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.notifyip)
}
inline std::string* FileTrsfReq::mutable_notifyip() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.notifyip)
  return _internal_mutable_notifyip();
}
inline const std::string& FileTrsfReq::_internal_notifyip() const {
  return notifyip_.Get();
}
inline void FileTrsfReq::_internal_set_notifyip(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  notifyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_notifyip(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  notifyip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.notifyip)
}
inline void FileTrsfReq::set_notifyip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  notifyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.notifyip)
}
inline void FileTrsfReq::set_notifyip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  notifyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.notifyip)
}
inline std::string* FileTrsfReq::_internal_mutable_notifyip() {
  _has_bits_[0] |= 0x00000020u;
  return notifyip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_notifyip() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.notifyip)
  if (!_internal_has_notifyip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return notifyip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_notifyip(std::string* notifyip) {
  if (notifyip != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  notifyip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notifyip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.notifyip)
}

// optional uint32 notifyport = 13;
inline bool FileTrsfReq::_internal_has_notifyport() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_notifyport() const {
  return _internal_has_notifyport();
}
inline void FileTrsfReq::clear_notifyport() {
  notifyport_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::_internal_notifyport() const {
  return notifyport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::notifyport() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.notifyport)
  return _internal_notifyport();
}
inline void FileTrsfReq::_internal_set_notifyport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  notifyport_ = value;
}
inline void FileTrsfReq::set_notifyport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notifyport(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.notifyport)
}

// optional uint32 notifysmcd = 14;
inline bool FileTrsfReq::_internal_has_notifysmcd() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_notifysmcd() const {
  return _internal_has_notifysmcd();
}
inline void FileTrsfReq::clear_notifysmcd() {
  notifysmcd_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::_internal_notifysmcd() const {
  return notifysmcd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::notifysmcd() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.notifysmcd)
  return _internal_notifysmcd();
}
inline void FileTrsfReq::_internal_set_notifysmcd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  notifysmcd_ = value;
}
inline void FileTrsfReq::set_notifysmcd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notifysmcd(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.notifysmcd)
}

// optional string version = 15;
inline bool FileTrsfReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FileTrsfReq::has_version() const {
  return _internal_has_version();
}
inline void FileTrsfReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& FileTrsfReq::version() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.version)
  return _internal_version();
}
inline void FileTrsfReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.version)
}
inline std::string* FileTrsfReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.version)
  return _internal_mutable_version();
}
inline const std::string& FileTrsfReq::_internal_version() const {
  return version_.Get();
}
inline void FileTrsfReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.version)
}
inline void FileTrsfReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.version)
}
inline void FileTrsfReq::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.version)
}
inline std::string* FileTrsfReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000040u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_version() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.version)
}

// optional uint32 retry_times = 16 [default = 1];
inline bool FileTrsfReq::_internal_has_retry_times() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_retry_times() const {
  return _internal_has_retry_times();
}
inline void FileTrsfReq::clear_retry_times() {
  retry_times_ = 1u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::_internal_retry_times() const {
  return retry_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::retry_times() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.retry_times)
  return _internal_retry_times();
}
inline void FileTrsfReq::_internal_set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  retry_times_ = value;
}
inline void FileTrsfReq::set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retry_times(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.retry_times)
}

// optional uint32 platform_type = 17 [default = 1];
inline bool FileTrsfReq::_internal_has_platform_type() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_platform_type() const {
  return _internal_has_platform_type();
}
inline void FileTrsfReq::clear_platform_type() {
  platform_type_ = 1u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::_internal_platform_type() const {
  return platform_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::platform_type() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.platform_type)
  return _internal_platform_type();
}
inline void FileTrsfReq::_internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  platform_type_ = value;
}
inline void FileTrsfReq::set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.platform_type)
}

// optional string dst_uploadkey = 18;
inline bool FileTrsfReq::_internal_has_dst_uploadkey() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FileTrsfReq::has_dst_uploadkey() const {
  return _internal_has_dst_uploadkey();
}
inline void FileTrsfReq::clear_dst_uploadkey() {
  dst_uploadkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& FileTrsfReq::dst_uploadkey() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.dst_uploadkey)
  return _internal_dst_uploadkey();
}
inline void FileTrsfReq::set_dst_uploadkey(const std::string& value) {
  _internal_set_dst_uploadkey(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.dst_uploadkey)
}
inline std::string* FileTrsfReq::mutable_dst_uploadkey() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.dst_uploadkey)
  return _internal_mutable_dst_uploadkey();
}
inline const std::string& FileTrsfReq::_internal_dst_uploadkey() const {
  return dst_uploadkey_.Get();
}
inline void FileTrsfReq::_internal_set_dst_uploadkey(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_dst_uploadkey(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  dst_uploadkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.dst_uploadkey)
}
inline void FileTrsfReq::set_dst_uploadkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.dst_uploadkey)
}
inline void FileTrsfReq::set_dst_uploadkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.dst_uploadkey)
}
inline std::string* FileTrsfReq::_internal_mutable_dst_uploadkey() {
  _has_bits_[0] |= 0x00000080u;
  return dst_uploadkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_dst_uploadkey() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.dst_uploadkey)
  if (!_internal_has_dst_uploadkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return dst_uploadkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_dst_uploadkey(std::string* dst_uploadkey) {
  if (dst_uploadkey != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  dst_uploadkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_uploadkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.dst_uploadkey)
}

// optional uint64 dst_block_num = 19;
inline bool FileTrsfReq::_internal_has_dst_block_num() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_dst_block_num() const {
  return _internal_has_dst_block_num();
}
inline void FileTrsfReq::clear_dst_block_num() {
  dst_block_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::_internal_dst_block_num() const {
  return dst_block_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileTrsfReq::dst_block_num() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.dst_block_num)
  return _internal_dst_block_num();
}
inline void FileTrsfReq::_internal_set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00100000u;
  dst_block_num_ = value;
}
inline void FileTrsfReq::set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dst_block_num(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.dst_block_num)
}

// optional .FTN.TrsfSseInfo sseinfo = 20;
inline bool FileTrsfReq::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool FileTrsfReq::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void FileTrsfReq::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::FTN::TrsfSseInfo& FileTrsfReq::_internal_sseinfo() const {
  const ::FTN::TrsfSseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TrsfSseInfo&>(
      ::FTN::_TrsfSseInfo_default_instance_);
}
inline const ::FTN::TrsfSseInfo& FileTrsfReq::sseinfo() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.sseinfo)
  return _internal_sseinfo();
}
inline void FileTrsfReq::unsafe_arena_set_allocated_sseinfo(
    ::FTN::TrsfSseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.FileTrsfReq.sseinfo)
}
inline ::FTN::TrsfSseInfo* FileTrsfReq::release_sseinfo() {
  _has_bits_[0] &= ~0x00000400u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TrsfSseInfo* FileTrsfReq::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.sseinfo)
  _has_bits_[0] &= ~0x00000400u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::FTN::TrsfSseInfo* FileTrsfReq::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000400u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TrsfSseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::FTN::TrsfSseInfo* FileTrsfReq::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void FileTrsfReq::set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.sseinfo)
}

// optional .ClientCos.UploadAttr uploadattr = 21;
inline bool FileTrsfReq::_internal_has_uploadattr() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || uploadattr_ != nullptr);
  return value;
}
inline bool FileTrsfReq::has_uploadattr() const {
  return _internal_has_uploadattr();
}
inline const ::ClientCos::UploadAttr& FileTrsfReq::_internal_uploadattr() const {
  const ::ClientCos::UploadAttr* p = uploadattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::UploadAttr&>(
      ::ClientCos::_UploadAttr_default_instance_);
}
inline const ::ClientCos::UploadAttr& FileTrsfReq::uploadattr() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.uploadattr)
  return _internal_uploadattr();
}
inline void FileTrsfReq::unsafe_arena_set_allocated_uploadattr(
    ::ClientCos::UploadAttr* uploadattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploadattr_);
  }
  uploadattr_ = uploadattr;
  if (uploadattr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.FileTrsfReq.uploadattr)
}
inline ::ClientCos::UploadAttr* FileTrsfReq::release_uploadattr() {
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::UploadAttr* temp = uploadattr_;
  uploadattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::UploadAttr* FileTrsfReq::unsafe_arena_release_uploadattr() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.uploadattr)
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::UploadAttr* temp = uploadattr_;
  uploadattr_ = nullptr;
  return temp;
}
inline ::ClientCos::UploadAttr* FileTrsfReq::_internal_mutable_uploadattr() {
  _has_bits_[0] |= 0x00000800u;
  if (uploadattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::UploadAttr>(GetArena());
    uploadattr_ = p;
  }
  return uploadattr_;
}
inline ::ClientCos::UploadAttr* FileTrsfReq::mutable_uploadattr() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.uploadattr)
  return _internal_mutable_uploadattr();
}
inline void FileTrsfReq::set_allocated_uploadattr(::ClientCos::UploadAttr* uploadattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploadattr_);
  }
  if (uploadattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploadattr)->GetArena();
    if (message_arena != submessage_arena) {
      uploadattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uploadattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  uploadattr_ = uploadattr;
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.uploadattr)
}

// optional uint32 src_platform_type = 22 [default = 1];
inline bool FileTrsfReq::_internal_has_src_platform_type() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_src_platform_type() const {
  return _internal_has_src_platform_type();
}
inline void FileTrsfReq::clear_src_platform_type() {
  src_platform_type_ = 1u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::_internal_src_platform_type() const {
  return src_platform_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::src_platform_type() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.src_platform_type)
  return _internal_src_platform_type();
}
inline void FileTrsfReq::_internal_set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  src_platform_type_ = value;
}
inline void FileTrsfReq::set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_platform_type(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.src_platform_type)
}

// optional string part_verify_content = 23;
inline bool FileTrsfReq::_internal_has_part_verify_content() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FileTrsfReq::has_part_verify_content() const {
  return _internal_has_part_verify_content();
}
inline void FileTrsfReq::clear_part_verify_content() {
  part_verify_content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& FileTrsfReq::part_verify_content() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.part_verify_content)
  return _internal_part_verify_content();
}
inline void FileTrsfReq::set_part_verify_content(const std::string& value) {
  _internal_set_part_verify_content(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.part_verify_content)
}
inline std::string* FileTrsfReq::mutable_part_verify_content() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.part_verify_content)
  return _internal_mutable_part_verify_content();
}
inline const std::string& FileTrsfReq::_internal_part_verify_content() const {
  return part_verify_content_.Get();
}
inline void FileTrsfReq::_internal_set_part_verify_content(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  part_verify_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_part_verify_content(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  part_verify_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.part_verify_content)
}
inline void FileTrsfReq::set_part_verify_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  part_verify_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.part_verify_content)
}
inline void FileTrsfReq::set_part_verify_content(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  part_verify_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.part_verify_content)
}
inline std::string* FileTrsfReq::_internal_mutable_part_verify_content() {
  _has_bits_[0] |= 0x00000100u;
  return part_verify_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_part_verify_content() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.part_verify_content)
  if (!_internal_has_part_verify_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return part_verify_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_part_verify_content(std::string* part_verify_content) {
  if (part_verify_content != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  part_verify_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), part_verify_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.part_verify_content)
}

// optional .FTN.MultiRegionList region_list = 24;
inline bool FileTrsfReq::_internal_has_region_list() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || region_list_ != nullptr);
  return value;
}
inline bool FileTrsfReq::has_region_list() const {
  return _internal_has_region_list();
}
inline void FileTrsfReq::clear_region_list() {
  if (region_list_ != nullptr) region_list_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::FTN::MultiRegionList& FileTrsfReq::_internal_region_list() const {
  const ::FTN::MultiRegionList* p = region_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::MultiRegionList&>(
      ::FTN::_MultiRegionList_default_instance_);
}
inline const ::FTN::MultiRegionList& FileTrsfReq::region_list() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.region_list)
  return _internal_region_list();
}
inline void FileTrsfReq::unsafe_arena_set_allocated_region_list(
    ::FTN::MultiRegionList* region_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_list_);
  }
  region_list_ = region_list;
  if (region_list) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.FileTrsfReq.region_list)
}
inline ::FTN::MultiRegionList* FileTrsfReq::release_region_list() {
  _has_bits_[0] &= ~0x00001000u;
  ::FTN::MultiRegionList* temp = region_list_;
  region_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::MultiRegionList* FileTrsfReq::unsafe_arena_release_region_list() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.region_list)
  _has_bits_[0] &= ~0x00001000u;
  ::FTN::MultiRegionList* temp = region_list_;
  region_list_ = nullptr;
  return temp;
}
inline ::FTN::MultiRegionList* FileTrsfReq::_internal_mutable_region_list() {
  _has_bits_[0] |= 0x00001000u;
  if (region_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::MultiRegionList>(GetArena());
    region_list_ = p;
  }
  return region_list_;
}
inline ::FTN::MultiRegionList* FileTrsfReq::mutable_region_list() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.region_list)
  return _internal_mutable_region_list();
}
inline void FileTrsfReq::set_allocated_region_list(::FTN::MultiRegionList* region_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_list_;
  }
  if (region_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_list);
    if (message_arena != submessage_arena) {
      region_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  region_list_ = region_list;
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.region_list)
}

// optional uint32 multi_region_seq = 25;
inline bool FileTrsfReq::_internal_has_multi_region_seq() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FileTrsfReq::has_multi_region_seq() const {
  return _internal_has_multi_region_seq();
}
inline void FileTrsfReq::clear_multi_region_seq() {
  multi_region_seq_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::_internal_multi_region_seq() const {
  return multi_region_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileTrsfReq::multi_region_seq() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.multi_region_seq)
  return _internal_multi_region_seq();
}
inline void FileTrsfReq::_internal_set_multi_region_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  multi_region_seq_ = value;
}
inline void FileTrsfReq::set_multi_region_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multi_region_seq(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.multi_region_seq)
}

// optional bytes cgi_args = 26;
inline bool FileTrsfReq::_internal_has_cgi_args() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FileTrsfReq::has_cgi_args() const {
  return _internal_has_cgi_args();
}
inline void FileTrsfReq::clear_cgi_args() {
  cgi_args_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& FileTrsfReq::cgi_args() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfReq.cgi_args)
  return _internal_cgi_args();
}
inline void FileTrsfReq::set_cgi_args(const std::string& value) {
  _internal_set_cgi_args(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfReq.cgi_args)
}
inline std::string* FileTrsfReq::mutable_cgi_args() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfReq.cgi_args)
  return _internal_mutable_cgi_args();
}
inline const std::string& FileTrsfReq::_internal_cgi_args() const {
  return cgi_args_.Get();
}
inline void FileTrsfReq::_internal_set_cgi_args(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfReq::set_cgi_args(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfReq.cgi_args)
}
inline void FileTrsfReq::set_cgi_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfReq.cgi_args)
}
inline void FileTrsfReq::set_cgi_args(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfReq.cgi_args)
}
inline std::string* FileTrsfReq::_internal_mutable_cgi_args() {
  _has_bits_[0] |= 0x00000200u;
  return cgi_args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfReq::release_cgi_args() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfReq.cgi_args)
  if (!_internal_has_cgi_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return cgi_args_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfReq::set_allocated_cgi_args(std::string* cgi_args) {
  if (cgi_args != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  cgi_args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgi_args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfReq.cgi_args)
}

// -------------------------------------------------------------------

// MultiRegionList

// repeated string regions = 1;
inline int MultiRegionList::_internal_regions_size() const {
  return regions_.size();
}
inline int MultiRegionList::regions_size() const {
  return _internal_regions_size();
}
inline void MultiRegionList::clear_regions() {
  regions_.Clear();
}
inline std::string* MultiRegionList::add_regions() {
  // @@protoc_insertion_point(field_add_mutable:FTN.MultiRegionList.regions)
  return _internal_add_regions();
}
inline const std::string& MultiRegionList::_internal_regions(int index) const {
  return regions_.Get(index);
}
inline const std::string& MultiRegionList::regions(int index) const {
  // @@protoc_insertion_point(field_get:FTN.MultiRegionList.regions)
  return _internal_regions(index);
}
inline std::string* MultiRegionList::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:FTN.MultiRegionList.regions)
  return regions_.Mutable(index);
}
inline void MultiRegionList::set_regions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FTN.MultiRegionList.regions)
  regions_.Mutable(index)->assign(value);
}
inline void MultiRegionList::set_regions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FTN.MultiRegionList.regions)
  regions_.Mutable(index)->assign(std::move(value));
}
inline void MultiRegionList::set_regions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  regions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FTN.MultiRegionList.regions)
}
inline void MultiRegionList::set_regions(int index, const char* value, size_t size) {
  regions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FTN.MultiRegionList.regions)
}
inline std::string* MultiRegionList::_internal_add_regions() {
  return regions_.Add();
}
inline void MultiRegionList::add_regions(const std::string& value) {
  regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FTN.MultiRegionList.regions)
}
inline void MultiRegionList::add_regions(std::string&& value) {
  regions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FTN.MultiRegionList.regions)
}
inline void MultiRegionList::add_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FTN.MultiRegionList.regions)
}
inline void MultiRegionList::add_regions(const char* value, size_t size) {
  regions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FTN.MultiRegionList.regions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiRegionList::regions() const {
  // @@protoc_insertion_point(field_list:FTN.MultiRegionList.regions)
  return regions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiRegionList::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:FTN.MultiRegionList.regions)
  return &regions_;
}

// -------------------------------------------------------------------

// PutObjCopyReq

// required string srcpath = 1;
inline bool PutObjCopyReq::_internal_has_srcpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_srcpath() const {
  return _internal_has_srcpath();
}
inline void PutObjCopyReq::clear_srcpath() {
  srcpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutObjCopyReq::srcpath() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.srcpath)
  return _internal_srcpath();
}
inline void PutObjCopyReq::set_srcpath(const std::string& value) {
  _internal_set_srcpath(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.srcpath)
}
inline std::string* PutObjCopyReq::mutable_srcpath() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.srcpath)
  return _internal_mutable_srcpath();
}
inline const std::string& PutObjCopyReq::_internal_srcpath() const {
  return srcpath_.Get();
}
inline void PutObjCopyReq::_internal_set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.srcpath)
}
inline void PutObjCopyReq::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.srcpath)
}
inline void PutObjCopyReq::set_srcpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.srcpath)
}
inline std::string* PutObjCopyReq::_internal_mutable_srcpath() {
  _has_bits_[0] |= 0x00000001u;
  return srcpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_srcpath() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.srcpath)
  if (!_internal_has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return srcpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  srcpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.srcpath)
}

// required string srcidc = 2;
inline bool PutObjCopyReq::_internal_has_srcidc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_srcidc() const {
  return _internal_has_srcidc();
}
inline void PutObjCopyReq::clear_srcidc() {
  srcidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PutObjCopyReq::srcidc() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.srcidc)
  return _internal_srcidc();
}
inline void PutObjCopyReq::set_srcidc(const std::string& value) {
  _internal_set_srcidc(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.srcidc)
}
inline std::string* PutObjCopyReq::mutable_srcidc() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.srcidc)
  return _internal_mutable_srcidc();
}
inline const std::string& PutObjCopyReq::_internal_srcidc() const {
  return srcidc_.Get();
}
inline void PutObjCopyReq::_internal_set_srcidc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_srcidc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.srcidc)
}
inline void PutObjCopyReq::set_srcidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.srcidc)
}
inline void PutObjCopyReq::set_srcidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.srcidc)
}
inline std::string* PutObjCopyReq::_internal_mutable_srcidc() {
  _has_bits_[0] |= 0x00000002u;
  return srcidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_srcidc() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.srcidc)
  if (!_internal_has_srcidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return srcidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_srcidc(std::string* srcidc) {
  if (srcidc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  srcidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.srcidc)
}

// required string storagetype = 3;
inline bool PutObjCopyReq::_internal_has_storagetype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_storagetype() const {
  return _internal_has_storagetype();
}
inline void PutObjCopyReq::clear_storagetype() {
  storagetype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PutObjCopyReq::storagetype() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.storagetype)
  return _internal_storagetype();
}
inline void PutObjCopyReq::set_storagetype(const std::string& value) {
  _internal_set_storagetype(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.storagetype)
}
inline std::string* PutObjCopyReq::mutable_storagetype() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.storagetype)
  return _internal_mutable_storagetype();
}
inline const std::string& PutObjCopyReq::_internal_storagetype() const {
  return storagetype_.Get();
}
inline void PutObjCopyReq::_internal_set_storagetype(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_storagetype(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.storagetype)
}
inline void PutObjCopyReq::set_storagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.storagetype)
}
inline void PutObjCopyReq::set_storagetype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.storagetype)
}
inline std::string* PutObjCopyReq::_internal_mutable_storagetype() {
  _has_bits_[0] |= 0x00000004u;
  return storagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_storagetype() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.storagetype)
  if (!_internal_has_storagetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return storagetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_storagetype(std::string* storagetype) {
  if (storagetype != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.storagetype)
}

// required string dstpath = 4;
inline bool PutObjCopyReq::_internal_has_dstpath() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_dstpath() const {
  return _internal_has_dstpath();
}
inline void PutObjCopyReq::clear_dstpath() {
  dstpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PutObjCopyReq::dstpath() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.dstpath)
  return _internal_dstpath();
}
inline void PutObjCopyReq::set_dstpath(const std::string& value) {
  _internal_set_dstpath(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.dstpath)
}
inline std::string* PutObjCopyReq::mutable_dstpath() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.dstpath)
  return _internal_mutable_dstpath();
}
inline const std::string& PutObjCopyReq::_internal_dstpath() const {
  return dstpath_.Get();
}
inline void PutObjCopyReq::_internal_set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.dstpath)
}
inline void PutObjCopyReq::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.dstpath)
}
inline void PutObjCopyReq::set_dstpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.dstpath)
}
inline std::string* PutObjCopyReq::_internal_mutable_dstpath() {
  _has_bits_[0] |= 0x00000008u;
  return dstpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_dstpath() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.dstpath)
  if (!_internal_has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dstpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dstpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.dstpath)
}

// required string dstidc = 5;
inline bool PutObjCopyReq::_internal_has_dstidc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_dstidc() const {
  return _internal_has_dstidc();
}
inline void PutObjCopyReq::clear_dstidc() {
  dstidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PutObjCopyReq::dstidc() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.dstidc)
  return _internal_dstidc();
}
inline void PutObjCopyReq::set_dstidc(const std::string& value) {
  _internal_set_dstidc(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.dstidc)
}
inline std::string* PutObjCopyReq::mutable_dstidc() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.dstidc)
  return _internal_mutable_dstidc();
}
inline const std::string& PutObjCopyReq::_internal_dstidc() const {
  return dstidc_.Get();
}
inline void PutObjCopyReq::_internal_set_dstidc(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_dstidc(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.dstidc)
}
inline void PutObjCopyReq::set_dstidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.dstidc)
}
inline void PutObjCopyReq::set_dstidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.dstidc)
}
inline std::string* PutObjCopyReq::_internal_mutable_dstidc() {
  _has_bits_[0] |= 0x00000010u;
  return dstidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_dstidc() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.dstidc)
  if (!_internal_has_dstidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return dstidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_dstidc(std::string* dstidc) {
  if (dstidc != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dstidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.dstidc)
}

// required string src_sha = 6;
inline bool PutObjCopyReq::_internal_has_src_sha() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_src_sha() const {
  return _internal_has_src_sha();
}
inline void PutObjCopyReq::clear_src_sha() {
  src_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PutObjCopyReq::src_sha() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.src_sha)
  return _internal_src_sha();
}
inline void PutObjCopyReq::set_src_sha(const std::string& value) {
  _internal_set_src_sha(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.src_sha)
}
inline std::string* PutObjCopyReq::mutable_src_sha() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.src_sha)
  return _internal_mutable_src_sha();
}
inline const std::string& PutObjCopyReq::_internal_src_sha() const {
  return src_sha_.Get();
}
inline void PutObjCopyReq::_internal_set_src_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  src_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_src_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  src_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.src_sha)
}
inline void PutObjCopyReq::set_src_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  src_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.src_sha)
}
inline void PutObjCopyReq::set_src_sha(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  src_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.src_sha)
}
inline std::string* PutObjCopyReq::_internal_mutable_src_sha() {
  _has_bits_[0] |= 0x00000020u;
  return src_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_src_sha() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.src_sha)
  if (!_internal_has_src_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return src_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_src_sha(std::string* src_sha) {
  if (src_sha != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  src_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.src_sha)
}

// required uint64 file_size = 7;
inline bool PutObjCopyReq::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_file_size() const {
  return _internal_has_file_size();
}
inline void PutObjCopyReq::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PutObjCopyReq::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PutObjCopyReq::file_size() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.file_size)
  return _internal_file_size();
}
inline void PutObjCopyReq::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  file_size_ = value;
}
inline void PutObjCopyReq::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.file_size)
}

// required uint64 slice_size = 8;
inline bool PutObjCopyReq::_internal_has_slice_size() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_slice_size() const {
  return _internal_has_slice_size();
}
inline void PutObjCopyReq::clear_slice_size() {
  slice_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PutObjCopyReq::_internal_slice_size() const {
  return slice_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PutObjCopyReq::slice_size() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.slice_size)
  return _internal_slice_size();
}
inline void PutObjCopyReq::_internal_set_slice_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  slice_size_ = value;
}
inline void PutObjCopyReq::set_slice_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_slice_size(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.slice_size)
}

// required uint32 file_type = 9;
inline bool PutObjCopyReq::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_file_type() const {
  return _internal_has_file_type();
}
inline void PutObjCopyReq::clear_file_type() {
  file_type_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutObjCopyReq::_internal_file_type() const {
  return file_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutObjCopyReq::file_type() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.file_type)
  return _internal_file_type();
}
inline void PutObjCopyReq::_internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  file_type_ = value;
}
inline void PutObjCopyReq::set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.file_type)
}

// optional string src_version = 10;
inline bool PutObjCopyReq::_internal_has_src_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_src_version() const {
  return _internal_has_src_version();
}
inline void PutObjCopyReq::clear_src_version() {
  src_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PutObjCopyReq::src_version() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.src_version)
  return _internal_src_version();
}
inline void PutObjCopyReq::set_src_version(const std::string& value) {
  _internal_set_src_version(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.src_version)
}
inline std::string* PutObjCopyReq::mutable_src_version() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.src_version)
  return _internal_mutable_src_version();
}
inline const std::string& PutObjCopyReq::_internal_src_version() const {
  return src_version_.Get();
}
inline void PutObjCopyReq::_internal_set_src_version(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_src_version(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  src_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.src_version)
}
inline void PutObjCopyReq::set_src_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.src_version)
}
inline void PutObjCopyReq::set_src_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.src_version)
}
inline std::string* PutObjCopyReq::_internal_mutable_src_version() {
  _has_bits_[0] |= 0x00000040u;
  return src_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_src_version() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.src_version)
  if (!_internal_has_src_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return src_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_src_version(std::string* src_version) {
  if (src_version != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  src_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.src_version)
}

// optional bytes src_obj_attr = 11;
inline bool PutObjCopyReq::_internal_has_src_obj_attr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_src_obj_attr() const {
  return _internal_has_src_obj_attr();
}
inline void PutObjCopyReq::clear_src_obj_attr() {
  src_obj_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PutObjCopyReq::src_obj_attr() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.src_obj_attr)
  return _internal_src_obj_attr();
}
inline void PutObjCopyReq::set_src_obj_attr(const std::string& value) {
  _internal_set_src_obj_attr(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.src_obj_attr)
}
inline std::string* PutObjCopyReq::mutable_src_obj_attr() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.src_obj_attr)
  return _internal_mutable_src_obj_attr();
}
inline const std::string& PutObjCopyReq::_internal_src_obj_attr() const {
  return src_obj_attr_.Get();
}
inline void PutObjCopyReq::_internal_set_src_obj_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  src_obj_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_src_obj_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  src_obj_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.src_obj_attr)
}
inline void PutObjCopyReq::set_src_obj_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  src_obj_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.src_obj_attr)
}
inline void PutObjCopyReq::set_src_obj_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  src_obj_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.src_obj_attr)
}
inline std::string* PutObjCopyReq::_internal_mutable_src_obj_attr() {
  _has_bits_[0] |= 0x00000080u;
  return src_obj_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_src_obj_attr() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.src_obj_attr)
  if (!_internal_has_src_obj_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return src_obj_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_src_obj_attr(std::string* src_obj_attr) {
  if (src_obj_attr != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  src_obj_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_obj_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.src_obj_attr)
}

// optional uint32 platform_type = 12 [default = 1];
inline bool PutObjCopyReq::_internal_has_platform_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_platform_type() const {
  return _internal_has_platform_type();
}
inline void PutObjCopyReq::clear_platform_type() {
  platform_type_ = 1u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutObjCopyReq::_internal_platform_type() const {
  return platform_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutObjCopyReq::platform_type() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.platform_type)
  return _internal_platform_type();
}
inline void PutObjCopyReq::_internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  platform_type_ = value;
}
inline void PutObjCopyReq::set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.platform_type)
}

// optional .FTN.TrsfSseInfo sseinfo = 13;
inline bool PutObjCopyReq::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool PutObjCopyReq::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void PutObjCopyReq::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::FTN::TrsfSseInfo& PutObjCopyReq::_internal_sseinfo() const {
  const ::FTN::TrsfSseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TrsfSseInfo&>(
      ::FTN::_TrsfSseInfo_default_instance_);
}
inline const ::FTN::TrsfSseInfo& PutObjCopyReq::sseinfo() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.sseinfo)
  return _internal_sseinfo();
}
inline void PutObjCopyReq::unsafe_arena_set_allocated_sseinfo(
    ::FTN::TrsfSseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.PutObjCopyReq.sseinfo)
}
inline ::FTN::TrsfSseInfo* PutObjCopyReq::release_sseinfo() {
  _has_bits_[0] &= ~0x00000400u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TrsfSseInfo* PutObjCopyReq::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.sseinfo)
  _has_bits_[0] &= ~0x00000400u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::FTN::TrsfSseInfo* PutObjCopyReq::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000400u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TrsfSseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::FTN::TrsfSseInfo* PutObjCopyReq::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void PutObjCopyReq::set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.sseinfo)
}

// optional .ClientCos.UploadAttr uploadattr = 14;
inline bool PutObjCopyReq::_internal_has_uploadattr() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || uploadattr_ != nullptr);
  return value;
}
inline bool PutObjCopyReq::has_uploadattr() const {
  return _internal_has_uploadattr();
}
inline const ::ClientCos::UploadAttr& PutObjCopyReq::_internal_uploadattr() const {
  const ::ClientCos::UploadAttr* p = uploadattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::UploadAttr&>(
      ::ClientCos::_UploadAttr_default_instance_);
}
inline const ::ClientCos::UploadAttr& PutObjCopyReq::uploadattr() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.uploadattr)
  return _internal_uploadattr();
}
inline void PutObjCopyReq::unsafe_arena_set_allocated_uploadattr(
    ::ClientCos::UploadAttr* uploadattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploadattr_);
  }
  uploadattr_ = uploadattr;
  if (uploadattr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.PutObjCopyReq.uploadattr)
}
inline ::ClientCos::UploadAttr* PutObjCopyReq::release_uploadattr() {
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::UploadAttr* temp = uploadattr_;
  uploadattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::UploadAttr* PutObjCopyReq::unsafe_arena_release_uploadattr() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.uploadattr)
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::UploadAttr* temp = uploadattr_;
  uploadattr_ = nullptr;
  return temp;
}
inline ::ClientCos::UploadAttr* PutObjCopyReq::_internal_mutable_uploadattr() {
  _has_bits_[0] |= 0x00000800u;
  if (uploadattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::UploadAttr>(GetArena());
    uploadattr_ = p;
  }
  return uploadattr_;
}
inline ::ClientCos::UploadAttr* PutObjCopyReq::mutable_uploadattr() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.uploadattr)
  return _internal_mutable_uploadattr();
}
inline void PutObjCopyReq::set_allocated_uploadattr(::ClientCos::UploadAttr* uploadattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploadattr_);
  }
  if (uploadattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploadattr)->GetArena();
    if (message_arena != submessage_arena) {
      uploadattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uploadattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  uploadattr_ = uploadattr;
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.uploadattr)
}

// optional string uin = 15;
inline bool PutObjCopyReq::_internal_has_uin() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_uin() const {
  return _internal_has_uin();
}
inline void PutObjCopyReq::clear_uin() {
  uin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PutObjCopyReq::uin() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.uin)
  return _internal_uin();
}
inline void PutObjCopyReq::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.uin)
}
inline std::string* PutObjCopyReq::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.uin)
  return _internal_mutable_uin();
}
inline const std::string& PutObjCopyReq::_internal_uin() const {
  return uin_.Get();
}
inline void PutObjCopyReq::_internal_set_uin(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_uin(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  uin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.uin)
}
inline void PutObjCopyReq::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.uin)
}
inline void PutObjCopyReq::set_uin(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.uin)
}
inline std::string* PutObjCopyReq::_internal_mutable_uin() {
  _has_bits_[0] |= 0x00000100u;
  return uin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_uin() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.uin)
  if (!_internal_has_uin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return uin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.uin)
}

// optional bool is_modify_cmtime = 16 [default = false];
inline bool PutObjCopyReq::_internal_has_is_modify_cmtime() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_is_modify_cmtime() const {
  return _internal_has_is_modify_cmtime();
}
inline void PutObjCopyReq::clear_is_modify_cmtime() {
  is_modify_cmtime_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool PutObjCopyReq::_internal_is_modify_cmtime() const {
  return is_modify_cmtime_;
}
inline bool PutObjCopyReq::is_modify_cmtime() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.is_modify_cmtime)
  return _internal_is_modify_cmtime();
}
inline void PutObjCopyReq::_internal_set_is_modify_cmtime(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_modify_cmtime_ = value;
}
inline void PutObjCopyReq::set_is_modify_cmtime(bool value) {
  _internal_set_is_modify_cmtime(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.is_modify_cmtime)
}

// optional uint32 src_platform_type = 17 [default = 1];
inline bool PutObjCopyReq::_internal_has_src_platform_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_src_platform_type() const {
  return _internal_has_src_platform_type();
}
inline void PutObjCopyReq::clear_src_platform_type() {
  src_platform_type_ = 1u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutObjCopyReq::_internal_src_platform_type() const {
  return src_platform_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PutObjCopyReq::src_platform_type() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.src_platform_type)
  return _internal_src_platform_type();
}
inline void PutObjCopyReq::_internal_set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  src_platform_type_ = value;
}
inline void PutObjCopyReq::set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_platform_type(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.src_platform_type)
}

// optional bytes cgi_args = 18;
inline bool PutObjCopyReq::_internal_has_cgi_args() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PutObjCopyReq::has_cgi_args() const {
  return _internal_has_cgi_args();
}
inline void PutObjCopyReq::clear_cgi_args() {
  cgi_args_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PutObjCopyReq::cgi_args() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyReq.cgi_args)
  return _internal_cgi_args();
}
inline void PutObjCopyReq::set_cgi_args(const std::string& value) {
  _internal_set_cgi_args(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyReq.cgi_args)
}
inline std::string* PutObjCopyReq::mutable_cgi_args() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyReq.cgi_args)
  return _internal_mutable_cgi_args();
}
inline const std::string& PutObjCopyReq::_internal_cgi_args() const {
  return cgi_args_.Get();
}
inline void PutObjCopyReq::_internal_set_cgi_args(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyReq::set_cgi_args(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyReq.cgi_args)
}
inline void PutObjCopyReq::set_cgi_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyReq.cgi_args)
}
inline void PutObjCopyReq::set_cgi_args(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  cgi_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyReq.cgi_args)
}
inline std::string* PutObjCopyReq::_internal_mutable_cgi_args() {
  _has_bits_[0] |= 0x00000200u;
  return cgi_args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyReq::release_cgi_args() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyReq.cgi_args)
  if (!_internal_has_cgi_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return cgi_args_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyReq::set_allocated_cgi_args(std::string* cgi_args) {
  if (cgi_args != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  cgi_args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgi_args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyReq.cgi_args)
}

// -------------------------------------------------------------------

// PartCopyReq

// required string srcpath = 1;
inline bool PartCopyReq::_internal_has_srcpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartCopyReq::has_srcpath() const {
  return _internal_has_srcpath();
}
inline void PartCopyReq::clear_srcpath() {
  srcpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartCopyReq::srcpath() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.srcpath)
  return _internal_srcpath();
}
inline void PartCopyReq::set_srcpath(const std::string& value) {
  _internal_set_srcpath(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.srcpath)
}
inline std::string* PartCopyReq::mutable_srcpath() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyReq.srcpath)
  return _internal_mutable_srcpath();
}
inline const std::string& PartCopyReq::_internal_srcpath() const {
  return srcpath_.Get();
}
inline void PartCopyReq::_internal_set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyReq::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyReq.srcpath)
}
inline void PartCopyReq::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyReq.srcpath)
}
inline void PartCopyReq::set_srcpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyReq.srcpath)
}
inline std::string* PartCopyReq::_internal_mutable_srcpath() {
  _has_bits_[0] |= 0x00000001u;
  return srcpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyReq::release_srcpath() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyReq.srcpath)
  if (!_internal_has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return srcpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyReq::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  srcpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyReq.srcpath)
}

// required string srcidc = 2;
inline bool PartCopyReq::_internal_has_srcidc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PartCopyReq::has_srcidc() const {
  return _internal_has_srcidc();
}
inline void PartCopyReq::clear_srcidc() {
  srcidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PartCopyReq::srcidc() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.srcidc)
  return _internal_srcidc();
}
inline void PartCopyReq::set_srcidc(const std::string& value) {
  _internal_set_srcidc(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.srcidc)
}
inline std::string* PartCopyReq::mutable_srcidc() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyReq.srcidc)
  return _internal_mutable_srcidc();
}
inline const std::string& PartCopyReq::_internal_srcidc() const {
  return srcidc_.Get();
}
inline void PartCopyReq::_internal_set_srcidc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyReq::set_srcidc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyReq.srcidc)
}
inline void PartCopyReq::set_srcidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyReq.srcidc)
}
inline void PartCopyReq::set_srcidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyReq.srcidc)
}
inline std::string* PartCopyReq::_internal_mutable_srcidc() {
  _has_bits_[0] |= 0x00000002u;
  return srcidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyReq::release_srcidc() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyReq.srcidc)
  if (!_internal_has_srcidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return srcidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyReq::set_allocated_srcidc(std::string* srcidc) {
  if (srcidc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  srcidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyReq.srcidc)
}

// required string dstpath = 3;
inline bool PartCopyReq::_internal_has_dstpath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PartCopyReq::has_dstpath() const {
  return _internal_has_dstpath();
}
inline void PartCopyReq::clear_dstpath() {
  dstpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PartCopyReq::dstpath() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.dstpath)
  return _internal_dstpath();
}
inline void PartCopyReq::set_dstpath(const std::string& value) {
  _internal_set_dstpath(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.dstpath)
}
inline std::string* PartCopyReq::mutable_dstpath() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyReq.dstpath)
  return _internal_mutable_dstpath();
}
inline const std::string& PartCopyReq::_internal_dstpath() const {
  return dstpath_.Get();
}
inline void PartCopyReq::_internal_set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyReq::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyReq.dstpath)
}
inline void PartCopyReq::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyReq.dstpath)
}
inline void PartCopyReq::set_dstpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyReq.dstpath)
}
inline std::string* PartCopyReq::_internal_mutable_dstpath() {
  _has_bits_[0] |= 0x00000004u;
  return dstpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyReq::release_dstpath() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyReq.dstpath)
  if (!_internal_has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return dstpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyReq::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dstpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyReq.dstpath)
}

// required string dstidc = 4;
inline bool PartCopyReq::_internal_has_dstidc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PartCopyReq::has_dstidc() const {
  return _internal_has_dstidc();
}
inline void PartCopyReq::clear_dstidc() {
  dstidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PartCopyReq::dstidc() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.dstidc)
  return _internal_dstidc();
}
inline void PartCopyReq::set_dstidc(const std::string& value) {
  _internal_set_dstidc(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.dstidc)
}
inline std::string* PartCopyReq::mutable_dstidc() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyReq.dstidc)
  return _internal_mutable_dstidc();
}
inline const std::string& PartCopyReq::_internal_dstidc() const {
  return dstidc_.Get();
}
inline void PartCopyReq::_internal_set_dstidc(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyReq::set_dstidc(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyReq.dstidc)
}
inline void PartCopyReq::set_dstidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyReq.dstidc)
}
inline void PartCopyReq::set_dstidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyReq.dstidc)
}
inline std::string* PartCopyReq::_internal_mutable_dstidc() {
  _has_bits_[0] |= 0x00000008u;
  return dstidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyReq::release_dstidc() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyReq.dstidc)
  if (!_internal_has_dstidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dstidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyReq::set_allocated_dstidc(std::string* dstidc) {
  if (dstidc != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dstidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyReq.dstidc)
}

// required uint64 src_file_size = 5;
inline bool PartCopyReq::_internal_has_src_file_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PartCopyReq::has_src_file_size() const {
  return _internal_has_src_file_size();
}
inline void PartCopyReq::clear_src_file_size() {
  src_file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::_internal_src_file_size() const {
  return src_file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::src_file_size() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.src_file_size)
  return _internal_src_file_size();
}
inline void PartCopyReq::_internal_set_src_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  src_file_size_ = value;
}
inline void PartCopyReq::set_src_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_src_file_size(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.src_file_size)
}

// optional uint32 platform_type = 6 [default = 1];
inline bool PartCopyReq::_internal_has_platform_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PartCopyReq::has_platform_type() const {
  return _internal_has_platform_type();
}
inline void PartCopyReq::clear_platform_type() {
  platform_type_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyReq::_internal_platform_type() const {
  return platform_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyReq::platform_type() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.platform_type)
  return _internal_platform_type();
}
inline void PartCopyReq::_internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  platform_type_ = value;
}
inline void PartCopyReq::set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.platform_type)
}

// optional string src_version = 7;
inline bool PartCopyReq::_internal_has_src_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PartCopyReq::has_src_version() const {
  return _internal_has_src_version();
}
inline void PartCopyReq::clear_src_version() {
  src_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PartCopyReq::src_version() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.src_version)
  return _internal_src_version();
}
inline void PartCopyReq::set_src_version(const std::string& value) {
  _internal_set_src_version(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.src_version)
}
inline std::string* PartCopyReq::mutable_src_version() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyReq.src_version)
  return _internal_mutable_src_version();
}
inline const std::string& PartCopyReq::_internal_src_version() const {
  return src_version_.Get();
}
inline void PartCopyReq::_internal_set_src_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyReq::set_src_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  src_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyReq.src_version)
}
inline void PartCopyReq::set_src_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyReq.src_version)
}
inline void PartCopyReq::set_src_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  src_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyReq.src_version)
}
inline std::string* PartCopyReq::_internal_mutable_src_version() {
  _has_bits_[0] |= 0x00000010u;
  return src_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyReq::release_src_version() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyReq.src_version)
  if (!_internal_has_src_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return src_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyReq::set_allocated_src_version(std::string* src_version) {
  if (src_version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  src_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyReq.src_version)
}

// required uint64 srcstart_range = 8;
inline bool PartCopyReq::_internal_has_srcstart_range() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PartCopyReq::has_srcstart_range() const {
  return _internal_has_srcstart_range();
}
inline void PartCopyReq::clear_srcstart_range() {
  srcstart_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::_internal_srcstart_range() const {
  return srcstart_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::srcstart_range() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.srcstart_range)
  return _internal_srcstart_range();
}
inline void PartCopyReq::_internal_set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  srcstart_range_ = value;
}
inline void PartCopyReq::set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_srcstart_range(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.srcstart_range)
}

// required uint64 srcend_range = 9;
inline bool PartCopyReq::_internal_has_srcend_range() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PartCopyReq::has_srcend_range() const {
  return _internal_has_srcend_range();
}
inline void PartCopyReq::clear_srcend_range() {
  srcend_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::_internal_srcend_range() const {
  return srcend_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::srcend_range() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.srcend_range)
  return _internal_srcend_range();
}
inline void PartCopyReq::_internal_set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  srcend_range_ = value;
}
inline void PartCopyReq::set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_srcend_range(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.srcend_range)
}

// required string dst_uploadkey = 10;
inline bool PartCopyReq::_internal_has_dst_uploadkey() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PartCopyReq::has_dst_uploadkey() const {
  return _internal_has_dst_uploadkey();
}
inline void PartCopyReq::clear_dst_uploadkey() {
  dst_uploadkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PartCopyReq::dst_uploadkey() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.dst_uploadkey)
  return _internal_dst_uploadkey();
}
inline void PartCopyReq::set_dst_uploadkey(const std::string& value) {
  _internal_set_dst_uploadkey(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.dst_uploadkey)
}
inline std::string* PartCopyReq::mutable_dst_uploadkey() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyReq.dst_uploadkey)
  return _internal_mutable_dst_uploadkey();
}
inline const std::string& PartCopyReq::_internal_dst_uploadkey() const {
  return dst_uploadkey_.Get();
}
inline void PartCopyReq::_internal_set_dst_uploadkey(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyReq::set_dst_uploadkey(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  dst_uploadkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyReq.dst_uploadkey)
}
inline void PartCopyReq::set_dst_uploadkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyReq.dst_uploadkey)
}
inline void PartCopyReq::set_dst_uploadkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyReq.dst_uploadkey)
}
inline std::string* PartCopyReq::_internal_mutable_dst_uploadkey() {
  _has_bits_[0] |= 0x00000020u;
  return dst_uploadkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyReq::release_dst_uploadkey() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyReq.dst_uploadkey)
  if (!_internal_has_dst_uploadkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return dst_uploadkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyReq::set_allocated_dst_uploadkey(std::string* dst_uploadkey) {
  if (dst_uploadkey != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dst_uploadkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_uploadkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyReq.dst_uploadkey)
}

// required uint64 dst_block_num = 11;
inline bool PartCopyReq::_internal_has_dst_block_num() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PartCopyReq::has_dst_block_num() const {
  return _internal_has_dst_block_num();
}
inline void PartCopyReq::clear_dst_block_num() {
  dst_block_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::_internal_dst_block_num() const {
  return dst_block_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartCopyReq::dst_block_num() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.dst_block_num)
  return _internal_dst_block_num();
}
inline void PartCopyReq::_internal_set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  dst_block_num_ = value;
}
inline void PartCopyReq::set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dst_block_num(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.dst_block_num)
}

// optional uint32 src_platform_type = 12 [default = 1];
inline bool PartCopyReq::_internal_has_src_platform_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PartCopyReq::has_src_platform_type() const {
  return _internal_has_src_platform_type();
}
inline void PartCopyReq::clear_src_platform_type() {
  src_platform_type_ = 1u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyReq::_internal_src_platform_type() const {
  return src_platform_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyReq::src_platform_type() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.src_platform_type)
  return _internal_src_platform_type();
}
inline void PartCopyReq::_internal_set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  src_platform_type_ = value;
}
inline void PartCopyReq::set_src_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_platform_type(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyReq.src_platform_type)
}

// optional .FTN.TrsfSseInfo sseinfo = 13;
inline bool PartCopyReq::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool PartCopyReq::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void PartCopyReq::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::FTN::TrsfSseInfo& PartCopyReq::_internal_sseinfo() const {
  const ::FTN::TrsfSseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TrsfSseInfo&>(
      ::FTN::_TrsfSseInfo_default_instance_);
}
inline const ::FTN::TrsfSseInfo& PartCopyReq::sseinfo() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyReq.sseinfo)
  return _internal_sseinfo();
}
inline void PartCopyReq::unsafe_arena_set_allocated_sseinfo(
    ::FTN::TrsfSseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.PartCopyReq.sseinfo)
}
inline ::FTN::TrsfSseInfo* PartCopyReq::release_sseinfo() {
  _has_bits_[0] &= ~0x00000040u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TrsfSseInfo* PartCopyReq::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyReq.sseinfo)
  _has_bits_[0] &= ~0x00000040u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::FTN::TrsfSseInfo* PartCopyReq::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000040u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TrsfSseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::FTN::TrsfSseInfo* PartCopyReq::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyReq.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void PartCopyReq::set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyReq.sseinfo)
}

// -------------------------------------------------------------------

// PartCopyFinishReq

// required bytes srcfile_attr = 1;
inline bool PartCopyFinishReq::_internal_has_srcfile_attr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_srcfile_attr() const {
  return _internal_has_srcfile_attr();
}
inline void PartCopyFinishReq::clear_srcfile_attr() {
  srcfile_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartCopyFinishReq::srcfile_attr() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.srcfile_attr)
  return _internal_srcfile_attr();
}
inline void PartCopyFinishReq::set_srcfile_attr(const std::string& value) {
  _internal_set_srcfile_attr(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.srcfile_attr)
}
inline std::string* PartCopyFinishReq::mutable_srcfile_attr() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.srcfile_attr)
  return _internal_mutable_srcfile_attr();
}
inline const std::string& PartCopyFinishReq::_internal_srcfile_attr() const {
  return srcfile_attr_.Get();
}
inline void PartCopyFinishReq::_internal_set_srcfile_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  srcfile_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_srcfile_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  srcfile_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.srcfile_attr)
}
inline void PartCopyFinishReq::set_srcfile_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  srcfile_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.srcfile_attr)
}
inline void PartCopyFinishReq::set_srcfile_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  srcfile_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.srcfile_attr)
}
inline std::string* PartCopyFinishReq::_internal_mutable_srcfile_attr() {
  _has_bits_[0] |= 0x00000001u;
  return srcfile_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_srcfile_attr() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.srcfile_attr)
  if (!_internal_has_srcfile_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return srcfile_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_srcfile_attr(std::string* srcfile_attr) {
  if (srcfile_attr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  srcfile_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcfile_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.srcfile_attr)
}

// required string ukey = 2;
inline bool PartCopyFinishReq::_internal_has_ukey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_ukey() const {
  return _internal_has_ukey();
}
inline void PartCopyFinishReq::clear_ukey() {
  ukey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PartCopyFinishReq::ukey() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.ukey)
  return _internal_ukey();
}
inline void PartCopyFinishReq::set_ukey(const std::string& value) {
  _internal_set_ukey(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.ukey)
}
inline std::string* PartCopyFinishReq::mutable_ukey() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.ukey)
  return _internal_mutable_ukey();
}
inline const std::string& PartCopyFinishReq::_internal_ukey() const {
  return ukey_.Get();
}
inline void PartCopyFinishReq::_internal_set_ukey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ukey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_ukey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ukey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.ukey)
}
inline void PartCopyFinishReq::set_ukey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ukey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.ukey)
}
inline void PartCopyFinishReq::set_ukey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ukey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.ukey)
}
inline std::string* PartCopyFinishReq::_internal_mutable_ukey() {
  _has_bits_[0] |= 0x00000002u;
  return ukey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_ukey() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.ukey)
  if (!_internal_has_ukey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ukey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_ukey(std::string* ukey) {
  if (ukey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ukey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ukey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.ukey)
}

// required string finish_json_message = 3;
inline bool PartCopyFinishReq::_internal_has_finish_json_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_finish_json_message() const {
  return _internal_has_finish_json_message();
}
inline void PartCopyFinishReq::clear_finish_json_message() {
  finish_json_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PartCopyFinishReq::finish_json_message() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.finish_json_message)
  return _internal_finish_json_message();
}
inline void PartCopyFinishReq::set_finish_json_message(const std::string& value) {
  _internal_set_finish_json_message(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.finish_json_message)
}
inline std::string* PartCopyFinishReq::mutable_finish_json_message() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.finish_json_message)
  return _internal_mutable_finish_json_message();
}
inline const std::string& PartCopyFinishReq::_internal_finish_json_message() const {
  return finish_json_message_.Get();
}
inline void PartCopyFinishReq::_internal_set_finish_json_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  finish_json_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_finish_json_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  finish_json_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.finish_json_message)
}
inline void PartCopyFinishReq::set_finish_json_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  finish_json_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.finish_json_message)
}
inline void PartCopyFinishReq::set_finish_json_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  finish_json_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.finish_json_message)
}
inline std::string* PartCopyFinishReq::_internal_mutable_finish_json_message() {
  _has_bits_[0] |= 0x00000004u;
  return finish_json_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_finish_json_message() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.finish_json_message)
  if (!_internal_has_finish_json_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return finish_json_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_finish_json_message(std::string* finish_json_message) {
  if (finish_json_message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  finish_json_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finish_json_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.finish_json_message)
}

// required string srcpath = 4;
inline bool PartCopyFinishReq::_internal_has_srcpath() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_srcpath() const {
  return _internal_has_srcpath();
}
inline void PartCopyFinishReq::clear_srcpath() {
  srcpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PartCopyFinishReq::srcpath() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.srcpath)
  return _internal_srcpath();
}
inline void PartCopyFinishReq::set_srcpath(const std::string& value) {
  _internal_set_srcpath(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.srcpath)
}
inline std::string* PartCopyFinishReq::mutable_srcpath() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.srcpath)
  return _internal_mutable_srcpath();
}
inline const std::string& PartCopyFinishReq::_internal_srcpath() const {
  return srcpath_.Get();
}
inline void PartCopyFinishReq::_internal_set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  srcpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.srcpath)
}
inline void PartCopyFinishReq::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.srcpath)
}
inline void PartCopyFinishReq::set_srcpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.srcpath)
}
inline std::string* PartCopyFinishReq::_internal_mutable_srcpath() {
  _has_bits_[0] |= 0x00000008u;
  return srcpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_srcpath() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.srcpath)
  if (!_internal_has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return srcpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  srcpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.srcpath)
}

// required string srcidc = 5;
inline bool PartCopyFinishReq::_internal_has_srcidc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_srcidc() const {
  return _internal_has_srcidc();
}
inline void PartCopyFinishReq::clear_srcidc() {
  srcidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PartCopyFinishReq::srcidc() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.srcidc)
  return _internal_srcidc();
}
inline void PartCopyFinishReq::set_srcidc(const std::string& value) {
  _internal_set_srcidc(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.srcidc)
}
inline std::string* PartCopyFinishReq::mutable_srcidc() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.srcidc)
  return _internal_mutable_srcidc();
}
inline const std::string& PartCopyFinishReq::_internal_srcidc() const {
  return srcidc_.Get();
}
inline void PartCopyFinishReq::_internal_set_srcidc(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_srcidc(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  srcidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.srcidc)
}
inline void PartCopyFinishReq::set_srcidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.srcidc)
}
inline void PartCopyFinishReq::set_srcidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  srcidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.srcidc)
}
inline std::string* PartCopyFinishReq::_internal_mutable_srcidc() {
  _has_bits_[0] |= 0x00000010u;
  return srcidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_srcidc() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.srcidc)
  if (!_internal_has_srcidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return srcidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_srcidc(std::string* srcidc) {
  if (srcidc != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  srcidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.srcidc)
}

// required string dstpath = 6;
inline bool PartCopyFinishReq::_internal_has_dstpath() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_dstpath() const {
  return _internal_has_dstpath();
}
inline void PartCopyFinishReq::clear_dstpath() {
  dstpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PartCopyFinishReq::dstpath() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.dstpath)
  return _internal_dstpath();
}
inline void PartCopyFinishReq::set_dstpath(const std::string& value) {
  _internal_set_dstpath(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.dstpath)
}
inline std::string* PartCopyFinishReq::mutable_dstpath() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.dstpath)
  return _internal_mutable_dstpath();
}
inline const std::string& PartCopyFinishReq::_internal_dstpath() const {
  return dstpath_.Get();
}
inline void PartCopyFinishReq::_internal_set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  dstpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.dstpath)
}
inline void PartCopyFinishReq::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.dstpath)
}
inline void PartCopyFinishReq::set_dstpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.dstpath)
}
inline std::string* PartCopyFinishReq::_internal_mutable_dstpath() {
  _has_bits_[0] |= 0x00000020u;
  return dstpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_dstpath() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.dstpath)
  if (!_internal_has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return dstpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dstpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.dstpath)
}

// required string dstidc = 7;
inline bool PartCopyFinishReq::_internal_has_dstidc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_dstidc() const {
  return _internal_has_dstidc();
}
inline void PartCopyFinishReq::clear_dstidc() {
  dstidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PartCopyFinishReq::dstidc() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.dstidc)
  return _internal_dstidc();
}
inline void PartCopyFinishReq::set_dstidc(const std::string& value) {
  _internal_set_dstidc(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.dstidc)
}
inline std::string* PartCopyFinishReq::mutable_dstidc() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.dstidc)
  return _internal_mutable_dstidc();
}
inline const std::string& PartCopyFinishReq::_internal_dstidc() const {
  return dstidc_.Get();
}
inline void PartCopyFinishReq::_internal_set_dstidc(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_dstidc(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  dstidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.dstidc)
}
inline void PartCopyFinishReq::set_dstidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.dstidc)
}
inline void PartCopyFinishReq::set_dstidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.dstidc)
}
inline std::string* PartCopyFinishReq::_internal_mutable_dstidc() {
  _has_bits_[0] |= 0x00000040u;
  return dstidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_dstidc() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.dstidc)
  if (!_internal_has_dstidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return dstidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_dstidc(std::string* dstidc) {
  if (dstidc != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dstidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.dstidc)
}

// required string storagetype = 8;
inline bool PartCopyFinishReq::_internal_has_storagetype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_storagetype() const {
  return _internal_has_storagetype();
}
inline void PartCopyFinishReq::clear_storagetype() {
  storagetype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PartCopyFinishReq::storagetype() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.storagetype)
  return _internal_storagetype();
}
inline void PartCopyFinishReq::set_storagetype(const std::string& value) {
  _internal_set_storagetype(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.storagetype)
}
inline std::string* PartCopyFinishReq::mutable_storagetype() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.storagetype)
  return _internal_mutable_storagetype();
}
inline const std::string& PartCopyFinishReq::_internal_storagetype() const {
  return storagetype_.Get();
}
inline void PartCopyFinishReq::_internal_set_storagetype(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_storagetype(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  storagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.storagetype)
}
inline void PartCopyFinishReq::set_storagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.storagetype)
}
inline void PartCopyFinishReq::set_storagetype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.storagetype)
}
inline std::string* PartCopyFinishReq::_internal_mutable_storagetype() {
  _has_bits_[0] |= 0x00000080u;
  return storagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_storagetype() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.storagetype)
  if (!_internal_has_storagetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return storagetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_storagetype(std::string* storagetype) {
  if (storagetype != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  storagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.storagetype)
}

// optional string version = 9;
inline bool PartCopyFinishReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_version() const {
  return _internal_has_version();
}
inline void PartCopyFinishReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PartCopyFinishReq::version() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.version)
  return _internal_version();
}
inline void PartCopyFinishReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.version)
}
inline std::string* PartCopyFinishReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.version)
  return _internal_mutable_version();
}
inline const std::string& PartCopyFinishReq::_internal_version() const {
  return version_.Get();
}
inline void PartCopyFinishReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyFinishReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyFinishReq.version)
}
inline void PartCopyFinishReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyFinishReq.version)
}
inline void PartCopyFinishReq::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyFinishReq.version)
}
inline std::string* PartCopyFinishReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000100u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyFinishReq::release_version() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyFinishReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.version)
}

// optional uint32 platform_type = 10 [default = 1];
inline bool PartCopyFinishReq::_internal_has_platform_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_platform_type() const {
  return _internal_has_platform_type();
}
inline void PartCopyFinishReq::clear_platform_type() {
  platform_type_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyFinishReq::_internal_platform_type() const {
  return platform_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyFinishReq::platform_type() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.platform_type)
  return _internal_platform_type();
}
inline void PartCopyFinishReq::_internal_set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  platform_type_ = value;
}
inline void PartCopyFinishReq::set_platform_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.platform_type)
}

// optional uint32 retry_times = 11 [default = 3];
inline bool PartCopyFinishReq::_internal_has_retry_times() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_retry_times() const {
  return _internal_has_retry_times();
}
inline void PartCopyFinishReq::clear_retry_times() {
  retry_times_ = 3u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyFinishReq::_internal_retry_times() const {
  return retry_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyFinishReq::retry_times() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.retry_times)
  return _internal_retry_times();
}
inline void PartCopyFinishReq::_internal_set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  retry_times_ = value;
}
inline void PartCopyFinishReq::set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retry_times(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.retry_times)
}

// optional uint32 delay_time = 12;
inline bool PartCopyFinishReq::_internal_has_delay_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PartCopyFinishReq::has_delay_time() const {
  return _internal_has_delay_time();
}
inline void PartCopyFinishReq::clear_delay_time() {
  delay_time_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyFinishReq::_internal_delay_time() const {
  return delay_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartCopyFinishReq::delay_time() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.delay_time)
  return _internal_delay_time();
}
inline void PartCopyFinishReq::_internal_set_delay_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  delay_time_ = value;
}
inline void PartCopyFinishReq::set_delay_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay_time(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyFinishReq.delay_time)
}

// optional .FTN.MultiRegionList region_list = 13;
inline bool PartCopyFinishReq::_internal_has_region_list() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || region_list_ != nullptr);
  return value;
}
inline bool PartCopyFinishReq::has_region_list() const {
  return _internal_has_region_list();
}
inline void PartCopyFinishReq::clear_region_list() {
  if (region_list_ != nullptr) region_list_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::FTN::MultiRegionList& PartCopyFinishReq::_internal_region_list() const {
  const ::FTN::MultiRegionList* p = region_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::MultiRegionList&>(
      ::FTN::_MultiRegionList_default_instance_);
}
inline const ::FTN::MultiRegionList& PartCopyFinishReq::region_list() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyFinishReq.region_list)
  return _internal_region_list();
}
inline void PartCopyFinishReq::unsafe_arena_set_allocated_region_list(
    ::FTN::MultiRegionList* region_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_list_);
  }
  region_list_ = region_list;
  if (region_list) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.PartCopyFinishReq.region_list)
}
inline ::FTN::MultiRegionList* PartCopyFinishReq::release_region_list() {
  _has_bits_[0] &= ~0x00000200u;
  ::FTN::MultiRegionList* temp = region_list_;
  region_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::MultiRegionList* PartCopyFinishReq::unsafe_arena_release_region_list() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyFinishReq.region_list)
  _has_bits_[0] &= ~0x00000200u;
  ::FTN::MultiRegionList* temp = region_list_;
  region_list_ = nullptr;
  return temp;
}
inline ::FTN::MultiRegionList* PartCopyFinishReq::_internal_mutable_region_list() {
  _has_bits_[0] |= 0x00000200u;
  if (region_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::MultiRegionList>(GetArena());
    region_list_ = p;
  }
  return region_list_;
}
inline ::FTN::MultiRegionList* PartCopyFinishReq::mutable_region_list() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyFinishReq.region_list)
  return _internal_mutable_region_list();
}
inline void PartCopyFinishReq::set_allocated_region_list(::FTN::MultiRegionList* region_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_list_;
  }
  if (region_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_list);
    if (message_arena != submessage_arena) {
      region_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  region_list_ = region_list;
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyFinishReq.region_list)
}

// -------------------------------------------------------------------

// TrsfSseInfo

// optional uint32 src_type = 1;
inline bool TrsfSseInfo::_internal_has_src_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrsfSseInfo::has_src_type() const {
  return _internal_has_src_type();
}
inline void TrsfSseInfo::clear_src_type() {
  src_type_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfSseInfo::_internal_src_type() const {
  return src_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfSseInfo::src_type() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.src_type)
  return _internal_src_type();
}
inline void TrsfSseInfo::_internal_set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  src_type_ = value;
}
inline void TrsfSseInfo::set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_type(value);
  // @@protoc_insertion_point(field_set:FTN.TrsfSseInfo.src_type)
}

// optional string src_algorithm = 2;
inline bool TrsfSseInfo::_internal_has_src_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrsfSseInfo::has_src_algorithm() const {
  return _internal_has_src_algorithm();
}
inline void TrsfSseInfo::clear_src_algorithm() {
  src_algorithm_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrsfSseInfo::src_algorithm() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.src_algorithm)
  return _internal_src_algorithm();
}
inline void TrsfSseInfo::set_src_algorithm(const std::string& value) {
  _internal_set_src_algorithm(value);
  // @@protoc_insertion_point(field_set:FTN.TrsfSseInfo.src_algorithm)
}
inline std::string* TrsfSseInfo::mutable_src_algorithm() {
  // @@protoc_insertion_point(field_mutable:FTN.TrsfSseInfo.src_algorithm)
  return _internal_mutable_src_algorithm();
}
inline const std::string& TrsfSseInfo::_internal_src_algorithm() const {
  return src_algorithm_.Get();
}
inline void TrsfSseInfo::_internal_set_src_algorithm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrsfSseInfo::set_src_algorithm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_algorithm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TrsfSseInfo.src_algorithm)
}
inline void TrsfSseInfo::set_src_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TrsfSseInfo.src_algorithm)
}
inline void TrsfSseInfo::set_src_algorithm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TrsfSseInfo.src_algorithm)
}
inline std::string* TrsfSseInfo::_internal_mutable_src_algorithm() {
  _has_bits_[0] |= 0x00000001u;
  return src_algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrsfSseInfo::release_src_algorithm() {
  // @@protoc_insertion_point(field_release:FTN.TrsfSseInfo.src_algorithm)
  if (!_internal_has_src_algorithm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_algorithm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrsfSseInfo::set_allocated_src_algorithm(std::string* src_algorithm) {
  if (src_algorithm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TrsfSseInfo.src_algorithm)
}

// optional uint32 dst_type = 3;
inline bool TrsfSseInfo::_internal_has_dst_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrsfSseInfo::has_dst_type() const {
  return _internal_has_dst_type();
}
inline void TrsfSseInfo::clear_dst_type() {
  dst_type_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfSseInfo::_internal_dst_type() const {
  return dst_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfSseInfo::dst_type() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.dst_type)
  return _internal_dst_type();
}
inline void TrsfSseInfo::_internal_set_dst_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  dst_type_ = value;
}
inline void TrsfSseInfo::set_dst_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_type(value);
  // @@protoc_insertion_point(field_set:FTN.TrsfSseInfo.dst_type)
}

// optional string dst_algorithm = 4;
inline bool TrsfSseInfo::_internal_has_dst_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrsfSseInfo::has_dst_algorithm() const {
  return _internal_has_dst_algorithm();
}
inline void TrsfSseInfo::clear_dst_algorithm() {
  dst_algorithm_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrsfSseInfo::dst_algorithm() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.dst_algorithm)
  return _internal_dst_algorithm();
}
inline void TrsfSseInfo::set_dst_algorithm(const std::string& value) {
  _internal_set_dst_algorithm(value);
  // @@protoc_insertion_point(field_set:FTN.TrsfSseInfo.dst_algorithm)
}
inline std::string* TrsfSseInfo::mutable_dst_algorithm() {
  // @@protoc_insertion_point(field_mutable:FTN.TrsfSseInfo.dst_algorithm)
  return _internal_mutable_dst_algorithm();
}
inline const std::string& TrsfSseInfo::_internal_dst_algorithm() const {
  return dst_algorithm_.Get();
}
inline void TrsfSseInfo::_internal_set_dst_algorithm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrsfSseInfo::set_dst_algorithm(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_algorithm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TrsfSseInfo.dst_algorithm)
}
inline void TrsfSseInfo::set_dst_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dst_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TrsfSseInfo.dst_algorithm)
}
inline void TrsfSseInfo::set_dst_algorithm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dst_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TrsfSseInfo.dst_algorithm)
}
inline std::string* TrsfSseInfo::_internal_mutable_dst_algorithm() {
  _has_bits_[0] |= 0x00000002u;
  return dst_algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrsfSseInfo::release_dst_algorithm() {
  // @@protoc_insertion_point(field_release:FTN.TrsfSseInfo.dst_algorithm)
  if (!_internal_has_dst_algorithm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dst_algorithm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrsfSseInfo::set_allocated_dst_algorithm(std::string* dst_algorithm) {
  if (dst_algorithm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TrsfSseInfo.dst_algorithm)
}

// optional .FTN.SseCInfo src_ssec = 5;
inline bool TrsfSseInfo::_internal_has_src_ssec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || src_ssec_ != nullptr);
  return value;
}
inline bool TrsfSseInfo::has_src_ssec() const {
  return _internal_has_src_ssec();
}
inline void TrsfSseInfo::clear_src_ssec() {
  if (src_ssec_ != nullptr) src_ssec_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::FTN::SseCInfo& TrsfSseInfo::_internal_src_ssec() const {
  const ::FTN::SseCInfo* p = src_ssec_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::SseCInfo&>(
      ::FTN::_SseCInfo_default_instance_);
}
inline const ::FTN::SseCInfo& TrsfSseInfo::src_ssec() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.src_ssec)
  return _internal_src_ssec();
}
inline void TrsfSseInfo::unsafe_arena_set_allocated_src_ssec(
    ::FTN::SseCInfo* src_ssec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_ssec_);
  }
  src_ssec_ = src_ssec;
  if (src_ssec) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.TrsfSseInfo.src_ssec)
}
inline ::FTN::SseCInfo* TrsfSseInfo::release_src_ssec() {
  _has_bits_[0] &= ~0x00000004u;
  ::FTN::SseCInfo* temp = src_ssec_;
  src_ssec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::SseCInfo* TrsfSseInfo::unsafe_arena_release_src_ssec() {
  // @@protoc_insertion_point(field_release:FTN.TrsfSseInfo.src_ssec)
  _has_bits_[0] &= ~0x00000004u;
  ::FTN::SseCInfo* temp = src_ssec_;
  src_ssec_ = nullptr;
  return temp;
}
inline ::FTN::SseCInfo* TrsfSseInfo::_internal_mutable_src_ssec() {
  _has_bits_[0] |= 0x00000004u;
  if (src_ssec_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::SseCInfo>(GetArena());
    src_ssec_ = p;
  }
  return src_ssec_;
}
inline ::FTN::SseCInfo* TrsfSseInfo::mutable_src_ssec() {
  // @@protoc_insertion_point(field_mutable:FTN.TrsfSseInfo.src_ssec)
  return _internal_mutable_src_ssec();
}
inline void TrsfSseInfo::set_allocated_src_ssec(::FTN::SseCInfo* src_ssec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete src_ssec_;
  }
  if (src_ssec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(src_ssec);
    if (message_arena != submessage_arena) {
      src_ssec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_ssec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  src_ssec_ = src_ssec;
  // @@protoc_insertion_point(field_set_allocated:FTN.TrsfSseInfo.src_ssec)
}

// optional .FTN.SseCInfo dst_ssec = 6;
inline bool TrsfSseInfo::_internal_has_dst_ssec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || dst_ssec_ != nullptr);
  return value;
}
inline bool TrsfSseInfo::has_dst_ssec() const {
  return _internal_has_dst_ssec();
}
inline void TrsfSseInfo::clear_dst_ssec() {
  if (dst_ssec_ != nullptr) dst_ssec_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::FTN::SseCInfo& TrsfSseInfo::_internal_dst_ssec() const {
  const ::FTN::SseCInfo* p = dst_ssec_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::SseCInfo&>(
      ::FTN::_SseCInfo_default_instance_);
}
inline const ::FTN::SseCInfo& TrsfSseInfo::dst_ssec() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.dst_ssec)
  return _internal_dst_ssec();
}
inline void TrsfSseInfo::unsafe_arena_set_allocated_dst_ssec(
    ::FTN::SseCInfo* dst_ssec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_ssec_);
  }
  dst_ssec_ = dst_ssec;
  if (dst_ssec) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.TrsfSseInfo.dst_ssec)
}
inline ::FTN::SseCInfo* TrsfSseInfo::release_dst_ssec() {
  _has_bits_[0] &= ~0x00000008u;
  ::FTN::SseCInfo* temp = dst_ssec_;
  dst_ssec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::SseCInfo* TrsfSseInfo::unsafe_arena_release_dst_ssec() {
  // @@protoc_insertion_point(field_release:FTN.TrsfSseInfo.dst_ssec)
  _has_bits_[0] &= ~0x00000008u;
  ::FTN::SseCInfo* temp = dst_ssec_;
  dst_ssec_ = nullptr;
  return temp;
}
inline ::FTN::SseCInfo* TrsfSseInfo::_internal_mutable_dst_ssec() {
  _has_bits_[0] |= 0x00000008u;
  if (dst_ssec_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::SseCInfo>(GetArena());
    dst_ssec_ = p;
  }
  return dst_ssec_;
}
inline ::FTN::SseCInfo* TrsfSseInfo::mutable_dst_ssec() {
  // @@protoc_insertion_point(field_mutable:FTN.TrsfSseInfo.dst_ssec)
  return _internal_mutable_dst_ssec();
}
inline void TrsfSseInfo::set_allocated_dst_ssec(::FTN::SseCInfo* dst_ssec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dst_ssec_;
  }
  if (dst_ssec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dst_ssec);
    if (message_arena != submessage_arena) {
      dst_ssec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_ssec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dst_ssec_ = dst_ssec;
  // @@protoc_insertion_point(field_set_allocated:FTN.TrsfSseInfo.dst_ssec)
}

// optional .FTN.KmsInfo src_kms = 7;
inline bool TrsfSseInfo::_internal_has_src_kms() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || src_kms_ != nullptr);
  return value;
}
inline bool TrsfSseInfo::has_src_kms() const {
  return _internal_has_src_kms();
}
inline void TrsfSseInfo::clear_src_kms() {
  if (src_kms_ != nullptr) src_kms_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::FTN::KmsInfo& TrsfSseInfo::_internal_src_kms() const {
  const ::FTN::KmsInfo* p = src_kms_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::KmsInfo&>(
      ::FTN::_KmsInfo_default_instance_);
}
inline const ::FTN::KmsInfo& TrsfSseInfo::src_kms() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.src_kms)
  return _internal_src_kms();
}
inline void TrsfSseInfo::unsafe_arena_set_allocated_src_kms(
    ::FTN::KmsInfo* src_kms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_kms_);
  }
  src_kms_ = src_kms;
  if (src_kms) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.TrsfSseInfo.src_kms)
}
inline ::FTN::KmsInfo* TrsfSseInfo::release_src_kms() {
  _has_bits_[0] &= ~0x00000010u;
  ::FTN::KmsInfo* temp = src_kms_;
  src_kms_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::KmsInfo* TrsfSseInfo::unsafe_arena_release_src_kms() {
  // @@protoc_insertion_point(field_release:FTN.TrsfSseInfo.src_kms)
  _has_bits_[0] &= ~0x00000010u;
  ::FTN::KmsInfo* temp = src_kms_;
  src_kms_ = nullptr;
  return temp;
}
inline ::FTN::KmsInfo* TrsfSseInfo::_internal_mutable_src_kms() {
  _has_bits_[0] |= 0x00000010u;
  if (src_kms_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::KmsInfo>(GetArena());
    src_kms_ = p;
  }
  return src_kms_;
}
inline ::FTN::KmsInfo* TrsfSseInfo::mutable_src_kms() {
  // @@protoc_insertion_point(field_mutable:FTN.TrsfSseInfo.src_kms)
  return _internal_mutable_src_kms();
}
inline void TrsfSseInfo::set_allocated_src_kms(::FTN::KmsInfo* src_kms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete src_kms_;
  }
  if (src_kms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(src_kms);
    if (message_arena != submessage_arena) {
      src_kms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_kms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  src_kms_ = src_kms;
  // @@protoc_insertion_point(field_set_allocated:FTN.TrsfSseInfo.src_kms)
}

// optional .FTN.KmsInfo dst_kms = 8;
inline bool TrsfSseInfo::_internal_has_dst_kms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || dst_kms_ != nullptr);
  return value;
}
inline bool TrsfSseInfo::has_dst_kms() const {
  return _internal_has_dst_kms();
}
inline void TrsfSseInfo::clear_dst_kms() {
  if (dst_kms_ != nullptr) dst_kms_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::FTN::KmsInfo& TrsfSseInfo::_internal_dst_kms() const {
  const ::FTN::KmsInfo* p = dst_kms_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::KmsInfo&>(
      ::FTN::_KmsInfo_default_instance_);
}
inline const ::FTN::KmsInfo& TrsfSseInfo::dst_kms() const {
  // @@protoc_insertion_point(field_get:FTN.TrsfSseInfo.dst_kms)
  return _internal_dst_kms();
}
inline void TrsfSseInfo::unsafe_arena_set_allocated_dst_kms(
    ::FTN::KmsInfo* dst_kms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_kms_);
  }
  dst_kms_ = dst_kms;
  if (dst_kms) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.TrsfSseInfo.dst_kms)
}
inline ::FTN::KmsInfo* TrsfSseInfo::release_dst_kms() {
  _has_bits_[0] &= ~0x00000020u;
  ::FTN::KmsInfo* temp = dst_kms_;
  dst_kms_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::KmsInfo* TrsfSseInfo::unsafe_arena_release_dst_kms() {
  // @@protoc_insertion_point(field_release:FTN.TrsfSseInfo.dst_kms)
  _has_bits_[0] &= ~0x00000020u;
  ::FTN::KmsInfo* temp = dst_kms_;
  dst_kms_ = nullptr;
  return temp;
}
inline ::FTN::KmsInfo* TrsfSseInfo::_internal_mutable_dst_kms() {
  _has_bits_[0] |= 0x00000020u;
  if (dst_kms_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::KmsInfo>(GetArena());
    dst_kms_ = p;
  }
  return dst_kms_;
}
inline ::FTN::KmsInfo* TrsfSseInfo::mutable_dst_kms() {
  // @@protoc_insertion_point(field_mutable:FTN.TrsfSseInfo.dst_kms)
  return _internal_mutable_dst_kms();
}
inline void TrsfSseInfo::set_allocated_dst_kms(::FTN::KmsInfo* dst_kms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dst_kms_;
  }
  if (dst_kms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dst_kms);
    if (message_arena != submessage_arena) {
      dst_kms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_kms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dst_kms_ = dst_kms;
  // @@protoc_insertion_point(field_set_allocated:FTN.TrsfSseInfo.dst_kms)
}

// -------------------------------------------------------------------

// SseCInfo

// optional string ssec_key = 7;
inline bool SseCInfo::_internal_has_ssec_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SseCInfo::has_ssec_key() const {
  return _internal_has_ssec_key();
}
inline void SseCInfo::clear_ssec_key() {
  ssec_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SseCInfo::ssec_key() const {
  // @@protoc_insertion_point(field_get:FTN.SseCInfo.ssec_key)
  return _internal_ssec_key();
}
inline void SseCInfo::set_ssec_key(const std::string& value) {
  _internal_set_ssec_key(value);
  // @@protoc_insertion_point(field_set:FTN.SseCInfo.ssec_key)
}
inline std::string* SseCInfo::mutable_ssec_key() {
  // @@protoc_insertion_point(field_mutable:FTN.SseCInfo.ssec_key)
  return _internal_mutable_ssec_key();
}
inline const std::string& SseCInfo::_internal_ssec_key() const {
  return ssec_key_.Get();
}
inline void SseCInfo::_internal_set_ssec_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ssec_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseCInfo::set_ssec_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ssec_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.SseCInfo.ssec_key)
}
inline void SseCInfo::set_ssec_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ssec_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.SseCInfo.ssec_key)
}
inline void SseCInfo::set_ssec_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ssec_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.SseCInfo.ssec_key)
}
inline std::string* SseCInfo::_internal_mutable_ssec_key() {
  _has_bits_[0] |= 0x00000001u;
  return ssec_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseCInfo::release_ssec_key() {
  // @@protoc_insertion_point(field_release:FTN.SseCInfo.ssec_key)
  if (!_internal_has_ssec_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ssec_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseCInfo::set_allocated_ssec_key(std::string* ssec_key) {
  if (ssec_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssec_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssec_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.SseCInfo.ssec_key)
}

// optional string ssec_key_md5 = 8;
inline bool SseCInfo::_internal_has_ssec_key_md5() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SseCInfo::has_ssec_key_md5() const {
  return _internal_has_ssec_key_md5();
}
inline void SseCInfo::clear_ssec_key_md5() {
  ssec_key_md5_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SseCInfo::ssec_key_md5() const {
  // @@protoc_insertion_point(field_get:FTN.SseCInfo.ssec_key_md5)
  return _internal_ssec_key_md5();
}
inline void SseCInfo::set_ssec_key_md5(const std::string& value) {
  _internal_set_ssec_key_md5(value);
  // @@protoc_insertion_point(field_set:FTN.SseCInfo.ssec_key_md5)
}
inline std::string* SseCInfo::mutable_ssec_key_md5() {
  // @@protoc_insertion_point(field_mutable:FTN.SseCInfo.ssec_key_md5)
  return _internal_mutable_ssec_key_md5();
}
inline const std::string& SseCInfo::_internal_ssec_key_md5() const {
  return ssec_key_md5_.Get();
}
inline void SseCInfo::_internal_set_ssec_key_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ssec_key_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseCInfo::set_ssec_key_md5(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ssec_key_md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.SseCInfo.ssec_key_md5)
}
inline void SseCInfo::set_ssec_key_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ssec_key_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.SseCInfo.ssec_key_md5)
}
inline void SseCInfo::set_ssec_key_md5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ssec_key_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.SseCInfo.ssec_key_md5)
}
inline std::string* SseCInfo::_internal_mutable_ssec_key_md5() {
  _has_bits_[0] |= 0x00000002u;
  return ssec_key_md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseCInfo::release_ssec_key_md5() {
  // @@protoc_insertion_point(field_release:FTN.SseCInfo.ssec_key_md5)
  if (!_internal_has_ssec_key_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ssec_key_md5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseCInfo::set_allocated_ssec_key_md5(std::string* ssec_key_md5) {
  if (ssec_key_md5 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ssec_key_md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssec_key_md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.SseCInfo.ssec_key_md5)
}

// -------------------------------------------------------------------

// KmsInfo

// optional string kms_key_id = 9;
inline bool KmsInfo::_internal_has_kms_key_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KmsInfo::has_kms_key_id() const {
  return _internal_has_kms_key_id();
}
inline void KmsInfo::clear_kms_key_id() {
  kms_key_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KmsInfo::kms_key_id() const {
  // @@protoc_insertion_point(field_get:FTN.KmsInfo.kms_key_id)
  return _internal_kms_key_id();
}
inline void KmsInfo::set_kms_key_id(const std::string& value) {
  _internal_set_kms_key_id(value);
  // @@protoc_insertion_point(field_set:FTN.KmsInfo.kms_key_id)
}
inline std::string* KmsInfo::mutable_kms_key_id() {
  // @@protoc_insertion_point(field_mutable:FTN.KmsInfo.kms_key_id)
  return _internal_mutable_kms_key_id();
}
inline const std::string& KmsInfo::_internal_kms_key_id() const {
  return kms_key_id_.Get();
}
inline void KmsInfo::_internal_set_kms_key_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kms_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KmsInfo::set_kms_key_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kms_key_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.KmsInfo.kms_key_id)
}
inline void KmsInfo::set_kms_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kms_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.KmsInfo.kms_key_id)
}
inline void KmsInfo::set_kms_key_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kms_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.KmsInfo.kms_key_id)
}
inline std::string* KmsInfo::_internal_mutable_kms_key_id() {
  _has_bits_[0] |= 0x00000001u;
  return kms_key_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KmsInfo::release_kms_key_id() {
  // @@protoc_insertion_point(field_release:FTN.KmsInfo.kms_key_id)
  if (!_internal_has_kms_key_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kms_key_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KmsInfo::set_allocated_kms_key_id(std::string* kms_key_id) {
  if (kms_key_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kms_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.KmsInfo.kms_key_id)
}

// optional bytes kms_context = 10;
inline bool KmsInfo::_internal_has_kms_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KmsInfo::has_kms_context() const {
  return _internal_has_kms_context();
}
inline void KmsInfo::clear_kms_context() {
  kms_context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KmsInfo::kms_context() const {
  // @@protoc_insertion_point(field_get:FTN.KmsInfo.kms_context)
  return _internal_kms_context();
}
inline void KmsInfo::set_kms_context(const std::string& value) {
  _internal_set_kms_context(value);
  // @@protoc_insertion_point(field_set:FTN.KmsInfo.kms_context)
}
inline std::string* KmsInfo::mutable_kms_context() {
  // @@protoc_insertion_point(field_mutable:FTN.KmsInfo.kms_context)
  return _internal_mutable_kms_context();
}
inline const std::string& KmsInfo::_internal_kms_context() const {
  return kms_context_.Get();
}
inline void KmsInfo::_internal_set_kms_context(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  kms_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KmsInfo::set_kms_context(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  kms_context_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.KmsInfo.kms_context)
}
inline void KmsInfo::set_kms_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  kms_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.KmsInfo.kms_context)
}
inline void KmsInfo::set_kms_context(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  kms_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.KmsInfo.kms_context)
}
inline std::string* KmsInfo::_internal_mutable_kms_context() {
  _has_bits_[0] |= 0x00000002u;
  return kms_context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KmsInfo::release_kms_context() {
  // @@protoc_insertion_point(field_release:FTN.KmsInfo.kms_context)
  if (!_internal_has_kms_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return kms_context_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KmsInfo::set_allocated_kms_context(std::string* kms_context) {
  if (kms_context != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  kms_context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.KmsInfo.kms_context)
}

// optional string kms_datakey = 11;
inline bool KmsInfo::_internal_has_kms_datakey() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KmsInfo::has_kms_datakey() const {
  return _internal_has_kms_datakey();
}
inline void KmsInfo::clear_kms_datakey() {
  kms_datakey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KmsInfo::kms_datakey() const {
  // @@protoc_insertion_point(field_get:FTN.KmsInfo.kms_datakey)
  return _internal_kms_datakey();
}
inline void KmsInfo::set_kms_datakey(const std::string& value) {
  _internal_set_kms_datakey(value);
  // @@protoc_insertion_point(field_set:FTN.KmsInfo.kms_datakey)
}
inline std::string* KmsInfo::mutable_kms_datakey() {
  // @@protoc_insertion_point(field_mutable:FTN.KmsInfo.kms_datakey)
  return _internal_mutable_kms_datakey();
}
inline const std::string& KmsInfo::_internal_kms_datakey() const {
  return kms_datakey_.Get();
}
inline void KmsInfo::_internal_set_kms_datakey(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  kms_datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KmsInfo::set_kms_datakey(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  kms_datakey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.KmsInfo.kms_datakey)
}
inline void KmsInfo::set_kms_datakey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  kms_datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.KmsInfo.kms_datakey)
}
inline void KmsInfo::set_kms_datakey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  kms_datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.KmsInfo.kms_datakey)
}
inline std::string* KmsInfo::_internal_mutable_kms_datakey() {
  _has_bits_[0] |= 0x00000004u;
  return kms_datakey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KmsInfo::release_kms_datakey() {
  // @@protoc_insertion_point(field_release:FTN.KmsInfo.kms_datakey)
  if (!_internal_has_kms_datakey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return kms_datakey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KmsInfo::set_allocated_kms_datakey(std::string* kms_datakey) {
  if (kms_datakey != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kms_datakey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_datakey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.KmsInfo.kms_datakey)
}

// optional bytes kms_datakey_encryp = 12;
inline bool KmsInfo::_internal_has_kms_datakey_encryp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KmsInfo::has_kms_datakey_encryp() const {
  return _internal_has_kms_datakey_encryp();
}
inline void KmsInfo::clear_kms_datakey_encryp() {
  kms_datakey_encryp_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KmsInfo::kms_datakey_encryp() const {
  // @@protoc_insertion_point(field_get:FTN.KmsInfo.kms_datakey_encryp)
  return _internal_kms_datakey_encryp();
}
inline void KmsInfo::set_kms_datakey_encryp(const std::string& value) {
  _internal_set_kms_datakey_encryp(value);
  // @@protoc_insertion_point(field_set:FTN.KmsInfo.kms_datakey_encryp)
}
inline std::string* KmsInfo::mutable_kms_datakey_encryp() {
  // @@protoc_insertion_point(field_mutable:FTN.KmsInfo.kms_datakey_encryp)
  return _internal_mutable_kms_datakey_encryp();
}
inline const std::string& KmsInfo::_internal_kms_datakey_encryp() const {
  return kms_datakey_encryp_.Get();
}
inline void KmsInfo::_internal_set_kms_datakey_encryp(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  kms_datakey_encryp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KmsInfo::set_kms_datakey_encryp(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  kms_datakey_encryp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.KmsInfo.kms_datakey_encryp)
}
inline void KmsInfo::set_kms_datakey_encryp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  kms_datakey_encryp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.KmsInfo.kms_datakey_encryp)
}
inline void KmsInfo::set_kms_datakey_encryp(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  kms_datakey_encryp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.KmsInfo.kms_datakey_encryp)
}
inline std::string* KmsInfo::_internal_mutable_kms_datakey_encryp() {
  _has_bits_[0] |= 0x00000008u;
  return kms_datakey_encryp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KmsInfo::release_kms_datakey_encryp() {
  // @@protoc_insertion_point(field_release:FTN.KmsInfo.kms_datakey_encryp)
  if (!_internal_has_kms_datakey_encryp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return kms_datakey_encryp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KmsInfo::set_allocated_kms_datakey_encryp(std::string* kms_datakey_encryp) {
  if (kms_datakey_encryp != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  kms_datakey_encryp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_datakey_encryp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.KmsInfo.kms_datakey_encryp)
}

// -------------------------------------------------------------------

// FileTrsfRsp

// required string task_key = 1;
inline bool FileTrsfRsp::_internal_has_task_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileTrsfRsp::has_task_key() const {
  return _internal_has_task_key();
}
inline void FileTrsfRsp::clear_task_key() {
  task_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileTrsfRsp::task_key() const {
  // @@protoc_insertion_point(field_get:FTN.FileTrsfRsp.task_key)
  return _internal_task_key();
}
inline void FileTrsfRsp::set_task_key(const std::string& value) {
  _internal_set_task_key(value);
  // @@protoc_insertion_point(field_set:FTN.FileTrsfRsp.task_key)
}
inline std::string* FileTrsfRsp::mutable_task_key() {
  // @@protoc_insertion_point(field_mutable:FTN.FileTrsfRsp.task_key)
  return _internal_mutable_task_key();
}
inline const std::string& FileTrsfRsp::_internal_task_key() const {
  return task_key_.Get();
}
inline void FileTrsfRsp::_internal_set_task_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileTrsfRsp::set_task_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.FileTrsfRsp.task_key)
}
inline void FileTrsfRsp::set_task_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.FileTrsfRsp.task_key)
}
inline void FileTrsfRsp::set_task_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.FileTrsfRsp.task_key)
}
inline std::string* FileTrsfRsp::_internal_mutable_task_key() {
  _has_bits_[0] |= 0x00000001u;
  return task_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileTrsfRsp::release_task_key() {
  // @@protoc_insertion_point(field_release:FTN.FileTrsfRsp.task_key)
  if (!_internal_has_task_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileTrsfRsp::set_allocated_task_key(std::string* task_key) {
  if (task_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.FileTrsfRsp.task_key)
}

// -------------------------------------------------------------------

// PutObjCopyRsp

// required string task_key = 1;
inline bool PutObjCopyRsp::_internal_has_task_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PutObjCopyRsp::has_task_key() const {
  return _internal_has_task_key();
}
inline void PutObjCopyRsp::clear_task_key() {
  task_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutObjCopyRsp::task_key() const {
  // @@protoc_insertion_point(field_get:FTN.PutObjCopyRsp.task_key)
  return _internal_task_key();
}
inline void PutObjCopyRsp::set_task_key(const std::string& value) {
  _internal_set_task_key(value);
  // @@protoc_insertion_point(field_set:FTN.PutObjCopyRsp.task_key)
}
inline std::string* PutObjCopyRsp::mutable_task_key() {
  // @@protoc_insertion_point(field_mutable:FTN.PutObjCopyRsp.task_key)
  return _internal_mutable_task_key();
}
inline const std::string& PutObjCopyRsp::_internal_task_key() const {
  return task_key_.Get();
}
inline void PutObjCopyRsp::_internal_set_task_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutObjCopyRsp::set_task_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PutObjCopyRsp.task_key)
}
inline void PutObjCopyRsp::set_task_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PutObjCopyRsp.task_key)
}
inline void PutObjCopyRsp::set_task_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PutObjCopyRsp.task_key)
}
inline std::string* PutObjCopyRsp::_internal_mutable_task_key() {
  _has_bits_[0] |= 0x00000001u;
  return task_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutObjCopyRsp::release_task_key() {
  // @@protoc_insertion_point(field_release:FTN.PutObjCopyRsp.task_key)
  if (!_internal_has_task_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjCopyRsp::set_allocated_task_key(std::string* task_key) {
  if (task_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PutObjCopyRsp.task_key)
}

// -------------------------------------------------------------------

// PartCopyRsp

// required string task_key = 1;
inline bool PartCopyRsp::_internal_has_task_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartCopyRsp::has_task_key() const {
  return _internal_has_task_key();
}
inline void PartCopyRsp::clear_task_key() {
  task_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartCopyRsp::task_key() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyRsp.task_key)
  return _internal_task_key();
}
inline void PartCopyRsp::set_task_key(const std::string& value) {
  _internal_set_task_key(value);
  // @@protoc_insertion_point(field_set:FTN.PartCopyRsp.task_key)
}
inline std::string* PartCopyRsp::mutable_task_key() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyRsp.task_key)
  return _internal_mutable_task_key();
}
inline const std::string& PartCopyRsp::_internal_task_key() const {
  return task_key_.Get();
}
inline void PartCopyRsp::_internal_set_task_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartCopyRsp::set_task_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.PartCopyRsp.task_key)
}
inline void PartCopyRsp::set_task_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.PartCopyRsp.task_key)
}
inline void PartCopyRsp::set_task_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.PartCopyRsp.task_key)
}
inline std::string* PartCopyRsp::_internal_mutable_task_key() {
  _has_bits_[0] |= 0x00000001u;
  return task_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartCopyRsp::release_task_key() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyRsp.task_key)
  if (!_internal_has_task_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartCopyRsp::set_allocated_task_key(std::string* task_key) {
  if (task_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyRsp.task_key)
}

// optional .ClientCos.SseInfo srcsseinfo = 2;
inline bool PartCopyRsp::_internal_has_srcsseinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || srcsseinfo_ != nullptr);
  return value;
}
inline bool PartCopyRsp::has_srcsseinfo() const {
  return _internal_has_srcsseinfo();
}
inline const ::ClientCos::SseInfo& PartCopyRsp::_internal_srcsseinfo() const {
  const ::ClientCos::SseInfo* p = srcsseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SseInfo&>(
      ::ClientCos::_SseInfo_default_instance_);
}
inline const ::ClientCos::SseInfo& PartCopyRsp::srcsseinfo() const {
  // @@protoc_insertion_point(field_get:FTN.PartCopyRsp.srcsseinfo)
  return _internal_srcsseinfo();
}
inline void PartCopyRsp::unsafe_arena_set_allocated_srcsseinfo(
    ::ClientCos::SseInfo* srcsseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srcsseinfo_);
  }
  srcsseinfo_ = srcsseinfo;
  if (srcsseinfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.PartCopyRsp.srcsseinfo)
}
inline ::ClientCos::SseInfo* PartCopyRsp::release_srcsseinfo() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::SseInfo* temp = srcsseinfo_;
  srcsseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SseInfo* PartCopyRsp::unsafe_arena_release_srcsseinfo() {
  // @@protoc_insertion_point(field_release:FTN.PartCopyRsp.srcsseinfo)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::SseInfo* temp = srcsseinfo_;
  srcsseinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::SseInfo* PartCopyRsp::_internal_mutable_srcsseinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (srcsseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SseInfo>(GetArena());
    srcsseinfo_ = p;
  }
  return srcsseinfo_;
}
inline ::ClientCos::SseInfo* PartCopyRsp::mutable_srcsseinfo() {
  // @@protoc_insertion_point(field_mutable:FTN.PartCopyRsp.srcsseinfo)
  return _internal_mutable_srcsseinfo();
}
inline void PartCopyRsp::set_allocated_srcsseinfo(::ClientCos::SseInfo* srcsseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(srcsseinfo_);
  }
  if (srcsseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srcsseinfo)->GetArena();
    if (message_arena != submessage_arena) {
      srcsseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcsseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  srcsseinfo_ = srcsseinfo;
  // @@protoc_insertion_point(field_set_allocated:FTN.PartCopyRsp.srcsseinfo)
}

// -------------------------------------------------------------------

// TransferNotify

// required string task_key = 1;
inline bool TransferNotify::_internal_has_task_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransferNotify::has_task_key() const {
  return _internal_has_task_key();
}
inline void TransferNotify::clear_task_key() {
  task_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransferNotify::task_key() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotify.task_key)
  return _internal_task_key();
}
inline void TransferNotify::set_task_key(const std::string& value) {
  _internal_set_task_key(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotify.task_key)
}
inline std::string* TransferNotify::mutable_task_key() {
  // @@protoc_insertion_point(field_mutable:FTN.TransferNotify.task_key)
  return _internal_mutable_task_key();
}
inline const std::string& TransferNotify::_internal_task_key() const {
  return task_key_.Get();
}
inline void TransferNotify::_internal_set_task_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferNotify::set_task_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TransferNotify.task_key)
}
inline void TransferNotify::set_task_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TransferNotify.task_key)
}
inline void TransferNotify::set_task_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TransferNotify.task_key)
}
inline std::string* TransferNotify::_internal_mutable_task_key() {
  _has_bits_[0] |= 0x00000001u;
  return task_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferNotify::release_task_key() {
  // @@protoc_insertion_point(field_release:FTN.TransferNotify.task_key)
  if (!_internal_has_task_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferNotify::set_allocated_task_key(std::string* task_key) {
  if (task_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TransferNotify.task_key)
}

// required string srcpath = 2;
inline bool TransferNotify::_internal_has_srcpath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransferNotify::has_srcpath() const {
  return _internal_has_srcpath();
}
inline void TransferNotify::clear_srcpath() {
  srcpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransferNotify::srcpath() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotify.srcpath)
  return _internal_srcpath();
}
inline void TransferNotify::set_srcpath(const std::string& value) {
  _internal_set_srcpath(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotify.srcpath)
}
inline std::string* TransferNotify::mutable_srcpath() {
  // @@protoc_insertion_point(field_mutable:FTN.TransferNotify.srcpath)
  return _internal_mutable_srcpath();
}
inline const std::string& TransferNotify::_internal_srcpath() const {
  return srcpath_.Get();
}
inline void TransferNotify::_internal_set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferNotify::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  srcpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TransferNotify.srcpath)
}
inline void TransferNotify::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TransferNotify.srcpath)
}
inline void TransferNotify::set_srcpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TransferNotify.srcpath)
}
inline std::string* TransferNotify::_internal_mutable_srcpath() {
  _has_bits_[0] |= 0x00000002u;
  return srcpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferNotify::release_srcpath() {
  // @@protoc_insertion_point(field_release:FTN.TransferNotify.srcpath)
  if (!_internal_has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return srcpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferNotify::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  srcpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TransferNotify.srcpath)
}

// required string dstpath = 3;
inline bool TransferNotify::_internal_has_dstpath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransferNotify::has_dstpath() const {
  return _internal_has_dstpath();
}
inline void TransferNotify::clear_dstpath() {
  dstpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TransferNotify::dstpath() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotify.dstpath)
  return _internal_dstpath();
}
inline void TransferNotify::set_dstpath(const std::string& value) {
  _internal_set_dstpath(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotify.dstpath)
}
inline std::string* TransferNotify::mutable_dstpath() {
  // @@protoc_insertion_point(field_mutable:FTN.TransferNotify.dstpath)
  return _internal_mutable_dstpath();
}
inline const std::string& TransferNotify::_internal_dstpath() const {
  return dstpath_.Get();
}
inline void TransferNotify::_internal_set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferNotify::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TransferNotify.dstpath)
}
inline void TransferNotify::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TransferNotify.dstpath)
}
inline void TransferNotify::set_dstpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TransferNotify.dstpath)
}
inline std::string* TransferNotify::_internal_mutable_dstpath() {
  _has_bits_[0] |= 0x00000004u;
  return dstpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferNotify::release_dstpath() {
  // @@protoc_insertion_point(field_release:FTN.TransferNotify.dstpath)
  if (!_internal_has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return dstpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferNotify::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dstpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TransferNotify.dstpath)
}

// required string dstidc = 4;
inline bool TransferNotify::_internal_has_dstidc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransferNotify::has_dstidc() const {
  return _internal_has_dstidc();
}
inline void TransferNotify::clear_dstidc() {
  dstidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TransferNotify::dstidc() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotify.dstidc)
  return _internal_dstidc();
}
inline void TransferNotify::set_dstidc(const std::string& value) {
  _internal_set_dstidc(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotify.dstidc)
}
inline std::string* TransferNotify::mutable_dstidc() {
  // @@protoc_insertion_point(field_mutable:FTN.TransferNotify.dstidc)
  return _internal_mutable_dstidc();
}
inline const std::string& TransferNotify::_internal_dstidc() const {
  return dstidc_.Get();
}
inline void TransferNotify::_internal_set_dstidc(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferNotify::set_dstidc(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TransferNotify.dstidc)
}
inline void TransferNotify::set_dstidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TransferNotify.dstidc)
}
inline void TransferNotify::set_dstidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TransferNotify.dstidc)
}
inline std::string* TransferNotify::_internal_mutable_dstidc() {
  _has_bits_[0] |= 0x00000008u;
  return dstidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferNotify::release_dstidc() {
  // @@protoc_insertion_point(field_release:FTN.TransferNotify.dstidc)
  if (!_internal_has_dstidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dstidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferNotify::set_allocated_dstidc(std::string* dstidc) {
  if (dstidc != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dstidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TransferNotify.dstidc)
}

// required uint64 task_ctime = 5;
inline bool TransferNotify::_internal_has_task_ctime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransferNotify::has_task_ctime() const {
  return _internal_has_task_ctime();
}
inline void TransferNotify::clear_task_ctime() {
  task_ctime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferNotify::_internal_task_ctime() const {
  return task_ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferNotify::task_ctime() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotify.task_ctime)
  return _internal_task_ctime();
}
inline void TransferNotify::_internal_set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  task_ctime_ = value;
}
inline void TransferNotify::set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_task_ctime(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotify.task_ctime)
}

// required uint64 task_endtime = 6;
inline bool TransferNotify::_internal_has_task_endtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransferNotify::has_task_endtime() const {
  return _internal_has_task_endtime();
}
inline void TransferNotify::clear_task_endtime() {
  task_endtime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferNotify::_internal_task_endtime() const {
  return task_endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferNotify::task_endtime() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotify.task_endtime)
  return _internal_task_endtime();
}
inline void TransferNotify::_internal_set_task_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  task_endtime_ = value;
}
inline void TransferNotify::set_task_endtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_task_endtime(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotify.task_endtime)
}

// required uint32 task_progress = 7;
inline bool TransferNotify::_internal_has_task_progress() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TransferNotify::has_task_progress() const {
  return _internal_has_task_progress();
}
inline void TransferNotify::clear_task_progress() {
  task_progress_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferNotify::_internal_task_progress() const {
  return task_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferNotify::task_progress() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotify.task_progress)
  return _internal_task_progress();
}
inline void TransferNotify::_internal_set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  task_progress_ = value;
}
inline void TransferNotify::set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_task_progress(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotify.task_progress)
}

// -------------------------------------------------------------------

// TransferNotifyRsp

// required string task_key = 1;
inline bool TransferNotifyRsp::_internal_has_task_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransferNotifyRsp::has_task_key() const {
  return _internal_has_task_key();
}
inline void TransferNotifyRsp::clear_task_key() {
  task_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransferNotifyRsp::task_key() const {
  // @@protoc_insertion_point(field_get:FTN.TransferNotifyRsp.task_key)
  return _internal_task_key();
}
inline void TransferNotifyRsp::set_task_key(const std::string& value) {
  _internal_set_task_key(value);
  // @@protoc_insertion_point(field_set:FTN.TransferNotifyRsp.task_key)
}
inline std::string* TransferNotifyRsp::mutable_task_key() {
  // @@protoc_insertion_point(field_mutable:FTN.TransferNotifyRsp.task_key)
  return _internal_mutable_task_key();
}
inline const std::string& TransferNotifyRsp::_internal_task_key() const {
  return task_key_.Get();
}
inline void TransferNotifyRsp::_internal_set_task_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferNotifyRsp::set_task_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TransferNotifyRsp.task_key)
}
inline void TransferNotifyRsp::set_task_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TransferNotifyRsp.task_key)
}
inline void TransferNotifyRsp::set_task_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TransferNotifyRsp.task_key)
}
inline std::string* TransferNotifyRsp::_internal_mutable_task_key() {
  _has_bits_[0] |= 0x00000001u;
  return task_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferNotifyRsp::release_task_key() {
  // @@protoc_insertion_point(field_release:FTN.TransferNotifyRsp.task_key)
  if (!_internal_has_task_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferNotifyRsp::set_allocated_task_key(std::string* task_key) {
  if (task_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TransferNotifyRsp.task_key)
}

// -------------------------------------------------------------------

// TaskProgressReq

// required string task_key = 1;
inline bool TaskProgressReq::_internal_has_task_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskProgressReq::has_task_key() const {
  return _internal_has_task_key();
}
inline void TaskProgressReq::clear_task_key() {
  task_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskProgressReq::task_key() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressReq.task_key)
  return _internal_task_key();
}
inline void TaskProgressReq::set_task_key(const std::string& value) {
  _internal_set_task_key(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressReq.task_key)
}
inline std::string* TaskProgressReq::mutable_task_key() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressReq.task_key)
  return _internal_mutable_task_key();
}
inline const std::string& TaskProgressReq::_internal_task_key() const {
  return task_key_.Get();
}
inline void TaskProgressReq::_internal_set_task_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressReq::set_task_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressReq.task_key)
}
inline void TaskProgressReq::set_task_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressReq.task_key)
}
inline void TaskProgressReq::set_task_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressReq.task_key)
}
inline std::string* TaskProgressReq::_internal_mutable_task_key() {
  _has_bits_[0] |= 0x00000001u;
  return task_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressReq::release_task_key() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressReq.task_key)
  if (!_internal_has_task_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressReq::set_allocated_task_key(std::string* task_key) {
  if (task_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressReq.task_key)
}

// -------------------------------------------------------------------

// TaskProgressRsp

// required uint32 task_progress = 1;
inline bool TaskProgressRsp::_internal_has_task_progress() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_task_progress() const {
  return _internal_has_task_progress();
}
inline void TaskProgressRsp::clear_task_progress() {
  task_progress_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskProgressRsp::_internal_task_progress() const {
  return task_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskProgressRsp::task_progress() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.task_progress)
  return _internal_task_progress();
}
inline void TaskProgressRsp::_internal_set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  task_progress_ = value;
}
inline void TaskProgressRsp::set_task_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_task_progress(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.task_progress)
}

// required string srcpath = 2;
inline bool TaskProgressRsp::_internal_has_srcpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_srcpath() const {
  return _internal_has_srcpath();
}
inline void TaskProgressRsp::clear_srcpath() {
  srcpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskProgressRsp::srcpath() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.srcpath)
  return _internal_srcpath();
}
inline void TaskProgressRsp::set_srcpath(const std::string& value) {
  _internal_set_srcpath(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.srcpath)
}
inline std::string* TaskProgressRsp::mutable_srcpath() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.srcpath)
  return _internal_mutable_srcpath();
}
inline const std::string& TaskProgressRsp::_internal_srcpath() const {
  return srcpath_.Get();
}
inline void TaskProgressRsp::_internal_set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.srcpath)
}
inline void TaskProgressRsp::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.srcpath)
}
inline void TaskProgressRsp::set_srcpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.srcpath)
}
inline std::string* TaskProgressRsp::_internal_mutable_srcpath() {
  _has_bits_[0] |= 0x00000001u;
  return srcpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_srcpath() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.srcpath)
  if (!_internal_has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return srcpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  srcpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.srcpath)
}

// required string dstpath = 3;
inline bool TaskProgressRsp::_internal_has_dstpath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dstpath() const {
  return _internal_has_dstpath();
}
inline void TaskProgressRsp::clear_dstpath() {
  dstpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskProgressRsp::dstpath() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dstpath)
  return _internal_dstpath();
}
inline void TaskProgressRsp::set_dstpath(const std::string& value) {
  _internal_set_dstpath(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dstpath)
}
inline std::string* TaskProgressRsp::mutable_dstpath() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.dstpath)
  return _internal_mutable_dstpath();
}
inline const std::string& TaskProgressRsp::_internal_dstpath() const {
  return dstpath_.Get();
}
inline void TaskProgressRsp::_internal_set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.dstpath)
}
inline void TaskProgressRsp::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.dstpath)
}
inline void TaskProgressRsp::set_dstpath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.dstpath)
}
inline std::string* TaskProgressRsp::_internal_mutable_dstpath() {
  _has_bits_[0] |= 0x00000002u;
  return dstpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_dstpath() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.dstpath)
  if (!_internal_has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dstpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dstpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.dstpath)
}

// required string dstidc = 4;
inline bool TaskProgressRsp::_internal_has_dstidc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dstidc() const {
  return _internal_has_dstidc();
}
inline void TaskProgressRsp::clear_dstidc() {
  dstidc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TaskProgressRsp::dstidc() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dstidc)
  return _internal_dstidc();
}
inline void TaskProgressRsp::set_dstidc(const std::string& value) {
  _internal_set_dstidc(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dstidc)
}
inline std::string* TaskProgressRsp::mutable_dstidc() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.dstidc)
  return _internal_mutable_dstidc();
}
inline const std::string& TaskProgressRsp::_internal_dstidc() const {
  return dstidc_.Get();
}
inline void TaskProgressRsp::_internal_set_dstidc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_dstidc(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  dstidc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.dstidc)
}
inline void TaskProgressRsp::set_dstidc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.dstidc)
}
inline void TaskProgressRsp::set_dstidc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  dstidc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.dstidc)
}
inline std::string* TaskProgressRsp::_internal_mutable_dstidc() {
  _has_bits_[0] |= 0x00000004u;
  return dstidc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_dstidc() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.dstidc)
  if (!_internal_has_dstidc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return dstidc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_dstidc(std::string* dstidc) {
  if (dstidc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dstidc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstidc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.dstidc)
}

// required string storagetype = 5;
inline bool TaskProgressRsp::_internal_has_storagetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_storagetype() const {
  return _internal_has_storagetype();
}
inline void TaskProgressRsp::clear_storagetype() {
  storagetype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TaskProgressRsp::storagetype() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.storagetype)
  return _internal_storagetype();
}
inline void TaskProgressRsp::set_storagetype(const std::string& value) {
  _internal_set_storagetype(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.storagetype)
}
inline std::string* TaskProgressRsp::mutable_storagetype() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.storagetype)
  return _internal_mutable_storagetype();
}
inline const std::string& TaskProgressRsp::_internal_storagetype() const {
  return storagetype_.Get();
}
inline void TaskProgressRsp::_internal_set_storagetype(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_storagetype(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  storagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.storagetype)
}
inline void TaskProgressRsp::set_storagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.storagetype)
}
inline void TaskProgressRsp::set_storagetype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.storagetype)
}
inline std::string* TaskProgressRsp::_internal_mutable_storagetype() {
  _has_bits_[0] |= 0x00000008u;
  return storagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_storagetype() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.storagetype)
  if (!_internal_has_storagetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return storagetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_storagetype(std::string* storagetype) {
  if (storagetype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  storagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.storagetype)
}

// required uint64 task_ctime = 6;
inline bool TaskProgressRsp::_internal_has_task_ctime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_task_ctime() const {
  return _internal_has_task_ctime();
}
inline void TaskProgressRsp::clear_task_ctime() {
  task_ctime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::_internal_task_ctime() const {
  return task_ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::task_ctime() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.task_ctime)
  return _internal_task_ctime();
}
inline void TaskProgressRsp::_internal_set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  task_ctime_ = value;
}
inline void TaskProgressRsp::set_task_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_task_ctime(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.task_ctime)
}

// optional uint64 srcstart_range = 7;
inline bool TaskProgressRsp::_internal_has_srcstart_range() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_srcstart_range() const {
  return _internal_has_srcstart_range();
}
inline void TaskProgressRsp::clear_srcstart_range() {
  srcstart_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::_internal_srcstart_range() const {
  return srcstart_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::srcstart_range() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.srcstart_range)
  return _internal_srcstart_range();
}
inline void TaskProgressRsp::_internal_set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  srcstart_range_ = value;
}
inline void TaskProgressRsp::set_srcstart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_srcstart_range(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.srcstart_range)
}

// optional uint64 srcend_range = 8;
inline bool TaskProgressRsp::_internal_has_srcend_range() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_srcend_range() const {
  return _internal_has_srcend_range();
}
inline void TaskProgressRsp::clear_srcend_range() {
  srcend_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::_internal_srcend_range() const {
  return srcend_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::srcend_range() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.srcend_range)
  return _internal_srcend_range();
}
inline void TaskProgressRsp::_internal_set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  srcend_range_ = value;
}
inline void TaskProgressRsp::set_srcend_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_srcend_range(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.srcend_range)
}

// optional uint64 dststart_range = 9;
inline bool TaskProgressRsp::_internal_has_dststart_range() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dststart_range() const {
  return _internal_has_dststart_range();
}
inline void TaskProgressRsp::clear_dststart_range() {
  dststart_range_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::_internal_dststart_range() const {
  return dststart_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::dststart_range() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dststart_range)
  return _internal_dststart_range();
}
inline void TaskProgressRsp::_internal_set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  dststart_range_ = value;
}
inline void TaskProgressRsp::set_dststart_range(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dststart_range(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dststart_range)
}

// optional string dst_version = 10;
inline bool TaskProgressRsp::_internal_has_dst_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dst_version() const {
  return _internal_has_dst_version();
}
inline void TaskProgressRsp::clear_dst_version() {
  dst_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TaskProgressRsp::dst_version() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dst_version)
  return _internal_dst_version();
}
inline void TaskProgressRsp::set_dst_version(const std::string& value) {
  _internal_set_dst_version(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dst_version)
}
inline std::string* TaskProgressRsp::mutable_dst_version() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.dst_version)
  return _internal_mutable_dst_version();
}
inline const std::string& TaskProgressRsp::_internal_dst_version() const {
  return dst_version_.Get();
}
inline void TaskProgressRsp::_internal_set_dst_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  dst_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_dst_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  dst_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.dst_version)
}
inline void TaskProgressRsp::set_dst_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  dst_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.dst_version)
}
inline void TaskProgressRsp::set_dst_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  dst_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.dst_version)
}
inline std::string* TaskProgressRsp::_internal_mutable_dst_version() {
  _has_bits_[0] |= 0x00000010u;
  return dst_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_dst_version() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.dst_version)
  if (!_internal_has_dst_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return dst_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_dst_version(std::string* dst_version) {
  if (dst_version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dst_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.dst_version)
}

// optional string dst_sk = 11;
inline bool TaskProgressRsp::_internal_has_dst_sk() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dst_sk() const {
  return _internal_has_dst_sk();
}
inline void TaskProgressRsp::clear_dst_sk() {
  dst_sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TaskProgressRsp::dst_sk() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dst_sk)
  return _internal_dst_sk();
}
inline void TaskProgressRsp::set_dst_sk(const std::string& value) {
  _internal_set_dst_sk(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dst_sk)
}
inline std::string* TaskProgressRsp::mutable_dst_sk() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.dst_sk)
  return _internal_mutable_dst_sk();
}
inline const std::string& TaskProgressRsp::_internal_dst_sk() const {
  return dst_sk_.Get();
}
inline void TaskProgressRsp::_internal_set_dst_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  dst_sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_dst_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  dst_sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.dst_sk)
}
inline void TaskProgressRsp::set_dst_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  dst_sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.dst_sk)
}
inline void TaskProgressRsp::set_dst_sk(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  dst_sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.dst_sk)
}
inline std::string* TaskProgressRsp::_internal_mutable_dst_sk() {
  _has_bits_[0] |= 0x00000020u;
  return dst_sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_dst_sk() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.dst_sk)
  if (!_internal_has_dst_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return dst_sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_dst_sk(std::string* dst_sk) {
  if (dst_sk != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dst_sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.dst_sk)
}

// optional string dst_uploadkey = 12;
inline bool TaskProgressRsp::_internal_has_dst_uploadkey() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dst_uploadkey() const {
  return _internal_has_dst_uploadkey();
}
inline void TaskProgressRsp::clear_dst_uploadkey() {
  dst_uploadkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TaskProgressRsp::dst_uploadkey() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dst_uploadkey)
  return _internal_dst_uploadkey();
}
inline void TaskProgressRsp::set_dst_uploadkey(const std::string& value) {
  _internal_set_dst_uploadkey(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dst_uploadkey)
}
inline std::string* TaskProgressRsp::mutable_dst_uploadkey() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.dst_uploadkey)
  return _internal_mutable_dst_uploadkey();
}
inline const std::string& TaskProgressRsp::_internal_dst_uploadkey() const {
  return dst_uploadkey_.Get();
}
inline void TaskProgressRsp::_internal_set_dst_uploadkey(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_dst_uploadkey(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  dst_uploadkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.dst_uploadkey)
}
inline void TaskProgressRsp::set_dst_uploadkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.dst_uploadkey)
}
inline void TaskProgressRsp::set_dst_uploadkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  dst_uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.dst_uploadkey)
}
inline std::string* TaskProgressRsp::_internal_mutable_dst_uploadkey() {
  _has_bits_[0] |= 0x00000040u;
  return dst_uploadkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_dst_uploadkey() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.dst_uploadkey)
  if (!_internal_has_dst_uploadkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return dst_uploadkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_dst_uploadkey(std::string* dst_uploadkey) {
  if (dst_uploadkey != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dst_uploadkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_uploadkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.dst_uploadkey)
}

// optional string dst_ctime = 13;
inline bool TaskProgressRsp::_internal_has_dst_ctime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dst_ctime() const {
  return _internal_has_dst_ctime();
}
inline void TaskProgressRsp::clear_dst_ctime() {
  dst_ctime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TaskProgressRsp::dst_ctime() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dst_ctime)
  return _internal_dst_ctime();
}
inline void TaskProgressRsp::set_dst_ctime(const std::string& value) {
  _internal_set_dst_ctime(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dst_ctime)
}
inline std::string* TaskProgressRsp::mutable_dst_ctime() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.dst_ctime)
  return _internal_mutable_dst_ctime();
}
inline const std::string& TaskProgressRsp::_internal_dst_ctime() const {
  return dst_ctime_.Get();
}
inline void TaskProgressRsp::_internal_set_dst_ctime(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  dst_ctime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskProgressRsp::set_dst_ctime(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  dst_ctime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FTN.TaskProgressRsp.dst_ctime)
}
inline void TaskProgressRsp::set_dst_ctime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  dst_ctime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FTN.TaskProgressRsp.dst_ctime)
}
inline void TaskProgressRsp::set_dst_ctime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  dst_ctime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FTN.TaskProgressRsp.dst_ctime)
}
inline std::string* TaskProgressRsp::_internal_mutable_dst_ctime() {
  _has_bits_[0] |= 0x00000080u;
  return dst_ctime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskProgressRsp::release_dst_ctime() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.dst_ctime)
  if (!_internal_has_dst_ctime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return dst_ctime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskProgressRsp::set_allocated_dst_ctime(std::string* dst_ctime) {
  if (dst_ctime != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  dst_ctime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_ctime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.dst_ctime)
}

// optional uint64 dst_block_num = 14;
inline bool TaskProgressRsp::_internal_has_dst_block_num() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TaskProgressRsp::has_dst_block_num() const {
  return _internal_has_dst_block_num();
}
inline void TaskProgressRsp::clear_dst_block_num() {
  dst_block_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::_internal_dst_block_num() const {
  return dst_block_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskProgressRsp::dst_block_num() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.dst_block_num)
  return _internal_dst_block_num();
}
inline void TaskProgressRsp::_internal_set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  dst_block_num_ = value;
}
inline void TaskProgressRsp::set_dst_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dst_block_num(value);
  // @@protoc_insertion_point(field_set:FTN.TaskProgressRsp.dst_block_num)
}

// optional .FTN.TrsfSseInfo sseinfo = 15;
inline bool TaskProgressRsp::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool TaskProgressRsp::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void TaskProgressRsp::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::FTN::TrsfSseInfo& TaskProgressRsp::_internal_sseinfo() const {
  const ::FTN::TrsfSseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::TrsfSseInfo&>(
      ::FTN::_TrsfSseInfo_default_instance_);
}
inline const ::FTN::TrsfSseInfo& TaskProgressRsp::sseinfo() const {
  // @@protoc_insertion_point(field_get:FTN.TaskProgressRsp.sseinfo)
  return _internal_sseinfo();
}
inline void TaskProgressRsp::unsafe_arena_set_allocated_sseinfo(
    ::FTN::TrsfSseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.TaskProgressRsp.sseinfo)
}
inline ::FTN::TrsfSseInfo* TaskProgressRsp::release_sseinfo() {
  _has_bits_[0] &= ~0x00000100u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::TrsfSseInfo* TaskProgressRsp::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:FTN.TaskProgressRsp.sseinfo)
  _has_bits_[0] &= ~0x00000100u;
  ::FTN::TrsfSseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::FTN::TrsfSseInfo* TaskProgressRsp::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000100u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::TrsfSseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::FTN::TrsfSseInfo* TaskProgressRsp::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:FTN.TaskProgressRsp.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void TaskProgressRsp::set_allocated_sseinfo(::FTN::TrsfSseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:FTN.TaskProgressRsp.sseinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FTN

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FTN::CosTransferReqMsg_SubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FTN::CosTransferReqMsg_SubType>() {
  return ::FTN::CosTransferReqMsg_SubType_descriptor();
}
template <> struct is_proto_enum< ::FTN::CosTransferRspMsg_SubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FTN::CosTransferRspMsg_SubType>() {
  return ::FTN::CosTransferRspMsg_SubType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cos_5ftrsf_2eproto
