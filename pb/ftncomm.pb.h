// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftncomm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ftncomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ftncomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ftncomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ftncomm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ftncomm_2eproto;
namespace FTN {
class AppMsg;
class AppMsgDefaultTypeInternal;
extern AppMsgDefaultTypeInternal _AppMsg_default_instance_;
class StorageAppMsg;
class StorageAppMsgDefaultTypeInternal;
extern StorageAppMsgDefaultTypeInternal _StorageAppMsg_default_instance_;
}  // namespace FTN
PROTOBUF_NAMESPACE_OPEN
template<> ::FTN::AppMsg* Arena::CreateMaybeMessage<::FTN::AppMsg>(Arena*);
template<> ::FTN::StorageAppMsg* Arena::CreateMaybeMessage<::FTN::StorageAppMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FTN {

enum AppMsg_Type : int {
  AppMsg_Type_FtnNugcReqMsg = 5,
  AppMsg_Type_FtnNugcRspMsg = 6,
  AppMsg_Type_photo_album_FtnNugcReqMsg = 7,
  AppMsg_Type_photo_album_FtnNugcRspMsg = 8,
  AppMsg_Type_FtnAccessReqMsg = 10,
  AppMsg_Type_FtnAccessRspMsg = 11,
  AppMsg_Type_FtnAccessHttpReqMsg = 12,
  AppMsg_Type_FtnAccessHttpRspMsg = 13,
  AppMsg_Type_FtnDeleteReqMsg = 14,
  AppMsg_Type_FtnDeleteRspMsg = 15,
  AppMsg_Type_CosQuartzsvrReqMsg = 16,
  AppMsg_Type_CosQuartzsvrRspMsg = 17,
  AppMsg_Type_CosTransferReqMsg = 18,
  AppMsg_Type_CosTransferRspMsg = 19,
  AppMsg_Type_CosTegProxyReqMsg = 20,
  AppMsg_Type_CosTegProxyRspMsg = 21
};
bool AppMsg_Type_IsValid(int value);
constexpr AppMsg_Type AppMsg_Type_Type_MIN = AppMsg_Type_FtnNugcReqMsg;
constexpr AppMsg_Type AppMsg_Type_Type_MAX = AppMsg_Type_CosTegProxyRspMsg;
constexpr int AppMsg_Type_Type_ARRAYSIZE = AppMsg_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppMsg_Type_descriptor();
template<typename T>
inline const std::string& AppMsg_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppMsg_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppMsg_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AppMsg_Type_descriptor(), enum_t_value);
}
inline bool AppMsg_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppMsg_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AppMsg_Type>(
    AppMsg_Type_descriptor(), name, value);
}
// ===================================================================

class StorageAppMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.StorageAppMsg) */ {
 public:
  inline StorageAppMsg() : StorageAppMsg(nullptr) {}
  virtual ~StorageAppMsg();

  StorageAppMsg(const StorageAppMsg& from);
  StorageAppMsg(StorageAppMsg&& from) noexcept
    : StorageAppMsg() {
    *this = ::std::move(from);
  }

  inline StorageAppMsg& operator=(const StorageAppMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageAppMsg& operator=(StorageAppMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageAppMsg& default_instance();

  static inline const StorageAppMsg* internal_default_instance() {
    return reinterpret_cast<const StorageAppMsg*>(
               &_StorageAppMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StorageAppMsg& a, StorageAppMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageAppMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageAppMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageAppMsg* New() const final {
    return CreateMaybeMessage<StorageAppMsg>(nullptr);
  }

  StorageAppMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageAppMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageAppMsg& from);
  void MergeFrom(const StorageAppMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageAppMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.StorageAppMsg";
  }
  protected:
  explicit StorageAppMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ftncomm_2eproto);
    return ::descriptor_table_ftncomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kSeqFieldNumber = 1,
  };
  // required .FTN.AppMsg body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::FTN::AppMsg& body() const;
  ::FTN::AppMsg* release_body();
  ::FTN::AppMsg* mutable_body();
  void set_allocated_body(::FTN::AppMsg* body);
  private:
  const ::FTN::AppMsg& _internal_body() const;
  ::FTN::AppMsg* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::FTN::AppMsg* body);
  ::FTN::AppMsg* unsafe_arena_release_body();

  // required uint32 seq = 1;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTN.StorageAppMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::FTN::AppMsg* body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  friend struct ::TableStruct_ftncomm_2eproto;
};
// -------------------------------------------------------------------

class AppMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTN.AppMsg) */ {
 public:
  inline AppMsg() : AppMsg(nullptr) {}
  virtual ~AppMsg();

  AppMsg(const AppMsg& from);
  AppMsg(AppMsg&& from) noexcept
    : AppMsg() {
    *this = ::std::move(from);
  }

  inline AppMsg& operator=(const AppMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppMsg& operator=(AppMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppMsg& default_instance();

  static inline const AppMsg* internal_default_instance() {
    return reinterpret_cast<const AppMsg*>(
               &_AppMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppMsg& a, AppMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AppMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppMsg* New() const final {
    return CreateMaybeMessage<AppMsg>(nullptr);
  }

  AppMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppMsg& from);
  void MergeFrom(const AppMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTN.AppMsg";
  }
  protected:
  explicit AppMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ftncomm_2eproto);
    return ::descriptor_table_ftncomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AppMsg_Type Type;
  static constexpr Type FtnNugcReqMsg =
    AppMsg_Type_FtnNugcReqMsg;
  static constexpr Type FtnNugcRspMsg =
    AppMsg_Type_FtnNugcRspMsg;
  static constexpr Type photo_album_FtnNugcReqMsg =
    AppMsg_Type_photo_album_FtnNugcReqMsg;
  static constexpr Type photo_album_FtnNugcRspMsg =
    AppMsg_Type_photo_album_FtnNugcRspMsg;
  static constexpr Type FtnAccessReqMsg =
    AppMsg_Type_FtnAccessReqMsg;
  static constexpr Type FtnAccessRspMsg =
    AppMsg_Type_FtnAccessRspMsg;
  static constexpr Type FtnAccessHttpReqMsg =
    AppMsg_Type_FtnAccessHttpReqMsg;
  static constexpr Type FtnAccessHttpRspMsg =
    AppMsg_Type_FtnAccessHttpRspMsg;
  static constexpr Type FtnDeleteReqMsg =
    AppMsg_Type_FtnDeleteReqMsg;
  static constexpr Type FtnDeleteRspMsg =
    AppMsg_Type_FtnDeleteRspMsg;
  static constexpr Type CosQuartzsvrReqMsg =
    AppMsg_Type_CosQuartzsvrReqMsg;
  static constexpr Type CosQuartzsvrRspMsg =
    AppMsg_Type_CosQuartzsvrRspMsg;
  static constexpr Type CosTransferReqMsg =
    AppMsg_Type_CosTransferReqMsg;
  static constexpr Type CosTransferRspMsg =
    AppMsg_Type_CosTransferRspMsg;
  static constexpr Type CosTegProxyReqMsg =
    AppMsg_Type_CosTegProxyReqMsg;
  static constexpr Type CosTegProxyRspMsg =
    AppMsg_Type_CosTegProxyRspMsg;
  static inline bool Type_IsValid(int value) {
    return AppMsg_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    AppMsg_Type_Type_MIN;
  static constexpr Type Type_MAX =
    AppMsg_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    AppMsg_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return AppMsg_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return AppMsg_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return AppMsg_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // required .FTN.AppMsg.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::FTN::AppMsg_Type type() const;
  void set_type(::FTN::AppMsg_Type value);
  private:
  ::FTN::AppMsg_Type _internal_type() const;
  void _internal_set_type(::FTN::AppMsg_Type value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(AppMsg)
  // @@protoc_insertion_point(class_scope:FTN.AppMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_ftncomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageAppMsg

// required uint32 seq = 1;
inline bool StorageAppMsg::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StorageAppMsg::has_seq() const {
  return _internal_has_seq();
}
inline void StorageAppMsg::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageAppMsg::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageAppMsg::seq() const {
  // @@protoc_insertion_point(field_get:FTN.StorageAppMsg.seq)
  return _internal_seq();
}
inline void StorageAppMsg::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  seq_ = value;
}
inline void StorageAppMsg::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:FTN.StorageAppMsg.seq)
}

// required .FTN.AppMsg body = 2;
inline bool StorageAppMsg::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || body_ != nullptr);
  return value;
}
inline bool StorageAppMsg::has_body() const {
  return _internal_has_body();
}
inline void StorageAppMsg::clear_body() {
  if (body_ != nullptr) body_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::FTN::AppMsg& StorageAppMsg::_internal_body() const {
  const ::FTN::AppMsg* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::FTN::AppMsg&>(
      ::FTN::_AppMsg_default_instance_);
}
inline const ::FTN::AppMsg& StorageAppMsg::body() const {
  // @@protoc_insertion_point(field_get:FTN.StorageAppMsg.body)
  return _internal_body();
}
inline void StorageAppMsg::unsafe_arena_set_allocated_body(
    ::FTN::AppMsg* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FTN.StorageAppMsg.body)
}
inline ::FTN::AppMsg* StorageAppMsg::release_body() {
  _has_bits_[0] &= ~0x00000001u;
  ::FTN::AppMsg* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FTN::AppMsg* StorageAppMsg::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:FTN.StorageAppMsg.body)
  _has_bits_[0] &= ~0x00000001u;
  ::FTN::AppMsg* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::FTN::AppMsg* StorageAppMsg::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::FTN::AppMsg>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::FTN::AppMsg* StorageAppMsg::mutable_body() {
  // @@protoc_insertion_point(field_mutable:FTN.StorageAppMsg.body)
  return _internal_mutable_body();
}
inline void StorageAppMsg::set_allocated_body(::FTN::AppMsg* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:FTN.StorageAppMsg.body)
}

// -------------------------------------------------------------------

// AppMsg

// required .FTN.AppMsg.Type type = 1;
inline bool AppMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppMsg::has_type() const {
  return _internal_has_type();
}
inline void AppMsg::clear_type() {
  type_ = 5;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::FTN::AppMsg_Type AppMsg::_internal_type() const {
  return static_cast< ::FTN::AppMsg_Type >(type_);
}
inline ::FTN::AppMsg_Type AppMsg::type() const {
  // @@protoc_insertion_point(field_get:FTN.AppMsg.type)
  return _internal_type();
}
inline void AppMsg::_internal_set_type(::FTN::AppMsg_Type value) {
  assert(::FTN::AppMsg_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void AppMsg::set_type(::FTN::AppMsg_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:FTN.AppMsg.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FTN

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FTN::AppMsg_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FTN::AppMsg_Type>() {
  return ::FTN::AppMsg_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ftncomm_2eproto
