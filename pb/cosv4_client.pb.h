// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosv4_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosv4_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cosv4_5fclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cos_comm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cosv4_5fclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosv4_5fclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[144]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cosv4_5fclient_2eproto;
namespace ClientCos {
class AclInfo;
class AclInfoDefaultTypeInternal;
extern AclInfoDefaultTypeInternal _AclInfo_default_instance_;
class AppAttr;
class AppAttrDefaultTypeInternal;
extern AppAttrDefaultTypeInternal _AppAttr_default_instance_;
class AppAttrModifyReq;
class AppAttrModifyReqDefaultTypeInternal;
extern AppAttrModifyReqDefaultTypeInternal _AppAttrModifyReq_default_instance_;
class AppAttrModifyRsp;
class AppAttrModifyRspDefaultTypeInternal;
extern AppAttrModifyRspDefaultTypeInternal _AppAttrModifyRsp_default_instance_;
class AppAttrQueryReq;
class AppAttrQueryReqDefaultTypeInternal;
extern AppAttrQueryReqDefaultTypeInternal _AppAttrQueryReq_default_instance_;
class AppAttrQueryRsp;
class AppAttrQueryRspDefaultTypeInternal;
extern AppAttrQueryRspDefaultTypeInternal _AppAttrQueryRsp_default_instance_;
class AppCamAuthQueryReq;
class AppCamAuthQueryReqDefaultTypeInternal;
extern AppCamAuthQueryReqDefaultTypeInternal _AppCamAuthQueryReq_default_instance_;
class AppCamAuthQueryRsp;
class AppCamAuthQueryRspDefaultTypeInternal;
extern AppCamAuthQueryRspDefaultTypeInternal _AppCamAuthQueryRsp_default_instance_;
class AppMsg;
class AppMsgDefaultTypeInternal;
extern AppMsgDefaultTypeInternal _AppMsg_default_instance_;
class AuthInfo;
class AuthInfoDefaultTypeInternal;
extern AuthInfoDefaultTypeInternal _AuthInfo_default_instance_;
class BucketAttrModifyReq;
class BucketAttrModifyReqDefaultTypeInternal;
extern BucketAttrModifyReqDefaultTypeInternal _BucketAttrModifyReq_default_instance_;
class BucketAttrModifyRsp;
class BucketAttrModifyRspDefaultTypeInternal;
extern BucketAttrModifyRspDefaultTypeInternal _BucketAttrModifyRsp_default_instance_;
class BucketAttrQueryReq;
class BucketAttrQueryReqDefaultTypeInternal;
extern BucketAttrQueryReqDefaultTypeInternal _BucketAttrQueryReq_default_instance_;
class BucketAttrQueryRsp;
class BucketAttrQueryRspDefaultTypeInternal;
extern BucketAttrQueryRspDefaultTypeInternal _BucketAttrQueryRsp_default_instance_;
class BucketCamAuthQueryReq;
class BucketCamAuthQueryReqDefaultTypeInternal;
extern BucketCamAuthQueryReqDefaultTypeInternal _BucketCamAuthQueryReq_default_instance_;
class BucketCamAuthQueryRsp;
class BucketCamAuthQueryRspDefaultTypeInternal;
extern BucketCamAuthQueryRspDefaultTypeInternal _BucketCamAuthQueryRsp_default_instance_;
class BucketCreateReq;
class BucketCreateReqDefaultTypeInternal;
extern BucketCreateReqDefaultTypeInternal _BucketCreateReq_default_instance_;
class BucketCreateRsp;
class BucketCreateRspDefaultTypeInternal;
extern BucketCreateRspDefaultTypeInternal _BucketCreateRsp_default_instance_;
class COSTransToCASReq;
class COSTransToCASReqDefaultTypeInternal;
extern COSTransToCASReqDefaultTypeInternal _COSTransToCASReq_default_instance_;
class COSTransToCASRsp;
class COSTransToCASRspDefaultTypeInternal;
extern COSTransToCASRspDefaultTypeInternal _COSTransToCASRsp_default_instance_;
class CamAtuhItem;
class CamAtuhItemDefaultTypeInternal;
extern CamAtuhItemDefaultTypeInternal _CamAtuhItem_default_instance_;
class CasFileRecoverDelReq;
class CasFileRecoverDelReqDefaultTypeInternal;
extern CasFileRecoverDelReqDefaultTypeInternal _CasFileRecoverDelReq_default_instance_;
class CasFileRecoverDelRsp;
class CasFileRecoverDelRspDefaultTypeInternal;
extern CasFileRecoverDelRspDefaultTypeInternal _CasFileRecoverDelRsp_default_instance_;
class CasInfo;
class CasInfoDefaultTypeInternal;
extern CasInfoDefaultTypeInternal _CasInfo_default_instance_;
class CasObjAttrModifyReq;
class CasObjAttrModifyReqDefaultTypeInternal;
extern CasObjAttrModifyReqDefaultTypeInternal _CasObjAttrModifyReq_default_instance_;
class CasObjAttrModifyRsp;
class CasObjAttrModifyRspDefaultTypeInternal;
extern CasObjAttrModifyRspDefaultTypeInternal _CasObjAttrModifyRsp_default_instance_;
class CasObjRestoreErrReq;
class CasObjRestoreErrReqDefaultTypeInternal;
extern CasObjRestoreErrReqDefaultTypeInternal _CasObjRestoreErrReq_default_instance_;
class CasObjRestoreErrRsp;
class CasObjRestoreErrRspDefaultTypeInternal;
extern CasObjRestoreErrRspDefaultTypeInternal _CasObjRestoreErrRsp_default_instance_;
class CasObjRestoreFinReq;
class CasObjRestoreFinReqDefaultTypeInternal;
extern CasObjRestoreFinReqDefaultTypeInternal _CasObjRestoreFinReq_default_instance_;
class CasObjRestoreFinRsp;
class CasObjRestoreFinRspDefaultTypeInternal;
extern CasObjRestoreFinRspDefaultTypeInternal _CasObjRestoreFinRsp_default_instance_;
class CgiArgs;
class CgiArgsDefaultTypeInternal;
extern CgiArgsDefaultTypeInternal _CgiArgs_default_instance_;
class CgiParams;
class CgiParamsDefaultTypeInternal;
extern CgiParamsDefaultTypeInternal _CgiParams_default_instance_;
class CheckObjAclReq;
class CheckObjAclReqDefaultTypeInternal;
extern CheckObjAclReqDefaultTypeInternal _CheckObjAclReq_default_instance_;
class CheckObjAclRsp;
class CheckObjAclRspDefaultTypeInternal;
extern CheckObjAclRspDefaultTypeInternal _CheckObjAclRsp_default_instance_;
class CompleteMultiUploadExtend;
class CompleteMultiUploadExtendDefaultTypeInternal;
extern CompleteMultiUploadExtendDefaultTypeInternal _CompleteMultiUploadExtend_default_instance_;
class CorsRule;
class CorsRuleDefaultTypeInternal;
extern CorsRuleDefaultTypeInternal _CorsRule_default_instance_;
class CosAppMsg;
class CosAppMsgDefaultTypeInternal;
extern CosAppMsgDefaultTypeInternal _CosAppMsg_default_instance_;
class CosReqMsg;
class CosReqMsgDefaultTypeInternal;
extern CosReqMsgDefaultTypeInternal _CosReqMsg_default_instance_;
class CosRspMsg;
class CosRspMsgDefaultTypeInternal;
extern CosRspMsgDefaultTypeInternal _CosRspMsg_default_instance_;
class CustomHeader;
class CustomHeaderDefaultTypeInternal;
extern CustomHeaderDefaultTypeInternal _CustomHeader_default_instance_;
class DelExpireFileReq;
class DelExpireFileReqDefaultTypeInternal;
extern DelExpireFileReqDefaultTypeInternal _DelExpireFileReq_default_instance_;
class DelExpireFileRsp;
class DelExpireFileRspDefaultTypeInternal;
extern DelExpireFileRspDefaultTypeInternal _DelExpireFileRsp_default_instance_;
class DelNoHashFileReq;
class DelNoHashFileReqDefaultTypeInternal;
extern DelNoHashFileReqDefaultTypeInternal _DelNoHashFileReq_default_instance_;
class DelNoHashFileRsp;
class DelNoHashFileRspDefaultTypeInternal;
extern DelNoHashFileRspDefaultTypeInternal _DelNoHashFileRsp_default_instance_;
class DelObjExpireAttr;
class DelObjExpireAttrDefaultTypeInternal;
extern DelObjExpireAttrDefaultTypeInternal _DelObjExpireAttr_default_instance_;
class DeleteReq;
class DeleteReqDefaultTypeInternal;
extern DeleteReqDefaultTypeInternal _DeleteReq_default_instance_;
class DeleteRsp;
class DeleteRspDefaultTypeInternal;
extern DeleteRspDefaultTypeInternal _DeleteRsp_default_instance_;
class DirCreateReq;
class DirCreateReqDefaultTypeInternal;
extern DirCreateReqDefaultTypeInternal _DirCreateReq_default_instance_;
class DirCreateRsp;
class DirCreateRspDefaultTypeInternal;
extern DirCreateRspDefaultTypeInternal _DirCreateRsp_default_instance_;
class ErrorCodeReturned;
class ErrorCodeReturnedDefaultTypeInternal;
extern ErrorCodeReturnedDefaultTypeInternal _ErrorCodeReturned_default_instance_;
class ExpireFileDelNoVerReq;
class ExpireFileDelNoVerReqDefaultTypeInternal;
extern ExpireFileDelNoVerReqDefaultTypeInternal _ExpireFileDelNoVerReq_default_instance_;
class ExpireFileDelNoverRsp;
class ExpireFileDelNoverRspDefaultTypeInternal;
extern ExpireFileDelNoverRspDefaultTypeInternal _ExpireFileDelNoverRsp_default_instance_;
class ExpireFileDelVerReq;
class ExpireFileDelVerReqDefaultTypeInternal;
extern ExpireFileDelVerReqDefaultTypeInternal _ExpireFileDelVerReq_default_instance_;
class ExpireFileDelVerRsp;
class ExpireFileDelVerRspDefaultTypeInternal;
extern ExpireFileDelVerRspDefaultTypeInternal _ExpireFileDelVerRsp_default_instance_;
class ExtraAttr;
class ExtraAttrDefaultTypeInternal;
extern ExtraAttrDefaultTypeInternal _ExtraAttr_default_instance_;
class FileBatchDelReq;
class FileBatchDelReqDefaultTypeInternal;
extern FileBatchDelReqDefaultTypeInternal _FileBatchDelReq_default_instance_;
class FileBatchDelRsp;
class FileBatchDelRspDefaultTypeInternal;
extern FileBatchDelRspDefaultTypeInternal _FileBatchDelRsp_default_instance_;
class FileDelReq;
class FileDelReqDefaultTypeInternal;
extern FileDelReqDefaultTypeInternal _FileDelReq_default_instance_;
class FileDelRsp;
class FileDelRspDefaultTypeInternal;
extern FileDelRspDefaultTypeInternal _FileDelRsp_default_instance_;
class FileDelState;
class FileDelStateDefaultTypeInternal;
extern FileDelStateDefaultTypeInternal _FileDelState_default_instance_;
class FileDownToCASReq;
class FileDownToCASReqDefaultTypeInternal;
extern FileDownToCASReqDefaultTypeInternal _FileDownToCASReq_default_instance_;
class FileDownToCASRsp;
class FileDownToCASRspDefaultTypeInternal;
extern FileDownToCASRspDefaultTypeInternal _FileDownToCASRsp_default_instance_;
class FileUnfinishAttrQueryReq;
class FileUnfinishAttrQueryReqDefaultTypeInternal;
extern FileUnfinishAttrQueryReqDefaultTypeInternal _FileUnfinishAttrQueryReq_default_instance_;
class FileUnfinishAttrQueryRsp;
class FileUnfinishAttrQueryRspDefaultTypeInternal;
extern FileUnfinishAttrQueryRspDefaultTypeInternal _FileUnfinishAttrQueryRsp_default_instance_;
class GetBucketInventoryReq;
class GetBucketInventoryReqDefaultTypeInternal;
extern GetBucketInventoryReqDefaultTypeInternal _GetBucketInventoryReq_default_instance_;
class GetBucketInventoryRsp;
class GetBucketInventoryRspDefaultTypeInternal;
extern GetBucketInventoryRspDefaultTypeInternal _GetBucketInventoryRsp_default_instance_;
class GetBucketLockReq;
class GetBucketLockReqDefaultTypeInternal;
extern GetBucketLockReqDefaultTypeInternal _GetBucketLockReq_default_instance_;
class GetBucketLockRsp;
class GetBucketLockRspDefaultTypeInternal;
extern GetBucketLockRspDefaultTypeInternal _GetBucketLockRsp_default_instance_;
class GetBucketUinReq;
class GetBucketUinReqDefaultTypeInternal;
extern GetBucketUinReqDefaultTypeInternal _GetBucketUinReq_default_instance_;
class GetBucketUinRsp;
class GetBucketUinRspDefaultTypeInternal;
extern GetBucketUinRspDefaultTypeInternal _GetBucketUinRsp_default_instance_;
class GetObjAclReq;
class GetObjAclReqDefaultTypeInternal;
extern GetObjAclReqDefaultTypeInternal _GetObjAclReq_default_instance_;
class GetObjAclRsp;
class GetObjAclRspDefaultTypeInternal;
extern GetObjAclRspDefaultTypeInternal _GetObjAclRsp_default_instance_;
class GetObjectExtend;
class GetObjectExtendDefaultTypeInternal;
extern GetObjectExtendDefaultTypeInternal _GetObjectExtend_default_instance_;
class KeyPair;
class KeyPairDefaultTypeInternal;
extern KeyPairDefaultTypeInternal _KeyPair_default_instance_;
class LFAttr;
class LFAttrDefaultTypeInternal;
extern LFAttrDefaultTypeInternal _LFAttr_default_instance_;
class ListDirectReq;
class ListDirectReqDefaultTypeInternal;
extern ListDirectReqDefaultTypeInternal _ListDirectReq_default_instance_;
class ListDirectRsp;
class ListDirectRspDefaultTypeInternal;
extern ListDirectRspDefaultTypeInternal _ListDirectRsp_default_instance_;
class ListMutiobjReq;
class ListMutiobjReqDefaultTypeInternal;
extern ListMutiobjReqDefaultTypeInternal _ListMutiobjReq_default_instance_;
class ListMutiobjRsp;
class ListMutiobjRspDefaultTypeInternal;
extern ListMutiobjRspDefaultTypeInternal _ListMutiobjRsp_default_instance_;
class ListObjVerReq;
class ListObjVerReqDefaultTypeInternal;
extern ListObjVerReqDefaultTypeInternal _ListObjVerReq_default_instance_;
class ListObjVerRsp;
class ListObjVerRspDefaultTypeInternal;
extern ListObjVerRspDefaultTypeInternal _ListObjVerRsp_default_instance_;
class ListReq;
class ListReqDefaultTypeInternal;
extern ListReqDefaultTypeInternal _ListReq_default_instance_;
class ListRsp;
class ListRspDefaultTypeInternal;
extern ListRspDefaultTypeInternal _ListRsp_default_instance_;
class LockInfo;
class LockInfoDefaultTypeInternal;
extern LockInfoDefaultTypeInternal _LockInfo_default_instance_;
class MigrateFinFileReq;
class MigrateFinFileReqDefaultTypeInternal;
extern MigrateFinFileReqDefaultTypeInternal _MigrateFinFileReq_default_instance_;
class MigrateFinFileRsp;
class MigrateFinFileRspDefaultTypeInternal;
extern MigrateFinFileRspDefaultTypeInternal _MigrateFinFileRsp_default_instance_;
class MigrateUnFinFileReq;
class MigrateUnFinFileReqDefaultTypeInternal;
extern MigrateUnFinFileReqDefaultTypeInternal _MigrateUnFinFileReq_default_instance_;
class MigrateUnFinFileRsp;
class MigrateUnFinFileRspDefaultTypeInternal;
extern MigrateUnFinFileRspDefaultTypeInternal _MigrateUnFinFileRsp_default_instance_;
class Migrateinfo;
class MigrateinfoDefaultTypeInternal;
extern MigrateinfoDefaultTypeInternal _Migrateinfo_default_instance_;
class MutiObjItem;
class MutiObjItemDefaultTypeInternal;
extern MutiObjItemDefaultTypeInternal _MutiObjItem_default_instance_;
class ObjAttrModifyReq;
class ObjAttrModifyReqDefaultTypeInternal;
extern ObjAttrModifyReqDefaultTypeInternal _ObjAttrModifyReq_default_instance_;
class ObjAttrModifyRsp;
class ObjAttrModifyRspDefaultTypeInternal;
extern ObjAttrModifyRspDefaultTypeInternal _ObjAttrModifyRsp_default_instance_;
class ObjAttrQueryReq;
class ObjAttrQueryReqDefaultTypeInternal;
extern ObjAttrQueryReqDefaultTypeInternal _ObjAttrQueryReq_default_instance_;
class ObjAttrQueryRsp;
class ObjAttrQueryRspDefaultTypeInternal;
extern ObjAttrQueryRspDefaultTypeInternal _ObjAttrQueryRsp_default_instance_;
class ObjExpireAttr;
class ObjExpireAttrDefaultTypeInternal;
extern ObjExpireAttrDefaultTypeInternal _ObjExpireAttr_default_instance_;
class ObjItem;
class ObjItemDefaultTypeInternal;
extern ObjItemDefaultTypeInternal _ObjItem_default_instance_;
class ObjModStorageTypeReq;
class ObjModStorageTypeReqDefaultTypeInternal;
extern ObjModStorageTypeReqDefaultTypeInternal _ObjModStorageTypeReq_default_instance_;
class ObjModStorageTypeRsp;
class ObjModStorageTypeRspDefaultTypeInternal;
extern ObjModStorageTypeRspDefaultTypeInternal _ObjModStorageTypeRsp_default_instance_;
class ObjModTimeStampReq;
class ObjModTimeStampReqDefaultTypeInternal;
extern ObjModTimeStampReqDefaultTypeInternal _ObjModTimeStampReq_default_instance_;
class ObjModTimeStampRsp;
class ObjModTimeStampRspDefaultTypeInternal;
extern ObjModTimeStampRspDefaultTypeInternal _ObjModTimeStampRsp_default_instance_;
class ObjTag;
class ObjTagDefaultTypeInternal;
extern ObjTagDefaultTypeInternal _ObjTag_default_instance_;
class Opinfo;
class OpinfoDefaultTypeInternal;
extern OpinfoDefaultTypeInternal _Opinfo_default_instance_;
class OwnerInfo;
class OwnerInfoDefaultTypeInternal;
extern OwnerInfoDefaultTypeInternal _OwnerInfo_default_instance_;
class PrefixAndErrcodeReturned;
class PrefixAndErrcodeReturnedDefaultTypeInternal;
extern PrefixAndErrcodeReturnedDefaultTypeInternal _PrefixAndErrcodeReturned_default_instance_;
class PrefixReturned;
class PrefixReturnedDefaultTypeInternal;
extern PrefixReturnedDefaultTypeInternal _PrefixReturned_default_instance_;
class PreviewFileAttrQueryReq;
class PreviewFileAttrQueryReqDefaultTypeInternal;
extern PreviewFileAttrQueryReqDefaultTypeInternal _PreviewFileAttrQueryReq_default_instance_;
class PreviewFileAttrQueryRsp;
class PreviewFileAttrQueryRspDefaultTypeInternal;
extern PreviewFileAttrQueryRspDefaultTypeInternal _PreviewFileAttrQueryRsp_default_instance_;
class ReduceLifecycleReq;
class ReduceLifecycleReqDefaultTypeInternal;
extern ReduceLifecycleReqDefaultTypeInternal _ReduceLifecycleReq_default_instance_;
class ReduceLifecycleRsp;
class ReduceLifecycleRspDefaultTypeInternal;
extern ReduceLifecycleRspDefaultTypeInternal _ReduceLifecycleRsp_default_instance_;
class ReservedAttr;
class ReservedAttrDefaultTypeInternal;
extern ReservedAttrDefaultTypeInternal _ReservedAttr_default_instance_;
class RetrieveLifecycleReq;
class RetrieveLifecycleReqDefaultTypeInternal;
extern RetrieveLifecycleReqDefaultTypeInternal _RetrieveLifecycleReq_default_instance_;
class RetrieveLifecycleRsp;
class RetrieveLifecycleRspDefaultTypeInternal;
extern RetrieveLifecycleRspDefaultTypeInternal _RetrieveLifecycleRsp_default_instance_;
class RoutingRule;
class RoutingRuleDefaultTypeInternal;
extern RoutingRuleDefaultTypeInternal _RoutingRule_default_instance_;
class SetBucketInventoryReq;
class SetBucketInventoryReqDefaultTypeInternal;
extern SetBucketInventoryReqDefaultTypeInternal _SetBucketInventoryReq_default_instance_;
class SetBucketInventoryRsp;
class SetBucketInventoryRspDefaultTypeInternal;
extern SetBucketInventoryRspDefaultTypeInternal _SetBucketInventoryRsp_default_instance_;
class SetBucketLockReq;
class SetBucketLockReqDefaultTypeInternal;
extern SetBucketLockReqDefaultTypeInternal _SetBucketLockReq_default_instance_;
class SetBucketLockRsp;
class SetBucketLockRspDefaultTypeInternal;
extern SetBucketLockRspDefaultTypeInternal _SetBucketLockRsp_default_instance_;
class SetBucketPriAttrReq;
class SetBucketPriAttrReqDefaultTypeInternal;
extern SetBucketPriAttrReqDefaultTypeInternal _SetBucketPriAttrReq_default_instance_;
class SetBucketPriAttrRsp;
class SetBucketPriAttrRspDefaultTypeInternal;
extern SetBucketPriAttrRspDefaultTypeInternal _SetBucketPriAttrRsp_default_instance_;
class SetBucketUinReq;
class SetBucketUinReqDefaultTypeInternal;
extern SetBucketUinReqDefaultTypeInternal _SetBucketUinReq_default_instance_;
class SetBucketUinRsp;
class SetBucketUinRspDefaultTypeInternal;
extern SetBucketUinRspDefaultTypeInternal _SetBucketUinRsp_default_instance_;
class SetBucketWebsiteInfoReq;
class SetBucketWebsiteInfoReqDefaultTypeInternal;
extern SetBucketWebsiteInfoReqDefaultTypeInternal _SetBucketWebsiteInfoReq_default_instance_;
class SetBucketWebsiteInfoRsp;
class SetBucketWebsiteInfoRspDefaultTypeInternal;
extern SetBucketWebsiteInfoRspDefaultTypeInternal _SetBucketWebsiteInfoRsp_default_instance_;
class SetCamAttrReq;
class SetCamAttrReqDefaultTypeInternal;
extern SetCamAttrReqDefaultTypeInternal _SetCamAttrReq_default_instance_;
class SetCamAttrRsp;
class SetCamAttrRspDefaultTypeInternal;
extern SetCamAttrRspDefaultTypeInternal _SetCamAttrRsp_default_instance_;
class SetMigrateReq;
class SetMigrateReqDefaultTypeInternal;
extern SetMigrateReqDefaultTypeInternal _SetMigrateReq_default_instance_;
class SetMigrateRsp;
class SetMigrateRspDefaultTypeInternal;
extern SetMigrateRspDefaultTypeInternal _SetMigrateRsp_default_instance_;
class SetObjAclReq;
class SetObjAclReqDefaultTypeInternal;
extern SetObjAclReqDefaultTypeInternal _SetObjAclReq_default_instance_;
class SetObjAclRsp;
class SetObjAclRspDefaultTypeInternal;
extern SetObjAclRspDefaultTypeInternal _SetObjAclRsp_default_instance_;
class SpObjAttrModifyReq;
class SpObjAttrModifyReqDefaultTypeInternal;
extern SpObjAttrModifyReqDefaultTypeInternal _SpObjAttrModifyReq_default_instance_;
class SpObjAttrModifyRsp;
class SpObjAttrModifyRspDefaultTypeInternal;
extern SpObjAttrModifyRspDefaultTypeInternal _SpObjAttrModifyRsp_default_instance_;
class SpObjAttrQueryReq;
class SpObjAttrQueryReqDefaultTypeInternal;
extern SpObjAttrQueryReqDefaultTypeInternal _SpObjAttrQueryReq_default_instance_;
class SpObjAttrQueryRsp;
class SpObjAttrQueryRspDefaultTypeInternal;
extern SpObjAttrQueryRspDefaultTypeInternal _SpObjAttrQueryRsp_default_instance_;
class SseInfo;
class SseInfoDefaultTypeInternal;
extern SseInfoDefaultTypeInternal _SseInfo_default_instance_;
class StorageTypeAttr;
class StorageTypeAttrDefaultTypeInternal;
extern StorageTypeAttrDefaultTypeInternal _StorageTypeAttr_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class TrsfArgs;
class TrsfArgsDefaultTypeInternal;
extern TrsfArgsDefaultTypeInternal _TrsfArgs_default_instance_;
class UnfinObjAttrModifyReq;
class UnfinObjAttrModifyReqDefaultTypeInternal;
extern UnfinObjAttrModifyReqDefaultTypeInternal _UnfinObjAttrModifyReq_default_instance_;
class UnfinObjAttrModifyRsp;
class UnfinObjAttrModifyRspDefaultTypeInternal;
extern UnfinObjAttrModifyRspDefaultTypeInternal _UnfinObjAttrModifyRsp_default_instance_;
class UploadAttr;
class UploadAttrDefaultTypeInternal;
extern UploadAttrDefaultTypeInternal _UploadAttr_default_instance_;
class UploadDelmarkerReq;
class UploadDelmarkerReqDefaultTypeInternal;
extern UploadDelmarkerReqDefaultTypeInternal _UploadDelmarkerReq_default_instance_;
class UploadDelmarkerRsp;
class UploadDelmarkerRspDefaultTypeInternal;
extern UploadDelmarkerRspDefaultTypeInternal _UploadDelmarkerRsp_default_instance_;
class WebsiteInfo;
class WebsiteInfoDefaultTypeInternal;
extern WebsiteInfoDefaultTypeInternal _WebsiteInfo_default_instance_;
class delObj;
class delObjDefaultTypeInternal;
extern delObjDefaultTypeInternal _delObj_default_instance_;
}  // namespace ClientCos
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientCos::AclInfo* Arena::CreateMaybeMessage<::ClientCos::AclInfo>(Arena*);
template<> ::ClientCos::AppAttr* Arena::CreateMaybeMessage<::ClientCos::AppAttr>(Arena*);
template<> ::ClientCos::AppAttrModifyReq* Arena::CreateMaybeMessage<::ClientCos::AppAttrModifyReq>(Arena*);
template<> ::ClientCos::AppAttrModifyRsp* Arena::CreateMaybeMessage<::ClientCos::AppAttrModifyRsp>(Arena*);
template<> ::ClientCos::AppAttrQueryReq* Arena::CreateMaybeMessage<::ClientCos::AppAttrQueryReq>(Arena*);
template<> ::ClientCos::AppAttrQueryRsp* Arena::CreateMaybeMessage<::ClientCos::AppAttrQueryRsp>(Arena*);
template<> ::ClientCos::AppCamAuthQueryReq* Arena::CreateMaybeMessage<::ClientCos::AppCamAuthQueryReq>(Arena*);
template<> ::ClientCos::AppCamAuthQueryRsp* Arena::CreateMaybeMessage<::ClientCos::AppCamAuthQueryRsp>(Arena*);
template<> ::ClientCos::AppMsg* Arena::CreateMaybeMessage<::ClientCos::AppMsg>(Arena*);
template<> ::ClientCos::AuthInfo* Arena::CreateMaybeMessage<::ClientCos::AuthInfo>(Arena*);
template<> ::ClientCos::BucketAttrModifyReq* Arena::CreateMaybeMessage<::ClientCos::BucketAttrModifyReq>(Arena*);
template<> ::ClientCos::BucketAttrModifyRsp* Arena::CreateMaybeMessage<::ClientCos::BucketAttrModifyRsp>(Arena*);
template<> ::ClientCos::BucketAttrQueryReq* Arena::CreateMaybeMessage<::ClientCos::BucketAttrQueryReq>(Arena*);
template<> ::ClientCos::BucketAttrQueryRsp* Arena::CreateMaybeMessage<::ClientCos::BucketAttrQueryRsp>(Arena*);
template<> ::ClientCos::BucketCamAuthQueryReq* Arena::CreateMaybeMessage<::ClientCos::BucketCamAuthQueryReq>(Arena*);
template<> ::ClientCos::BucketCamAuthQueryRsp* Arena::CreateMaybeMessage<::ClientCos::BucketCamAuthQueryRsp>(Arena*);
template<> ::ClientCos::BucketCreateReq* Arena::CreateMaybeMessage<::ClientCos::BucketCreateReq>(Arena*);
template<> ::ClientCos::BucketCreateRsp* Arena::CreateMaybeMessage<::ClientCos::BucketCreateRsp>(Arena*);
template<> ::ClientCos::COSTransToCASReq* Arena::CreateMaybeMessage<::ClientCos::COSTransToCASReq>(Arena*);
template<> ::ClientCos::COSTransToCASRsp* Arena::CreateMaybeMessage<::ClientCos::COSTransToCASRsp>(Arena*);
template<> ::ClientCos::CamAtuhItem* Arena::CreateMaybeMessage<::ClientCos::CamAtuhItem>(Arena*);
template<> ::ClientCos::CasFileRecoverDelReq* Arena::CreateMaybeMessage<::ClientCos::CasFileRecoverDelReq>(Arena*);
template<> ::ClientCos::CasFileRecoverDelRsp* Arena::CreateMaybeMessage<::ClientCos::CasFileRecoverDelRsp>(Arena*);
template<> ::ClientCos::CasInfo* Arena::CreateMaybeMessage<::ClientCos::CasInfo>(Arena*);
template<> ::ClientCos::CasObjAttrModifyReq* Arena::CreateMaybeMessage<::ClientCos::CasObjAttrModifyReq>(Arena*);
template<> ::ClientCos::CasObjAttrModifyRsp* Arena::CreateMaybeMessage<::ClientCos::CasObjAttrModifyRsp>(Arena*);
template<> ::ClientCos::CasObjRestoreErrReq* Arena::CreateMaybeMessage<::ClientCos::CasObjRestoreErrReq>(Arena*);
template<> ::ClientCos::CasObjRestoreErrRsp* Arena::CreateMaybeMessage<::ClientCos::CasObjRestoreErrRsp>(Arena*);
template<> ::ClientCos::CasObjRestoreFinReq* Arena::CreateMaybeMessage<::ClientCos::CasObjRestoreFinReq>(Arena*);
template<> ::ClientCos::CasObjRestoreFinRsp* Arena::CreateMaybeMessage<::ClientCos::CasObjRestoreFinRsp>(Arena*);
template<> ::ClientCos::CgiArgs* Arena::CreateMaybeMessage<::ClientCos::CgiArgs>(Arena*);
template<> ::ClientCos::CgiParams* Arena::CreateMaybeMessage<::ClientCos::CgiParams>(Arena*);
template<> ::ClientCos::CheckObjAclReq* Arena::CreateMaybeMessage<::ClientCos::CheckObjAclReq>(Arena*);
template<> ::ClientCos::CheckObjAclRsp* Arena::CreateMaybeMessage<::ClientCos::CheckObjAclRsp>(Arena*);
template<> ::ClientCos::CompleteMultiUploadExtend* Arena::CreateMaybeMessage<::ClientCos::CompleteMultiUploadExtend>(Arena*);
template<> ::ClientCos::CorsRule* Arena::CreateMaybeMessage<::ClientCos::CorsRule>(Arena*);
template<> ::ClientCos::CosAppMsg* Arena::CreateMaybeMessage<::ClientCos::CosAppMsg>(Arena*);
template<> ::ClientCos::CosReqMsg* Arena::CreateMaybeMessage<::ClientCos::CosReqMsg>(Arena*);
template<> ::ClientCos::CosRspMsg* Arena::CreateMaybeMessage<::ClientCos::CosRspMsg>(Arena*);
template<> ::ClientCos::CustomHeader* Arena::CreateMaybeMessage<::ClientCos::CustomHeader>(Arena*);
template<> ::ClientCos::DelExpireFileReq* Arena::CreateMaybeMessage<::ClientCos::DelExpireFileReq>(Arena*);
template<> ::ClientCos::DelExpireFileRsp* Arena::CreateMaybeMessage<::ClientCos::DelExpireFileRsp>(Arena*);
template<> ::ClientCos::DelNoHashFileReq* Arena::CreateMaybeMessage<::ClientCos::DelNoHashFileReq>(Arena*);
template<> ::ClientCos::DelNoHashFileRsp* Arena::CreateMaybeMessage<::ClientCos::DelNoHashFileRsp>(Arena*);
template<> ::ClientCos::DelObjExpireAttr* Arena::CreateMaybeMessage<::ClientCos::DelObjExpireAttr>(Arena*);
template<> ::ClientCos::DeleteReq* Arena::CreateMaybeMessage<::ClientCos::DeleteReq>(Arena*);
template<> ::ClientCos::DeleteRsp* Arena::CreateMaybeMessage<::ClientCos::DeleteRsp>(Arena*);
template<> ::ClientCos::DirCreateReq* Arena::CreateMaybeMessage<::ClientCos::DirCreateReq>(Arena*);
template<> ::ClientCos::DirCreateRsp* Arena::CreateMaybeMessage<::ClientCos::DirCreateRsp>(Arena*);
template<> ::ClientCos::ErrorCodeReturned* Arena::CreateMaybeMessage<::ClientCos::ErrorCodeReturned>(Arena*);
template<> ::ClientCos::ExpireFileDelNoVerReq* Arena::CreateMaybeMessage<::ClientCos::ExpireFileDelNoVerReq>(Arena*);
template<> ::ClientCos::ExpireFileDelNoverRsp* Arena::CreateMaybeMessage<::ClientCos::ExpireFileDelNoverRsp>(Arena*);
template<> ::ClientCos::ExpireFileDelVerReq* Arena::CreateMaybeMessage<::ClientCos::ExpireFileDelVerReq>(Arena*);
template<> ::ClientCos::ExpireFileDelVerRsp* Arena::CreateMaybeMessage<::ClientCos::ExpireFileDelVerRsp>(Arena*);
template<> ::ClientCos::ExtraAttr* Arena::CreateMaybeMessage<::ClientCos::ExtraAttr>(Arena*);
template<> ::ClientCos::FileBatchDelReq* Arena::CreateMaybeMessage<::ClientCos::FileBatchDelReq>(Arena*);
template<> ::ClientCos::FileBatchDelRsp* Arena::CreateMaybeMessage<::ClientCos::FileBatchDelRsp>(Arena*);
template<> ::ClientCos::FileDelReq* Arena::CreateMaybeMessage<::ClientCos::FileDelReq>(Arena*);
template<> ::ClientCos::FileDelRsp* Arena::CreateMaybeMessage<::ClientCos::FileDelRsp>(Arena*);
template<> ::ClientCos::FileDelState* Arena::CreateMaybeMessage<::ClientCos::FileDelState>(Arena*);
template<> ::ClientCos::FileDownToCASReq* Arena::CreateMaybeMessage<::ClientCos::FileDownToCASReq>(Arena*);
template<> ::ClientCos::FileDownToCASRsp* Arena::CreateMaybeMessage<::ClientCos::FileDownToCASRsp>(Arena*);
template<> ::ClientCos::FileUnfinishAttrQueryReq* Arena::CreateMaybeMessage<::ClientCos::FileUnfinishAttrQueryReq>(Arena*);
template<> ::ClientCos::FileUnfinishAttrQueryRsp* Arena::CreateMaybeMessage<::ClientCos::FileUnfinishAttrQueryRsp>(Arena*);
template<> ::ClientCos::GetBucketInventoryReq* Arena::CreateMaybeMessage<::ClientCos::GetBucketInventoryReq>(Arena*);
template<> ::ClientCos::GetBucketInventoryRsp* Arena::CreateMaybeMessage<::ClientCos::GetBucketInventoryRsp>(Arena*);
template<> ::ClientCos::GetBucketLockReq* Arena::CreateMaybeMessage<::ClientCos::GetBucketLockReq>(Arena*);
template<> ::ClientCos::GetBucketLockRsp* Arena::CreateMaybeMessage<::ClientCos::GetBucketLockRsp>(Arena*);
template<> ::ClientCos::GetBucketUinReq* Arena::CreateMaybeMessage<::ClientCos::GetBucketUinReq>(Arena*);
template<> ::ClientCos::GetBucketUinRsp* Arena::CreateMaybeMessage<::ClientCos::GetBucketUinRsp>(Arena*);
template<> ::ClientCos::GetObjAclReq* Arena::CreateMaybeMessage<::ClientCos::GetObjAclReq>(Arena*);
template<> ::ClientCos::GetObjAclRsp* Arena::CreateMaybeMessage<::ClientCos::GetObjAclRsp>(Arena*);
template<> ::ClientCos::GetObjectExtend* Arena::CreateMaybeMessage<::ClientCos::GetObjectExtend>(Arena*);
template<> ::ClientCos::KeyPair* Arena::CreateMaybeMessage<::ClientCos::KeyPair>(Arena*);
template<> ::ClientCos::LFAttr* Arena::CreateMaybeMessage<::ClientCos::LFAttr>(Arena*);
template<> ::ClientCos::ListDirectReq* Arena::CreateMaybeMessage<::ClientCos::ListDirectReq>(Arena*);
template<> ::ClientCos::ListDirectRsp* Arena::CreateMaybeMessage<::ClientCos::ListDirectRsp>(Arena*);
template<> ::ClientCos::ListMutiobjReq* Arena::CreateMaybeMessage<::ClientCos::ListMutiobjReq>(Arena*);
template<> ::ClientCos::ListMutiobjRsp* Arena::CreateMaybeMessage<::ClientCos::ListMutiobjRsp>(Arena*);
template<> ::ClientCos::ListObjVerReq* Arena::CreateMaybeMessage<::ClientCos::ListObjVerReq>(Arena*);
template<> ::ClientCos::ListObjVerRsp* Arena::CreateMaybeMessage<::ClientCos::ListObjVerRsp>(Arena*);
template<> ::ClientCos::ListReq* Arena::CreateMaybeMessage<::ClientCos::ListReq>(Arena*);
template<> ::ClientCos::ListRsp* Arena::CreateMaybeMessage<::ClientCos::ListRsp>(Arena*);
template<> ::ClientCos::LockInfo* Arena::CreateMaybeMessage<::ClientCos::LockInfo>(Arena*);
template<> ::ClientCos::MigrateFinFileReq* Arena::CreateMaybeMessage<::ClientCos::MigrateFinFileReq>(Arena*);
template<> ::ClientCos::MigrateFinFileRsp* Arena::CreateMaybeMessage<::ClientCos::MigrateFinFileRsp>(Arena*);
template<> ::ClientCos::MigrateUnFinFileReq* Arena::CreateMaybeMessage<::ClientCos::MigrateUnFinFileReq>(Arena*);
template<> ::ClientCos::MigrateUnFinFileRsp* Arena::CreateMaybeMessage<::ClientCos::MigrateUnFinFileRsp>(Arena*);
template<> ::ClientCos::Migrateinfo* Arena::CreateMaybeMessage<::ClientCos::Migrateinfo>(Arena*);
template<> ::ClientCos::MutiObjItem* Arena::CreateMaybeMessage<::ClientCos::MutiObjItem>(Arena*);
template<> ::ClientCos::ObjAttrModifyReq* Arena::CreateMaybeMessage<::ClientCos::ObjAttrModifyReq>(Arena*);
template<> ::ClientCos::ObjAttrModifyRsp* Arena::CreateMaybeMessage<::ClientCos::ObjAttrModifyRsp>(Arena*);
template<> ::ClientCos::ObjAttrQueryReq* Arena::CreateMaybeMessage<::ClientCos::ObjAttrQueryReq>(Arena*);
template<> ::ClientCos::ObjAttrQueryRsp* Arena::CreateMaybeMessage<::ClientCos::ObjAttrQueryRsp>(Arena*);
template<> ::ClientCos::ObjExpireAttr* Arena::CreateMaybeMessage<::ClientCos::ObjExpireAttr>(Arena*);
template<> ::ClientCos::ObjItem* Arena::CreateMaybeMessage<::ClientCos::ObjItem>(Arena*);
template<> ::ClientCos::ObjModStorageTypeReq* Arena::CreateMaybeMessage<::ClientCos::ObjModStorageTypeReq>(Arena*);
template<> ::ClientCos::ObjModStorageTypeRsp* Arena::CreateMaybeMessage<::ClientCos::ObjModStorageTypeRsp>(Arena*);
template<> ::ClientCos::ObjModTimeStampReq* Arena::CreateMaybeMessage<::ClientCos::ObjModTimeStampReq>(Arena*);
template<> ::ClientCos::ObjModTimeStampRsp* Arena::CreateMaybeMessage<::ClientCos::ObjModTimeStampRsp>(Arena*);
template<> ::ClientCos::ObjTag* Arena::CreateMaybeMessage<::ClientCos::ObjTag>(Arena*);
template<> ::ClientCos::Opinfo* Arena::CreateMaybeMessage<::ClientCos::Opinfo>(Arena*);
template<> ::ClientCos::OwnerInfo* Arena::CreateMaybeMessage<::ClientCos::OwnerInfo>(Arena*);
template<> ::ClientCos::PrefixAndErrcodeReturned* Arena::CreateMaybeMessage<::ClientCos::PrefixAndErrcodeReturned>(Arena*);
template<> ::ClientCos::PrefixReturned* Arena::CreateMaybeMessage<::ClientCos::PrefixReturned>(Arena*);
template<> ::ClientCos::PreviewFileAttrQueryReq* Arena::CreateMaybeMessage<::ClientCos::PreviewFileAttrQueryReq>(Arena*);
template<> ::ClientCos::PreviewFileAttrQueryRsp* Arena::CreateMaybeMessage<::ClientCos::PreviewFileAttrQueryRsp>(Arena*);
template<> ::ClientCos::ReduceLifecycleReq* Arena::CreateMaybeMessage<::ClientCos::ReduceLifecycleReq>(Arena*);
template<> ::ClientCos::ReduceLifecycleRsp* Arena::CreateMaybeMessage<::ClientCos::ReduceLifecycleRsp>(Arena*);
template<> ::ClientCos::ReservedAttr* Arena::CreateMaybeMessage<::ClientCos::ReservedAttr>(Arena*);
template<> ::ClientCos::RetrieveLifecycleReq* Arena::CreateMaybeMessage<::ClientCos::RetrieveLifecycleReq>(Arena*);
template<> ::ClientCos::RetrieveLifecycleRsp* Arena::CreateMaybeMessage<::ClientCos::RetrieveLifecycleRsp>(Arena*);
template<> ::ClientCos::RoutingRule* Arena::CreateMaybeMessage<::ClientCos::RoutingRule>(Arena*);
template<> ::ClientCos::SetBucketInventoryReq* Arena::CreateMaybeMessage<::ClientCos::SetBucketInventoryReq>(Arena*);
template<> ::ClientCos::SetBucketInventoryRsp* Arena::CreateMaybeMessage<::ClientCos::SetBucketInventoryRsp>(Arena*);
template<> ::ClientCos::SetBucketLockReq* Arena::CreateMaybeMessage<::ClientCos::SetBucketLockReq>(Arena*);
template<> ::ClientCos::SetBucketLockRsp* Arena::CreateMaybeMessage<::ClientCos::SetBucketLockRsp>(Arena*);
template<> ::ClientCos::SetBucketPriAttrReq* Arena::CreateMaybeMessage<::ClientCos::SetBucketPriAttrReq>(Arena*);
template<> ::ClientCos::SetBucketPriAttrRsp* Arena::CreateMaybeMessage<::ClientCos::SetBucketPriAttrRsp>(Arena*);
template<> ::ClientCos::SetBucketUinReq* Arena::CreateMaybeMessage<::ClientCos::SetBucketUinReq>(Arena*);
template<> ::ClientCos::SetBucketUinRsp* Arena::CreateMaybeMessage<::ClientCos::SetBucketUinRsp>(Arena*);
template<> ::ClientCos::SetBucketWebsiteInfoReq* Arena::CreateMaybeMessage<::ClientCos::SetBucketWebsiteInfoReq>(Arena*);
template<> ::ClientCos::SetBucketWebsiteInfoRsp* Arena::CreateMaybeMessage<::ClientCos::SetBucketWebsiteInfoRsp>(Arena*);
template<> ::ClientCos::SetCamAttrReq* Arena::CreateMaybeMessage<::ClientCos::SetCamAttrReq>(Arena*);
template<> ::ClientCos::SetCamAttrRsp* Arena::CreateMaybeMessage<::ClientCos::SetCamAttrRsp>(Arena*);
template<> ::ClientCos::SetMigrateReq* Arena::CreateMaybeMessage<::ClientCos::SetMigrateReq>(Arena*);
template<> ::ClientCos::SetMigrateRsp* Arena::CreateMaybeMessage<::ClientCos::SetMigrateRsp>(Arena*);
template<> ::ClientCos::SetObjAclReq* Arena::CreateMaybeMessage<::ClientCos::SetObjAclReq>(Arena*);
template<> ::ClientCos::SetObjAclRsp* Arena::CreateMaybeMessage<::ClientCos::SetObjAclRsp>(Arena*);
template<> ::ClientCos::SpObjAttrModifyReq* Arena::CreateMaybeMessage<::ClientCos::SpObjAttrModifyReq>(Arena*);
template<> ::ClientCos::SpObjAttrModifyRsp* Arena::CreateMaybeMessage<::ClientCos::SpObjAttrModifyRsp>(Arena*);
template<> ::ClientCos::SpObjAttrQueryReq* Arena::CreateMaybeMessage<::ClientCos::SpObjAttrQueryReq>(Arena*);
template<> ::ClientCos::SpObjAttrQueryRsp* Arena::CreateMaybeMessage<::ClientCos::SpObjAttrQueryRsp>(Arena*);
template<> ::ClientCos::SseInfo* Arena::CreateMaybeMessage<::ClientCos::SseInfo>(Arena*);
template<> ::ClientCos::StorageTypeAttr* Arena::CreateMaybeMessage<::ClientCos::StorageTypeAttr>(Arena*);
template<> ::ClientCos::Tag* Arena::CreateMaybeMessage<::ClientCos::Tag>(Arena*);
template<> ::ClientCos::TrsfArgs* Arena::CreateMaybeMessage<::ClientCos::TrsfArgs>(Arena*);
template<> ::ClientCos::UnfinObjAttrModifyReq* Arena::CreateMaybeMessage<::ClientCos::UnfinObjAttrModifyReq>(Arena*);
template<> ::ClientCos::UnfinObjAttrModifyRsp* Arena::CreateMaybeMessage<::ClientCos::UnfinObjAttrModifyRsp>(Arena*);
template<> ::ClientCos::UploadAttr* Arena::CreateMaybeMessage<::ClientCos::UploadAttr>(Arena*);
template<> ::ClientCos::UploadDelmarkerReq* Arena::CreateMaybeMessage<::ClientCos::UploadDelmarkerReq>(Arena*);
template<> ::ClientCos::UploadDelmarkerRsp* Arena::CreateMaybeMessage<::ClientCos::UploadDelmarkerRsp>(Arena*);
template<> ::ClientCos::WebsiteInfo* Arena::CreateMaybeMessage<::ClientCos::WebsiteInfo>(Arena*);
template<> ::ClientCos::delObj* Arena::CreateMaybeMessage<::ClientCos::delObj>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ClientCos {

enum AppMsg_Type : int {
  AppMsg_Type_CosReqMsg = 1,
  AppMsg_Type_CosRspMsg = 2
};
bool AppMsg_Type_IsValid(int value);
constexpr AppMsg_Type AppMsg_Type_Type_MIN = AppMsg_Type_CosReqMsg;
constexpr AppMsg_Type AppMsg_Type_Type_MAX = AppMsg_Type_CosRspMsg;
constexpr int AppMsg_Type_Type_ARRAYSIZE = AppMsg_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppMsg_Type_descriptor();
template<typename T>
inline const std::string& AppMsg_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppMsg_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppMsg_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AppMsg_Type_descriptor(), enum_t_value);
}
inline bool AppMsg_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppMsg_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AppMsg_Type>(
    AppMsg_Type_descriptor(), name, value);
}
enum CosReqMsg_SubType : int {
  CosReqMsg_SubType_Invalid = 0,
  CosReqMsg_SubType_BucketCreateReq = 10,
  CosReqMsg_SubType_BucketAttrModifyReq = 11,
  CosReqMsg_SubType_BucketAttrQueryReq = 12,
  CosReqMsg_SubType_DirCreateReq = 13,
  CosReqMsg_SubType_ObjAttrQueryReq = 14,
  CosReqMsg_SubType_ObjAttrModifyReq = 15,
  CosReqMsg_SubType_DeleteReq = 16,
  CosReqMsg_SubType_ListReq = 17,
  CosReqMsg_SubType_AppAttrQueryReq = 18,
  CosReqMsg_SubType_AppAttrModifyReq = 19,
  CosReqMsg_SubType_PreviewFileAttrQueryReq = 20,
  CosReqMsg_SubType_ObjModTimeStampReq = 21,
  CosReqMsg_SubType_ListMutiobjReq = 22,
  CosReqMsg_SubType_UnfinObjAttrModifyReq = 23,
  CosReqMsg_SubType_FileBatchDelReq = 24,
  CosReqMsg_SubType_ListObjVerReq = 25,
  CosReqMsg_SubType_DelExpireFileReq = 26,
  CosReqMsg_SubType_FileDelReq = 27,
  CosReqMsg_SubType_SpObjAttrModifyReq = 28,
  CosReqMsg_SubType_UploadDelmarkerReq = 29,
  CosReqMsg_SubType_ExpireFileDelVerReq = 30,
  CosReqMsg_SubType_ExpireFileDelNoVerReq = 31,
  CosReqMsg_SubType_SetBucketPriAttrReq = 32,
  CosReqMsg_SubType_FileDownToCASReq = 33,
  CosReqMsg_SubType_CasObjAttrModifyReq = 34,
  CosReqMsg_SubType_CasFileRecoverDelReq = 35,
  CosReqMsg_SubType_CasObjRestoreErrReq = 36,
  CosReqMsg_SubType_SpObjAttrQueryReq = 37,
  CosReqMsg_SubType_ObjModStorageTypeReq = 38,
  CosReqMsg_SubType_SetBucketWebsiteInfoReq = 39,
  CosReqMsg_SubType_SetCamAttrReq = 40,
  CosReqMsg_SubType_BucketCamAuthQueryReq = 41,
  CosReqMsg_SubType_AppCamAuthQueryReq = 42,
  CosReqMsg_SubType_FileUnfinishAttrQueryReq = 43,
  CosReqMsg_SubType_ReduceLifecycleReq = 44,
  CosReqMsg_SubType_RetrieveLifecycleReq = 45,
  CosReqMsg_SubType_SetObjAclReq = 46,
  CosReqMsg_SubType_GetObjAclReq = 47,
  CosReqMsg_SubType_SetBucketUinReq = 48,
  CosReqMsg_SubType_GetBucketUinReq = 49,
  CosReqMsg_SubType_ListDirectReq = 50,
  CosReqMsg_SubType_CheckObjAclReq = 51,
  CosReqMsg_SubType_CasObjRestoreFinReq = 52,
  CosReqMsg_SubType_SetBucketLockReq = 53,
  CosReqMsg_SubType_GetBucketLockReq = 54,
  CosReqMsg_SubType_SetBucketInventoryReq = 55,
  CosReqMsg_SubType_GetBucketInventoryReq = 56,
  CosReqMsg_SubType_COSTransToCASReq = 57,
  CosReqMsg_SubType_SetMigrateReq = 90,
  CosReqMsg_SubType_DelNoHashFileReq = 91,
  CosReqMsg_SubType_MigrateFinFileReq = 92,
  CosReqMsg_SubType_MigrateUnFinFileReq = 93
};
bool CosReqMsg_SubType_IsValid(int value);
constexpr CosReqMsg_SubType CosReqMsg_SubType_SubType_MIN = CosReqMsg_SubType_Invalid;
constexpr CosReqMsg_SubType CosReqMsg_SubType_SubType_MAX = CosReqMsg_SubType_MigrateUnFinFileReq;
constexpr int CosReqMsg_SubType_SubType_ARRAYSIZE = CosReqMsg_SubType_SubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CosReqMsg_SubType_descriptor();
template<typename T>
inline const std::string& CosReqMsg_SubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CosReqMsg_SubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CosReqMsg_SubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CosReqMsg_SubType_descriptor(), enum_t_value);
}
inline bool CosReqMsg_SubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CosReqMsg_SubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CosReqMsg_SubType>(
    CosReqMsg_SubType_descriptor(), name, value);
}
enum CosRspMsg_SubType : int {
  CosRspMsg_SubType_Invalid = 0,
  CosRspMsg_SubType_BucketCreateRsp = 10,
  CosRspMsg_SubType_BucketAttrModifyRsp = 11,
  CosRspMsg_SubType_BucketAttrQueryRsp = 12,
  CosRspMsg_SubType_DirCreateRsp = 13,
  CosRspMsg_SubType_ObjAttrQueryRsp = 14,
  CosRspMsg_SubType_ObjAttrModifyRsp = 15,
  CosRspMsg_SubType_DeleteRsp = 16,
  CosRspMsg_SubType_ListRsp = 17,
  CosRspMsg_SubType_AppAttrQueryRsp = 18,
  CosRspMsg_SubType_AppAttrModifyRsp = 19,
  CosRspMsg_SubType_PreviewFileAttrQueryRsp = 20,
  CosRspMsg_SubType_ObjModTimeStampRsp = 21,
  CosRspMsg_SubType_ListMutiobjRsp = 22,
  CosRspMsg_SubType_UnfinObjAttrModifyRsp = 23,
  CosRspMsg_SubType_FileBatchDelRsp = 24,
  CosRspMsg_SubType_ListObjVerRsp = 25,
  CosRspMsg_SubType_DelExpireFileRsp = 26,
  CosRspMsg_SubType_FileDelRsp = 27,
  CosRspMsg_SubType_ObjAttrModifyRsp_sp = 28,
  CosRspMsg_SubType_UploadDelmarkerRsp = 29,
  CosRspMsg_SubType_ExpireFileDelVerRsp = 30,
  CosRspMsg_SubType_ExpireFileDelNoverRsp = 31,
  CosRspMsg_SubType_SetBucketPriAttrRsp = 32,
  CosRspMsg_SubType_FileDownToCASRsp = 33,
  CosRspMsg_SubType_CasObjAttrModifyRsp = 34,
  CosRspMsg_SubType_CasFileRecoverDelRsp = 35,
  CosRspMsg_SubType_CasObjRestoreErrRsp = 36,
  CosRspMsg_SubType_SpObjAttrQueryRsp = 37,
  CosRspMsg_SubType_ObjModStorageTypeRsp = 38,
  CosRspMsg_SubType_SetBucketWebsiteInfoRsp = 39,
  CosRspMsg_SubType_SetCamAttrRsp = 40,
  CosRspMsg_SubType_BucketCamAuthQueryRsp = 41,
  CosRspMsg_SubType_AppCamAuthQueryRsp = 42,
  CosRspMsg_SubType_FileUnfinishAttrQueryRsp = 43,
  CosRspMsg_SubType_ReduceLifecycleRsp = 44,
  CosRspMsg_SubType_RetrieveLifecycleRsp = 45,
  CosRspMsg_SubType_SetObjAclRsp = 46,
  CosRspMsg_SubType_GetObjAclRsp = 47,
  CosRspMsg_SubType_SetBucketUinRsp = 48,
  CosRspMsg_SubType_GetBucketUinRsp = 49,
  CosRspMsg_SubType_ListDirectRsp = 50,
  CosRspMsg_SubType_CheckObjAclRsp = 51,
  CosRspMsg_SubType_CasObjRestoreFinRsp = 52,
  CosRspMsg_SubType_SetBucketLockRsp = 53,
  CosRspMsg_SubType_GetBucketLockRsp = 54,
  CosRspMsg_SubType_SetBucketInventoryRsp = 55,
  CosRspMsg_SubType_GetBucketInventoryRsp = 56,
  CosRspMsg_SubType_COSTransToCASRsp = 57,
  CosRspMsg_SubType_SetMigrateRsp = 90,
  CosRspMsg_SubType_DelNoHashFileRsp = 91,
  CosRspMsg_SubType_MigrateFinFileRsp = 92,
  CosRspMsg_SubType_MigrateUnFinFileRsp = 93
};
bool CosRspMsg_SubType_IsValid(int value);
constexpr CosRspMsg_SubType CosRspMsg_SubType_SubType_MIN = CosRspMsg_SubType_Invalid;
constexpr CosRspMsg_SubType CosRspMsg_SubType_SubType_MAX = CosRspMsg_SubType_MigrateUnFinFileRsp;
constexpr int CosRspMsg_SubType_SubType_ARRAYSIZE = CosRspMsg_SubType_SubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CosRspMsg_SubType_descriptor();
template<typename T>
inline const std::string& CosRspMsg_SubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CosRspMsg_SubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CosRspMsg_SubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CosRspMsg_SubType_descriptor(), enum_t_value);
}
inline bool CosRspMsg_SubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CosRspMsg_SubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CosRspMsg_SubType>(
    CosRspMsg_SubType_descriptor(), name, value);
}
enum ListDirectReq_ListType : int {
  ListDirectReq_ListType_LIST = 0,
  ListDirectReq_ListType_LISTVER = 1,
  ListDirectReq_ListType_LISTUF = 2
};
bool ListDirectReq_ListType_IsValid(int value);
constexpr ListDirectReq_ListType ListDirectReq_ListType_ListType_MIN = ListDirectReq_ListType_LIST;
constexpr ListDirectReq_ListType ListDirectReq_ListType_ListType_MAX = ListDirectReq_ListType_LISTUF;
constexpr int ListDirectReq_ListType_ListType_ARRAYSIZE = ListDirectReq_ListType_ListType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListDirectReq_ListType_descriptor();
template<typename T>
inline const std::string& ListDirectReq_ListType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListDirectReq_ListType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListDirectReq_ListType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListDirectReq_ListType_descriptor(), enum_t_value);
}
inline bool ListDirectReq_ListType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ListDirectReq_ListType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListDirectReq_ListType>(
    ListDirectReq_ListType_descriptor(), name, value);
}
enum MigrateStatus : int {
  Migrate_Unknown = 0,
  Migrate_started = 1,
  Migrate_fin = 2
};
bool MigrateStatus_IsValid(int value);
constexpr MigrateStatus MigrateStatus_MIN = Migrate_Unknown;
constexpr MigrateStatus MigrateStatus_MAX = Migrate_fin;
constexpr int MigrateStatus_ARRAYSIZE = MigrateStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MigrateStatus_descriptor();
template<typename T>
inline const std::string& MigrateStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MigrateStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MigrateStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MigrateStatus_descriptor(), enum_t_value);
}
inline bool MigrateStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MigrateStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MigrateStatus>(
    MigrateStatus_descriptor(), name, value);
}
enum CASRestoreTier : int {
  Tier_Unknown = 0,
  Tier_Bulk = 1,
  Tier_Expedited = 2,
  Tier_Standard = 3
};
bool CASRestoreTier_IsValid(int value);
constexpr CASRestoreTier CASRestoreTier_MIN = Tier_Unknown;
constexpr CASRestoreTier CASRestoreTier_MAX = Tier_Standard;
constexpr int CASRestoreTier_ARRAYSIZE = CASRestoreTier_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CASRestoreTier_descriptor();
template<typename T>
inline const std::string& CASRestoreTier_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CASRestoreTier>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CASRestoreTier_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CASRestoreTier_descriptor(), enum_t_value);
}
inline bool CASRestoreTier_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CASRestoreTier* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CASRestoreTier>(
    CASRestoreTier_descriptor(), name, value);
}
enum Action : int {
  INVALID = 0,
  Expiration = 1,
  Transition = 2,
  AbortIncompleteMultipartUpload = 3,
  NoncurrentVersionExpiration = 4,
  NoncurrentVersionTransition = 5
};
bool Action_IsValid(int value);
constexpr Action Action_MIN = INVALID;
constexpr Action Action_MAX = NoncurrentVersionTransition;
constexpr int Action_ARRAYSIZE = Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor();
template<typename T>
inline const std::string& Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_descriptor(), enum_t_value);
}
inline bool Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
enum Authority : int {
  Invalid = 0,
  WRPrivate = 1,
  WPrivateRPublic = 2
};
bool Authority_IsValid(int value);
constexpr Authority Authority_MIN = Invalid;
constexpr Authority Authority_MAX = WPrivateRPublic;
constexpr int Authority_ARRAYSIZE = Authority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Authority_descriptor();
template<typename T>
inline const std::string& Authority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Authority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Authority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Authority_descriptor(), enum_t_value);
}
inline bool Authority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Authority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Authority>(
    Authority_descriptor(), name, value);
}
enum ReservedAttrKey : int {
  invalidkey = 0,
  outsidesourcehost = 1,
  preview = 2,
  browerexec = 3,
  custom404flag = 4,
  custom404page = 5,
  custom403flag = 6,
  custom403page = 7,
  indexpageflag = 8,
  file_md5 = 9,
  cors_flag = 10,
  outsidesource_flag = 11,
  outsidesourcehost_bak = 12
};
bool ReservedAttrKey_IsValid(int value);
constexpr ReservedAttrKey ReservedAttrKey_MIN = invalidkey;
constexpr ReservedAttrKey ReservedAttrKey_MAX = outsidesourcehost_bak;
constexpr int ReservedAttrKey_ARRAYSIZE = ReservedAttrKey_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReservedAttrKey_descriptor();
template<typename T>
inline const std::string& ReservedAttrKey_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReservedAttrKey>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReservedAttrKey_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReservedAttrKey_descriptor(), enum_t_value);
}
inline bool ReservedAttrKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReservedAttrKey* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReservedAttrKey>(
    ReservedAttrKey_descriptor(), name, value);
}
enum NSlot : int {
  TYPE_INVALID = 0,
  TYPE_DEFAULT = 1,
  TYPE_32 = 2,
  TYPE_256 = 3
};
bool NSlot_IsValid(int value);
constexpr NSlot NSlot_MIN = TYPE_INVALID;
constexpr NSlot NSlot_MAX = TYPE_256;
constexpr int NSlot_ARRAYSIZE = NSlot_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NSlot_descriptor();
template<typename T>
inline const std::string& NSlot_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NSlot>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NSlot_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NSlot_descriptor(), enum_t_value);
}
inline bool NSlot_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NSlot* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NSlot>(
    NSlot_descriptor(), name, value);
}
enum SseType : int {
  SSE_DEFAULT = 0,
  SSE_S3 = 1,
  SSE_KMS = 2,
  SSE_C = 3
};
bool SseType_IsValid(int value);
constexpr SseType SseType_MIN = SSE_DEFAULT;
constexpr SseType SseType_MAX = SSE_C;
constexpr int SseType_ARRAYSIZE = SseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SseType_descriptor();
template<typename T>
inline const std::string& SseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SseType_descriptor(), enum_t_value);
}
inline bool SseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SseType>(
    SseType_descriptor(), name, value);
}
enum CamAuth : int {
  NoUse = 0,
  IsCamAuth = 1,
  NoCamAuth = 2
};
bool CamAuth_IsValid(int value);
constexpr CamAuth CamAuth_MIN = NoUse;
constexpr CamAuth CamAuth_MAX = NoCamAuth;
constexpr int CamAuth_ARRAYSIZE = CamAuth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CamAuth_descriptor();
template<typename T>
inline const std::string& CamAuth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CamAuth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CamAuth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CamAuth_descriptor(), enum_t_value);
}
inline bool CamAuth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CamAuth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CamAuth>(
    CamAuth_descriptor(), name, value);
}
// ===================================================================

class CosAppMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CosAppMsg) */ {
 public:
  inline CosAppMsg() : CosAppMsg(nullptr) {}
  virtual ~CosAppMsg();

  CosAppMsg(const CosAppMsg& from);
  CosAppMsg(CosAppMsg&& from) noexcept
    : CosAppMsg() {
    *this = ::std::move(from);
  }

  inline CosAppMsg& operator=(const CosAppMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosAppMsg& operator=(CosAppMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosAppMsg& default_instance();

  static inline const CosAppMsg* internal_default_instance() {
    return reinterpret_cast<const CosAppMsg*>(
               &_CosAppMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CosAppMsg& a, CosAppMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CosAppMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosAppMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosAppMsg* New() const final {
    return CreateMaybeMessage<CosAppMsg>(nullptr);
  }

  CosAppMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosAppMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosAppMsg& from);
  void MergeFrom(const CosAppMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosAppMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CosAppMsg";
  }
  protected:
  explicit CosAppMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kSeqFieldNumber = 1,
  };
  // required .ClientCos.AppMsg body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::ClientCos::AppMsg& body() const;
  ::ClientCos::AppMsg* release_body();
  ::ClientCos::AppMsg* mutable_body();
  void set_allocated_body(::ClientCos::AppMsg* body);
  private:
  const ::ClientCos::AppMsg& _internal_body() const;
  ::ClientCos::AppMsg* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::ClientCos::AppMsg* body);
  ::ClientCos::AppMsg* unsafe_arena_release_body();

  // required uint32 seq = 1;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CosAppMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ClientCos::AppMsg* body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppMsg) */ {
 public:
  inline AppMsg() : AppMsg(nullptr) {}
  virtual ~AppMsg();

  AppMsg(const AppMsg& from);
  AppMsg(AppMsg&& from) noexcept
    : AppMsg() {
    *this = ::std::move(from);
  }

  inline AppMsg& operator=(const AppMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppMsg& operator=(AppMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppMsg& default_instance();

  static inline const AppMsg* internal_default_instance() {
    return reinterpret_cast<const AppMsg*>(
               &_AppMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppMsg& a, AppMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AppMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppMsg* New() const final {
    return CreateMaybeMessage<AppMsg>(nullptr);
  }

  AppMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppMsg& from);
  void MergeFrom(const AppMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppMsg";
  }
  protected:
  explicit AppMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AppMsg_Type Type;
  static constexpr Type CosReqMsg =
    AppMsg_Type_CosReqMsg;
  static constexpr Type CosRspMsg =
    AppMsg_Type_CosRspMsg;
  static inline bool Type_IsValid(int value) {
    return AppMsg_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    AppMsg_Type_Type_MIN;
  static constexpr Type Type_MAX =
    AppMsg_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    AppMsg_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return AppMsg_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return AppMsg_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return AppMsg_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // required .ClientCos.AppMsg.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ClientCos::AppMsg_Type type() const;
  void set_type(::ClientCos::AppMsg_Type value);
  private:
  ::ClientCos::AppMsg_Type _internal_type() const;
  void _internal_set_type(::ClientCos::AppMsg_Type value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(AppMsg)
  // @@protoc_insertion_point(class_scope:ClientCos.AppMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CosReqMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CosReqMsg) */ {
 public:
  inline CosReqMsg() : CosReqMsg(nullptr) {}
  virtual ~CosReqMsg();

  CosReqMsg(const CosReqMsg& from);
  CosReqMsg(CosReqMsg&& from) noexcept
    : CosReqMsg() {
    *this = ::std::move(from);
  }

  inline CosReqMsg& operator=(const CosReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosReqMsg& operator=(CosReqMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosReqMsg& default_instance();

  static inline const CosReqMsg* internal_default_instance() {
    return reinterpret_cast<const CosReqMsg*>(
               &_CosReqMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CosReqMsg& a, CosReqMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CosReqMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosReqMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosReqMsg* New() const final {
    return CreateMaybeMessage<CosReqMsg>(nullptr);
  }

  CosReqMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosReqMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosReqMsg& from);
  void MergeFrom(const CosReqMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosReqMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CosReqMsg";
  }
  protected:
  explicit CosReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CosReqMsg_SubType SubType;
  static constexpr SubType Invalid =
    CosReqMsg_SubType_Invalid;
  static constexpr SubType BucketCreateReq =
    CosReqMsg_SubType_BucketCreateReq;
  static constexpr SubType BucketAttrModifyReq =
    CosReqMsg_SubType_BucketAttrModifyReq;
  static constexpr SubType BucketAttrQueryReq =
    CosReqMsg_SubType_BucketAttrQueryReq;
  static constexpr SubType DirCreateReq =
    CosReqMsg_SubType_DirCreateReq;
  static constexpr SubType ObjAttrQueryReq =
    CosReqMsg_SubType_ObjAttrQueryReq;
  static constexpr SubType ObjAttrModifyReq =
    CosReqMsg_SubType_ObjAttrModifyReq;
  static constexpr SubType DeleteReq =
    CosReqMsg_SubType_DeleteReq;
  static constexpr SubType ListReq =
    CosReqMsg_SubType_ListReq;
  static constexpr SubType AppAttrQueryReq =
    CosReqMsg_SubType_AppAttrQueryReq;
  static constexpr SubType AppAttrModifyReq =
    CosReqMsg_SubType_AppAttrModifyReq;
  static constexpr SubType PreviewFileAttrQueryReq =
    CosReqMsg_SubType_PreviewFileAttrQueryReq;
  static constexpr SubType ObjModTimeStampReq =
    CosReqMsg_SubType_ObjModTimeStampReq;
  static constexpr SubType ListMutiobjReq =
    CosReqMsg_SubType_ListMutiobjReq;
  static constexpr SubType UnfinObjAttrModifyReq =
    CosReqMsg_SubType_UnfinObjAttrModifyReq;
  static constexpr SubType FileBatchDelReq =
    CosReqMsg_SubType_FileBatchDelReq;
  static constexpr SubType ListObjVerReq =
    CosReqMsg_SubType_ListObjVerReq;
  static constexpr SubType DelExpireFileReq =
    CosReqMsg_SubType_DelExpireFileReq;
  static constexpr SubType FileDelReq =
    CosReqMsg_SubType_FileDelReq;
  static constexpr SubType SpObjAttrModifyReq =
    CosReqMsg_SubType_SpObjAttrModifyReq;
  static constexpr SubType UploadDelmarkerReq =
    CosReqMsg_SubType_UploadDelmarkerReq;
  static constexpr SubType ExpireFileDelVerReq =
    CosReqMsg_SubType_ExpireFileDelVerReq;
  static constexpr SubType ExpireFileDelNoVerReq =
    CosReqMsg_SubType_ExpireFileDelNoVerReq;
  static constexpr SubType SetBucketPriAttrReq =
    CosReqMsg_SubType_SetBucketPriAttrReq;
  static constexpr SubType FileDownToCASReq =
    CosReqMsg_SubType_FileDownToCASReq;
  static constexpr SubType CasObjAttrModifyReq =
    CosReqMsg_SubType_CasObjAttrModifyReq;
  static constexpr SubType CasFileRecoverDelReq =
    CosReqMsg_SubType_CasFileRecoverDelReq;
  static constexpr SubType CasObjRestoreErrReq =
    CosReqMsg_SubType_CasObjRestoreErrReq;
  static constexpr SubType SpObjAttrQueryReq =
    CosReqMsg_SubType_SpObjAttrQueryReq;
  static constexpr SubType ObjModStorageTypeReq =
    CosReqMsg_SubType_ObjModStorageTypeReq;
  static constexpr SubType SetBucketWebsiteInfoReq =
    CosReqMsg_SubType_SetBucketWebsiteInfoReq;
  static constexpr SubType SetCamAttrReq =
    CosReqMsg_SubType_SetCamAttrReq;
  static constexpr SubType BucketCamAuthQueryReq =
    CosReqMsg_SubType_BucketCamAuthQueryReq;
  static constexpr SubType AppCamAuthQueryReq =
    CosReqMsg_SubType_AppCamAuthQueryReq;
  static constexpr SubType FileUnfinishAttrQueryReq =
    CosReqMsg_SubType_FileUnfinishAttrQueryReq;
  static constexpr SubType ReduceLifecycleReq =
    CosReqMsg_SubType_ReduceLifecycleReq;
  static constexpr SubType RetrieveLifecycleReq =
    CosReqMsg_SubType_RetrieveLifecycleReq;
  static constexpr SubType SetObjAclReq =
    CosReqMsg_SubType_SetObjAclReq;
  static constexpr SubType GetObjAclReq =
    CosReqMsg_SubType_GetObjAclReq;
  static constexpr SubType SetBucketUinReq =
    CosReqMsg_SubType_SetBucketUinReq;
  static constexpr SubType GetBucketUinReq =
    CosReqMsg_SubType_GetBucketUinReq;
  static constexpr SubType ListDirectReq =
    CosReqMsg_SubType_ListDirectReq;
  static constexpr SubType CheckObjAclReq =
    CosReqMsg_SubType_CheckObjAclReq;
  static constexpr SubType CasObjRestoreFinReq =
    CosReqMsg_SubType_CasObjRestoreFinReq;
  static constexpr SubType SetBucketLockReq =
    CosReqMsg_SubType_SetBucketLockReq;
  static constexpr SubType GetBucketLockReq =
    CosReqMsg_SubType_GetBucketLockReq;
  static constexpr SubType SetBucketInventoryReq =
    CosReqMsg_SubType_SetBucketInventoryReq;
  static constexpr SubType GetBucketInventoryReq =
    CosReqMsg_SubType_GetBucketInventoryReq;
  static constexpr SubType COSTransToCASReq =
    CosReqMsg_SubType_COSTransToCASReq;
  static constexpr SubType SetMigrateReq =
    CosReqMsg_SubType_SetMigrateReq;
  static constexpr SubType DelNoHashFileReq =
    CosReqMsg_SubType_DelNoHashFileReq;
  static constexpr SubType MigrateFinFileReq =
    CosReqMsg_SubType_MigrateFinFileReq;
  static constexpr SubType MigrateUnFinFileReq =
    CosReqMsg_SubType_MigrateUnFinFileReq;
  static inline bool SubType_IsValid(int value) {
    return CosReqMsg_SubType_IsValid(value);
  }
  static constexpr SubType SubType_MIN =
    CosReqMsg_SubType_SubType_MIN;
  static constexpr SubType SubType_MAX =
    CosReqMsg_SubType_SubType_MAX;
  static constexpr int SubType_ARRAYSIZE =
    CosReqMsg_SubType_SubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubType_descriptor() {
    return CosReqMsg_SubType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubType_Name.");
    return CosReqMsg_SubType_Name(enum_t_value);
  }
  static inline bool SubType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubType* value) {
    return CosReqMsg_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kCgiAttrFieldNumber = 2,
    kCgiParamsFieldNumber = 3,
    kBucketCreateReqBodyFieldNumber = 21,
    kBucketAttrModifyReqBodyFieldNumber = 22,
    kBucketAttrQueryReqBodyFieldNumber = 23,
    kDirCreateReqBodyFieldNumber = 24,
    kObjAttrQueryReqBodyFieldNumber = 25,
    kObjAttrModifyReqBodyFieldNumber = 26,
    kDeleteReqBodyFieldNumber = 27,
    kListReqBodyFieldNumber = 28,
    kAppAttrQueryReqBodyFieldNumber = 29,
    kAppAttrModifyReqBodyFieldNumber = 30,
    kPreviewFileAttrQueryReqBodyFieldNumber = 31,
    kObjModTimeStampReqBodyFieldNumber = 32,
    kListMutiobjReqBodyFieldNumber = 33,
    kUnfinObjAttrModifyReqBodyFieldNumber = 34,
    kFileBatchDelReqBodyFieldNumber = 35,
    kListObjVerReqBodyFieldNumber = 36,
    kDelExpireFileReqBodyFieldNumber = 37,
    kFileDelReqBodyFieldNumber = 38,
    kSpObjAttrModifyReqBodyFieldNumber = 39,
    kUploadDelmarkerReqBodyFieldNumber = 40,
    kExpireFileDelVerReqBodyFieldNumber = 41,
    kExpireFileDelNoverReqBodyFieldNumber = 42,
    kSetBucketPriAttrReqBodyFieldNumber = 43,
    kFileDownToCASReqBodyFieldNumber = 44,
    kCasObjAttrModifyReqBodyFieldNumber = 45,
    kCasFileRecoverDelReqBodyFieldNumber = 46,
    kCasObjRestoreErrReqBodyFieldNumber = 47,
    kSpObjAttrQueryReqBodyFieldNumber = 48,
    kObjModStorageTypeReqBodyFieldNumber = 49,
    kSetBucketWebsiteInfoReqBodyFieldNumber = 50,
    kSetCamAttrReqBodyFieldNumber = 51,
    kBucketCamAuthQueryReqBodyFieldNumber = 52,
    kAppCamAuthQueryReqBodyFieldNumber = 53,
    kFileUnfinishAttrQueryReqBodyFieldNumber = 54,
    kReduceLifecycleReqBodyFieldNumber = 55,
    kRetrieveLifecycleReqBodyFieldNumber = 56,
    kSetObjAclReqBodyFieldNumber = 57,
    kGetObjAclReqBodyFieldNumber = 58,
    kSetBucketUinReqBodyFieldNumber = 59,
    kGetBucketUinReqBodyFieldNumber = 60,
    kListDirectReqBodyFieldNumber = 61,
    kCheckObjAclReqBodyFieldNumber = 62,
    kCasObjRestoreFinReqBodyFieldNumber = 63,
    kSetBucketLockReqBodyFieldNumber = 64,
    kGetBucketLockReqBodyFieldNumber = 65,
    kSetBucketInventoryReqBodyFieldNumber = 66,
    kGetBucketInventoryReqBodyFieldNumber = 67,
    kCOSTransToCASReqBodyFieldNumber = 68,
    kSetMigrateReqBodyFieldNumber = 90,
    kDelNoHashFileReqBodyFieldNumber = 91,
    kMigrateFinFileReqBodyFieldNumber = 92,
    kMigrateUnFinFileReqBodyFieldNumber = 93,
    kSubTypeFieldNumber = 10,
  };
  // optional bytes request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const void* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional bytes cgi_attr = 2;
  bool has_cgi_attr() const;
  private:
  bool _internal_has_cgi_attr() const;
  public:
  void clear_cgi_attr();
  const std::string& cgi_attr() const;
  void set_cgi_attr(const std::string& value);
  void set_cgi_attr(std::string&& value);
  void set_cgi_attr(const char* value);
  void set_cgi_attr(const void* value, size_t size);
  std::string* mutable_cgi_attr();
  std::string* release_cgi_attr();
  void set_allocated_cgi_attr(std::string* cgi_attr);
  private:
  const std::string& _internal_cgi_attr() const;
  void _internal_set_cgi_attr(const std::string& value);
  std::string* _internal_mutable_cgi_attr();
  public:

  // optional bytes cgi_params = 3;
  bool has_cgi_params() const;
  private:
  bool _internal_has_cgi_params() const;
  public:
  void clear_cgi_params();
  const std::string& cgi_params() const;
  void set_cgi_params(const std::string& value);
  void set_cgi_params(std::string&& value);
  void set_cgi_params(const char* value);
  void set_cgi_params(const void* value, size_t size);
  std::string* mutable_cgi_params();
  std::string* release_cgi_params();
  void set_allocated_cgi_params(std::string* cgi_params);
  private:
  const std::string& _internal_cgi_params() const;
  void _internal_set_cgi_params(const std::string& value);
  std::string* _internal_mutable_cgi_params();
  public:

  // optional .ClientCos.BucketCreateReq BucketCreateReq_body = 21;
  bool has_bucketcreatereq_body() const;
  private:
  bool _internal_has_bucketcreatereq_body() const;
  public:
  void clear_bucketcreatereq_body();
  const ::ClientCos::BucketCreateReq& bucketcreatereq_body() const;
  ::ClientCos::BucketCreateReq* release_bucketcreatereq_body();
  ::ClientCos::BucketCreateReq* mutable_bucketcreatereq_body();
  void set_allocated_bucketcreatereq_body(::ClientCos::BucketCreateReq* bucketcreatereq_body);
  private:
  const ::ClientCos::BucketCreateReq& _internal_bucketcreatereq_body() const;
  ::ClientCos::BucketCreateReq* _internal_mutable_bucketcreatereq_body();
  public:
  void unsafe_arena_set_allocated_bucketcreatereq_body(
      ::ClientCos::BucketCreateReq* bucketcreatereq_body);
  ::ClientCos::BucketCreateReq* unsafe_arena_release_bucketcreatereq_body();

  // optional .ClientCos.BucketAttrModifyReq BucketAttrModifyReq_body = 22;
  bool has_bucketattrmodifyreq_body() const;
  private:
  bool _internal_has_bucketattrmodifyreq_body() const;
  public:
  void clear_bucketattrmodifyreq_body();
  const ::ClientCos::BucketAttrModifyReq& bucketattrmodifyreq_body() const;
  ::ClientCos::BucketAttrModifyReq* release_bucketattrmodifyreq_body();
  ::ClientCos::BucketAttrModifyReq* mutable_bucketattrmodifyreq_body();
  void set_allocated_bucketattrmodifyreq_body(::ClientCos::BucketAttrModifyReq* bucketattrmodifyreq_body);
  private:
  const ::ClientCos::BucketAttrModifyReq& _internal_bucketattrmodifyreq_body() const;
  ::ClientCos::BucketAttrModifyReq* _internal_mutable_bucketattrmodifyreq_body();
  public:
  void unsafe_arena_set_allocated_bucketattrmodifyreq_body(
      ::ClientCos::BucketAttrModifyReq* bucketattrmodifyreq_body);
  ::ClientCos::BucketAttrModifyReq* unsafe_arena_release_bucketattrmodifyreq_body();

  // optional .ClientCos.BucketAttrQueryReq BucketAttrQueryReq_body = 23;
  bool has_bucketattrqueryreq_body() const;
  private:
  bool _internal_has_bucketattrqueryreq_body() const;
  public:
  void clear_bucketattrqueryreq_body();
  const ::ClientCos::BucketAttrQueryReq& bucketattrqueryreq_body() const;
  ::ClientCos::BucketAttrQueryReq* release_bucketattrqueryreq_body();
  ::ClientCos::BucketAttrQueryReq* mutable_bucketattrqueryreq_body();
  void set_allocated_bucketattrqueryreq_body(::ClientCos::BucketAttrQueryReq* bucketattrqueryreq_body);
  private:
  const ::ClientCos::BucketAttrQueryReq& _internal_bucketattrqueryreq_body() const;
  ::ClientCos::BucketAttrQueryReq* _internal_mutable_bucketattrqueryreq_body();
  public:
  void unsafe_arena_set_allocated_bucketattrqueryreq_body(
      ::ClientCos::BucketAttrQueryReq* bucketattrqueryreq_body);
  ::ClientCos::BucketAttrQueryReq* unsafe_arena_release_bucketattrqueryreq_body();

  // optional .ClientCos.DirCreateReq DirCreateReq_body = 24;
  bool has_dircreatereq_body() const;
  private:
  bool _internal_has_dircreatereq_body() const;
  public:
  void clear_dircreatereq_body();
  const ::ClientCos::DirCreateReq& dircreatereq_body() const;
  ::ClientCos::DirCreateReq* release_dircreatereq_body();
  ::ClientCos::DirCreateReq* mutable_dircreatereq_body();
  void set_allocated_dircreatereq_body(::ClientCos::DirCreateReq* dircreatereq_body);
  private:
  const ::ClientCos::DirCreateReq& _internal_dircreatereq_body() const;
  ::ClientCos::DirCreateReq* _internal_mutable_dircreatereq_body();
  public:
  void unsafe_arena_set_allocated_dircreatereq_body(
      ::ClientCos::DirCreateReq* dircreatereq_body);
  ::ClientCos::DirCreateReq* unsafe_arena_release_dircreatereq_body();

  // optional .ClientCos.ObjAttrQueryReq ObjAttrQueryReq_body = 25;
  bool has_objattrqueryreq_body() const;
  private:
  bool _internal_has_objattrqueryreq_body() const;
  public:
  void clear_objattrqueryreq_body();
  const ::ClientCos::ObjAttrQueryReq& objattrqueryreq_body() const;
  ::ClientCos::ObjAttrQueryReq* release_objattrqueryreq_body();
  ::ClientCos::ObjAttrQueryReq* mutable_objattrqueryreq_body();
  void set_allocated_objattrqueryreq_body(::ClientCos::ObjAttrQueryReq* objattrqueryreq_body);
  private:
  const ::ClientCos::ObjAttrQueryReq& _internal_objattrqueryreq_body() const;
  ::ClientCos::ObjAttrQueryReq* _internal_mutable_objattrqueryreq_body();
  public:
  void unsafe_arena_set_allocated_objattrqueryreq_body(
      ::ClientCos::ObjAttrQueryReq* objattrqueryreq_body);
  ::ClientCos::ObjAttrQueryReq* unsafe_arena_release_objattrqueryreq_body();

  // optional .ClientCos.ObjAttrModifyReq ObjAttrModifyReq_body = 26;
  bool has_objattrmodifyreq_body() const;
  private:
  bool _internal_has_objattrmodifyreq_body() const;
  public:
  void clear_objattrmodifyreq_body();
  const ::ClientCos::ObjAttrModifyReq& objattrmodifyreq_body() const;
  ::ClientCos::ObjAttrModifyReq* release_objattrmodifyreq_body();
  ::ClientCos::ObjAttrModifyReq* mutable_objattrmodifyreq_body();
  void set_allocated_objattrmodifyreq_body(::ClientCos::ObjAttrModifyReq* objattrmodifyreq_body);
  private:
  const ::ClientCos::ObjAttrModifyReq& _internal_objattrmodifyreq_body() const;
  ::ClientCos::ObjAttrModifyReq* _internal_mutable_objattrmodifyreq_body();
  public:
  void unsafe_arena_set_allocated_objattrmodifyreq_body(
      ::ClientCos::ObjAttrModifyReq* objattrmodifyreq_body);
  ::ClientCos::ObjAttrModifyReq* unsafe_arena_release_objattrmodifyreq_body();

  // optional .ClientCos.DeleteReq DeleteReq_body = 27;
  bool has_deletereq_body() const;
  private:
  bool _internal_has_deletereq_body() const;
  public:
  void clear_deletereq_body();
  const ::ClientCos::DeleteReq& deletereq_body() const;
  ::ClientCos::DeleteReq* release_deletereq_body();
  ::ClientCos::DeleteReq* mutable_deletereq_body();
  void set_allocated_deletereq_body(::ClientCos::DeleteReq* deletereq_body);
  private:
  const ::ClientCos::DeleteReq& _internal_deletereq_body() const;
  ::ClientCos::DeleteReq* _internal_mutable_deletereq_body();
  public:
  void unsafe_arena_set_allocated_deletereq_body(
      ::ClientCos::DeleteReq* deletereq_body);
  ::ClientCos::DeleteReq* unsafe_arena_release_deletereq_body();

  // optional .ClientCos.ListReq ListReq_body = 28;
  bool has_listreq_body() const;
  private:
  bool _internal_has_listreq_body() const;
  public:
  void clear_listreq_body();
  const ::ClientCos::ListReq& listreq_body() const;
  ::ClientCos::ListReq* release_listreq_body();
  ::ClientCos::ListReq* mutable_listreq_body();
  void set_allocated_listreq_body(::ClientCos::ListReq* listreq_body);
  private:
  const ::ClientCos::ListReq& _internal_listreq_body() const;
  ::ClientCos::ListReq* _internal_mutable_listreq_body();
  public:
  void unsafe_arena_set_allocated_listreq_body(
      ::ClientCos::ListReq* listreq_body);
  ::ClientCos::ListReq* unsafe_arena_release_listreq_body();

  // optional .ClientCos.AppAttrQueryReq AppAttrQueryReq_body = 29;
  bool has_appattrqueryreq_body() const;
  private:
  bool _internal_has_appattrqueryreq_body() const;
  public:
  void clear_appattrqueryreq_body();
  const ::ClientCos::AppAttrQueryReq& appattrqueryreq_body() const;
  ::ClientCos::AppAttrQueryReq* release_appattrqueryreq_body();
  ::ClientCos::AppAttrQueryReq* mutable_appattrqueryreq_body();
  void set_allocated_appattrqueryreq_body(::ClientCos::AppAttrQueryReq* appattrqueryreq_body);
  private:
  const ::ClientCos::AppAttrQueryReq& _internal_appattrqueryreq_body() const;
  ::ClientCos::AppAttrQueryReq* _internal_mutable_appattrqueryreq_body();
  public:
  void unsafe_arena_set_allocated_appattrqueryreq_body(
      ::ClientCos::AppAttrQueryReq* appattrqueryreq_body);
  ::ClientCos::AppAttrQueryReq* unsafe_arena_release_appattrqueryreq_body();

  // optional .ClientCos.AppAttrModifyReq AppAttrModifyReq_body = 30;
  bool has_appattrmodifyreq_body() const;
  private:
  bool _internal_has_appattrmodifyreq_body() const;
  public:
  void clear_appattrmodifyreq_body();
  const ::ClientCos::AppAttrModifyReq& appattrmodifyreq_body() const;
  ::ClientCos::AppAttrModifyReq* release_appattrmodifyreq_body();
  ::ClientCos::AppAttrModifyReq* mutable_appattrmodifyreq_body();
  void set_allocated_appattrmodifyreq_body(::ClientCos::AppAttrModifyReq* appattrmodifyreq_body);
  private:
  const ::ClientCos::AppAttrModifyReq& _internal_appattrmodifyreq_body() const;
  ::ClientCos::AppAttrModifyReq* _internal_mutable_appattrmodifyreq_body();
  public:
  void unsafe_arena_set_allocated_appattrmodifyreq_body(
      ::ClientCos::AppAttrModifyReq* appattrmodifyreq_body);
  ::ClientCos::AppAttrModifyReq* unsafe_arena_release_appattrmodifyreq_body();

  // optional .ClientCos.PreviewFileAttrQueryReq PreviewFileAttrQueryReq_body = 31;
  bool has_previewfileattrqueryreq_body() const;
  private:
  bool _internal_has_previewfileattrqueryreq_body() const;
  public:
  void clear_previewfileattrqueryreq_body();
  const ::ClientCos::PreviewFileAttrQueryReq& previewfileattrqueryreq_body() const;
  ::ClientCos::PreviewFileAttrQueryReq* release_previewfileattrqueryreq_body();
  ::ClientCos::PreviewFileAttrQueryReq* mutable_previewfileattrqueryreq_body();
  void set_allocated_previewfileattrqueryreq_body(::ClientCos::PreviewFileAttrQueryReq* previewfileattrqueryreq_body);
  private:
  const ::ClientCos::PreviewFileAttrQueryReq& _internal_previewfileattrqueryreq_body() const;
  ::ClientCos::PreviewFileAttrQueryReq* _internal_mutable_previewfileattrqueryreq_body();
  public:
  void unsafe_arena_set_allocated_previewfileattrqueryreq_body(
      ::ClientCos::PreviewFileAttrQueryReq* previewfileattrqueryreq_body);
  ::ClientCos::PreviewFileAttrQueryReq* unsafe_arena_release_previewfileattrqueryreq_body();

  // optional .ClientCos.ObjModTimeStampReq ObjModTimeStampReq_body = 32;
  bool has_objmodtimestampreq_body() const;
  private:
  bool _internal_has_objmodtimestampreq_body() const;
  public:
  void clear_objmodtimestampreq_body();
  const ::ClientCos::ObjModTimeStampReq& objmodtimestampreq_body() const;
  ::ClientCos::ObjModTimeStampReq* release_objmodtimestampreq_body();
  ::ClientCos::ObjModTimeStampReq* mutable_objmodtimestampreq_body();
  void set_allocated_objmodtimestampreq_body(::ClientCos::ObjModTimeStampReq* objmodtimestampreq_body);
  private:
  const ::ClientCos::ObjModTimeStampReq& _internal_objmodtimestampreq_body() const;
  ::ClientCos::ObjModTimeStampReq* _internal_mutable_objmodtimestampreq_body();
  public:
  void unsafe_arena_set_allocated_objmodtimestampreq_body(
      ::ClientCos::ObjModTimeStampReq* objmodtimestampreq_body);
  ::ClientCos::ObjModTimeStampReq* unsafe_arena_release_objmodtimestampreq_body();

  // optional .ClientCos.ListMutiobjReq ListMutiobjReq_body = 33;
  bool has_listmutiobjreq_body() const;
  private:
  bool _internal_has_listmutiobjreq_body() const;
  public:
  void clear_listmutiobjreq_body();
  const ::ClientCos::ListMutiobjReq& listmutiobjreq_body() const;
  ::ClientCos::ListMutiobjReq* release_listmutiobjreq_body();
  ::ClientCos::ListMutiobjReq* mutable_listmutiobjreq_body();
  void set_allocated_listmutiobjreq_body(::ClientCos::ListMutiobjReq* listmutiobjreq_body);
  private:
  const ::ClientCos::ListMutiobjReq& _internal_listmutiobjreq_body() const;
  ::ClientCos::ListMutiobjReq* _internal_mutable_listmutiobjreq_body();
  public:
  void unsafe_arena_set_allocated_listmutiobjreq_body(
      ::ClientCos::ListMutiobjReq* listmutiobjreq_body);
  ::ClientCos::ListMutiobjReq* unsafe_arena_release_listmutiobjreq_body();

  // optional .ClientCos.UnfinObjAttrModifyReq UnfinObjAttrModifyReq_body = 34;
  bool has_unfinobjattrmodifyreq_body() const;
  private:
  bool _internal_has_unfinobjattrmodifyreq_body() const;
  public:
  void clear_unfinobjattrmodifyreq_body();
  const ::ClientCos::UnfinObjAttrModifyReq& unfinobjattrmodifyreq_body() const;
  ::ClientCos::UnfinObjAttrModifyReq* release_unfinobjattrmodifyreq_body();
  ::ClientCos::UnfinObjAttrModifyReq* mutable_unfinobjattrmodifyreq_body();
  void set_allocated_unfinobjattrmodifyreq_body(::ClientCos::UnfinObjAttrModifyReq* unfinobjattrmodifyreq_body);
  private:
  const ::ClientCos::UnfinObjAttrModifyReq& _internal_unfinobjattrmodifyreq_body() const;
  ::ClientCos::UnfinObjAttrModifyReq* _internal_mutable_unfinobjattrmodifyreq_body();
  public:
  void unsafe_arena_set_allocated_unfinobjattrmodifyreq_body(
      ::ClientCos::UnfinObjAttrModifyReq* unfinobjattrmodifyreq_body);
  ::ClientCos::UnfinObjAttrModifyReq* unsafe_arena_release_unfinobjattrmodifyreq_body();

  // optional .ClientCos.FileBatchDelReq FileBatchDelReq_body = 35;
  bool has_filebatchdelreq_body() const;
  private:
  bool _internal_has_filebatchdelreq_body() const;
  public:
  void clear_filebatchdelreq_body();
  const ::ClientCos::FileBatchDelReq& filebatchdelreq_body() const;
  ::ClientCos::FileBatchDelReq* release_filebatchdelreq_body();
  ::ClientCos::FileBatchDelReq* mutable_filebatchdelreq_body();
  void set_allocated_filebatchdelreq_body(::ClientCos::FileBatchDelReq* filebatchdelreq_body);
  private:
  const ::ClientCos::FileBatchDelReq& _internal_filebatchdelreq_body() const;
  ::ClientCos::FileBatchDelReq* _internal_mutable_filebatchdelreq_body();
  public:
  void unsafe_arena_set_allocated_filebatchdelreq_body(
      ::ClientCos::FileBatchDelReq* filebatchdelreq_body);
  ::ClientCos::FileBatchDelReq* unsafe_arena_release_filebatchdelreq_body();

  // optional .ClientCos.ListObjVerReq ListObjVerReq_body = 36;
  bool has_listobjverreq_body() const;
  private:
  bool _internal_has_listobjverreq_body() const;
  public:
  void clear_listobjverreq_body();
  const ::ClientCos::ListObjVerReq& listobjverreq_body() const;
  ::ClientCos::ListObjVerReq* release_listobjverreq_body();
  ::ClientCos::ListObjVerReq* mutable_listobjverreq_body();
  void set_allocated_listobjverreq_body(::ClientCos::ListObjVerReq* listobjverreq_body);
  private:
  const ::ClientCos::ListObjVerReq& _internal_listobjverreq_body() const;
  ::ClientCos::ListObjVerReq* _internal_mutable_listobjverreq_body();
  public:
  void unsafe_arena_set_allocated_listobjverreq_body(
      ::ClientCos::ListObjVerReq* listobjverreq_body);
  ::ClientCos::ListObjVerReq* unsafe_arena_release_listobjverreq_body();

  // optional .ClientCos.DelExpireFileReq DelExpireFileReq_body = 37;
  bool has_delexpirefilereq_body() const;
  private:
  bool _internal_has_delexpirefilereq_body() const;
  public:
  void clear_delexpirefilereq_body();
  const ::ClientCos::DelExpireFileReq& delexpirefilereq_body() const;
  ::ClientCos::DelExpireFileReq* release_delexpirefilereq_body();
  ::ClientCos::DelExpireFileReq* mutable_delexpirefilereq_body();
  void set_allocated_delexpirefilereq_body(::ClientCos::DelExpireFileReq* delexpirefilereq_body);
  private:
  const ::ClientCos::DelExpireFileReq& _internal_delexpirefilereq_body() const;
  ::ClientCos::DelExpireFileReq* _internal_mutable_delexpirefilereq_body();
  public:
  void unsafe_arena_set_allocated_delexpirefilereq_body(
      ::ClientCos::DelExpireFileReq* delexpirefilereq_body);
  ::ClientCos::DelExpireFileReq* unsafe_arena_release_delexpirefilereq_body();

  // optional .ClientCos.FileDelReq FileDelReq_body = 38;
  bool has_filedelreq_body() const;
  private:
  bool _internal_has_filedelreq_body() const;
  public:
  void clear_filedelreq_body();
  const ::ClientCos::FileDelReq& filedelreq_body() const;
  ::ClientCos::FileDelReq* release_filedelreq_body();
  ::ClientCos::FileDelReq* mutable_filedelreq_body();
  void set_allocated_filedelreq_body(::ClientCos::FileDelReq* filedelreq_body);
  private:
  const ::ClientCos::FileDelReq& _internal_filedelreq_body() const;
  ::ClientCos::FileDelReq* _internal_mutable_filedelreq_body();
  public:
  void unsafe_arena_set_allocated_filedelreq_body(
      ::ClientCos::FileDelReq* filedelreq_body);
  ::ClientCos::FileDelReq* unsafe_arena_release_filedelreq_body();

  // optional .ClientCos.SpObjAttrModifyReq SpObjAttrModifyReq_body = 39;
  bool has_spobjattrmodifyreq_body() const;
  private:
  bool _internal_has_spobjattrmodifyreq_body() const;
  public:
  void clear_spobjattrmodifyreq_body();
  const ::ClientCos::SpObjAttrModifyReq& spobjattrmodifyreq_body() const;
  ::ClientCos::SpObjAttrModifyReq* release_spobjattrmodifyreq_body();
  ::ClientCos::SpObjAttrModifyReq* mutable_spobjattrmodifyreq_body();
  void set_allocated_spobjattrmodifyreq_body(::ClientCos::SpObjAttrModifyReq* spobjattrmodifyreq_body);
  private:
  const ::ClientCos::SpObjAttrModifyReq& _internal_spobjattrmodifyreq_body() const;
  ::ClientCos::SpObjAttrModifyReq* _internal_mutable_spobjattrmodifyreq_body();
  public:
  void unsafe_arena_set_allocated_spobjattrmodifyreq_body(
      ::ClientCos::SpObjAttrModifyReq* spobjattrmodifyreq_body);
  ::ClientCos::SpObjAttrModifyReq* unsafe_arena_release_spobjattrmodifyreq_body();

  // optional .ClientCos.UploadDelmarkerReq UploadDelmarkerReq_body = 40;
  bool has_uploaddelmarkerreq_body() const;
  private:
  bool _internal_has_uploaddelmarkerreq_body() const;
  public:
  void clear_uploaddelmarkerreq_body();
  const ::ClientCos::UploadDelmarkerReq& uploaddelmarkerreq_body() const;
  ::ClientCos::UploadDelmarkerReq* release_uploaddelmarkerreq_body();
  ::ClientCos::UploadDelmarkerReq* mutable_uploaddelmarkerreq_body();
  void set_allocated_uploaddelmarkerreq_body(::ClientCos::UploadDelmarkerReq* uploaddelmarkerreq_body);
  private:
  const ::ClientCos::UploadDelmarkerReq& _internal_uploaddelmarkerreq_body() const;
  ::ClientCos::UploadDelmarkerReq* _internal_mutable_uploaddelmarkerreq_body();
  public:
  void unsafe_arena_set_allocated_uploaddelmarkerreq_body(
      ::ClientCos::UploadDelmarkerReq* uploaddelmarkerreq_body);
  ::ClientCos::UploadDelmarkerReq* unsafe_arena_release_uploaddelmarkerreq_body();

  // optional .ClientCos.ExpireFileDelVerReq ExpireFileDelVerReq_body = 41;
  bool has_expirefiledelverreq_body() const;
  private:
  bool _internal_has_expirefiledelverreq_body() const;
  public:
  void clear_expirefiledelverreq_body();
  const ::ClientCos::ExpireFileDelVerReq& expirefiledelverreq_body() const;
  ::ClientCos::ExpireFileDelVerReq* release_expirefiledelverreq_body();
  ::ClientCos::ExpireFileDelVerReq* mutable_expirefiledelverreq_body();
  void set_allocated_expirefiledelverreq_body(::ClientCos::ExpireFileDelVerReq* expirefiledelverreq_body);
  private:
  const ::ClientCos::ExpireFileDelVerReq& _internal_expirefiledelverreq_body() const;
  ::ClientCos::ExpireFileDelVerReq* _internal_mutable_expirefiledelverreq_body();
  public:
  void unsafe_arena_set_allocated_expirefiledelverreq_body(
      ::ClientCos::ExpireFileDelVerReq* expirefiledelverreq_body);
  ::ClientCos::ExpireFileDelVerReq* unsafe_arena_release_expirefiledelverreq_body();

  // optional .ClientCos.ExpireFileDelNoVerReq ExpireFileDelNoverReq_body = 42;
  bool has_expirefiledelnoverreq_body() const;
  private:
  bool _internal_has_expirefiledelnoverreq_body() const;
  public:
  void clear_expirefiledelnoverreq_body();
  const ::ClientCos::ExpireFileDelNoVerReq& expirefiledelnoverreq_body() const;
  ::ClientCos::ExpireFileDelNoVerReq* release_expirefiledelnoverreq_body();
  ::ClientCos::ExpireFileDelNoVerReq* mutable_expirefiledelnoverreq_body();
  void set_allocated_expirefiledelnoverreq_body(::ClientCos::ExpireFileDelNoVerReq* expirefiledelnoverreq_body);
  private:
  const ::ClientCos::ExpireFileDelNoVerReq& _internal_expirefiledelnoverreq_body() const;
  ::ClientCos::ExpireFileDelNoVerReq* _internal_mutable_expirefiledelnoverreq_body();
  public:
  void unsafe_arena_set_allocated_expirefiledelnoverreq_body(
      ::ClientCos::ExpireFileDelNoVerReq* expirefiledelnoverreq_body);
  ::ClientCos::ExpireFileDelNoVerReq* unsafe_arena_release_expirefiledelnoverreq_body();

  // optional .ClientCos.SetBucketPriAttrReq SetBucketPriAttrReq_body = 43;
  bool has_setbucketpriattrreq_body() const;
  private:
  bool _internal_has_setbucketpriattrreq_body() const;
  public:
  void clear_setbucketpriattrreq_body();
  const ::ClientCos::SetBucketPriAttrReq& setbucketpriattrreq_body() const;
  ::ClientCos::SetBucketPriAttrReq* release_setbucketpriattrreq_body();
  ::ClientCos::SetBucketPriAttrReq* mutable_setbucketpriattrreq_body();
  void set_allocated_setbucketpriattrreq_body(::ClientCos::SetBucketPriAttrReq* setbucketpriattrreq_body);
  private:
  const ::ClientCos::SetBucketPriAttrReq& _internal_setbucketpriattrreq_body() const;
  ::ClientCos::SetBucketPriAttrReq* _internal_mutable_setbucketpriattrreq_body();
  public:
  void unsafe_arena_set_allocated_setbucketpriattrreq_body(
      ::ClientCos::SetBucketPriAttrReq* setbucketpriattrreq_body);
  ::ClientCos::SetBucketPriAttrReq* unsafe_arena_release_setbucketpriattrreq_body();

  // optional .ClientCos.FileDownToCASReq FileDownToCASReq_body = 44;
  bool has_filedowntocasreq_body() const;
  private:
  bool _internal_has_filedowntocasreq_body() const;
  public:
  void clear_filedowntocasreq_body();
  const ::ClientCos::FileDownToCASReq& filedowntocasreq_body() const;
  ::ClientCos::FileDownToCASReq* release_filedowntocasreq_body();
  ::ClientCos::FileDownToCASReq* mutable_filedowntocasreq_body();
  void set_allocated_filedowntocasreq_body(::ClientCos::FileDownToCASReq* filedowntocasreq_body);
  private:
  const ::ClientCos::FileDownToCASReq& _internal_filedowntocasreq_body() const;
  ::ClientCos::FileDownToCASReq* _internal_mutable_filedowntocasreq_body();
  public:
  void unsafe_arena_set_allocated_filedowntocasreq_body(
      ::ClientCos::FileDownToCASReq* filedowntocasreq_body);
  ::ClientCos::FileDownToCASReq* unsafe_arena_release_filedowntocasreq_body();

  // optional .ClientCos.CasObjAttrModifyReq CasObjAttrModifyReq_body = 45;
  bool has_casobjattrmodifyreq_body() const;
  private:
  bool _internal_has_casobjattrmodifyreq_body() const;
  public:
  void clear_casobjattrmodifyreq_body();
  const ::ClientCos::CasObjAttrModifyReq& casobjattrmodifyreq_body() const;
  ::ClientCos::CasObjAttrModifyReq* release_casobjattrmodifyreq_body();
  ::ClientCos::CasObjAttrModifyReq* mutable_casobjattrmodifyreq_body();
  void set_allocated_casobjattrmodifyreq_body(::ClientCos::CasObjAttrModifyReq* casobjattrmodifyreq_body);
  private:
  const ::ClientCos::CasObjAttrModifyReq& _internal_casobjattrmodifyreq_body() const;
  ::ClientCos::CasObjAttrModifyReq* _internal_mutable_casobjattrmodifyreq_body();
  public:
  void unsafe_arena_set_allocated_casobjattrmodifyreq_body(
      ::ClientCos::CasObjAttrModifyReq* casobjattrmodifyreq_body);
  ::ClientCos::CasObjAttrModifyReq* unsafe_arena_release_casobjattrmodifyreq_body();

  // optional .ClientCos.CasFileRecoverDelReq CasFileRecoverDelReq_body = 46;
  bool has_casfilerecoverdelreq_body() const;
  private:
  bool _internal_has_casfilerecoverdelreq_body() const;
  public:
  void clear_casfilerecoverdelreq_body();
  const ::ClientCos::CasFileRecoverDelReq& casfilerecoverdelreq_body() const;
  ::ClientCos::CasFileRecoverDelReq* release_casfilerecoverdelreq_body();
  ::ClientCos::CasFileRecoverDelReq* mutable_casfilerecoverdelreq_body();
  void set_allocated_casfilerecoverdelreq_body(::ClientCos::CasFileRecoverDelReq* casfilerecoverdelreq_body);
  private:
  const ::ClientCos::CasFileRecoverDelReq& _internal_casfilerecoverdelreq_body() const;
  ::ClientCos::CasFileRecoverDelReq* _internal_mutable_casfilerecoverdelreq_body();
  public:
  void unsafe_arena_set_allocated_casfilerecoverdelreq_body(
      ::ClientCos::CasFileRecoverDelReq* casfilerecoverdelreq_body);
  ::ClientCos::CasFileRecoverDelReq* unsafe_arena_release_casfilerecoverdelreq_body();

  // optional .ClientCos.CasObjRestoreErrReq CasObjRestoreErrReq_body = 47;
  bool has_casobjrestoreerrreq_body() const;
  private:
  bool _internal_has_casobjrestoreerrreq_body() const;
  public:
  void clear_casobjrestoreerrreq_body();
  const ::ClientCos::CasObjRestoreErrReq& casobjrestoreerrreq_body() const;
  ::ClientCos::CasObjRestoreErrReq* release_casobjrestoreerrreq_body();
  ::ClientCos::CasObjRestoreErrReq* mutable_casobjrestoreerrreq_body();
  void set_allocated_casobjrestoreerrreq_body(::ClientCos::CasObjRestoreErrReq* casobjrestoreerrreq_body);
  private:
  const ::ClientCos::CasObjRestoreErrReq& _internal_casobjrestoreerrreq_body() const;
  ::ClientCos::CasObjRestoreErrReq* _internal_mutable_casobjrestoreerrreq_body();
  public:
  void unsafe_arena_set_allocated_casobjrestoreerrreq_body(
      ::ClientCos::CasObjRestoreErrReq* casobjrestoreerrreq_body);
  ::ClientCos::CasObjRestoreErrReq* unsafe_arena_release_casobjrestoreerrreq_body();

  // optional .ClientCos.SpObjAttrQueryReq SpObjAttrQueryReq_body = 48;
  bool has_spobjattrqueryreq_body() const;
  private:
  bool _internal_has_spobjattrqueryreq_body() const;
  public:
  void clear_spobjattrqueryreq_body();
  const ::ClientCos::SpObjAttrQueryReq& spobjattrqueryreq_body() const;
  ::ClientCos::SpObjAttrQueryReq* release_spobjattrqueryreq_body();
  ::ClientCos::SpObjAttrQueryReq* mutable_spobjattrqueryreq_body();
  void set_allocated_spobjattrqueryreq_body(::ClientCos::SpObjAttrQueryReq* spobjattrqueryreq_body);
  private:
  const ::ClientCos::SpObjAttrQueryReq& _internal_spobjattrqueryreq_body() const;
  ::ClientCos::SpObjAttrQueryReq* _internal_mutable_spobjattrqueryreq_body();
  public:
  void unsafe_arena_set_allocated_spobjattrqueryreq_body(
      ::ClientCos::SpObjAttrQueryReq* spobjattrqueryreq_body);
  ::ClientCos::SpObjAttrQueryReq* unsafe_arena_release_spobjattrqueryreq_body();

  // optional .ClientCos.ObjModStorageTypeReq ObjModStorageTypeReq_body = 49;
  bool has_objmodstoragetypereq_body() const;
  private:
  bool _internal_has_objmodstoragetypereq_body() const;
  public:
  void clear_objmodstoragetypereq_body();
  const ::ClientCos::ObjModStorageTypeReq& objmodstoragetypereq_body() const;
  ::ClientCos::ObjModStorageTypeReq* release_objmodstoragetypereq_body();
  ::ClientCos::ObjModStorageTypeReq* mutable_objmodstoragetypereq_body();
  void set_allocated_objmodstoragetypereq_body(::ClientCos::ObjModStorageTypeReq* objmodstoragetypereq_body);
  private:
  const ::ClientCos::ObjModStorageTypeReq& _internal_objmodstoragetypereq_body() const;
  ::ClientCos::ObjModStorageTypeReq* _internal_mutable_objmodstoragetypereq_body();
  public:
  void unsafe_arena_set_allocated_objmodstoragetypereq_body(
      ::ClientCos::ObjModStorageTypeReq* objmodstoragetypereq_body);
  ::ClientCos::ObjModStorageTypeReq* unsafe_arena_release_objmodstoragetypereq_body();

  // optional .ClientCos.SetBucketWebsiteInfoReq SetBucketWebsiteInfoReq_body = 50;
  bool has_setbucketwebsiteinforeq_body() const;
  private:
  bool _internal_has_setbucketwebsiteinforeq_body() const;
  public:
  void clear_setbucketwebsiteinforeq_body();
  const ::ClientCos::SetBucketWebsiteInfoReq& setbucketwebsiteinforeq_body() const;
  ::ClientCos::SetBucketWebsiteInfoReq* release_setbucketwebsiteinforeq_body();
  ::ClientCos::SetBucketWebsiteInfoReq* mutable_setbucketwebsiteinforeq_body();
  void set_allocated_setbucketwebsiteinforeq_body(::ClientCos::SetBucketWebsiteInfoReq* setbucketwebsiteinforeq_body);
  private:
  const ::ClientCos::SetBucketWebsiteInfoReq& _internal_setbucketwebsiteinforeq_body() const;
  ::ClientCos::SetBucketWebsiteInfoReq* _internal_mutable_setbucketwebsiteinforeq_body();
  public:
  void unsafe_arena_set_allocated_setbucketwebsiteinforeq_body(
      ::ClientCos::SetBucketWebsiteInfoReq* setbucketwebsiteinforeq_body);
  ::ClientCos::SetBucketWebsiteInfoReq* unsafe_arena_release_setbucketwebsiteinforeq_body();

  // optional .ClientCos.SetCamAttrReq SetCamAttrReq_body = 51;
  bool has_setcamattrreq_body() const;
  private:
  bool _internal_has_setcamattrreq_body() const;
  public:
  void clear_setcamattrreq_body();
  const ::ClientCos::SetCamAttrReq& setcamattrreq_body() const;
  ::ClientCos::SetCamAttrReq* release_setcamattrreq_body();
  ::ClientCos::SetCamAttrReq* mutable_setcamattrreq_body();
  void set_allocated_setcamattrreq_body(::ClientCos::SetCamAttrReq* setcamattrreq_body);
  private:
  const ::ClientCos::SetCamAttrReq& _internal_setcamattrreq_body() const;
  ::ClientCos::SetCamAttrReq* _internal_mutable_setcamattrreq_body();
  public:
  void unsafe_arena_set_allocated_setcamattrreq_body(
      ::ClientCos::SetCamAttrReq* setcamattrreq_body);
  ::ClientCos::SetCamAttrReq* unsafe_arena_release_setcamattrreq_body();

  // optional .ClientCos.BucketCamAuthQueryReq BucketCamAuthQueryReq_body = 52;
  bool has_bucketcamauthqueryreq_body() const;
  private:
  bool _internal_has_bucketcamauthqueryreq_body() const;
  public:
  void clear_bucketcamauthqueryreq_body();
  const ::ClientCos::BucketCamAuthQueryReq& bucketcamauthqueryreq_body() const;
  ::ClientCos::BucketCamAuthQueryReq* release_bucketcamauthqueryreq_body();
  ::ClientCos::BucketCamAuthQueryReq* mutable_bucketcamauthqueryreq_body();
  void set_allocated_bucketcamauthqueryreq_body(::ClientCos::BucketCamAuthQueryReq* bucketcamauthqueryreq_body);
  private:
  const ::ClientCos::BucketCamAuthQueryReq& _internal_bucketcamauthqueryreq_body() const;
  ::ClientCos::BucketCamAuthQueryReq* _internal_mutable_bucketcamauthqueryreq_body();
  public:
  void unsafe_arena_set_allocated_bucketcamauthqueryreq_body(
      ::ClientCos::BucketCamAuthQueryReq* bucketcamauthqueryreq_body);
  ::ClientCos::BucketCamAuthQueryReq* unsafe_arena_release_bucketcamauthqueryreq_body();

  // optional .ClientCos.AppCamAuthQueryReq AppCamAuthQueryReq_body = 53;
  bool has_appcamauthqueryreq_body() const;
  private:
  bool _internal_has_appcamauthqueryreq_body() const;
  public:
  void clear_appcamauthqueryreq_body();
  const ::ClientCos::AppCamAuthQueryReq& appcamauthqueryreq_body() const;
  ::ClientCos::AppCamAuthQueryReq* release_appcamauthqueryreq_body();
  ::ClientCos::AppCamAuthQueryReq* mutable_appcamauthqueryreq_body();
  void set_allocated_appcamauthqueryreq_body(::ClientCos::AppCamAuthQueryReq* appcamauthqueryreq_body);
  private:
  const ::ClientCos::AppCamAuthQueryReq& _internal_appcamauthqueryreq_body() const;
  ::ClientCos::AppCamAuthQueryReq* _internal_mutable_appcamauthqueryreq_body();
  public:
  void unsafe_arena_set_allocated_appcamauthqueryreq_body(
      ::ClientCos::AppCamAuthQueryReq* appcamauthqueryreq_body);
  ::ClientCos::AppCamAuthQueryReq* unsafe_arena_release_appcamauthqueryreq_body();

  // optional .ClientCos.FileUnfinishAttrQueryReq FileUnfinishAttrQueryReq_body = 54;
  bool has_fileunfinishattrqueryreq_body() const;
  private:
  bool _internal_has_fileunfinishattrqueryreq_body() const;
  public:
  void clear_fileunfinishattrqueryreq_body();
  const ::ClientCos::FileUnfinishAttrQueryReq& fileunfinishattrqueryreq_body() const;
  ::ClientCos::FileUnfinishAttrQueryReq* release_fileunfinishattrqueryreq_body();
  ::ClientCos::FileUnfinishAttrQueryReq* mutable_fileunfinishattrqueryreq_body();
  void set_allocated_fileunfinishattrqueryreq_body(::ClientCos::FileUnfinishAttrQueryReq* fileunfinishattrqueryreq_body);
  private:
  const ::ClientCos::FileUnfinishAttrQueryReq& _internal_fileunfinishattrqueryreq_body() const;
  ::ClientCos::FileUnfinishAttrQueryReq* _internal_mutable_fileunfinishattrqueryreq_body();
  public:
  void unsafe_arena_set_allocated_fileunfinishattrqueryreq_body(
      ::ClientCos::FileUnfinishAttrQueryReq* fileunfinishattrqueryreq_body);
  ::ClientCos::FileUnfinishAttrQueryReq* unsafe_arena_release_fileunfinishattrqueryreq_body();

  // optional .ClientCos.ReduceLifecycleReq ReduceLifecycleReq_body = 55;
  bool has_reducelifecyclereq_body() const;
  private:
  bool _internal_has_reducelifecyclereq_body() const;
  public:
  void clear_reducelifecyclereq_body();
  const ::ClientCos::ReduceLifecycleReq& reducelifecyclereq_body() const;
  ::ClientCos::ReduceLifecycleReq* release_reducelifecyclereq_body();
  ::ClientCos::ReduceLifecycleReq* mutable_reducelifecyclereq_body();
  void set_allocated_reducelifecyclereq_body(::ClientCos::ReduceLifecycleReq* reducelifecyclereq_body);
  private:
  const ::ClientCos::ReduceLifecycleReq& _internal_reducelifecyclereq_body() const;
  ::ClientCos::ReduceLifecycleReq* _internal_mutable_reducelifecyclereq_body();
  public:
  void unsafe_arena_set_allocated_reducelifecyclereq_body(
      ::ClientCos::ReduceLifecycleReq* reducelifecyclereq_body);
  ::ClientCos::ReduceLifecycleReq* unsafe_arena_release_reducelifecyclereq_body();

  // optional .ClientCos.RetrieveLifecycleReq RetrieveLifecycleReq_body = 56;
  bool has_retrievelifecyclereq_body() const;
  private:
  bool _internal_has_retrievelifecyclereq_body() const;
  public:
  void clear_retrievelifecyclereq_body();
  const ::ClientCos::RetrieveLifecycleReq& retrievelifecyclereq_body() const;
  ::ClientCos::RetrieveLifecycleReq* release_retrievelifecyclereq_body();
  ::ClientCos::RetrieveLifecycleReq* mutable_retrievelifecyclereq_body();
  void set_allocated_retrievelifecyclereq_body(::ClientCos::RetrieveLifecycleReq* retrievelifecyclereq_body);
  private:
  const ::ClientCos::RetrieveLifecycleReq& _internal_retrievelifecyclereq_body() const;
  ::ClientCos::RetrieveLifecycleReq* _internal_mutable_retrievelifecyclereq_body();
  public:
  void unsafe_arena_set_allocated_retrievelifecyclereq_body(
      ::ClientCos::RetrieveLifecycleReq* retrievelifecyclereq_body);
  ::ClientCos::RetrieveLifecycleReq* unsafe_arena_release_retrievelifecyclereq_body();

  // optional .ClientCos.SetObjAclReq SetObjAclReq_body = 57;
  bool has_setobjaclreq_body() const;
  private:
  bool _internal_has_setobjaclreq_body() const;
  public:
  void clear_setobjaclreq_body();
  const ::ClientCos::SetObjAclReq& setobjaclreq_body() const;
  ::ClientCos::SetObjAclReq* release_setobjaclreq_body();
  ::ClientCos::SetObjAclReq* mutable_setobjaclreq_body();
  void set_allocated_setobjaclreq_body(::ClientCos::SetObjAclReq* setobjaclreq_body);
  private:
  const ::ClientCos::SetObjAclReq& _internal_setobjaclreq_body() const;
  ::ClientCos::SetObjAclReq* _internal_mutable_setobjaclreq_body();
  public:
  void unsafe_arena_set_allocated_setobjaclreq_body(
      ::ClientCos::SetObjAclReq* setobjaclreq_body);
  ::ClientCos::SetObjAclReq* unsafe_arena_release_setobjaclreq_body();

  // optional .ClientCos.GetObjAclReq GetObjAclReq_body = 58;
  bool has_getobjaclreq_body() const;
  private:
  bool _internal_has_getobjaclreq_body() const;
  public:
  void clear_getobjaclreq_body();
  const ::ClientCos::GetObjAclReq& getobjaclreq_body() const;
  ::ClientCos::GetObjAclReq* release_getobjaclreq_body();
  ::ClientCos::GetObjAclReq* mutable_getobjaclreq_body();
  void set_allocated_getobjaclreq_body(::ClientCos::GetObjAclReq* getobjaclreq_body);
  private:
  const ::ClientCos::GetObjAclReq& _internal_getobjaclreq_body() const;
  ::ClientCos::GetObjAclReq* _internal_mutable_getobjaclreq_body();
  public:
  void unsafe_arena_set_allocated_getobjaclreq_body(
      ::ClientCos::GetObjAclReq* getobjaclreq_body);
  ::ClientCos::GetObjAclReq* unsafe_arena_release_getobjaclreq_body();

  // optional .ClientCos.SetBucketUinReq SetBucketUinReq_body = 59;
  bool has_setbucketuinreq_body() const;
  private:
  bool _internal_has_setbucketuinreq_body() const;
  public:
  void clear_setbucketuinreq_body();
  const ::ClientCos::SetBucketUinReq& setbucketuinreq_body() const;
  ::ClientCos::SetBucketUinReq* release_setbucketuinreq_body();
  ::ClientCos::SetBucketUinReq* mutable_setbucketuinreq_body();
  void set_allocated_setbucketuinreq_body(::ClientCos::SetBucketUinReq* setbucketuinreq_body);
  private:
  const ::ClientCos::SetBucketUinReq& _internal_setbucketuinreq_body() const;
  ::ClientCos::SetBucketUinReq* _internal_mutable_setbucketuinreq_body();
  public:
  void unsafe_arena_set_allocated_setbucketuinreq_body(
      ::ClientCos::SetBucketUinReq* setbucketuinreq_body);
  ::ClientCos::SetBucketUinReq* unsafe_arena_release_setbucketuinreq_body();

  // optional .ClientCos.GetBucketUinReq GetBucketUinReq_body = 60;
  bool has_getbucketuinreq_body() const;
  private:
  bool _internal_has_getbucketuinreq_body() const;
  public:
  void clear_getbucketuinreq_body();
  const ::ClientCos::GetBucketUinReq& getbucketuinreq_body() const;
  ::ClientCos::GetBucketUinReq* release_getbucketuinreq_body();
  ::ClientCos::GetBucketUinReq* mutable_getbucketuinreq_body();
  void set_allocated_getbucketuinreq_body(::ClientCos::GetBucketUinReq* getbucketuinreq_body);
  private:
  const ::ClientCos::GetBucketUinReq& _internal_getbucketuinreq_body() const;
  ::ClientCos::GetBucketUinReq* _internal_mutable_getbucketuinreq_body();
  public:
  void unsafe_arena_set_allocated_getbucketuinreq_body(
      ::ClientCos::GetBucketUinReq* getbucketuinreq_body);
  ::ClientCos::GetBucketUinReq* unsafe_arena_release_getbucketuinreq_body();

  // optional .ClientCos.ListDirectReq ListDirectReq_body = 61;
  bool has_listdirectreq_body() const;
  private:
  bool _internal_has_listdirectreq_body() const;
  public:
  void clear_listdirectreq_body();
  const ::ClientCos::ListDirectReq& listdirectreq_body() const;
  ::ClientCos::ListDirectReq* release_listdirectreq_body();
  ::ClientCos::ListDirectReq* mutable_listdirectreq_body();
  void set_allocated_listdirectreq_body(::ClientCos::ListDirectReq* listdirectreq_body);
  private:
  const ::ClientCos::ListDirectReq& _internal_listdirectreq_body() const;
  ::ClientCos::ListDirectReq* _internal_mutable_listdirectreq_body();
  public:
  void unsafe_arena_set_allocated_listdirectreq_body(
      ::ClientCos::ListDirectReq* listdirectreq_body);
  ::ClientCos::ListDirectReq* unsafe_arena_release_listdirectreq_body();

  // optional .ClientCos.CheckObjAclReq CheckObjAclReq_body = 62;
  bool has_checkobjaclreq_body() const;
  private:
  bool _internal_has_checkobjaclreq_body() const;
  public:
  void clear_checkobjaclreq_body();
  const ::ClientCos::CheckObjAclReq& checkobjaclreq_body() const;
  ::ClientCos::CheckObjAclReq* release_checkobjaclreq_body();
  ::ClientCos::CheckObjAclReq* mutable_checkobjaclreq_body();
  void set_allocated_checkobjaclreq_body(::ClientCos::CheckObjAclReq* checkobjaclreq_body);
  private:
  const ::ClientCos::CheckObjAclReq& _internal_checkobjaclreq_body() const;
  ::ClientCos::CheckObjAclReq* _internal_mutable_checkobjaclreq_body();
  public:
  void unsafe_arena_set_allocated_checkobjaclreq_body(
      ::ClientCos::CheckObjAclReq* checkobjaclreq_body);
  ::ClientCos::CheckObjAclReq* unsafe_arena_release_checkobjaclreq_body();

  // optional .ClientCos.CasObjRestoreFinReq CasObjRestoreFinReq_body = 63;
  bool has_casobjrestorefinreq_body() const;
  private:
  bool _internal_has_casobjrestorefinreq_body() const;
  public:
  void clear_casobjrestorefinreq_body();
  const ::ClientCos::CasObjRestoreFinReq& casobjrestorefinreq_body() const;
  ::ClientCos::CasObjRestoreFinReq* release_casobjrestorefinreq_body();
  ::ClientCos::CasObjRestoreFinReq* mutable_casobjrestorefinreq_body();
  void set_allocated_casobjrestorefinreq_body(::ClientCos::CasObjRestoreFinReq* casobjrestorefinreq_body);
  private:
  const ::ClientCos::CasObjRestoreFinReq& _internal_casobjrestorefinreq_body() const;
  ::ClientCos::CasObjRestoreFinReq* _internal_mutable_casobjrestorefinreq_body();
  public:
  void unsafe_arena_set_allocated_casobjrestorefinreq_body(
      ::ClientCos::CasObjRestoreFinReq* casobjrestorefinreq_body);
  ::ClientCos::CasObjRestoreFinReq* unsafe_arena_release_casobjrestorefinreq_body();

  // optional .ClientCos.SetBucketLockReq SetBucketLockReq_body = 64;
  bool has_setbucketlockreq_body() const;
  private:
  bool _internal_has_setbucketlockreq_body() const;
  public:
  void clear_setbucketlockreq_body();
  const ::ClientCos::SetBucketLockReq& setbucketlockreq_body() const;
  ::ClientCos::SetBucketLockReq* release_setbucketlockreq_body();
  ::ClientCos::SetBucketLockReq* mutable_setbucketlockreq_body();
  void set_allocated_setbucketlockreq_body(::ClientCos::SetBucketLockReq* setbucketlockreq_body);
  private:
  const ::ClientCos::SetBucketLockReq& _internal_setbucketlockreq_body() const;
  ::ClientCos::SetBucketLockReq* _internal_mutable_setbucketlockreq_body();
  public:
  void unsafe_arena_set_allocated_setbucketlockreq_body(
      ::ClientCos::SetBucketLockReq* setbucketlockreq_body);
  ::ClientCos::SetBucketLockReq* unsafe_arena_release_setbucketlockreq_body();

  // optional .ClientCos.GetBucketLockReq GetBucketLockReq_body = 65;
  bool has_getbucketlockreq_body() const;
  private:
  bool _internal_has_getbucketlockreq_body() const;
  public:
  void clear_getbucketlockreq_body();
  const ::ClientCos::GetBucketLockReq& getbucketlockreq_body() const;
  ::ClientCos::GetBucketLockReq* release_getbucketlockreq_body();
  ::ClientCos::GetBucketLockReq* mutable_getbucketlockreq_body();
  void set_allocated_getbucketlockreq_body(::ClientCos::GetBucketLockReq* getbucketlockreq_body);
  private:
  const ::ClientCos::GetBucketLockReq& _internal_getbucketlockreq_body() const;
  ::ClientCos::GetBucketLockReq* _internal_mutable_getbucketlockreq_body();
  public:
  void unsafe_arena_set_allocated_getbucketlockreq_body(
      ::ClientCos::GetBucketLockReq* getbucketlockreq_body);
  ::ClientCos::GetBucketLockReq* unsafe_arena_release_getbucketlockreq_body();

  // optional .ClientCos.SetBucketInventoryReq SetBucketInventoryReq_body = 66;
  bool has_setbucketinventoryreq_body() const;
  private:
  bool _internal_has_setbucketinventoryreq_body() const;
  public:
  void clear_setbucketinventoryreq_body();
  const ::ClientCos::SetBucketInventoryReq& setbucketinventoryreq_body() const;
  ::ClientCos::SetBucketInventoryReq* release_setbucketinventoryreq_body();
  ::ClientCos::SetBucketInventoryReq* mutable_setbucketinventoryreq_body();
  void set_allocated_setbucketinventoryreq_body(::ClientCos::SetBucketInventoryReq* setbucketinventoryreq_body);
  private:
  const ::ClientCos::SetBucketInventoryReq& _internal_setbucketinventoryreq_body() const;
  ::ClientCos::SetBucketInventoryReq* _internal_mutable_setbucketinventoryreq_body();
  public:
  void unsafe_arena_set_allocated_setbucketinventoryreq_body(
      ::ClientCos::SetBucketInventoryReq* setbucketinventoryreq_body);
  ::ClientCos::SetBucketInventoryReq* unsafe_arena_release_setbucketinventoryreq_body();

  // optional .ClientCos.GetBucketInventoryReq GetBucketInventoryReq_body = 67;
  bool has_getbucketinventoryreq_body() const;
  private:
  bool _internal_has_getbucketinventoryreq_body() const;
  public:
  void clear_getbucketinventoryreq_body();
  const ::ClientCos::GetBucketInventoryReq& getbucketinventoryreq_body() const;
  ::ClientCos::GetBucketInventoryReq* release_getbucketinventoryreq_body();
  ::ClientCos::GetBucketInventoryReq* mutable_getbucketinventoryreq_body();
  void set_allocated_getbucketinventoryreq_body(::ClientCos::GetBucketInventoryReq* getbucketinventoryreq_body);
  private:
  const ::ClientCos::GetBucketInventoryReq& _internal_getbucketinventoryreq_body() const;
  ::ClientCos::GetBucketInventoryReq* _internal_mutable_getbucketinventoryreq_body();
  public:
  void unsafe_arena_set_allocated_getbucketinventoryreq_body(
      ::ClientCos::GetBucketInventoryReq* getbucketinventoryreq_body);
  ::ClientCos::GetBucketInventoryReq* unsafe_arena_release_getbucketinventoryreq_body();

  // optional .ClientCos.COSTransToCASReq COSTransToCASReq_body = 68;
  bool has_costranstocasreq_body() const;
  private:
  bool _internal_has_costranstocasreq_body() const;
  public:
  void clear_costranstocasreq_body();
  const ::ClientCos::COSTransToCASReq& costranstocasreq_body() const;
  ::ClientCos::COSTransToCASReq* release_costranstocasreq_body();
  ::ClientCos::COSTransToCASReq* mutable_costranstocasreq_body();
  void set_allocated_costranstocasreq_body(::ClientCos::COSTransToCASReq* costranstocasreq_body);
  private:
  const ::ClientCos::COSTransToCASReq& _internal_costranstocasreq_body() const;
  ::ClientCos::COSTransToCASReq* _internal_mutable_costranstocasreq_body();
  public:
  void unsafe_arena_set_allocated_costranstocasreq_body(
      ::ClientCos::COSTransToCASReq* costranstocasreq_body);
  ::ClientCos::COSTransToCASReq* unsafe_arena_release_costranstocasreq_body();

  // optional .ClientCos.SetMigrateReq SetMigrateReq_body = 90;
  bool has_setmigratereq_body() const;
  private:
  bool _internal_has_setmigratereq_body() const;
  public:
  void clear_setmigratereq_body();
  const ::ClientCos::SetMigrateReq& setmigratereq_body() const;
  ::ClientCos::SetMigrateReq* release_setmigratereq_body();
  ::ClientCos::SetMigrateReq* mutable_setmigratereq_body();
  void set_allocated_setmigratereq_body(::ClientCos::SetMigrateReq* setmigratereq_body);
  private:
  const ::ClientCos::SetMigrateReq& _internal_setmigratereq_body() const;
  ::ClientCos::SetMigrateReq* _internal_mutable_setmigratereq_body();
  public:
  void unsafe_arena_set_allocated_setmigratereq_body(
      ::ClientCos::SetMigrateReq* setmigratereq_body);
  ::ClientCos::SetMigrateReq* unsafe_arena_release_setmigratereq_body();

  // optional .ClientCos.DelNoHashFileReq DelNoHashFileReq_body = 91;
  bool has_delnohashfilereq_body() const;
  private:
  bool _internal_has_delnohashfilereq_body() const;
  public:
  void clear_delnohashfilereq_body();
  const ::ClientCos::DelNoHashFileReq& delnohashfilereq_body() const;
  ::ClientCos::DelNoHashFileReq* release_delnohashfilereq_body();
  ::ClientCos::DelNoHashFileReq* mutable_delnohashfilereq_body();
  void set_allocated_delnohashfilereq_body(::ClientCos::DelNoHashFileReq* delnohashfilereq_body);
  private:
  const ::ClientCos::DelNoHashFileReq& _internal_delnohashfilereq_body() const;
  ::ClientCos::DelNoHashFileReq* _internal_mutable_delnohashfilereq_body();
  public:
  void unsafe_arena_set_allocated_delnohashfilereq_body(
      ::ClientCos::DelNoHashFileReq* delnohashfilereq_body);
  ::ClientCos::DelNoHashFileReq* unsafe_arena_release_delnohashfilereq_body();

  // optional .ClientCos.MigrateFinFileReq MigrateFinFileReq_body = 92;
  bool has_migratefinfilereq_body() const;
  private:
  bool _internal_has_migratefinfilereq_body() const;
  public:
  void clear_migratefinfilereq_body();
  const ::ClientCos::MigrateFinFileReq& migratefinfilereq_body() const;
  ::ClientCos::MigrateFinFileReq* release_migratefinfilereq_body();
  ::ClientCos::MigrateFinFileReq* mutable_migratefinfilereq_body();
  void set_allocated_migratefinfilereq_body(::ClientCos::MigrateFinFileReq* migratefinfilereq_body);
  private:
  const ::ClientCos::MigrateFinFileReq& _internal_migratefinfilereq_body() const;
  ::ClientCos::MigrateFinFileReq* _internal_mutable_migratefinfilereq_body();
  public:
  void unsafe_arena_set_allocated_migratefinfilereq_body(
      ::ClientCos::MigrateFinFileReq* migratefinfilereq_body);
  ::ClientCos::MigrateFinFileReq* unsafe_arena_release_migratefinfilereq_body();

  // optional .ClientCos.MigrateUnFinFileReq MigrateUnFinFileReq_body = 93;
  bool has_migrateunfinfilereq_body() const;
  private:
  bool _internal_has_migrateunfinfilereq_body() const;
  public:
  void clear_migrateunfinfilereq_body();
  const ::ClientCos::MigrateUnFinFileReq& migrateunfinfilereq_body() const;
  ::ClientCos::MigrateUnFinFileReq* release_migrateunfinfilereq_body();
  ::ClientCos::MigrateUnFinFileReq* mutable_migrateunfinfilereq_body();
  void set_allocated_migrateunfinfilereq_body(::ClientCos::MigrateUnFinFileReq* migrateunfinfilereq_body);
  private:
  const ::ClientCos::MigrateUnFinFileReq& _internal_migrateunfinfilereq_body() const;
  ::ClientCos::MigrateUnFinFileReq* _internal_mutable_migrateunfinfilereq_body();
  public:
  void unsafe_arena_set_allocated_migrateunfinfilereq_body(
      ::ClientCos::MigrateUnFinFileReq* migrateunfinfilereq_body);
  ::ClientCos::MigrateUnFinFileReq* unsafe_arena_release_migrateunfinfilereq_body();

  // required .ClientCos.CosReqMsg.SubType sub_type = 10;
  bool has_sub_type() const;
  private:
  bool _internal_has_sub_type() const;
  public:
  void clear_sub_type();
  ::ClientCos::CosReqMsg_SubType sub_type() const;
  void set_sub_type(::ClientCos::CosReqMsg_SubType value);
  private:
  ::ClientCos::CosReqMsg_SubType _internal_sub_type() const;
  void _internal_set_sub_type(::ClientCos::CosReqMsg_SubType value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CosReqMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgi_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgi_params_;
  ::ClientCos::BucketCreateReq* bucketcreatereq_body_;
  ::ClientCos::BucketAttrModifyReq* bucketattrmodifyreq_body_;
  ::ClientCos::BucketAttrQueryReq* bucketattrqueryreq_body_;
  ::ClientCos::DirCreateReq* dircreatereq_body_;
  ::ClientCos::ObjAttrQueryReq* objattrqueryreq_body_;
  ::ClientCos::ObjAttrModifyReq* objattrmodifyreq_body_;
  ::ClientCos::DeleteReq* deletereq_body_;
  ::ClientCos::ListReq* listreq_body_;
  ::ClientCos::AppAttrQueryReq* appattrqueryreq_body_;
  ::ClientCos::AppAttrModifyReq* appattrmodifyreq_body_;
  ::ClientCos::PreviewFileAttrQueryReq* previewfileattrqueryreq_body_;
  ::ClientCos::ObjModTimeStampReq* objmodtimestampreq_body_;
  ::ClientCos::ListMutiobjReq* listmutiobjreq_body_;
  ::ClientCos::UnfinObjAttrModifyReq* unfinobjattrmodifyreq_body_;
  ::ClientCos::FileBatchDelReq* filebatchdelreq_body_;
  ::ClientCos::ListObjVerReq* listobjverreq_body_;
  ::ClientCos::DelExpireFileReq* delexpirefilereq_body_;
  ::ClientCos::FileDelReq* filedelreq_body_;
  ::ClientCos::SpObjAttrModifyReq* spobjattrmodifyreq_body_;
  ::ClientCos::UploadDelmarkerReq* uploaddelmarkerreq_body_;
  ::ClientCos::ExpireFileDelVerReq* expirefiledelverreq_body_;
  ::ClientCos::ExpireFileDelNoVerReq* expirefiledelnoverreq_body_;
  ::ClientCos::SetBucketPriAttrReq* setbucketpriattrreq_body_;
  ::ClientCos::FileDownToCASReq* filedowntocasreq_body_;
  ::ClientCos::CasObjAttrModifyReq* casobjattrmodifyreq_body_;
  ::ClientCos::CasFileRecoverDelReq* casfilerecoverdelreq_body_;
  ::ClientCos::CasObjRestoreErrReq* casobjrestoreerrreq_body_;
  ::ClientCos::SpObjAttrQueryReq* spobjattrqueryreq_body_;
  ::ClientCos::ObjModStorageTypeReq* objmodstoragetypereq_body_;
  ::ClientCos::SetBucketWebsiteInfoReq* setbucketwebsiteinforeq_body_;
  ::ClientCos::SetCamAttrReq* setcamattrreq_body_;
  ::ClientCos::BucketCamAuthQueryReq* bucketcamauthqueryreq_body_;
  ::ClientCos::AppCamAuthQueryReq* appcamauthqueryreq_body_;
  ::ClientCos::FileUnfinishAttrQueryReq* fileunfinishattrqueryreq_body_;
  ::ClientCos::ReduceLifecycleReq* reducelifecyclereq_body_;
  ::ClientCos::RetrieveLifecycleReq* retrievelifecyclereq_body_;
  ::ClientCos::SetObjAclReq* setobjaclreq_body_;
  ::ClientCos::GetObjAclReq* getobjaclreq_body_;
  ::ClientCos::SetBucketUinReq* setbucketuinreq_body_;
  ::ClientCos::GetBucketUinReq* getbucketuinreq_body_;
  ::ClientCos::ListDirectReq* listdirectreq_body_;
  ::ClientCos::CheckObjAclReq* checkobjaclreq_body_;
  ::ClientCos::CasObjRestoreFinReq* casobjrestorefinreq_body_;
  ::ClientCos::SetBucketLockReq* setbucketlockreq_body_;
  ::ClientCos::GetBucketLockReq* getbucketlockreq_body_;
  ::ClientCos::SetBucketInventoryReq* setbucketinventoryreq_body_;
  ::ClientCos::GetBucketInventoryReq* getbucketinventoryreq_body_;
  ::ClientCos::COSTransToCASReq* costranstocasreq_body_;
  ::ClientCos::SetMigrateReq* setmigratereq_body_;
  ::ClientCos::DelNoHashFileReq* delnohashfilereq_body_;
  ::ClientCos::MigrateFinFileReq* migratefinfilereq_body_;
  ::ClientCos::MigrateUnFinFileReq* migrateunfinfilereq_body_;
  int sub_type_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CosRspMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CosRspMsg) */ {
 public:
  inline CosRspMsg() : CosRspMsg(nullptr) {}
  virtual ~CosRspMsg();

  CosRspMsg(const CosRspMsg& from);
  CosRspMsg(CosRspMsg&& from) noexcept
    : CosRspMsg() {
    *this = ::std::move(from);
  }

  inline CosRspMsg& operator=(const CosRspMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosRspMsg& operator=(CosRspMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosRspMsg& default_instance();

  static inline const CosRspMsg* internal_default_instance() {
    return reinterpret_cast<const CosRspMsg*>(
               &_CosRspMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CosRspMsg& a, CosRspMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CosRspMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosRspMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosRspMsg* New() const final {
    return CreateMaybeMessage<CosRspMsg>(nullptr);
  }

  CosRspMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosRspMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosRspMsg& from);
  void MergeFrom(const CosRspMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosRspMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CosRspMsg";
  }
  protected:
  explicit CosRspMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CosRspMsg_SubType SubType;
  static constexpr SubType Invalid =
    CosRspMsg_SubType_Invalid;
  static constexpr SubType BucketCreateRsp =
    CosRspMsg_SubType_BucketCreateRsp;
  static constexpr SubType BucketAttrModifyRsp =
    CosRspMsg_SubType_BucketAttrModifyRsp;
  static constexpr SubType BucketAttrQueryRsp =
    CosRspMsg_SubType_BucketAttrQueryRsp;
  static constexpr SubType DirCreateRsp =
    CosRspMsg_SubType_DirCreateRsp;
  static constexpr SubType ObjAttrQueryRsp =
    CosRspMsg_SubType_ObjAttrQueryRsp;
  static constexpr SubType ObjAttrModifyRsp =
    CosRspMsg_SubType_ObjAttrModifyRsp;
  static constexpr SubType DeleteRsp =
    CosRspMsg_SubType_DeleteRsp;
  static constexpr SubType ListRsp =
    CosRspMsg_SubType_ListRsp;
  static constexpr SubType AppAttrQueryRsp =
    CosRspMsg_SubType_AppAttrQueryRsp;
  static constexpr SubType AppAttrModifyRsp =
    CosRspMsg_SubType_AppAttrModifyRsp;
  static constexpr SubType PreviewFileAttrQueryRsp =
    CosRspMsg_SubType_PreviewFileAttrQueryRsp;
  static constexpr SubType ObjModTimeStampRsp =
    CosRspMsg_SubType_ObjModTimeStampRsp;
  static constexpr SubType ListMutiobjRsp =
    CosRspMsg_SubType_ListMutiobjRsp;
  static constexpr SubType UnfinObjAttrModifyRsp =
    CosRspMsg_SubType_UnfinObjAttrModifyRsp;
  static constexpr SubType FileBatchDelRsp =
    CosRspMsg_SubType_FileBatchDelRsp;
  static constexpr SubType ListObjVerRsp =
    CosRspMsg_SubType_ListObjVerRsp;
  static constexpr SubType DelExpireFileRsp =
    CosRspMsg_SubType_DelExpireFileRsp;
  static constexpr SubType FileDelRsp =
    CosRspMsg_SubType_FileDelRsp;
  static constexpr SubType ObjAttrModifyRsp_sp =
    CosRspMsg_SubType_ObjAttrModifyRsp_sp;
  static constexpr SubType UploadDelmarkerRsp =
    CosRspMsg_SubType_UploadDelmarkerRsp;
  static constexpr SubType ExpireFileDelVerRsp =
    CosRspMsg_SubType_ExpireFileDelVerRsp;
  static constexpr SubType ExpireFileDelNoverRsp =
    CosRspMsg_SubType_ExpireFileDelNoverRsp;
  static constexpr SubType SetBucketPriAttrRsp =
    CosRspMsg_SubType_SetBucketPriAttrRsp;
  static constexpr SubType FileDownToCASRsp =
    CosRspMsg_SubType_FileDownToCASRsp;
  static constexpr SubType CasObjAttrModifyRsp =
    CosRspMsg_SubType_CasObjAttrModifyRsp;
  static constexpr SubType CasFileRecoverDelRsp =
    CosRspMsg_SubType_CasFileRecoverDelRsp;
  static constexpr SubType CasObjRestoreErrRsp =
    CosRspMsg_SubType_CasObjRestoreErrRsp;
  static constexpr SubType SpObjAttrQueryRsp =
    CosRspMsg_SubType_SpObjAttrQueryRsp;
  static constexpr SubType ObjModStorageTypeRsp =
    CosRspMsg_SubType_ObjModStorageTypeRsp;
  static constexpr SubType SetBucketWebsiteInfoRsp =
    CosRspMsg_SubType_SetBucketWebsiteInfoRsp;
  static constexpr SubType SetCamAttrRsp =
    CosRspMsg_SubType_SetCamAttrRsp;
  static constexpr SubType BucketCamAuthQueryRsp =
    CosRspMsg_SubType_BucketCamAuthQueryRsp;
  static constexpr SubType AppCamAuthQueryRsp =
    CosRspMsg_SubType_AppCamAuthQueryRsp;
  static constexpr SubType FileUnfinishAttrQueryRsp =
    CosRspMsg_SubType_FileUnfinishAttrQueryRsp;
  static constexpr SubType ReduceLifecycleRsp =
    CosRspMsg_SubType_ReduceLifecycleRsp;
  static constexpr SubType RetrieveLifecycleRsp =
    CosRspMsg_SubType_RetrieveLifecycleRsp;
  static constexpr SubType SetObjAclRsp =
    CosRspMsg_SubType_SetObjAclRsp;
  static constexpr SubType GetObjAclRsp =
    CosRspMsg_SubType_GetObjAclRsp;
  static constexpr SubType SetBucketUinRsp =
    CosRspMsg_SubType_SetBucketUinRsp;
  static constexpr SubType GetBucketUinRsp =
    CosRspMsg_SubType_GetBucketUinRsp;
  static constexpr SubType ListDirectRsp =
    CosRspMsg_SubType_ListDirectRsp;
  static constexpr SubType CheckObjAclRsp =
    CosRspMsg_SubType_CheckObjAclRsp;
  static constexpr SubType CasObjRestoreFinRsp =
    CosRspMsg_SubType_CasObjRestoreFinRsp;
  static constexpr SubType SetBucketLockRsp =
    CosRspMsg_SubType_SetBucketLockRsp;
  static constexpr SubType GetBucketLockRsp =
    CosRspMsg_SubType_GetBucketLockRsp;
  static constexpr SubType SetBucketInventoryRsp =
    CosRspMsg_SubType_SetBucketInventoryRsp;
  static constexpr SubType GetBucketInventoryRsp =
    CosRspMsg_SubType_GetBucketInventoryRsp;
  static constexpr SubType COSTransToCASRsp =
    CosRspMsg_SubType_COSTransToCASRsp;
  static constexpr SubType SetMigrateRsp =
    CosRspMsg_SubType_SetMigrateRsp;
  static constexpr SubType DelNoHashFileRsp =
    CosRspMsg_SubType_DelNoHashFileRsp;
  static constexpr SubType MigrateFinFileRsp =
    CosRspMsg_SubType_MigrateFinFileRsp;
  static constexpr SubType MigrateUnFinFileRsp =
    CosRspMsg_SubType_MigrateUnFinFileRsp;
  static inline bool SubType_IsValid(int value) {
    return CosRspMsg_SubType_IsValid(value);
  }
  static constexpr SubType SubType_MIN =
    CosRspMsg_SubType_SubType_MIN;
  static constexpr SubType SubType_MAX =
    CosRspMsg_SubType_SubType_MAX;
  static constexpr int SubType_ARRAYSIZE =
    CosRspMsg_SubType_SubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubType_descriptor() {
    return CosRspMsg_SubType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubType_Name.");
    return CosRspMsg_SubType_Name(enum_t_value);
  }
  static inline bool SubType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubType* value) {
    return CosRspMsg_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetmsgFieldNumber = 2,
    kBucketCreateRspBodyFieldNumber = 21,
    kBucketAttrModifyRspBodyFieldNumber = 22,
    kBucketAttrQueryRspBodyFieldNumber = 23,
    kDirCreateRspBodyFieldNumber = 24,
    kObjAttrQueryRspBodyFieldNumber = 25,
    kObjAttrModifyRspBodyFieldNumber = 26,
    kDeleteRspBodyFieldNumber = 27,
    kListRspBodyFieldNumber = 28,
    kAppAttrQueryRspBodyFieldNumber = 29,
    kAppAttrModifyRspBodyFieldNumber = 30,
    kPreviewFileAttrQueryRspBodyFieldNumber = 31,
    kObjModTimeStampRspBodyFieldNumber = 32,
    kListMutiobjRspBodyFieldNumber = 33,
    kUnfinObjAttrModifyRspBodyFieldNumber = 34,
    kFileBatchDelRspBodyFieldNumber = 35,
    kListObjVerRspBodyFieldNumber = 36,
    kDelExpireFileRspBodyFieldNumber = 37,
    kFileDelRspBodyFieldNumber = 38,
    kSpObjAttrModifyRspBodyFieldNumber = 39,
    kUploadDelmarkerRspBodyFieldNumber = 40,
    kExpireFileDelVerRspBodyFieldNumber = 41,
    kExpireFileDelNoverRspBodyFieldNumber = 42,
    kSetBucketPriAttrRspBodyFieldNumber = 43,
    kFileDownToCASRspBodyFieldNumber = 44,
    kCasObjAttrModifyRspBodyFieldNumber = 45,
    kCasFileRecoverDelRspBodyFieldNumber = 46,
    kCasObjRestoreErrRspBodyFieldNumber = 47,
    kSpObjAttrQueryRspBodyFieldNumber = 48,
    kObjModStorageTypeRspBodyFieldNumber = 49,
    kSetBucketWebsiteInfoRspBodyFieldNumber = 50,
    kSetCamAttrRspBodyFieldNumber = 51,
    kBucketCamAuthQueryRspBodyFieldNumber = 52,
    kAppCamAuthQueryRspBodyFieldNumber = 53,
    kFileUnfinishAttrQueryRspBodyFieldNumber = 54,
    kReduceLifecycleRspBodyFieldNumber = 55,
    kRetrieveLifecycleRspBodyFieldNumber = 56,
    kSetObjAclRspBodyFieldNumber = 57,
    kGetObjAclRspBodyFieldNumber = 58,
    kSetBucketUinRspBodyFieldNumber = 59,
    kGetBucketUinRspBodyFieldNumber = 60,
    kListDirectRspBodyFieldNumber = 61,
    kCheckObjAclRspBodyFieldNumber = 62,
    kCasObjRestoreFinRspBodyFieldNumber = 63,
    kSetBucketLockRspBodyFieldNumber = 64,
    kGetBucketLockRspBodyFieldNumber = 65,
    kSetBucketInventoryRspBodyFieldNumber = 66,
    kGetBucketInventoryRspBodyFieldNumber = 67,
    kCOSTransToCASRspBodyFieldNumber = 68,
    kSetMigrateRspBodyFieldNumber = 90,
    kDelNoHashFileRspBodyFieldNumber = 91,
    kMigrateFinFileRspBodyFieldNumber = 92,
    kMigrateUnFinFileRspBodyFieldNumber = 93,
    kRetcodeFieldNumber = 1,
    kSubTypeFieldNumber = 10,
  };
  // required string retmsg = 2;
  bool has_retmsg() const;
  private:
  bool _internal_has_retmsg() const;
  public:
  void clear_retmsg();
  const std::string& retmsg() const;
  void set_retmsg(const std::string& value);
  void set_retmsg(std::string&& value);
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  std::string* mutable_retmsg();
  std::string* release_retmsg();
  void set_allocated_retmsg(std::string* retmsg);
  private:
  const std::string& _internal_retmsg() const;
  void _internal_set_retmsg(const std::string& value);
  std::string* _internal_mutable_retmsg();
  public:

  // optional .ClientCos.BucketCreateRsp BucketCreateRsp_body = 21;
  bool has_bucketcreatersp_body() const;
  private:
  bool _internal_has_bucketcreatersp_body() const;
  public:
  void clear_bucketcreatersp_body();
  const ::ClientCos::BucketCreateRsp& bucketcreatersp_body() const;
  ::ClientCos::BucketCreateRsp* release_bucketcreatersp_body();
  ::ClientCos::BucketCreateRsp* mutable_bucketcreatersp_body();
  void set_allocated_bucketcreatersp_body(::ClientCos::BucketCreateRsp* bucketcreatersp_body);
  private:
  const ::ClientCos::BucketCreateRsp& _internal_bucketcreatersp_body() const;
  ::ClientCos::BucketCreateRsp* _internal_mutable_bucketcreatersp_body();
  public:
  void unsafe_arena_set_allocated_bucketcreatersp_body(
      ::ClientCos::BucketCreateRsp* bucketcreatersp_body);
  ::ClientCos::BucketCreateRsp* unsafe_arena_release_bucketcreatersp_body();

  // optional .ClientCos.BucketAttrModifyRsp BucketAttrModifyRsp_body = 22;
  bool has_bucketattrmodifyrsp_body() const;
  private:
  bool _internal_has_bucketattrmodifyrsp_body() const;
  public:
  void clear_bucketattrmodifyrsp_body();
  const ::ClientCos::BucketAttrModifyRsp& bucketattrmodifyrsp_body() const;
  ::ClientCos::BucketAttrModifyRsp* release_bucketattrmodifyrsp_body();
  ::ClientCos::BucketAttrModifyRsp* mutable_bucketattrmodifyrsp_body();
  void set_allocated_bucketattrmodifyrsp_body(::ClientCos::BucketAttrModifyRsp* bucketattrmodifyrsp_body);
  private:
  const ::ClientCos::BucketAttrModifyRsp& _internal_bucketattrmodifyrsp_body() const;
  ::ClientCos::BucketAttrModifyRsp* _internal_mutable_bucketattrmodifyrsp_body();
  public:
  void unsafe_arena_set_allocated_bucketattrmodifyrsp_body(
      ::ClientCos::BucketAttrModifyRsp* bucketattrmodifyrsp_body);
  ::ClientCos::BucketAttrModifyRsp* unsafe_arena_release_bucketattrmodifyrsp_body();

  // optional .ClientCos.BucketAttrQueryRsp BucketAttrQueryRsp_body = 23;
  bool has_bucketattrqueryrsp_body() const;
  private:
  bool _internal_has_bucketattrqueryrsp_body() const;
  public:
  void clear_bucketattrqueryrsp_body();
  const ::ClientCos::BucketAttrQueryRsp& bucketattrqueryrsp_body() const;
  ::ClientCos::BucketAttrQueryRsp* release_bucketattrqueryrsp_body();
  ::ClientCos::BucketAttrQueryRsp* mutable_bucketattrqueryrsp_body();
  void set_allocated_bucketattrqueryrsp_body(::ClientCos::BucketAttrQueryRsp* bucketattrqueryrsp_body);
  private:
  const ::ClientCos::BucketAttrQueryRsp& _internal_bucketattrqueryrsp_body() const;
  ::ClientCos::BucketAttrQueryRsp* _internal_mutable_bucketattrqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_bucketattrqueryrsp_body(
      ::ClientCos::BucketAttrQueryRsp* bucketattrqueryrsp_body);
  ::ClientCos::BucketAttrQueryRsp* unsafe_arena_release_bucketattrqueryrsp_body();

  // optional .ClientCos.DirCreateRsp DirCreateRsp_body = 24;
  bool has_dircreatersp_body() const;
  private:
  bool _internal_has_dircreatersp_body() const;
  public:
  void clear_dircreatersp_body();
  const ::ClientCos::DirCreateRsp& dircreatersp_body() const;
  ::ClientCos::DirCreateRsp* release_dircreatersp_body();
  ::ClientCos::DirCreateRsp* mutable_dircreatersp_body();
  void set_allocated_dircreatersp_body(::ClientCos::DirCreateRsp* dircreatersp_body);
  private:
  const ::ClientCos::DirCreateRsp& _internal_dircreatersp_body() const;
  ::ClientCos::DirCreateRsp* _internal_mutable_dircreatersp_body();
  public:
  void unsafe_arena_set_allocated_dircreatersp_body(
      ::ClientCos::DirCreateRsp* dircreatersp_body);
  ::ClientCos::DirCreateRsp* unsafe_arena_release_dircreatersp_body();

  // optional .ClientCos.ObjAttrQueryRsp ObjAttrQueryRsp_body = 25;
  bool has_objattrqueryrsp_body() const;
  private:
  bool _internal_has_objattrqueryrsp_body() const;
  public:
  void clear_objattrqueryrsp_body();
  const ::ClientCos::ObjAttrQueryRsp& objattrqueryrsp_body() const;
  ::ClientCos::ObjAttrQueryRsp* release_objattrqueryrsp_body();
  ::ClientCos::ObjAttrQueryRsp* mutable_objattrqueryrsp_body();
  void set_allocated_objattrqueryrsp_body(::ClientCos::ObjAttrQueryRsp* objattrqueryrsp_body);
  private:
  const ::ClientCos::ObjAttrQueryRsp& _internal_objattrqueryrsp_body() const;
  ::ClientCos::ObjAttrQueryRsp* _internal_mutable_objattrqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_objattrqueryrsp_body(
      ::ClientCos::ObjAttrQueryRsp* objattrqueryrsp_body);
  ::ClientCos::ObjAttrQueryRsp* unsafe_arena_release_objattrqueryrsp_body();

  // optional .ClientCos.ObjAttrModifyRsp ObjAttrModifyRsp_body = 26;
  bool has_objattrmodifyrsp_body() const;
  private:
  bool _internal_has_objattrmodifyrsp_body() const;
  public:
  void clear_objattrmodifyrsp_body();
  const ::ClientCos::ObjAttrModifyRsp& objattrmodifyrsp_body() const;
  ::ClientCos::ObjAttrModifyRsp* release_objattrmodifyrsp_body();
  ::ClientCos::ObjAttrModifyRsp* mutable_objattrmodifyrsp_body();
  void set_allocated_objattrmodifyrsp_body(::ClientCos::ObjAttrModifyRsp* objattrmodifyrsp_body);
  private:
  const ::ClientCos::ObjAttrModifyRsp& _internal_objattrmodifyrsp_body() const;
  ::ClientCos::ObjAttrModifyRsp* _internal_mutable_objattrmodifyrsp_body();
  public:
  void unsafe_arena_set_allocated_objattrmodifyrsp_body(
      ::ClientCos::ObjAttrModifyRsp* objattrmodifyrsp_body);
  ::ClientCos::ObjAttrModifyRsp* unsafe_arena_release_objattrmodifyrsp_body();

  // optional .ClientCos.DeleteRsp DeleteRsp_body = 27;
  bool has_deletersp_body() const;
  private:
  bool _internal_has_deletersp_body() const;
  public:
  void clear_deletersp_body();
  const ::ClientCos::DeleteRsp& deletersp_body() const;
  ::ClientCos::DeleteRsp* release_deletersp_body();
  ::ClientCos::DeleteRsp* mutable_deletersp_body();
  void set_allocated_deletersp_body(::ClientCos::DeleteRsp* deletersp_body);
  private:
  const ::ClientCos::DeleteRsp& _internal_deletersp_body() const;
  ::ClientCos::DeleteRsp* _internal_mutable_deletersp_body();
  public:
  void unsafe_arena_set_allocated_deletersp_body(
      ::ClientCos::DeleteRsp* deletersp_body);
  ::ClientCos::DeleteRsp* unsafe_arena_release_deletersp_body();

  // optional .ClientCos.ListRsp ListRsp_body = 28;
  bool has_listrsp_body() const;
  private:
  bool _internal_has_listrsp_body() const;
  public:
  void clear_listrsp_body();
  const ::ClientCos::ListRsp& listrsp_body() const;
  ::ClientCos::ListRsp* release_listrsp_body();
  ::ClientCos::ListRsp* mutable_listrsp_body();
  void set_allocated_listrsp_body(::ClientCos::ListRsp* listrsp_body);
  private:
  const ::ClientCos::ListRsp& _internal_listrsp_body() const;
  ::ClientCos::ListRsp* _internal_mutable_listrsp_body();
  public:
  void unsafe_arena_set_allocated_listrsp_body(
      ::ClientCos::ListRsp* listrsp_body);
  ::ClientCos::ListRsp* unsafe_arena_release_listrsp_body();

  // optional .ClientCos.AppAttrQueryRsp AppAttrQueryRsp_body = 29;
  bool has_appattrqueryrsp_body() const;
  private:
  bool _internal_has_appattrqueryrsp_body() const;
  public:
  void clear_appattrqueryrsp_body();
  const ::ClientCos::AppAttrQueryRsp& appattrqueryrsp_body() const;
  ::ClientCos::AppAttrQueryRsp* release_appattrqueryrsp_body();
  ::ClientCos::AppAttrQueryRsp* mutable_appattrqueryrsp_body();
  void set_allocated_appattrqueryrsp_body(::ClientCos::AppAttrQueryRsp* appattrqueryrsp_body);
  private:
  const ::ClientCos::AppAttrQueryRsp& _internal_appattrqueryrsp_body() const;
  ::ClientCos::AppAttrQueryRsp* _internal_mutable_appattrqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_appattrqueryrsp_body(
      ::ClientCos::AppAttrQueryRsp* appattrqueryrsp_body);
  ::ClientCos::AppAttrQueryRsp* unsafe_arena_release_appattrqueryrsp_body();

  // optional .ClientCos.AppAttrModifyRsp AppAttrModifyRsp_body = 30;
  bool has_appattrmodifyrsp_body() const;
  private:
  bool _internal_has_appattrmodifyrsp_body() const;
  public:
  void clear_appattrmodifyrsp_body();
  const ::ClientCos::AppAttrModifyRsp& appattrmodifyrsp_body() const;
  ::ClientCos::AppAttrModifyRsp* release_appattrmodifyrsp_body();
  ::ClientCos::AppAttrModifyRsp* mutable_appattrmodifyrsp_body();
  void set_allocated_appattrmodifyrsp_body(::ClientCos::AppAttrModifyRsp* appattrmodifyrsp_body);
  private:
  const ::ClientCos::AppAttrModifyRsp& _internal_appattrmodifyrsp_body() const;
  ::ClientCos::AppAttrModifyRsp* _internal_mutable_appattrmodifyrsp_body();
  public:
  void unsafe_arena_set_allocated_appattrmodifyrsp_body(
      ::ClientCos::AppAttrModifyRsp* appattrmodifyrsp_body);
  ::ClientCos::AppAttrModifyRsp* unsafe_arena_release_appattrmodifyrsp_body();

  // optional .ClientCos.PreviewFileAttrQueryRsp PreviewFileAttrQueryRsp_body = 31;
  bool has_previewfileattrqueryrsp_body() const;
  private:
  bool _internal_has_previewfileattrqueryrsp_body() const;
  public:
  void clear_previewfileattrqueryrsp_body();
  const ::ClientCos::PreviewFileAttrQueryRsp& previewfileattrqueryrsp_body() const;
  ::ClientCos::PreviewFileAttrQueryRsp* release_previewfileattrqueryrsp_body();
  ::ClientCos::PreviewFileAttrQueryRsp* mutable_previewfileattrqueryrsp_body();
  void set_allocated_previewfileattrqueryrsp_body(::ClientCos::PreviewFileAttrQueryRsp* previewfileattrqueryrsp_body);
  private:
  const ::ClientCos::PreviewFileAttrQueryRsp& _internal_previewfileattrqueryrsp_body() const;
  ::ClientCos::PreviewFileAttrQueryRsp* _internal_mutable_previewfileattrqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_previewfileattrqueryrsp_body(
      ::ClientCos::PreviewFileAttrQueryRsp* previewfileattrqueryrsp_body);
  ::ClientCos::PreviewFileAttrQueryRsp* unsafe_arena_release_previewfileattrqueryrsp_body();

  // optional .ClientCos.ObjModTimeStampRsp ObjModTimeStampRsp_body = 32;
  bool has_objmodtimestamprsp_body() const;
  private:
  bool _internal_has_objmodtimestamprsp_body() const;
  public:
  void clear_objmodtimestamprsp_body();
  const ::ClientCos::ObjModTimeStampRsp& objmodtimestamprsp_body() const;
  ::ClientCos::ObjModTimeStampRsp* release_objmodtimestamprsp_body();
  ::ClientCos::ObjModTimeStampRsp* mutable_objmodtimestamprsp_body();
  void set_allocated_objmodtimestamprsp_body(::ClientCos::ObjModTimeStampRsp* objmodtimestamprsp_body);
  private:
  const ::ClientCos::ObjModTimeStampRsp& _internal_objmodtimestamprsp_body() const;
  ::ClientCos::ObjModTimeStampRsp* _internal_mutable_objmodtimestamprsp_body();
  public:
  void unsafe_arena_set_allocated_objmodtimestamprsp_body(
      ::ClientCos::ObjModTimeStampRsp* objmodtimestamprsp_body);
  ::ClientCos::ObjModTimeStampRsp* unsafe_arena_release_objmodtimestamprsp_body();

  // optional .ClientCos.ListMutiobjRsp ListMutiobjRsp_body = 33;
  bool has_listmutiobjrsp_body() const;
  private:
  bool _internal_has_listmutiobjrsp_body() const;
  public:
  void clear_listmutiobjrsp_body();
  const ::ClientCos::ListMutiobjRsp& listmutiobjrsp_body() const;
  ::ClientCos::ListMutiobjRsp* release_listmutiobjrsp_body();
  ::ClientCos::ListMutiobjRsp* mutable_listmutiobjrsp_body();
  void set_allocated_listmutiobjrsp_body(::ClientCos::ListMutiobjRsp* listmutiobjrsp_body);
  private:
  const ::ClientCos::ListMutiobjRsp& _internal_listmutiobjrsp_body() const;
  ::ClientCos::ListMutiobjRsp* _internal_mutable_listmutiobjrsp_body();
  public:
  void unsafe_arena_set_allocated_listmutiobjrsp_body(
      ::ClientCos::ListMutiobjRsp* listmutiobjrsp_body);
  ::ClientCos::ListMutiobjRsp* unsafe_arena_release_listmutiobjrsp_body();

  // optional .ClientCos.UnfinObjAttrModifyRsp UnfinObjAttrModifyRsp_body = 34;
  bool has_unfinobjattrmodifyrsp_body() const;
  private:
  bool _internal_has_unfinobjattrmodifyrsp_body() const;
  public:
  void clear_unfinobjattrmodifyrsp_body();
  const ::ClientCos::UnfinObjAttrModifyRsp& unfinobjattrmodifyrsp_body() const;
  ::ClientCos::UnfinObjAttrModifyRsp* release_unfinobjattrmodifyrsp_body();
  ::ClientCos::UnfinObjAttrModifyRsp* mutable_unfinobjattrmodifyrsp_body();
  void set_allocated_unfinobjattrmodifyrsp_body(::ClientCos::UnfinObjAttrModifyRsp* unfinobjattrmodifyrsp_body);
  private:
  const ::ClientCos::UnfinObjAttrModifyRsp& _internal_unfinobjattrmodifyrsp_body() const;
  ::ClientCos::UnfinObjAttrModifyRsp* _internal_mutable_unfinobjattrmodifyrsp_body();
  public:
  void unsafe_arena_set_allocated_unfinobjattrmodifyrsp_body(
      ::ClientCos::UnfinObjAttrModifyRsp* unfinobjattrmodifyrsp_body);
  ::ClientCos::UnfinObjAttrModifyRsp* unsafe_arena_release_unfinobjattrmodifyrsp_body();

  // optional .ClientCos.FileBatchDelRsp FileBatchDelRsp_body = 35;
  bool has_filebatchdelrsp_body() const;
  private:
  bool _internal_has_filebatchdelrsp_body() const;
  public:
  void clear_filebatchdelrsp_body();
  const ::ClientCos::FileBatchDelRsp& filebatchdelrsp_body() const;
  ::ClientCos::FileBatchDelRsp* release_filebatchdelrsp_body();
  ::ClientCos::FileBatchDelRsp* mutable_filebatchdelrsp_body();
  void set_allocated_filebatchdelrsp_body(::ClientCos::FileBatchDelRsp* filebatchdelrsp_body);
  private:
  const ::ClientCos::FileBatchDelRsp& _internal_filebatchdelrsp_body() const;
  ::ClientCos::FileBatchDelRsp* _internal_mutable_filebatchdelrsp_body();
  public:
  void unsafe_arena_set_allocated_filebatchdelrsp_body(
      ::ClientCos::FileBatchDelRsp* filebatchdelrsp_body);
  ::ClientCos::FileBatchDelRsp* unsafe_arena_release_filebatchdelrsp_body();

  // optional .ClientCos.ListObjVerRsp ListObjVerRsp_body = 36;
  bool has_listobjverrsp_body() const;
  private:
  bool _internal_has_listobjverrsp_body() const;
  public:
  void clear_listobjverrsp_body();
  const ::ClientCos::ListObjVerRsp& listobjverrsp_body() const;
  ::ClientCos::ListObjVerRsp* release_listobjverrsp_body();
  ::ClientCos::ListObjVerRsp* mutable_listobjverrsp_body();
  void set_allocated_listobjverrsp_body(::ClientCos::ListObjVerRsp* listobjverrsp_body);
  private:
  const ::ClientCos::ListObjVerRsp& _internal_listobjverrsp_body() const;
  ::ClientCos::ListObjVerRsp* _internal_mutable_listobjverrsp_body();
  public:
  void unsafe_arena_set_allocated_listobjverrsp_body(
      ::ClientCos::ListObjVerRsp* listobjverrsp_body);
  ::ClientCos::ListObjVerRsp* unsafe_arena_release_listobjverrsp_body();

  // optional .ClientCos.DelExpireFileRsp DelExpireFileRsp_body = 37;
  bool has_delexpirefilersp_body() const;
  private:
  bool _internal_has_delexpirefilersp_body() const;
  public:
  void clear_delexpirefilersp_body();
  const ::ClientCos::DelExpireFileRsp& delexpirefilersp_body() const;
  ::ClientCos::DelExpireFileRsp* release_delexpirefilersp_body();
  ::ClientCos::DelExpireFileRsp* mutable_delexpirefilersp_body();
  void set_allocated_delexpirefilersp_body(::ClientCos::DelExpireFileRsp* delexpirefilersp_body);
  private:
  const ::ClientCos::DelExpireFileRsp& _internal_delexpirefilersp_body() const;
  ::ClientCos::DelExpireFileRsp* _internal_mutable_delexpirefilersp_body();
  public:
  void unsafe_arena_set_allocated_delexpirefilersp_body(
      ::ClientCos::DelExpireFileRsp* delexpirefilersp_body);
  ::ClientCos::DelExpireFileRsp* unsafe_arena_release_delexpirefilersp_body();

  // optional .ClientCos.FileDelRsp FileDelRsp_body = 38;
  bool has_filedelrsp_body() const;
  private:
  bool _internal_has_filedelrsp_body() const;
  public:
  void clear_filedelrsp_body();
  const ::ClientCos::FileDelRsp& filedelrsp_body() const;
  ::ClientCos::FileDelRsp* release_filedelrsp_body();
  ::ClientCos::FileDelRsp* mutable_filedelrsp_body();
  void set_allocated_filedelrsp_body(::ClientCos::FileDelRsp* filedelrsp_body);
  private:
  const ::ClientCos::FileDelRsp& _internal_filedelrsp_body() const;
  ::ClientCos::FileDelRsp* _internal_mutable_filedelrsp_body();
  public:
  void unsafe_arena_set_allocated_filedelrsp_body(
      ::ClientCos::FileDelRsp* filedelrsp_body);
  ::ClientCos::FileDelRsp* unsafe_arena_release_filedelrsp_body();

  // optional .ClientCos.SpObjAttrModifyRsp SpObjAttrModifyRsp_body = 39;
  bool has_spobjattrmodifyrsp_body() const;
  private:
  bool _internal_has_spobjattrmodifyrsp_body() const;
  public:
  void clear_spobjattrmodifyrsp_body();
  const ::ClientCos::SpObjAttrModifyRsp& spobjattrmodifyrsp_body() const;
  ::ClientCos::SpObjAttrModifyRsp* release_spobjattrmodifyrsp_body();
  ::ClientCos::SpObjAttrModifyRsp* mutable_spobjattrmodifyrsp_body();
  void set_allocated_spobjattrmodifyrsp_body(::ClientCos::SpObjAttrModifyRsp* spobjattrmodifyrsp_body);
  private:
  const ::ClientCos::SpObjAttrModifyRsp& _internal_spobjattrmodifyrsp_body() const;
  ::ClientCos::SpObjAttrModifyRsp* _internal_mutable_spobjattrmodifyrsp_body();
  public:
  void unsafe_arena_set_allocated_spobjattrmodifyrsp_body(
      ::ClientCos::SpObjAttrModifyRsp* spobjattrmodifyrsp_body);
  ::ClientCos::SpObjAttrModifyRsp* unsafe_arena_release_spobjattrmodifyrsp_body();

  // optional .ClientCos.UploadDelmarkerRsp UploadDelmarkerRsp_body = 40;
  bool has_uploaddelmarkerrsp_body() const;
  private:
  bool _internal_has_uploaddelmarkerrsp_body() const;
  public:
  void clear_uploaddelmarkerrsp_body();
  const ::ClientCos::UploadDelmarkerRsp& uploaddelmarkerrsp_body() const;
  ::ClientCos::UploadDelmarkerRsp* release_uploaddelmarkerrsp_body();
  ::ClientCos::UploadDelmarkerRsp* mutable_uploaddelmarkerrsp_body();
  void set_allocated_uploaddelmarkerrsp_body(::ClientCos::UploadDelmarkerRsp* uploaddelmarkerrsp_body);
  private:
  const ::ClientCos::UploadDelmarkerRsp& _internal_uploaddelmarkerrsp_body() const;
  ::ClientCos::UploadDelmarkerRsp* _internal_mutable_uploaddelmarkerrsp_body();
  public:
  void unsafe_arena_set_allocated_uploaddelmarkerrsp_body(
      ::ClientCos::UploadDelmarkerRsp* uploaddelmarkerrsp_body);
  ::ClientCos::UploadDelmarkerRsp* unsafe_arena_release_uploaddelmarkerrsp_body();

  // optional .ClientCos.ExpireFileDelVerRsp ExpireFileDelVerRsp_body = 41;
  bool has_expirefiledelverrsp_body() const;
  private:
  bool _internal_has_expirefiledelverrsp_body() const;
  public:
  void clear_expirefiledelverrsp_body();
  const ::ClientCos::ExpireFileDelVerRsp& expirefiledelverrsp_body() const;
  ::ClientCos::ExpireFileDelVerRsp* release_expirefiledelverrsp_body();
  ::ClientCos::ExpireFileDelVerRsp* mutable_expirefiledelverrsp_body();
  void set_allocated_expirefiledelverrsp_body(::ClientCos::ExpireFileDelVerRsp* expirefiledelverrsp_body);
  private:
  const ::ClientCos::ExpireFileDelVerRsp& _internal_expirefiledelverrsp_body() const;
  ::ClientCos::ExpireFileDelVerRsp* _internal_mutable_expirefiledelverrsp_body();
  public:
  void unsafe_arena_set_allocated_expirefiledelverrsp_body(
      ::ClientCos::ExpireFileDelVerRsp* expirefiledelverrsp_body);
  ::ClientCos::ExpireFileDelVerRsp* unsafe_arena_release_expirefiledelverrsp_body();

  // optional .ClientCos.ExpireFileDelNoverRsp ExpireFileDelNoverRsp_body = 42;
  bool has_expirefiledelnoverrsp_body() const;
  private:
  bool _internal_has_expirefiledelnoverrsp_body() const;
  public:
  void clear_expirefiledelnoverrsp_body();
  const ::ClientCos::ExpireFileDelNoverRsp& expirefiledelnoverrsp_body() const;
  ::ClientCos::ExpireFileDelNoverRsp* release_expirefiledelnoverrsp_body();
  ::ClientCos::ExpireFileDelNoverRsp* mutable_expirefiledelnoverrsp_body();
  void set_allocated_expirefiledelnoverrsp_body(::ClientCos::ExpireFileDelNoverRsp* expirefiledelnoverrsp_body);
  private:
  const ::ClientCos::ExpireFileDelNoverRsp& _internal_expirefiledelnoverrsp_body() const;
  ::ClientCos::ExpireFileDelNoverRsp* _internal_mutable_expirefiledelnoverrsp_body();
  public:
  void unsafe_arena_set_allocated_expirefiledelnoverrsp_body(
      ::ClientCos::ExpireFileDelNoverRsp* expirefiledelnoverrsp_body);
  ::ClientCos::ExpireFileDelNoverRsp* unsafe_arena_release_expirefiledelnoverrsp_body();

  // optional .ClientCos.SetBucketPriAttrRsp SetBucketPriAttrRsp_body = 43;
  bool has_setbucketpriattrrsp_body() const;
  private:
  bool _internal_has_setbucketpriattrrsp_body() const;
  public:
  void clear_setbucketpriattrrsp_body();
  const ::ClientCos::SetBucketPriAttrRsp& setbucketpriattrrsp_body() const;
  ::ClientCos::SetBucketPriAttrRsp* release_setbucketpriattrrsp_body();
  ::ClientCos::SetBucketPriAttrRsp* mutable_setbucketpriattrrsp_body();
  void set_allocated_setbucketpriattrrsp_body(::ClientCos::SetBucketPriAttrRsp* setbucketpriattrrsp_body);
  private:
  const ::ClientCos::SetBucketPriAttrRsp& _internal_setbucketpriattrrsp_body() const;
  ::ClientCos::SetBucketPriAttrRsp* _internal_mutable_setbucketpriattrrsp_body();
  public:
  void unsafe_arena_set_allocated_setbucketpriattrrsp_body(
      ::ClientCos::SetBucketPriAttrRsp* setbucketpriattrrsp_body);
  ::ClientCos::SetBucketPriAttrRsp* unsafe_arena_release_setbucketpriattrrsp_body();

  // optional .ClientCos.FileDownToCASRsp FileDownToCASRsp_body = 44;
  bool has_filedowntocasrsp_body() const;
  private:
  bool _internal_has_filedowntocasrsp_body() const;
  public:
  void clear_filedowntocasrsp_body();
  const ::ClientCos::FileDownToCASRsp& filedowntocasrsp_body() const;
  ::ClientCos::FileDownToCASRsp* release_filedowntocasrsp_body();
  ::ClientCos::FileDownToCASRsp* mutable_filedowntocasrsp_body();
  void set_allocated_filedowntocasrsp_body(::ClientCos::FileDownToCASRsp* filedowntocasrsp_body);
  private:
  const ::ClientCos::FileDownToCASRsp& _internal_filedowntocasrsp_body() const;
  ::ClientCos::FileDownToCASRsp* _internal_mutable_filedowntocasrsp_body();
  public:
  void unsafe_arena_set_allocated_filedowntocasrsp_body(
      ::ClientCos::FileDownToCASRsp* filedowntocasrsp_body);
  ::ClientCos::FileDownToCASRsp* unsafe_arena_release_filedowntocasrsp_body();

  // optional .ClientCos.CasObjAttrModifyRsp CasObjAttrModifyRsp_body = 45;
  bool has_casobjattrmodifyrsp_body() const;
  private:
  bool _internal_has_casobjattrmodifyrsp_body() const;
  public:
  void clear_casobjattrmodifyrsp_body();
  const ::ClientCos::CasObjAttrModifyRsp& casobjattrmodifyrsp_body() const;
  ::ClientCos::CasObjAttrModifyRsp* release_casobjattrmodifyrsp_body();
  ::ClientCos::CasObjAttrModifyRsp* mutable_casobjattrmodifyrsp_body();
  void set_allocated_casobjattrmodifyrsp_body(::ClientCos::CasObjAttrModifyRsp* casobjattrmodifyrsp_body);
  private:
  const ::ClientCos::CasObjAttrModifyRsp& _internal_casobjattrmodifyrsp_body() const;
  ::ClientCos::CasObjAttrModifyRsp* _internal_mutable_casobjattrmodifyrsp_body();
  public:
  void unsafe_arena_set_allocated_casobjattrmodifyrsp_body(
      ::ClientCos::CasObjAttrModifyRsp* casobjattrmodifyrsp_body);
  ::ClientCos::CasObjAttrModifyRsp* unsafe_arena_release_casobjattrmodifyrsp_body();

  // optional .ClientCos.CasFileRecoverDelRsp CasFileRecoverDelRsp_body = 46;
  bool has_casfilerecoverdelrsp_body() const;
  private:
  bool _internal_has_casfilerecoverdelrsp_body() const;
  public:
  void clear_casfilerecoverdelrsp_body();
  const ::ClientCos::CasFileRecoverDelRsp& casfilerecoverdelrsp_body() const;
  ::ClientCos::CasFileRecoverDelRsp* release_casfilerecoverdelrsp_body();
  ::ClientCos::CasFileRecoverDelRsp* mutable_casfilerecoverdelrsp_body();
  void set_allocated_casfilerecoverdelrsp_body(::ClientCos::CasFileRecoverDelRsp* casfilerecoverdelrsp_body);
  private:
  const ::ClientCos::CasFileRecoverDelRsp& _internal_casfilerecoverdelrsp_body() const;
  ::ClientCos::CasFileRecoverDelRsp* _internal_mutable_casfilerecoverdelrsp_body();
  public:
  void unsafe_arena_set_allocated_casfilerecoverdelrsp_body(
      ::ClientCos::CasFileRecoverDelRsp* casfilerecoverdelrsp_body);
  ::ClientCos::CasFileRecoverDelRsp* unsafe_arena_release_casfilerecoverdelrsp_body();

  // optional .ClientCos.CasObjRestoreErrRsp CasObjRestoreErrRsp_body = 47;
  bool has_casobjrestoreerrrsp_body() const;
  private:
  bool _internal_has_casobjrestoreerrrsp_body() const;
  public:
  void clear_casobjrestoreerrrsp_body();
  const ::ClientCos::CasObjRestoreErrRsp& casobjrestoreerrrsp_body() const;
  ::ClientCos::CasObjRestoreErrRsp* release_casobjrestoreerrrsp_body();
  ::ClientCos::CasObjRestoreErrRsp* mutable_casobjrestoreerrrsp_body();
  void set_allocated_casobjrestoreerrrsp_body(::ClientCos::CasObjRestoreErrRsp* casobjrestoreerrrsp_body);
  private:
  const ::ClientCos::CasObjRestoreErrRsp& _internal_casobjrestoreerrrsp_body() const;
  ::ClientCos::CasObjRestoreErrRsp* _internal_mutable_casobjrestoreerrrsp_body();
  public:
  void unsafe_arena_set_allocated_casobjrestoreerrrsp_body(
      ::ClientCos::CasObjRestoreErrRsp* casobjrestoreerrrsp_body);
  ::ClientCos::CasObjRestoreErrRsp* unsafe_arena_release_casobjrestoreerrrsp_body();

  // optional .ClientCos.SpObjAttrQueryRsp SpObjAttrQueryRsp_body = 48;
  bool has_spobjattrqueryrsp_body() const;
  private:
  bool _internal_has_spobjattrqueryrsp_body() const;
  public:
  void clear_spobjattrqueryrsp_body();
  const ::ClientCos::SpObjAttrQueryRsp& spobjattrqueryrsp_body() const;
  ::ClientCos::SpObjAttrQueryRsp* release_spobjattrqueryrsp_body();
  ::ClientCos::SpObjAttrQueryRsp* mutable_spobjattrqueryrsp_body();
  void set_allocated_spobjattrqueryrsp_body(::ClientCos::SpObjAttrQueryRsp* spobjattrqueryrsp_body);
  private:
  const ::ClientCos::SpObjAttrQueryRsp& _internal_spobjattrqueryrsp_body() const;
  ::ClientCos::SpObjAttrQueryRsp* _internal_mutable_spobjattrqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_spobjattrqueryrsp_body(
      ::ClientCos::SpObjAttrQueryRsp* spobjattrqueryrsp_body);
  ::ClientCos::SpObjAttrQueryRsp* unsafe_arena_release_spobjattrqueryrsp_body();

  // optional .ClientCos.ObjModStorageTypeRsp ObjModStorageTypeRsp_body = 49;
  bool has_objmodstoragetypersp_body() const;
  private:
  bool _internal_has_objmodstoragetypersp_body() const;
  public:
  void clear_objmodstoragetypersp_body();
  const ::ClientCos::ObjModStorageTypeRsp& objmodstoragetypersp_body() const;
  ::ClientCos::ObjModStorageTypeRsp* release_objmodstoragetypersp_body();
  ::ClientCos::ObjModStorageTypeRsp* mutable_objmodstoragetypersp_body();
  void set_allocated_objmodstoragetypersp_body(::ClientCos::ObjModStorageTypeRsp* objmodstoragetypersp_body);
  private:
  const ::ClientCos::ObjModStorageTypeRsp& _internal_objmodstoragetypersp_body() const;
  ::ClientCos::ObjModStorageTypeRsp* _internal_mutable_objmodstoragetypersp_body();
  public:
  void unsafe_arena_set_allocated_objmodstoragetypersp_body(
      ::ClientCos::ObjModStorageTypeRsp* objmodstoragetypersp_body);
  ::ClientCos::ObjModStorageTypeRsp* unsafe_arena_release_objmodstoragetypersp_body();

  // optional .ClientCos.SetBucketWebsiteInfoRsp SetBucketWebsiteInfoRsp_body = 50;
  bool has_setbucketwebsiteinforsp_body() const;
  private:
  bool _internal_has_setbucketwebsiteinforsp_body() const;
  public:
  void clear_setbucketwebsiteinforsp_body();
  const ::ClientCos::SetBucketWebsiteInfoRsp& setbucketwebsiteinforsp_body() const;
  ::ClientCos::SetBucketWebsiteInfoRsp* release_setbucketwebsiteinforsp_body();
  ::ClientCos::SetBucketWebsiteInfoRsp* mutable_setbucketwebsiteinforsp_body();
  void set_allocated_setbucketwebsiteinforsp_body(::ClientCos::SetBucketWebsiteInfoRsp* setbucketwebsiteinforsp_body);
  private:
  const ::ClientCos::SetBucketWebsiteInfoRsp& _internal_setbucketwebsiteinforsp_body() const;
  ::ClientCos::SetBucketWebsiteInfoRsp* _internal_mutable_setbucketwebsiteinforsp_body();
  public:
  void unsafe_arena_set_allocated_setbucketwebsiteinforsp_body(
      ::ClientCos::SetBucketWebsiteInfoRsp* setbucketwebsiteinforsp_body);
  ::ClientCos::SetBucketWebsiteInfoRsp* unsafe_arena_release_setbucketwebsiteinforsp_body();

  // optional .ClientCos.SetCamAttrRsp SetCamAttrRsp_body = 51;
  bool has_setcamattrrsp_body() const;
  private:
  bool _internal_has_setcamattrrsp_body() const;
  public:
  void clear_setcamattrrsp_body();
  const ::ClientCos::SetCamAttrRsp& setcamattrrsp_body() const;
  ::ClientCos::SetCamAttrRsp* release_setcamattrrsp_body();
  ::ClientCos::SetCamAttrRsp* mutable_setcamattrrsp_body();
  void set_allocated_setcamattrrsp_body(::ClientCos::SetCamAttrRsp* setcamattrrsp_body);
  private:
  const ::ClientCos::SetCamAttrRsp& _internal_setcamattrrsp_body() const;
  ::ClientCos::SetCamAttrRsp* _internal_mutable_setcamattrrsp_body();
  public:
  void unsafe_arena_set_allocated_setcamattrrsp_body(
      ::ClientCos::SetCamAttrRsp* setcamattrrsp_body);
  ::ClientCos::SetCamAttrRsp* unsafe_arena_release_setcamattrrsp_body();

  // optional .ClientCos.BucketCamAuthQueryRsp BucketCamAuthQueryRsp_body = 52;
  bool has_bucketcamauthqueryrsp_body() const;
  private:
  bool _internal_has_bucketcamauthqueryrsp_body() const;
  public:
  void clear_bucketcamauthqueryrsp_body();
  const ::ClientCos::BucketCamAuthQueryRsp& bucketcamauthqueryrsp_body() const;
  ::ClientCos::BucketCamAuthQueryRsp* release_bucketcamauthqueryrsp_body();
  ::ClientCos::BucketCamAuthQueryRsp* mutable_bucketcamauthqueryrsp_body();
  void set_allocated_bucketcamauthqueryrsp_body(::ClientCos::BucketCamAuthQueryRsp* bucketcamauthqueryrsp_body);
  private:
  const ::ClientCos::BucketCamAuthQueryRsp& _internal_bucketcamauthqueryrsp_body() const;
  ::ClientCos::BucketCamAuthQueryRsp* _internal_mutable_bucketcamauthqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_bucketcamauthqueryrsp_body(
      ::ClientCos::BucketCamAuthQueryRsp* bucketcamauthqueryrsp_body);
  ::ClientCos::BucketCamAuthQueryRsp* unsafe_arena_release_bucketcamauthqueryrsp_body();

  // optional .ClientCos.AppCamAuthQueryRsp AppCamAuthQueryRsp_body = 53;
  bool has_appcamauthqueryrsp_body() const;
  private:
  bool _internal_has_appcamauthqueryrsp_body() const;
  public:
  void clear_appcamauthqueryrsp_body();
  const ::ClientCos::AppCamAuthQueryRsp& appcamauthqueryrsp_body() const;
  ::ClientCos::AppCamAuthQueryRsp* release_appcamauthqueryrsp_body();
  ::ClientCos::AppCamAuthQueryRsp* mutable_appcamauthqueryrsp_body();
  void set_allocated_appcamauthqueryrsp_body(::ClientCos::AppCamAuthQueryRsp* appcamauthqueryrsp_body);
  private:
  const ::ClientCos::AppCamAuthQueryRsp& _internal_appcamauthqueryrsp_body() const;
  ::ClientCos::AppCamAuthQueryRsp* _internal_mutable_appcamauthqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_appcamauthqueryrsp_body(
      ::ClientCos::AppCamAuthQueryRsp* appcamauthqueryrsp_body);
  ::ClientCos::AppCamAuthQueryRsp* unsafe_arena_release_appcamauthqueryrsp_body();

  // optional .ClientCos.FileUnfinishAttrQueryRsp FileUnfinishAttrQueryRsp_body = 54;
  bool has_fileunfinishattrqueryrsp_body() const;
  private:
  bool _internal_has_fileunfinishattrqueryrsp_body() const;
  public:
  void clear_fileunfinishattrqueryrsp_body();
  const ::ClientCos::FileUnfinishAttrQueryRsp& fileunfinishattrqueryrsp_body() const;
  ::ClientCos::FileUnfinishAttrQueryRsp* release_fileunfinishattrqueryrsp_body();
  ::ClientCos::FileUnfinishAttrQueryRsp* mutable_fileunfinishattrqueryrsp_body();
  void set_allocated_fileunfinishattrqueryrsp_body(::ClientCos::FileUnfinishAttrQueryRsp* fileunfinishattrqueryrsp_body);
  private:
  const ::ClientCos::FileUnfinishAttrQueryRsp& _internal_fileunfinishattrqueryrsp_body() const;
  ::ClientCos::FileUnfinishAttrQueryRsp* _internal_mutable_fileunfinishattrqueryrsp_body();
  public:
  void unsafe_arena_set_allocated_fileunfinishattrqueryrsp_body(
      ::ClientCos::FileUnfinishAttrQueryRsp* fileunfinishattrqueryrsp_body);
  ::ClientCos::FileUnfinishAttrQueryRsp* unsafe_arena_release_fileunfinishattrqueryrsp_body();

  // optional .ClientCos.ReduceLifecycleRsp ReduceLifecycleRsp_body = 55;
  bool has_reducelifecyclersp_body() const;
  private:
  bool _internal_has_reducelifecyclersp_body() const;
  public:
  void clear_reducelifecyclersp_body();
  const ::ClientCos::ReduceLifecycleRsp& reducelifecyclersp_body() const;
  ::ClientCos::ReduceLifecycleRsp* release_reducelifecyclersp_body();
  ::ClientCos::ReduceLifecycleRsp* mutable_reducelifecyclersp_body();
  void set_allocated_reducelifecyclersp_body(::ClientCos::ReduceLifecycleRsp* reducelifecyclersp_body);
  private:
  const ::ClientCos::ReduceLifecycleRsp& _internal_reducelifecyclersp_body() const;
  ::ClientCos::ReduceLifecycleRsp* _internal_mutable_reducelifecyclersp_body();
  public:
  void unsafe_arena_set_allocated_reducelifecyclersp_body(
      ::ClientCos::ReduceLifecycleRsp* reducelifecyclersp_body);
  ::ClientCos::ReduceLifecycleRsp* unsafe_arena_release_reducelifecyclersp_body();

  // optional .ClientCos.RetrieveLifecycleRsp RetrieveLifecycleRsp_body = 56;
  bool has_retrievelifecyclersp_body() const;
  private:
  bool _internal_has_retrievelifecyclersp_body() const;
  public:
  void clear_retrievelifecyclersp_body();
  const ::ClientCos::RetrieveLifecycleRsp& retrievelifecyclersp_body() const;
  ::ClientCos::RetrieveLifecycleRsp* release_retrievelifecyclersp_body();
  ::ClientCos::RetrieveLifecycleRsp* mutable_retrievelifecyclersp_body();
  void set_allocated_retrievelifecyclersp_body(::ClientCos::RetrieveLifecycleRsp* retrievelifecyclersp_body);
  private:
  const ::ClientCos::RetrieveLifecycleRsp& _internal_retrievelifecyclersp_body() const;
  ::ClientCos::RetrieveLifecycleRsp* _internal_mutable_retrievelifecyclersp_body();
  public:
  void unsafe_arena_set_allocated_retrievelifecyclersp_body(
      ::ClientCos::RetrieveLifecycleRsp* retrievelifecyclersp_body);
  ::ClientCos::RetrieveLifecycleRsp* unsafe_arena_release_retrievelifecyclersp_body();

  // optional .ClientCos.SetObjAclRsp SetObjAclRsp_body = 57;
  bool has_setobjaclrsp_body() const;
  private:
  bool _internal_has_setobjaclrsp_body() const;
  public:
  void clear_setobjaclrsp_body();
  const ::ClientCos::SetObjAclRsp& setobjaclrsp_body() const;
  ::ClientCos::SetObjAclRsp* release_setobjaclrsp_body();
  ::ClientCos::SetObjAclRsp* mutable_setobjaclrsp_body();
  void set_allocated_setobjaclrsp_body(::ClientCos::SetObjAclRsp* setobjaclrsp_body);
  private:
  const ::ClientCos::SetObjAclRsp& _internal_setobjaclrsp_body() const;
  ::ClientCos::SetObjAclRsp* _internal_mutable_setobjaclrsp_body();
  public:
  void unsafe_arena_set_allocated_setobjaclrsp_body(
      ::ClientCos::SetObjAclRsp* setobjaclrsp_body);
  ::ClientCos::SetObjAclRsp* unsafe_arena_release_setobjaclrsp_body();

  // optional .ClientCos.GetObjAclRsp GetObjAclRsp_body = 58;
  bool has_getobjaclrsp_body() const;
  private:
  bool _internal_has_getobjaclrsp_body() const;
  public:
  void clear_getobjaclrsp_body();
  const ::ClientCos::GetObjAclRsp& getobjaclrsp_body() const;
  ::ClientCos::GetObjAclRsp* release_getobjaclrsp_body();
  ::ClientCos::GetObjAclRsp* mutable_getobjaclrsp_body();
  void set_allocated_getobjaclrsp_body(::ClientCos::GetObjAclRsp* getobjaclrsp_body);
  private:
  const ::ClientCos::GetObjAclRsp& _internal_getobjaclrsp_body() const;
  ::ClientCos::GetObjAclRsp* _internal_mutable_getobjaclrsp_body();
  public:
  void unsafe_arena_set_allocated_getobjaclrsp_body(
      ::ClientCos::GetObjAclRsp* getobjaclrsp_body);
  ::ClientCos::GetObjAclRsp* unsafe_arena_release_getobjaclrsp_body();

  // optional .ClientCos.SetBucketUinRsp SetBucketUinRsp_body = 59;
  bool has_setbucketuinrsp_body() const;
  private:
  bool _internal_has_setbucketuinrsp_body() const;
  public:
  void clear_setbucketuinrsp_body();
  const ::ClientCos::SetBucketUinRsp& setbucketuinrsp_body() const;
  ::ClientCos::SetBucketUinRsp* release_setbucketuinrsp_body();
  ::ClientCos::SetBucketUinRsp* mutable_setbucketuinrsp_body();
  void set_allocated_setbucketuinrsp_body(::ClientCos::SetBucketUinRsp* setbucketuinrsp_body);
  private:
  const ::ClientCos::SetBucketUinRsp& _internal_setbucketuinrsp_body() const;
  ::ClientCos::SetBucketUinRsp* _internal_mutable_setbucketuinrsp_body();
  public:
  void unsafe_arena_set_allocated_setbucketuinrsp_body(
      ::ClientCos::SetBucketUinRsp* setbucketuinrsp_body);
  ::ClientCos::SetBucketUinRsp* unsafe_arena_release_setbucketuinrsp_body();

  // optional .ClientCos.GetBucketUinRsp GetBucketUinRsp_body = 60;
  bool has_getbucketuinrsp_body() const;
  private:
  bool _internal_has_getbucketuinrsp_body() const;
  public:
  void clear_getbucketuinrsp_body();
  const ::ClientCos::GetBucketUinRsp& getbucketuinrsp_body() const;
  ::ClientCos::GetBucketUinRsp* release_getbucketuinrsp_body();
  ::ClientCos::GetBucketUinRsp* mutable_getbucketuinrsp_body();
  void set_allocated_getbucketuinrsp_body(::ClientCos::GetBucketUinRsp* getbucketuinrsp_body);
  private:
  const ::ClientCos::GetBucketUinRsp& _internal_getbucketuinrsp_body() const;
  ::ClientCos::GetBucketUinRsp* _internal_mutable_getbucketuinrsp_body();
  public:
  void unsafe_arena_set_allocated_getbucketuinrsp_body(
      ::ClientCos::GetBucketUinRsp* getbucketuinrsp_body);
  ::ClientCos::GetBucketUinRsp* unsafe_arena_release_getbucketuinrsp_body();

  // optional .ClientCos.ListDirectRsp ListDirectRsp_body = 61;
  bool has_listdirectrsp_body() const;
  private:
  bool _internal_has_listdirectrsp_body() const;
  public:
  void clear_listdirectrsp_body();
  const ::ClientCos::ListDirectRsp& listdirectrsp_body() const;
  ::ClientCos::ListDirectRsp* release_listdirectrsp_body();
  ::ClientCos::ListDirectRsp* mutable_listdirectrsp_body();
  void set_allocated_listdirectrsp_body(::ClientCos::ListDirectRsp* listdirectrsp_body);
  private:
  const ::ClientCos::ListDirectRsp& _internal_listdirectrsp_body() const;
  ::ClientCos::ListDirectRsp* _internal_mutable_listdirectrsp_body();
  public:
  void unsafe_arena_set_allocated_listdirectrsp_body(
      ::ClientCos::ListDirectRsp* listdirectrsp_body);
  ::ClientCos::ListDirectRsp* unsafe_arena_release_listdirectrsp_body();

  // optional .ClientCos.CheckObjAclRsp CheckObjAclRsp_body = 62;
  bool has_checkobjaclrsp_body() const;
  private:
  bool _internal_has_checkobjaclrsp_body() const;
  public:
  void clear_checkobjaclrsp_body();
  const ::ClientCos::CheckObjAclRsp& checkobjaclrsp_body() const;
  ::ClientCos::CheckObjAclRsp* release_checkobjaclrsp_body();
  ::ClientCos::CheckObjAclRsp* mutable_checkobjaclrsp_body();
  void set_allocated_checkobjaclrsp_body(::ClientCos::CheckObjAclRsp* checkobjaclrsp_body);
  private:
  const ::ClientCos::CheckObjAclRsp& _internal_checkobjaclrsp_body() const;
  ::ClientCos::CheckObjAclRsp* _internal_mutable_checkobjaclrsp_body();
  public:
  void unsafe_arena_set_allocated_checkobjaclrsp_body(
      ::ClientCos::CheckObjAclRsp* checkobjaclrsp_body);
  ::ClientCos::CheckObjAclRsp* unsafe_arena_release_checkobjaclrsp_body();

  // optional .ClientCos.CasObjRestoreFinRsp CasObjRestoreFinRsp_body = 63;
  bool has_casobjrestorefinrsp_body() const;
  private:
  bool _internal_has_casobjrestorefinrsp_body() const;
  public:
  void clear_casobjrestorefinrsp_body();
  const ::ClientCos::CasObjRestoreFinRsp& casobjrestorefinrsp_body() const;
  ::ClientCos::CasObjRestoreFinRsp* release_casobjrestorefinrsp_body();
  ::ClientCos::CasObjRestoreFinRsp* mutable_casobjrestorefinrsp_body();
  void set_allocated_casobjrestorefinrsp_body(::ClientCos::CasObjRestoreFinRsp* casobjrestorefinrsp_body);
  private:
  const ::ClientCos::CasObjRestoreFinRsp& _internal_casobjrestorefinrsp_body() const;
  ::ClientCos::CasObjRestoreFinRsp* _internal_mutable_casobjrestorefinrsp_body();
  public:
  void unsafe_arena_set_allocated_casobjrestorefinrsp_body(
      ::ClientCos::CasObjRestoreFinRsp* casobjrestorefinrsp_body);
  ::ClientCos::CasObjRestoreFinRsp* unsafe_arena_release_casobjrestorefinrsp_body();

  // optional .ClientCos.SetBucketLockRsp SetBucketLockRsp_body = 64;
  bool has_setbucketlockrsp_body() const;
  private:
  bool _internal_has_setbucketlockrsp_body() const;
  public:
  void clear_setbucketlockrsp_body();
  const ::ClientCos::SetBucketLockRsp& setbucketlockrsp_body() const;
  ::ClientCos::SetBucketLockRsp* release_setbucketlockrsp_body();
  ::ClientCos::SetBucketLockRsp* mutable_setbucketlockrsp_body();
  void set_allocated_setbucketlockrsp_body(::ClientCos::SetBucketLockRsp* setbucketlockrsp_body);
  private:
  const ::ClientCos::SetBucketLockRsp& _internal_setbucketlockrsp_body() const;
  ::ClientCos::SetBucketLockRsp* _internal_mutable_setbucketlockrsp_body();
  public:
  void unsafe_arena_set_allocated_setbucketlockrsp_body(
      ::ClientCos::SetBucketLockRsp* setbucketlockrsp_body);
  ::ClientCos::SetBucketLockRsp* unsafe_arena_release_setbucketlockrsp_body();

  // optional .ClientCos.GetBucketLockRsp GetBucketLockRsp_body = 65;
  bool has_getbucketlockrsp_body() const;
  private:
  bool _internal_has_getbucketlockrsp_body() const;
  public:
  void clear_getbucketlockrsp_body();
  const ::ClientCos::GetBucketLockRsp& getbucketlockrsp_body() const;
  ::ClientCos::GetBucketLockRsp* release_getbucketlockrsp_body();
  ::ClientCos::GetBucketLockRsp* mutable_getbucketlockrsp_body();
  void set_allocated_getbucketlockrsp_body(::ClientCos::GetBucketLockRsp* getbucketlockrsp_body);
  private:
  const ::ClientCos::GetBucketLockRsp& _internal_getbucketlockrsp_body() const;
  ::ClientCos::GetBucketLockRsp* _internal_mutable_getbucketlockrsp_body();
  public:
  void unsafe_arena_set_allocated_getbucketlockrsp_body(
      ::ClientCos::GetBucketLockRsp* getbucketlockrsp_body);
  ::ClientCos::GetBucketLockRsp* unsafe_arena_release_getbucketlockrsp_body();

  // optional .ClientCos.SetBucketInventoryRsp SetBucketInventoryRsp_body = 66;
  bool has_setbucketinventoryrsp_body() const;
  private:
  bool _internal_has_setbucketinventoryrsp_body() const;
  public:
  void clear_setbucketinventoryrsp_body();
  const ::ClientCos::SetBucketInventoryRsp& setbucketinventoryrsp_body() const;
  ::ClientCos::SetBucketInventoryRsp* release_setbucketinventoryrsp_body();
  ::ClientCos::SetBucketInventoryRsp* mutable_setbucketinventoryrsp_body();
  void set_allocated_setbucketinventoryrsp_body(::ClientCos::SetBucketInventoryRsp* setbucketinventoryrsp_body);
  private:
  const ::ClientCos::SetBucketInventoryRsp& _internal_setbucketinventoryrsp_body() const;
  ::ClientCos::SetBucketInventoryRsp* _internal_mutable_setbucketinventoryrsp_body();
  public:
  void unsafe_arena_set_allocated_setbucketinventoryrsp_body(
      ::ClientCos::SetBucketInventoryRsp* setbucketinventoryrsp_body);
  ::ClientCos::SetBucketInventoryRsp* unsafe_arena_release_setbucketinventoryrsp_body();

  // optional .ClientCos.GetBucketInventoryRsp GetBucketInventoryRsp_body = 67;
  bool has_getbucketinventoryrsp_body() const;
  private:
  bool _internal_has_getbucketinventoryrsp_body() const;
  public:
  void clear_getbucketinventoryrsp_body();
  const ::ClientCos::GetBucketInventoryRsp& getbucketinventoryrsp_body() const;
  ::ClientCos::GetBucketInventoryRsp* release_getbucketinventoryrsp_body();
  ::ClientCos::GetBucketInventoryRsp* mutable_getbucketinventoryrsp_body();
  void set_allocated_getbucketinventoryrsp_body(::ClientCos::GetBucketInventoryRsp* getbucketinventoryrsp_body);
  private:
  const ::ClientCos::GetBucketInventoryRsp& _internal_getbucketinventoryrsp_body() const;
  ::ClientCos::GetBucketInventoryRsp* _internal_mutable_getbucketinventoryrsp_body();
  public:
  void unsafe_arena_set_allocated_getbucketinventoryrsp_body(
      ::ClientCos::GetBucketInventoryRsp* getbucketinventoryrsp_body);
  ::ClientCos::GetBucketInventoryRsp* unsafe_arena_release_getbucketinventoryrsp_body();

  // optional .ClientCos.COSTransToCASRsp COSTransToCASRsp_body = 68;
  bool has_costranstocasrsp_body() const;
  private:
  bool _internal_has_costranstocasrsp_body() const;
  public:
  void clear_costranstocasrsp_body();
  const ::ClientCos::COSTransToCASRsp& costranstocasrsp_body() const;
  ::ClientCos::COSTransToCASRsp* release_costranstocasrsp_body();
  ::ClientCos::COSTransToCASRsp* mutable_costranstocasrsp_body();
  void set_allocated_costranstocasrsp_body(::ClientCos::COSTransToCASRsp* costranstocasrsp_body);
  private:
  const ::ClientCos::COSTransToCASRsp& _internal_costranstocasrsp_body() const;
  ::ClientCos::COSTransToCASRsp* _internal_mutable_costranstocasrsp_body();
  public:
  void unsafe_arena_set_allocated_costranstocasrsp_body(
      ::ClientCos::COSTransToCASRsp* costranstocasrsp_body);
  ::ClientCos::COSTransToCASRsp* unsafe_arena_release_costranstocasrsp_body();

  // optional .ClientCos.SetMigrateRsp SetMigrateRsp_body = 90;
  bool has_setmigratersp_body() const;
  private:
  bool _internal_has_setmigratersp_body() const;
  public:
  void clear_setmigratersp_body();
  const ::ClientCos::SetMigrateRsp& setmigratersp_body() const;
  ::ClientCos::SetMigrateRsp* release_setmigratersp_body();
  ::ClientCos::SetMigrateRsp* mutable_setmigratersp_body();
  void set_allocated_setmigratersp_body(::ClientCos::SetMigrateRsp* setmigratersp_body);
  private:
  const ::ClientCos::SetMigrateRsp& _internal_setmigratersp_body() const;
  ::ClientCos::SetMigrateRsp* _internal_mutable_setmigratersp_body();
  public:
  void unsafe_arena_set_allocated_setmigratersp_body(
      ::ClientCos::SetMigrateRsp* setmigratersp_body);
  ::ClientCos::SetMigrateRsp* unsafe_arena_release_setmigratersp_body();

  // optional .ClientCos.DelNoHashFileRsp DelNoHashFileRsp_body = 91;
  bool has_delnohashfilersp_body() const;
  private:
  bool _internal_has_delnohashfilersp_body() const;
  public:
  void clear_delnohashfilersp_body();
  const ::ClientCos::DelNoHashFileRsp& delnohashfilersp_body() const;
  ::ClientCos::DelNoHashFileRsp* release_delnohashfilersp_body();
  ::ClientCos::DelNoHashFileRsp* mutable_delnohashfilersp_body();
  void set_allocated_delnohashfilersp_body(::ClientCos::DelNoHashFileRsp* delnohashfilersp_body);
  private:
  const ::ClientCos::DelNoHashFileRsp& _internal_delnohashfilersp_body() const;
  ::ClientCos::DelNoHashFileRsp* _internal_mutable_delnohashfilersp_body();
  public:
  void unsafe_arena_set_allocated_delnohashfilersp_body(
      ::ClientCos::DelNoHashFileRsp* delnohashfilersp_body);
  ::ClientCos::DelNoHashFileRsp* unsafe_arena_release_delnohashfilersp_body();

  // optional .ClientCos.MigrateFinFileRsp MigrateFinFileRsp_body = 92;
  bool has_migratefinfilersp_body() const;
  private:
  bool _internal_has_migratefinfilersp_body() const;
  public:
  void clear_migratefinfilersp_body();
  const ::ClientCos::MigrateFinFileRsp& migratefinfilersp_body() const;
  ::ClientCos::MigrateFinFileRsp* release_migratefinfilersp_body();
  ::ClientCos::MigrateFinFileRsp* mutable_migratefinfilersp_body();
  void set_allocated_migratefinfilersp_body(::ClientCos::MigrateFinFileRsp* migratefinfilersp_body);
  private:
  const ::ClientCos::MigrateFinFileRsp& _internal_migratefinfilersp_body() const;
  ::ClientCos::MigrateFinFileRsp* _internal_mutable_migratefinfilersp_body();
  public:
  void unsafe_arena_set_allocated_migratefinfilersp_body(
      ::ClientCos::MigrateFinFileRsp* migratefinfilersp_body);
  ::ClientCos::MigrateFinFileRsp* unsafe_arena_release_migratefinfilersp_body();

  // optional .ClientCos.MigrateUnFinFileRsp MigrateUnFinFileRsp_body = 93;
  bool has_migrateunfinfilersp_body() const;
  private:
  bool _internal_has_migrateunfinfilersp_body() const;
  public:
  void clear_migrateunfinfilersp_body();
  const ::ClientCos::MigrateUnFinFileRsp& migrateunfinfilersp_body() const;
  ::ClientCos::MigrateUnFinFileRsp* release_migrateunfinfilersp_body();
  ::ClientCos::MigrateUnFinFileRsp* mutable_migrateunfinfilersp_body();
  void set_allocated_migrateunfinfilersp_body(::ClientCos::MigrateUnFinFileRsp* migrateunfinfilersp_body);
  private:
  const ::ClientCos::MigrateUnFinFileRsp& _internal_migrateunfinfilersp_body() const;
  ::ClientCos::MigrateUnFinFileRsp* _internal_mutable_migrateunfinfilersp_body();
  public:
  void unsafe_arena_set_allocated_migrateunfinfilersp_body(
      ::ClientCos::MigrateUnFinFileRsp* migrateunfinfilersp_body);
  ::ClientCos::MigrateUnFinFileRsp* unsafe_arena_release_migrateunfinfilersp_body();

  // required int32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::int32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .ClientCos.CosRspMsg.SubType sub_type = 10;
  bool has_sub_type() const;
  private:
  bool _internal_has_sub_type() const;
  public:
  void clear_sub_type();
  ::ClientCos::CosRspMsg_SubType sub_type() const;
  void set_sub_type(::ClientCos::CosRspMsg_SubType value);
  private:
  ::ClientCos::CosRspMsg_SubType _internal_sub_type() const;
  void _internal_set_sub_type(::ClientCos::CosRspMsg_SubType value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CosRspMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retmsg_;
  ::ClientCos::BucketCreateRsp* bucketcreatersp_body_;
  ::ClientCos::BucketAttrModifyRsp* bucketattrmodifyrsp_body_;
  ::ClientCos::BucketAttrQueryRsp* bucketattrqueryrsp_body_;
  ::ClientCos::DirCreateRsp* dircreatersp_body_;
  ::ClientCos::ObjAttrQueryRsp* objattrqueryrsp_body_;
  ::ClientCos::ObjAttrModifyRsp* objattrmodifyrsp_body_;
  ::ClientCos::DeleteRsp* deletersp_body_;
  ::ClientCos::ListRsp* listrsp_body_;
  ::ClientCos::AppAttrQueryRsp* appattrqueryrsp_body_;
  ::ClientCos::AppAttrModifyRsp* appattrmodifyrsp_body_;
  ::ClientCos::PreviewFileAttrQueryRsp* previewfileattrqueryrsp_body_;
  ::ClientCos::ObjModTimeStampRsp* objmodtimestamprsp_body_;
  ::ClientCos::ListMutiobjRsp* listmutiobjrsp_body_;
  ::ClientCos::UnfinObjAttrModifyRsp* unfinobjattrmodifyrsp_body_;
  ::ClientCos::FileBatchDelRsp* filebatchdelrsp_body_;
  ::ClientCos::ListObjVerRsp* listobjverrsp_body_;
  ::ClientCos::DelExpireFileRsp* delexpirefilersp_body_;
  ::ClientCos::FileDelRsp* filedelrsp_body_;
  ::ClientCos::SpObjAttrModifyRsp* spobjattrmodifyrsp_body_;
  ::ClientCos::UploadDelmarkerRsp* uploaddelmarkerrsp_body_;
  ::ClientCos::ExpireFileDelVerRsp* expirefiledelverrsp_body_;
  ::ClientCos::ExpireFileDelNoverRsp* expirefiledelnoverrsp_body_;
  ::ClientCos::SetBucketPriAttrRsp* setbucketpriattrrsp_body_;
  ::ClientCos::FileDownToCASRsp* filedowntocasrsp_body_;
  ::ClientCos::CasObjAttrModifyRsp* casobjattrmodifyrsp_body_;
  ::ClientCos::CasFileRecoverDelRsp* casfilerecoverdelrsp_body_;
  ::ClientCos::CasObjRestoreErrRsp* casobjrestoreerrrsp_body_;
  ::ClientCos::SpObjAttrQueryRsp* spobjattrqueryrsp_body_;
  ::ClientCos::ObjModStorageTypeRsp* objmodstoragetypersp_body_;
  ::ClientCos::SetBucketWebsiteInfoRsp* setbucketwebsiteinforsp_body_;
  ::ClientCos::SetCamAttrRsp* setcamattrrsp_body_;
  ::ClientCos::BucketCamAuthQueryRsp* bucketcamauthqueryrsp_body_;
  ::ClientCos::AppCamAuthQueryRsp* appcamauthqueryrsp_body_;
  ::ClientCos::FileUnfinishAttrQueryRsp* fileunfinishattrqueryrsp_body_;
  ::ClientCos::ReduceLifecycleRsp* reducelifecyclersp_body_;
  ::ClientCos::RetrieveLifecycleRsp* retrievelifecyclersp_body_;
  ::ClientCos::SetObjAclRsp* setobjaclrsp_body_;
  ::ClientCos::GetObjAclRsp* getobjaclrsp_body_;
  ::ClientCos::SetBucketUinRsp* setbucketuinrsp_body_;
  ::ClientCos::GetBucketUinRsp* getbucketuinrsp_body_;
  ::ClientCos::ListDirectRsp* listdirectrsp_body_;
  ::ClientCos::CheckObjAclRsp* checkobjaclrsp_body_;
  ::ClientCos::CasObjRestoreFinRsp* casobjrestorefinrsp_body_;
  ::ClientCos::SetBucketLockRsp* setbucketlockrsp_body_;
  ::ClientCos::GetBucketLockRsp* getbucketlockrsp_body_;
  ::ClientCos::SetBucketInventoryRsp* setbucketinventoryrsp_body_;
  ::ClientCos::GetBucketInventoryRsp* getbucketinventoryrsp_body_;
  ::ClientCos::COSTransToCASRsp* costranstocasrsp_body_;
  ::ClientCos::SetMigrateRsp* setmigratersp_body_;
  ::ClientCos::DelNoHashFileRsp* delnohashfilersp_body_;
  ::ClientCos::MigrateFinFileRsp* migratefinfilersp_body_;
  ::ClientCos::MigrateUnFinFileRsp* migrateunfinfilersp_body_;
  ::PROTOBUF_NAMESPACE_ID::int32 retcode_;
  int sub_type_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class Migrateinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.Migrateinfo) */ {
 public:
  inline Migrateinfo() : Migrateinfo(nullptr) {}
  virtual ~Migrateinfo();

  Migrateinfo(const Migrateinfo& from);
  Migrateinfo(Migrateinfo&& from) noexcept
    : Migrateinfo() {
    *this = ::std::move(from);
  }

  inline Migrateinfo& operator=(const Migrateinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Migrateinfo& operator=(Migrateinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Migrateinfo& default_instance();

  static inline const Migrateinfo* internal_default_instance() {
    return reinterpret_cast<const Migrateinfo*>(
               &_Migrateinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Migrateinfo& a, Migrateinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Migrateinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Migrateinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Migrateinfo* New() const final {
    return CreateMaybeMessage<Migrateinfo>(nullptr);
  }

  Migrateinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Migrateinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Migrateinfo& from);
  void MergeFrom(const Migrateinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Migrateinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.Migrateinfo";
  }
  protected:
  explicit Migrateinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kFinTimeFieldNumber = 3,
  };
  // optional .ClientCos.MigrateStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::ClientCos::MigrateStatus status() const;
  void set_status(::ClientCos::MigrateStatus value);
  private:
  ::ClientCos::MigrateStatus _internal_status() const;
  void _internal_set_status(::ClientCos::MigrateStatus value);
  public:

  // optional uint32 start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fin_time = 3;
  bool has_fin_time() const;
  private:
  bool _internal_has_fin_time() const;
  public:
  void clear_fin_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 fin_time() const;
  void set_fin_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fin_time() const;
  void _internal_set_fin_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.Migrateinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fin_time_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ExtraAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ExtraAttr) */ {
 public:
  inline ExtraAttr() : ExtraAttr(nullptr) {}
  virtual ~ExtraAttr();

  ExtraAttr(const ExtraAttr& from);
  ExtraAttr(ExtraAttr&& from) noexcept
    : ExtraAttr() {
    *this = ::std::move(from);
  }

  inline ExtraAttr& operator=(const ExtraAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtraAttr& operator=(ExtraAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtraAttr& default_instance();

  static inline const ExtraAttr* internal_default_instance() {
    return reinterpret_cast<const ExtraAttr*>(
               &_ExtraAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExtraAttr& a, ExtraAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtraAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtraAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtraAttr* New() const final {
    return CreateMaybeMessage<ExtraAttr>(nullptr);
  }

  ExtraAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtraAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtraAttr& from);
  void MergeFrom(const ExtraAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ExtraAttr";
  }
  protected:
  explicit ExtraAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossregionalFieldNumber = 1,
    kRuleobjFieldNumber = 2,
    kRuleMtimeFieldNumber = 3,
  };
  // optional bytes crossregional = 1;
  bool has_crossregional() const;
  private:
  bool _internal_has_crossregional() const;
  public:
  void clear_crossregional();
  const std::string& crossregional() const;
  void set_crossregional(const std::string& value);
  void set_crossregional(std::string&& value);
  void set_crossregional(const char* value);
  void set_crossregional(const void* value, size_t size);
  std::string* mutable_crossregional();
  std::string* release_crossregional();
  void set_allocated_crossregional(std::string* crossregional);
  private:
  const std::string& _internal_crossregional() const;
  void _internal_set_crossregional(const std::string& value);
  std::string* _internal_mutable_crossregional();
  public:

  // optional bytes ruleobj = 2;
  bool has_ruleobj() const;
  private:
  bool _internal_has_ruleobj() const;
  public:
  void clear_ruleobj();
  const std::string& ruleobj() const;
  void set_ruleobj(const std::string& value);
  void set_ruleobj(std::string&& value);
  void set_ruleobj(const char* value);
  void set_ruleobj(const void* value, size_t size);
  std::string* mutable_ruleobj();
  std::string* release_ruleobj();
  void set_allocated_ruleobj(std::string* ruleobj);
  private:
  const std::string& _internal_ruleobj() const;
  void _internal_set_ruleobj(const std::string& value);
  std::string* _internal_mutable_ruleobj();
  public:

  // optional uint32 rule_mtime = 3;
  bool has_rule_mtime() const;
  private:
  bool _internal_has_rule_mtime() const;
  public:
  void clear_rule_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 rule_mtime() const;
  void set_rule_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rule_mtime() const;
  void _internal_set_rule_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ExtraAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossregional_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ruleobj_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rule_mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjExpireAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjExpireAttr) */ {
 public:
  inline ObjExpireAttr() : ObjExpireAttr(nullptr) {}
  virtual ~ObjExpireAttr();

  ObjExpireAttr(const ObjExpireAttr& from);
  ObjExpireAttr(ObjExpireAttr&& from) noexcept
    : ObjExpireAttr() {
    *this = ::std::move(from);
  }

  inline ObjExpireAttr& operator=(const ObjExpireAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjExpireAttr& operator=(ObjExpireAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjExpireAttr& default_instance();

  static inline const ObjExpireAttr* internal_default_instance() {
    return reinterpret_cast<const ObjExpireAttr*>(
               &_ObjExpireAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObjExpireAttr& a, ObjExpireAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjExpireAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjExpireAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjExpireAttr* New() const final {
    return CreateMaybeMessage<ObjExpireAttr>(nullptr);
  }

  ObjExpireAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjExpireAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjExpireAttr& from);
  void MergeFrom(const ObjExpireAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjExpireAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjExpireAttr";
  }
  protected:
  explicit ObjExpireAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulenameFieldNumber = 2,
    kExpiredTimeFieldNumber = 1,
  };
  // optional bytes rulename = 2;
  bool has_rulename() const;
  private:
  bool _internal_has_rulename() const;
  public:
  void clear_rulename();
  const std::string& rulename() const;
  void set_rulename(const std::string& value);
  void set_rulename(std::string&& value);
  void set_rulename(const char* value);
  void set_rulename(const void* value, size_t size);
  std::string* mutable_rulename();
  std::string* release_rulename();
  void set_allocated_rulename(std::string* rulename);
  private:
  const std::string& _internal_rulename() const;
  void _internal_set_rulename(const std::string& value);
  std::string* _internal_mutable_rulename();
  public:

  // optional uint32 expired_time = 1 [default = 0];
  bool has_expired_time() const;
  private:
  bool _internal_has_expired_time() const;
  public:
  void clear_expired_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 expired_time() const;
  void set_expired_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expired_time() const;
  void _internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjExpireAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rulename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expired_time_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class UploadAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.UploadAttr) */ {
 public:
  inline UploadAttr() : UploadAttr(nullptr) {}
  virtual ~UploadAttr();

  UploadAttr(const UploadAttr& from);
  UploadAttr(UploadAttr&& from) noexcept
    : UploadAttr() {
    *this = ::std::move(from);
  }

  inline UploadAttr& operator=(const UploadAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadAttr& operator=(UploadAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadAttr& default_instance();

  static inline const UploadAttr* internal_default_instance() {
    return reinterpret_cast<const UploadAttr*>(
               &_UploadAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UploadAttr& a, UploadAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadAttr* New() const final {
    return CreateMaybeMessage<UploadAttr>(nullptr);
  }

  UploadAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadAttr& from);
  void MergeFrom(const UploadAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.UploadAttr";
  }
  protected:
  explicit UploadAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomheaderFieldNumber = 1,
    kTaglistFieldNumber = 2,
    kRealShaFieldNumber = 3,
  };
  // repeated .ClientCos.CustomHeader customheader = 1;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // repeated .ClientCos.ObjTag taglist = 2;
  int taglist_size() const;
  private:
  int _internal_taglist_size() const;
  public:
  void clear_taglist();
  ::ClientCos::ObjTag* mutable_taglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
      mutable_taglist();
  private:
  const ::ClientCos::ObjTag& _internal_taglist(int index) const;
  ::ClientCos::ObjTag* _internal_add_taglist();
  public:
  const ::ClientCos::ObjTag& taglist(int index) const;
  ::ClientCos::ObjTag* add_taglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
      taglist() const;

  // optional bytes real_sha = 3;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.UploadAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag > taglist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasInfo) */ {
 public:
  inline CasInfo() : CasInfo(nullptr) {}
  virtual ~CasInfo();

  CasInfo(const CasInfo& from);
  CasInfo(CasInfo&& from) noexcept
    : CasInfo() {
    *this = ::std::move(from);
  }

  inline CasInfo& operator=(const CasInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasInfo& operator=(CasInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasInfo& default_instance();

  static inline const CasInfo* internal_default_instance() {
    return reinterpret_cast<const CasInfo*>(
               &_CasInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CasInfo& a, CasInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CasInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasInfo* New() const final {
    return CreateMaybeMessage<CasInfo>(nullptr);
  }

  CasInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasInfo& from);
  void MergeFrom(const CasInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasInfo";
  }
  protected:
  explicit CasInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasfilekeyFieldNumber = 2,
    kArchiveIdFieldNumber = 3,
    kStatusFieldNumber = 1,
    kCasStatusFieldNumber = 5,
    kExpiredTimeFieldNumber = 4,
    kRestoreCtimeFieldNumber = 7,
    kCasTypeFieldNumber = 6,
    kRestoreTierFieldNumber = 8,
  };
  // optional bytes casfilekey = 2;
  bool has_casfilekey() const;
  private:
  bool _internal_has_casfilekey() const;
  public:
  void clear_casfilekey();
  const std::string& casfilekey() const;
  void set_casfilekey(const std::string& value);
  void set_casfilekey(std::string&& value);
  void set_casfilekey(const char* value);
  void set_casfilekey(const void* value, size_t size);
  std::string* mutable_casfilekey();
  std::string* release_casfilekey();
  void set_allocated_casfilekey(std::string* casfilekey);
  private:
  const std::string& _internal_casfilekey() const;
  void _internal_set_casfilekey(const std::string& value);
  std::string* _internal_mutable_casfilekey();
  public:

  // optional bytes archive_id = 3;
  bool has_archive_id() const;
  private:
  bool _internal_has_archive_id() const;
  public:
  void clear_archive_id();
  const std::string& archive_id() const;
  void set_archive_id(const std::string& value);
  void set_archive_id(std::string&& value);
  void set_archive_id(const char* value);
  void set_archive_id(const void* value, size_t size);
  std::string* mutable_archive_id();
  std::string* release_archive_id();
  void set_allocated_archive_id(std::string* archive_id);
  private:
  const std::string& _internal_archive_id() const;
  void _internal_set_archive_id(const std::string& value);
  std::string* _internal_mutable_archive_id();
  public:

  // optional uint32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cas_status = 5;
  bool has_cas_status() const;
  private:
  bool _internal_has_cas_status() const;
  public:
  void clear_cas_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 cas_status() const;
  void set_cas_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cas_status() const;
  void _internal_set_cas_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 expired_time = 4;
  bool has_expired_time() const;
  private:
  bool _internal_has_expired_time() const;
  public:
  void clear_expired_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expired_time() const;
  void set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expired_time() const;
  void _internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 restore_ctime = 7;
  bool has_restore_ctime() const;
  private:
  bool _internal_has_restore_ctime() const;
  public:
  void clear_restore_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 restore_ctime() const;
  void set_restore_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_restore_ctime() const;
  void _internal_set_restore_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 cas_type = 6;
  bool has_cas_type() const;
  private:
  bool _internal_has_cas_type() const;
  public:
  void clear_cas_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 cas_type() const;
  void set_cas_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cas_type() const;
  void _internal_set_cas_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.CASRestoreTier restore_tier = 8;
  bool has_restore_tier() const;
  private:
  bool _internal_has_restore_tier() const;
  public:
  void clear_restore_tier();
  ::ClientCos::CASRestoreTier restore_tier() const;
  void set_restore_tier(::ClientCos::CASRestoreTier value);
  private:
  ::ClientCos::CASRestoreTier _internal_restore_tier() const;
  void _internal_set_restore_tier(::ClientCos::CASRestoreTier value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CasInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr casfilekey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cas_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expired_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 restore_ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cas_type_;
  int restore_tier_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketCreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketCreateReq) */ {
 public:
  inline BucketCreateReq() : BucketCreateReq(nullptr) {}
  virtual ~BucketCreateReq();

  BucketCreateReq(const BucketCreateReq& from);
  BucketCreateReq(BucketCreateReq&& from) noexcept
    : BucketCreateReq() {
    *this = ::std::move(from);
  }

  inline BucketCreateReq& operator=(const BucketCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketCreateReq& operator=(BucketCreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketCreateReq& default_instance();

  static inline const BucketCreateReq* internal_default_instance() {
    return reinterpret_cast<const BucketCreateReq*>(
               &_BucketCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BucketCreateReq& a, BucketCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketCreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketCreateReq* New() const final {
    return CreateMaybeMessage<BucketCreateReq>(nullptr);
  }

  BucketCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketCreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketCreateReq& from);
  void MergeFrom(const BucketCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketCreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketCreateReq";
  }
  protected:
  explicit BucketCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhitereferFieldNumber = 5,
    kBlackreferFieldNumber = 6,
    kCnameFieldNumber = 7,
    kReservedattrFieldNumber = 8,
    kCorsruleFieldNumber = 9,
    kPathFieldNumber = 1,
    kBizAttrFieldNumber = 2,
    kKeyFieldNumber = 4,
    kBucketOwnerFieldNumber = 10,
    kAuthFieldNumber = 3,
    kIsSlotFieldNumber = 11,
  };
  // repeated string whiterefer = 5;
  int whiterefer_size() const;
  private:
  int _internal_whiterefer_size() const;
  public:
  void clear_whiterefer();
  const std::string& whiterefer(int index) const;
  std::string* mutable_whiterefer(int index);
  void set_whiterefer(int index, const std::string& value);
  void set_whiterefer(int index, std::string&& value);
  void set_whiterefer(int index, const char* value);
  void set_whiterefer(int index, const char* value, size_t size);
  std::string* add_whiterefer();
  void add_whiterefer(const std::string& value);
  void add_whiterefer(std::string&& value);
  void add_whiterefer(const char* value);
  void add_whiterefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& whiterefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_whiterefer();
  private:
  const std::string& _internal_whiterefer(int index) const;
  std::string* _internal_add_whiterefer();
  public:

  // repeated string blackrefer = 6;
  int blackrefer_size() const;
  private:
  int _internal_blackrefer_size() const;
  public:
  void clear_blackrefer();
  const std::string& blackrefer(int index) const;
  std::string* mutable_blackrefer(int index);
  void set_blackrefer(int index, const std::string& value);
  void set_blackrefer(int index, std::string&& value);
  void set_blackrefer(int index, const char* value);
  void set_blackrefer(int index, const char* value, size_t size);
  std::string* add_blackrefer();
  void add_blackrefer(const std::string& value);
  void add_blackrefer(std::string&& value);
  void add_blackrefer(const char* value);
  void add_blackrefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blackrefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blackrefer();
  private:
  const std::string& _internal_blackrefer(int index) const;
  std::string* _internal_add_blackrefer();
  public:

  // repeated string cname = 7;
  int cname_size() const;
  private:
  int _internal_cname_size() const;
  public:
  void clear_cname();
  const std::string& cname(int index) const;
  std::string* mutable_cname(int index);
  void set_cname(int index, const std::string& value);
  void set_cname(int index, std::string&& value);
  void set_cname(int index, const char* value);
  void set_cname(int index, const char* value, size_t size);
  std::string* add_cname();
  void add_cname(const std::string& value);
  void add_cname(std::string&& value);
  void add_cname(const char* value);
  void add_cname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cname();
  private:
  const std::string& _internal_cname(int index) const;
  std::string* _internal_add_cname();
  public:

  // repeated .ClientCos.ReservedAttr reservedattr = 8;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CorsRule corsrule = 9;
  int corsrule_size() const;
  private:
  int _internal_corsrule_size() const;
  public:
  void clear_corsrule();
  ::ClientCos::CorsRule* mutable_corsrule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
      mutable_corsrule();
  private:
  const ::ClientCos::CorsRule& _internal_corsrule(int index) const;
  ::ClientCos::CorsRule* _internal_add_corsrule();
  public:
  const ::ClientCos::CorsRule& corsrule(int index) const;
  ::ClientCos::CorsRule* add_corsrule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
      corsrule() const;

  // optional bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes biz_attr = 2;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional .ClientCos.KeyPair key = 4;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::ClientCos::KeyPair& key() const;
  ::ClientCos::KeyPair* release_key();
  ::ClientCos::KeyPair* mutable_key();
  void set_allocated_key(::ClientCos::KeyPair* key);
  private:
  const ::ClientCos::KeyPair& _internal_key() const;
  ::ClientCos::KeyPair* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::ClientCos::KeyPair* key);
  ::ClientCos::KeyPair* unsafe_arena_release_key();

  // optional .ClientCos.OwnerInfo bucketOwner = 10;
  bool has_bucketowner() const;
  private:
  bool _internal_has_bucketowner() const;
  public:
  void clear_bucketowner();
  const ::ClientCos::OwnerInfo& bucketowner() const;
  ::ClientCos::OwnerInfo* release_bucketowner();
  ::ClientCos::OwnerInfo* mutable_bucketowner();
  void set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner);
  private:
  const ::ClientCos::OwnerInfo& _internal_bucketowner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_bucketowner();
  public:
  void unsafe_arena_set_allocated_bucketowner(
      ::ClientCos::OwnerInfo* bucketowner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_bucketowner();

  // optional .ClientCos.Authority auth = 3;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional bool is_slot = 11;
  bool has_is_slot() const;
  private:
  bool _internal_has_is_slot() const;
  public:
  void clear_is_slot();
  bool is_slot() const;
  void set_is_slot(bool value);
  private:
  bool _internal_is_slot() const;
  void _internal_set_is_slot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.BucketCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> whiterefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blackrefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule > corsrule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::ClientCos::KeyPair* key_;
  ::ClientCos::OwnerInfo* bucketowner_;
  int auth_;
  bool is_slot_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketCreateRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketCreateRsp) */ {
 public:
  inline BucketCreateRsp() : BucketCreateRsp(nullptr) {}
  virtual ~BucketCreateRsp();

  BucketCreateRsp(const BucketCreateRsp& from);
  BucketCreateRsp(BucketCreateRsp&& from) noexcept
    : BucketCreateRsp() {
    *this = ::std::move(from);
  }

  inline BucketCreateRsp& operator=(const BucketCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketCreateRsp& operator=(BucketCreateRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketCreateRsp& default_instance();

  static inline const BucketCreateRsp* internal_default_instance() {
    return reinterpret_cast<const BucketCreateRsp*>(
               &_BucketCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BucketCreateRsp& a, BucketCreateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketCreateRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketCreateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketCreateRsp* New() const final {
    return CreateMaybeMessage<BucketCreateRsp>(nullptr);
  }

  BucketCreateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketCreateRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketCreateRsp& from);
  void MergeFrom(const BucketCreateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketCreateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketCreateRsp";
  }
  protected:
  explicit BucketCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtimeFieldNumber = 1,
  };
  // optional uint64 ctime = 1;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.BucketCreateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketAttrModifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketAttrModifyReq) */ {
 public:
  inline BucketAttrModifyReq() : BucketAttrModifyReq(nullptr) {}
  virtual ~BucketAttrModifyReq();

  BucketAttrModifyReq(const BucketAttrModifyReq& from);
  BucketAttrModifyReq(BucketAttrModifyReq&& from) noexcept
    : BucketAttrModifyReq() {
    *this = ::std::move(from);
  }

  inline BucketAttrModifyReq& operator=(const BucketAttrModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketAttrModifyReq& operator=(BucketAttrModifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketAttrModifyReq& default_instance();

  static inline const BucketAttrModifyReq* internal_default_instance() {
    return reinterpret_cast<const BucketAttrModifyReq*>(
               &_BucketAttrModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BucketAttrModifyReq& a, BucketAttrModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketAttrModifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketAttrModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketAttrModifyReq* New() const final {
    return CreateMaybeMessage<BucketAttrModifyReq>(nullptr);
  }

  BucketAttrModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketAttrModifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketAttrModifyReq& from);
  void MergeFrom(const BucketAttrModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketAttrModifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketAttrModifyReq";
  }
  protected:
  explicit BucketAttrModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhitereferFieldNumber = 6,
    kBlackreferFieldNumber = 7,
    kCnameFieldNumber = 8,
    kReservedattrFieldNumber = 9,
    kCorsruleFieldNumber = 10,
    kTagFieldNumber = 13,
    kLfattrFieldNumber = 15,
    kPathFieldNumber = 1,
    kBizAttrFieldNumber = 4,
    kCrossregionalFieldNumber = 11,
    kRuleobjFieldNumber = 14,
    kModflagFieldNumber = 2,
    kAuthFieldNumber = 3,
    kForbidFieldNumber = 5,
    kMultiVersionFlagFieldNumber = 12,
    kReferAbleFieldNumber = 16,
    kEmptyreferconfigFieldNumber = 17,
    kCnameAbleFieldNumber = 18,
  };
  // repeated string whiterefer = 6;
  int whiterefer_size() const;
  private:
  int _internal_whiterefer_size() const;
  public:
  void clear_whiterefer();
  const std::string& whiterefer(int index) const;
  std::string* mutable_whiterefer(int index);
  void set_whiterefer(int index, const std::string& value);
  void set_whiterefer(int index, std::string&& value);
  void set_whiterefer(int index, const char* value);
  void set_whiterefer(int index, const char* value, size_t size);
  std::string* add_whiterefer();
  void add_whiterefer(const std::string& value);
  void add_whiterefer(std::string&& value);
  void add_whiterefer(const char* value);
  void add_whiterefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& whiterefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_whiterefer();
  private:
  const std::string& _internal_whiterefer(int index) const;
  std::string* _internal_add_whiterefer();
  public:

  // repeated string blackrefer = 7;
  int blackrefer_size() const;
  private:
  int _internal_blackrefer_size() const;
  public:
  void clear_blackrefer();
  const std::string& blackrefer(int index) const;
  std::string* mutable_blackrefer(int index);
  void set_blackrefer(int index, const std::string& value);
  void set_blackrefer(int index, std::string&& value);
  void set_blackrefer(int index, const char* value);
  void set_blackrefer(int index, const char* value, size_t size);
  std::string* add_blackrefer();
  void add_blackrefer(const std::string& value);
  void add_blackrefer(std::string&& value);
  void add_blackrefer(const char* value);
  void add_blackrefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blackrefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blackrefer();
  private:
  const std::string& _internal_blackrefer(int index) const;
  std::string* _internal_add_blackrefer();
  public:

  // repeated string cname = 8;
  int cname_size() const;
  private:
  int _internal_cname_size() const;
  public:
  void clear_cname();
  const std::string& cname(int index) const;
  std::string* mutable_cname(int index);
  void set_cname(int index, const std::string& value);
  void set_cname(int index, std::string&& value);
  void set_cname(int index, const char* value);
  void set_cname(int index, const char* value, size_t size);
  std::string* add_cname();
  void add_cname(const std::string& value);
  void add_cname(std::string&& value);
  void add_cname(const char* value);
  void add_cname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cname();
  private:
  const std::string& _internal_cname(int index) const;
  std::string* _internal_add_cname();
  public:

  // repeated .ClientCos.ReservedAttr reservedattr = 9;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CorsRule corsrule = 10;
  int corsrule_size() const;
  private:
  int _internal_corsrule_size() const;
  public:
  void clear_corsrule();
  ::ClientCos::CorsRule* mutable_corsrule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
      mutable_corsrule();
  private:
  const ::ClientCos::CorsRule& _internal_corsrule(int index) const;
  ::ClientCos::CorsRule* _internal_add_corsrule();
  public:
  const ::ClientCos::CorsRule& corsrule(int index) const;
  ::ClientCos::CorsRule* add_corsrule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
      corsrule() const;

  // repeated .ClientCos.Tag tag = 13;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  ::ClientCos::Tag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >*
      mutable_tag();
  private:
  const ::ClientCos::Tag& _internal_tag(int index) const;
  ::ClientCos::Tag* _internal_add_tag();
  public:
  const ::ClientCos::Tag& tag(int index) const;
  ::ClientCos::Tag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >&
      tag() const;

  // repeated .ClientCos.LFAttr lfattr = 15;
  int lfattr_size() const;
  private:
  int _internal_lfattr_size() const;
  public:
  void clear_lfattr();
  ::ClientCos::LFAttr* mutable_lfattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >*
      mutable_lfattr();
  private:
  const ::ClientCos::LFAttr& _internal_lfattr(int index) const;
  ::ClientCos::LFAttr* _internal_add_lfattr();
  public:
  const ::ClientCos::LFAttr& lfattr(int index) const;
  ::ClientCos::LFAttr* add_lfattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >&
      lfattr() const;

  // optional bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes biz_attr = 4;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes crossregional = 11;
  bool has_crossregional() const;
  private:
  bool _internal_has_crossregional() const;
  public:
  void clear_crossregional();
  const std::string& crossregional() const;
  void set_crossregional(const std::string& value);
  void set_crossregional(std::string&& value);
  void set_crossregional(const char* value);
  void set_crossregional(const void* value, size_t size);
  std::string* mutable_crossregional();
  std::string* release_crossregional();
  void set_allocated_crossregional(std::string* crossregional);
  private:
  const std::string& _internal_crossregional() const;
  void _internal_set_crossregional(const std::string& value);
  std::string* _internal_mutable_crossregional();
  public:

  // optional bytes ruleobj = 14;
  bool has_ruleobj() const;
  private:
  bool _internal_has_ruleobj() const;
  public:
  void clear_ruleobj();
  const std::string& ruleobj() const;
  void set_ruleobj(const std::string& value);
  void set_ruleobj(std::string&& value);
  void set_ruleobj(const char* value);
  void set_ruleobj(const void* value, size_t size);
  std::string* mutable_ruleobj();
  std::string* release_ruleobj();
  void set_allocated_ruleobj(std::string* ruleobj);
  private:
  const std::string& _internal_ruleobj() const;
  void _internal_set_ruleobj(const std::string& value);
  std::string* _internal_mutable_ruleobj();
  public:

  // optional uint32 modflag = 2;
  bool has_modflag() const;
  private:
  bool _internal_has_modflag() const;
  public:
  void clear_modflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 modflag() const;
  void set_modflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_modflag() const;
  void _internal_set_modflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 3;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional uint32 forbid = 5;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 multi_version_flag = 12;
  bool has_multi_version_flag() const;
  private:
  bool _internal_has_multi_version_flag() const;
  public:
  void clear_multi_version_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_flag() const;
  void set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multi_version_flag() const;
  void _internal_set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool refer_able = 16;
  bool has_refer_able() const;
  private:
  bool _internal_has_refer_able() const;
  public:
  void clear_refer_able();
  bool refer_able() const;
  void set_refer_able(bool value);
  private:
  bool _internal_refer_able() const;
  void _internal_set_refer_able(bool value);
  public:

  // optional bool emptyreferconfig = 17;
  bool has_emptyreferconfig() const;
  private:
  bool _internal_has_emptyreferconfig() const;
  public:
  void clear_emptyreferconfig();
  bool emptyreferconfig() const;
  void set_emptyreferconfig(bool value);
  private:
  bool _internal_emptyreferconfig() const;
  void _internal_set_emptyreferconfig(bool value);
  public:

  // optional bool cname_able = 18;
  bool has_cname_able() const;
  private:
  bool _internal_has_cname_able() const;
  public:
  void clear_cname_able();
  bool cname_able() const;
  void set_cname_able(bool value);
  private:
  bool _internal_cname_able() const;
  void _internal_set_cname_able(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.BucketAttrModifyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> whiterefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blackrefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule > corsrule_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag > tag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr > lfattr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossregional_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ruleobj_;
  ::PROTOBUF_NAMESPACE_ID::uint32 modflag_;
  int auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_flag_;
  bool refer_able_;
  bool emptyreferconfig_;
  bool cname_able_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketAttrModifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketAttrModifyRsp) */ {
 public:
  inline BucketAttrModifyRsp() : BucketAttrModifyRsp(nullptr) {}
  virtual ~BucketAttrModifyRsp();

  BucketAttrModifyRsp(const BucketAttrModifyRsp& from);
  BucketAttrModifyRsp(BucketAttrModifyRsp&& from) noexcept
    : BucketAttrModifyRsp() {
    *this = ::std::move(from);
  }

  inline BucketAttrModifyRsp& operator=(const BucketAttrModifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketAttrModifyRsp& operator=(BucketAttrModifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketAttrModifyRsp& default_instance();

  static inline const BucketAttrModifyRsp* internal_default_instance() {
    return reinterpret_cast<const BucketAttrModifyRsp*>(
               &_BucketAttrModifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BucketAttrModifyRsp& a, BucketAttrModifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketAttrModifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketAttrModifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketAttrModifyRsp* New() const final {
    return CreateMaybeMessage<BucketAttrModifyRsp>(nullptr);
  }

  BucketAttrModifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketAttrModifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketAttrModifyRsp& from);
  void MergeFrom(const BucketAttrModifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketAttrModifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketAttrModifyRsp";
  }
  protected:
  explicit BucketAttrModifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.BucketAttrModifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketAttrQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketAttrQueryReq) */ {
 public:
  inline BucketAttrQueryReq() : BucketAttrQueryReq(nullptr) {}
  virtual ~BucketAttrQueryReq();

  BucketAttrQueryReq(const BucketAttrQueryReq& from);
  BucketAttrQueryReq(BucketAttrQueryReq&& from) noexcept
    : BucketAttrQueryReq() {
    *this = ::std::move(from);
  }

  inline BucketAttrQueryReq& operator=(const BucketAttrQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketAttrQueryReq& operator=(BucketAttrQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketAttrQueryReq& default_instance();

  static inline const BucketAttrQueryReq* internal_default_instance() {
    return reinterpret_cast<const BucketAttrQueryReq*>(
               &_BucketAttrQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BucketAttrQueryReq& a, BucketAttrQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketAttrQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketAttrQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketAttrQueryReq* New() const final {
    return CreateMaybeMessage<BucketAttrQueryReq>(nullptr);
  }

  BucketAttrQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketAttrQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketAttrQueryReq& from);
  void MergeFrom(const BucketAttrQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketAttrQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketAttrQueryReq";
  }
  protected:
  explicit BucketAttrQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // optional bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional uint32 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.BucketAttrQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketAttrQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketAttrQueryRsp) */ {
 public:
  inline BucketAttrQueryRsp() : BucketAttrQueryRsp(nullptr) {}
  virtual ~BucketAttrQueryRsp();

  BucketAttrQueryRsp(const BucketAttrQueryRsp& from);
  BucketAttrQueryRsp(BucketAttrQueryRsp&& from) noexcept
    : BucketAttrQueryRsp() {
    *this = ::std::move(from);
  }

  inline BucketAttrQueryRsp& operator=(const BucketAttrQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketAttrQueryRsp& operator=(BucketAttrQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketAttrQueryRsp& default_instance();

  static inline const BucketAttrQueryRsp* internal_default_instance() {
    return reinterpret_cast<const BucketAttrQueryRsp*>(
               &_BucketAttrQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BucketAttrQueryRsp& a, BucketAttrQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketAttrQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketAttrQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketAttrQueryRsp* New() const final {
    return CreateMaybeMessage<BucketAttrQueryRsp>(nullptr);
  }

  BucketAttrQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketAttrQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketAttrQueryRsp& from);
  void MergeFrom(const BucketAttrQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketAttrQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketAttrQueryRsp";
  }
  protected:
  explicit BucketAttrQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 5,
    kWhitereferFieldNumber = 6,
    kBlackreferFieldNumber = 7,
    kReservedattrFieldNumber = 8,
    kCorsruleFieldNumber = 10,
    kTagFieldNumber = 13,
    kLfattrFieldNumber = 14,
    kBizAttrFieldNumber = 2,
    kBucketUinFieldNumber = 21,
    kInventoryFieldNumber = 24,
    kExtraattrFieldNumber = 11,
    kWebsiteinfoFieldNumber = 19,
    kLockinfoFieldNumber = 23,
    kMigrateinfoFieldNumber = 25,
    kAuthFieldNumber = 1,
    kCtimeFieldNumber = 3,
    kMtimeFieldNumber = 4,
    kForbidFieldNumber = 9,
    kMultiVersionFlagFieldNumber = 12,
    kReferAbleFieldNumber = 15,
    kEmptyreferconfigFieldNumber = 16,
    kCnameAbleFieldNumber = 17,
    kNofileFieldNumber = 18,
    kVisitV4FieldNumber = 20,
    kNslotFieldNumber = 22,
  };
  // repeated string cname = 5;
  int cname_size() const;
  private:
  int _internal_cname_size() const;
  public:
  void clear_cname();
  const std::string& cname(int index) const;
  std::string* mutable_cname(int index);
  void set_cname(int index, const std::string& value);
  void set_cname(int index, std::string&& value);
  void set_cname(int index, const char* value);
  void set_cname(int index, const char* value, size_t size);
  std::string* add_cname();
  void add_cname(const std::string& value);
  void add_cname(std::string&& value);
  void add_cname(const char* value);
  void add_cname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cname();
  private:
  const std::string& _internal_cname(int index) const;
  std::string* _internal_add_cname();
  public:

  // repeated string whiterefer = 6;
  int whiterefer_size() const;
  private:
  int _internal_whiterefer_size() const;
  public:
  void clear_whiterefer();
  const std::string& whiterefer(int index) const;
  std::string* mutable_whiterefer(int index);
  void set_whiterefer(int index, const std::string& value);
  void set_whiterefer(int index, std::string&& value);
  void set_whiterefer(int index, const char* value);
  void set_whiterefer(int index, const char* value, size_t size);
  std::string* add_whiterefer();
  void add_whiterefer(const std::string& value);
  void add_whiterefer(std::string&& value);
  void add_whiterefer(const char* value);
  void add_whiterefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& whiterefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_whiterefer();
  private:
  const std::string& _internal_whiterefer(int index) const;
  std::string* _internal_add_whiterefer();
  public:

  // repeated string blackrefer = 7;
  int blackrefer_size() const;
  private:
  int _internal_blackrefer_size() const;
  public:
  void clear_blackrefer();
  const std::string& blackrefer(int index) const;
  std::string* mutable_blackrefer(int index);
  void set_blackrefer(int index, const std::string& value);
  void set_blackrefer(int index, std::string&& value);
  void set_blackrefer(int index, const char* value);
  void set_blackrefer(int index, const char* value, size_t size);
  std::string* add_blackrefer();
  void add_blackrefer(const std::string& value);
  void add_blackrefer(std::string&& value);
  void add_blackrefer(const char* value);
  void add_blackrefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blackrefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blackrefer();
  private:
  const std::string& _internal_blackrefer(int index) const;
  std::string* _internal_add_blackrefer();
  public:

  // repeated .ClientCos.ReservedAttr reservedattr = 8;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CorsRule corsrule = 10;
  int corsrule_size() const;
  private:
  int _internal_corsrule_size() const;
  public:
  void clear_corsrule();
  ::ClientCos::CorsRule* mutable_corsrule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
      mutable_corsrule();
  private:
  const ::ClientCos::CorsRule& _internal_corsrule(int index) const;
  ::ClientCos::CorsRule* _internal_add_corsrule();
  public:
  const ::ClientCos::CorsRule& corsrule(int index) const;
  ::ClientCos::CorsRule* add_corsrule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
      corsrule() const;

  // repeated .ClientCos.Tag tag = 13;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  ::ClientCos::Tag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >*
      mutable_tag();
  private:
  const ::ClientCos::Tag& _internal_tag(int index) const;
  ::ClientCos::Tag* _internal_add_tag();
  public:
  const ::ClientCos::Tag& tag(int index) const;
  ::ClientCos::Tag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >&
      tag() const;

  // repeated .ClientCos.LFAttr lfattr = 14;
  int lfattr_size() const;
  private:
  int _internal_lfattr_size() const;
  public:
  void clear_lfattr();
  ::ClientCos::LFAttr* mutable_lfattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >*
      mutable_lfattr();
  private:
  const ::ClientCos::LFAttr& _internal_lfattr(int index) const;
  ::ClientCos::LFAttr* _internal_add_lfattr();
  public:
  const ::ClientCos::LFAttr& lfattr(int index) const;
  ::ClientCos::LFAttr* add_lfattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >&
      lfattr() const;

  // optional bytes biz_attr = 2;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes bucketUin = 21;
  bool has_bucketuin() const;
  private:
  bool _internal_has_bucketuin() const;
  public:
  void clear_bucketuin();
  const std::string& bucketuin() const;
  void set_bucketuin(const std::string& value);
  void set_bucketuin(std::string&& value);
  void set_bucketuin(const char* value);
  void set_bucketuin(const void* value, size_t size);
  std::string* mutable_bucketuin();
  std::string* release_bucketuin();
  void set_allocated_bucketuin(std::string* bucketuin);
  private:
  const std::string& _internal_bucketuin() const;
  void _internal_set_bucketuin(const std::string& value);
  std::string* _internal_mutable_bucketuin();
  public:

  // optional bytes inventory = 24;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  const std::string& inventory() const;
  void set_inventory(const std::string& value);
  void set_inventory(std::string&& value);
  void set_inventory(const char* value);
  void set_inventory(const void* value, size_t size);
  std::string* mutable_inventory();
  std::string* release_inventory();
  void set_allocated_inventory(std::string* inventory);
  private:
  const std::string& _internal_inventory() const;
  void _internal_set_inventory(const std::string& value);
  std::string* _internal_mutable_inventory();
  public:

  // optional .ClientCos.ExtraAttr extraattr = 11;
  bool has_extraattr() const;
  private:
  bool _internal_has_extraattr() const;
  public:
  void clear_extraattr();
  const ::ClientCos::ExtraAttr& extraattr() const;
  ::ClientCos::ExtraAttr* release_extraattr();
  ::ClientCos::ExtraAttr* mutable_extraattr();
  void set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr);
  private:
  const ::ClientCos::ExtraAttr& _internal_extraattr() const;
  ::ClientCos::ExtraAttr* _internal_mutable_extraattr();
  public:
  void unsafe_arena_set_allocated_extraattr(
      ::ClientCos::ExtraAttr* extraattr);
  ::ClientCos::ExtraAttr* unsafe_arena_release_extraattr();

  // optional .ClientCos.WebsiteInfo websiteinfo = 19;
  bool has_websiteinfo() const;
  private:
  bool _internal_has_websiteinfo() const;
  public:
  void clear_websiteinfo();
  const ::ClientCos::WebsiteInfo& websiteinfo() const;
  ::ClientCos::WebsiteInfo* release_websiteinfo();
  ::ClientCos::WebsiteInfo* mutable_websiteinfo();
  void set_allocated_websiteinfo(::ClientCos::WebsiteInfo* websiteinfo);
  private:
  const ::ClientCos::WebsiteInfo& _internal_websiteinfo() const;
  ::ClientCos::WebsiteInfo* _internal_mutable_websiteinfo();
  public:
  void unsafe_arena_set_allocated_websiteinfo(
      ::ClientCos::WebsiteInfo* websiteinfo);
  ::ClientCos::WebsiteInfo* unsafe_arena_release_websiteinfo();

  // optional .ClientCos.LockInfo lockinfo = 23;
  bool has_lockinfo() const;
  private:
  bool _internal_has_lockinfo() const;
  public:
  void clear_lockinfo();
  const ::ClientCos::LockInfo& lockinfo() const;
  ::ClientCos::LockInfo* release_lockinfo();
  ::ClientCos::LockInfo* mutable_lockinfo();
  void set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo);
  private:
  const ::ClientCos::LockInfo& _internal_lockinfo() const;
  ::ClientCos::LockInfo* _internal_mutable_lockinfo();
  public:
  void unsafe_arena_set_allocated_lockinfo(
      ::ClientCos::LockInfo* lockinfo);
  ::ClientCos::LockInfo* unsafe_arena_release_lockinfo();

  // optional .ClientCos.Migrateinfo migrateinfo = 25;
  bool has_migrateinfo() const;
  private:
  bool _internal_has_migrateinfo() const;
  public:
  void clear_migrateinfo();
  const ::ClientCos::Migrateinfo& migrateinfo() const;
  ::ClientCos::Migrateinfo* release_migrateinfo();
  ::ClientCos::Migrateinfo* mutable_migrateinfo();
  void set_allocated_migrateinfo(::ClientCos::Migrateinfo* migrateinfo);
  private:
  const ::ClientCos::Migrateinfo& _internal_migrateinfo() const;
  ::ClientCos::Migrateinfo* _internal_mutable_migrateinfo();
  public:
  void unsafe_arena_set_allocated_migrateinfo(
      ::ClientCos::Migrateinfo* migrateinfo);
  ::ClientCos::Migrateinfo* unsafe_arena_release_migrateinfo();

  // optional .ClientCos.Authority auth = 1;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional uint32 ctime = 3;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 4;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 forbid = 9;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 multi_version_flag = 12;
  bool has_multi_version_flag() const;
  private:
  bool _internal_has_multi_version_flag() const;
  public:
  void clear_multi_version_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_flag() const;
  void set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multi_version_flag() const;
  void _internal_set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool refer_able = 15;
  bool has_refer_able() const;
  private:
  bool _internal_has_refer_able() const;
  public:
  void clear_refer_able();
  bool refer_able() const;
  void set_refer_able(bool value);
  private:
  bool _internal_refer_able() const;
  void _internal_set_refer_able(bool value);
  public:

  // optional bool emptyreferconfig = 16;
  bool has_emptyreferconfig() const;
  private:
  bool _internal_has_emptyreferconfig() const;
  public:
  void clear_emptyreferconfig();
  bool emptyreferconfig() const;
  void set_emptyreferconfig(bool value);
  private:
  bool _internal_emptyreferconfig() const;
  void _internal_set_emptyreferconfig(bool value);
  public:

  // optional bool cname_able = 17;
  bool has_cname_able() const;
  private:
  bool _internal_has_cname_able() const;
  public:
  void clear_cname_able();
  bool cname_able() const;
  void set_cname_able(bool value);
  private:
  bool _internal_cname_able() const;
  void _internal_set_cname_able(bool value);
  public:

  // optional bool nofile = 18;
  bool has_nofile() const;
  private:
  bool _internal_has_nofile() const;
  public:
  void clear_nofile();
  bool nofile() const;
  void set_nofile(bool value);
  private:
  bool _internal_nofile() const;
  void _internal_set_nofile(bool value);
  public:

  // optional bool visit_v4 = 20;
  bool has_visit_v4() const;
  private:
  bool _internal_has_visit_v4() const;
  public:
  void clear_visit_v4();
  bool visit_v4() const;
  void set_visit_v4(bool value);
  private:
  bool _internal_visit_v4() const;
  void _internal_set_visit_v4(bool value);
  public:

  // optional .ClientCos.NSlot nslot = 22;
  bool has_nslot() const;
  private:
  bool _internal_has_nslot() const;
  public:
  void clear_nslot();
  ::ClientCos::NSlot nslot() const;
  void set_nslot(::ClientCos::NSlot value);
  private:
  ::ClientCos::NSlot _internal_nslot() const;
  void _internal_set_nslot(::ClientCos::NSlot value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.BucketAttrQueryRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> whiterefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blackrefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule > corsrule_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag > tag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr > lfattr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucketuin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventory_;
  ::ClientCos::ExtraAttr* extraattr_;
  ::ClientCos::WebsiteInfo* websiteinfo_;
  ::ClientCos::LockInfo* lockinfo_;
  ::ClientCos::Migrateinfo* migrateinfo_;
  int auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_flag_;
  bool refer_able_;
  bool emptyreferconfig_;
  bool cname_able_;
  bool nofile_;
  bool visit_v4_;
  int nslot_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DirCreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DirCreateReq) */ {
 public:
  inline DirCreateReq() : DirCreateReq(nullptr) {}
  virtual ~DirCreateReq();

  DirCreateReq(const DirCreateReq& from);
  DirCreateReq(DirCreateReq&& from) noexcept
    : DirCreateReq() {
    *this = ::std::move(from);
  }

  inline DirCreateReq& operator=(const DirCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirCreateReq& operator=(DirCreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirCreateReq& default_instance();

  static inline const DirCreateReq* internal_default_instance() {
    return reinterpret_cast<const DirCreateReq*>(
               &_DirCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DirCreateReq& a, DirCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DirCreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirCreateReq* New() const final {
    return CreateMaybeMessage<DirCreateReq>(nullptr);
  }

  DirCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirCreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirCreateReq& from);
  void MergeFrom(const DirCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirCreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DirCreateReq";
  }
  protected:
  explicit DirCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kBizAttrFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes biz_attr = 2;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.DirCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DirCreateRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DirCreateRsp) */ {
 public:
  inline DirCreateRsp() : DirCreateRsp(nullptr) {}
  virtual ~DirCreateRsp();

  DirCreateRsp(const DirCreateRsp& from);
  DirCreateRsp(DirCreateRsp&& from) noexcept
    : DirCreateRsp() {
    *this = ::std::move(from);
  }

  inline DirCreateRsp& operator=(const DirCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirCreateRsp& operator=(DirCreateRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirCreateRsp& default_instance();

  static inline const DirCreateRsp* internal_default_instance() {
    return reinterpret_cast<const DirCreateRsp*>(
               &_DirCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DirCreateRsp& a, DirCreateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DirCreateRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirCreateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirCreateRsp* New() const final {
    return CreateMaybeMessage<DirCreateRsp>(nullptr);
  }

  DirCreateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirCreateRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirCreateRsp& from);
  void MergeFrom(const DirCreateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirCreateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DirCreateRsp";
  }
  protected:
  explicit DirCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraattrFieldNumber = 2,
    kCtimeFieldNumber = 1,
  };
  // optional .ClientCos.ExtraAttr extraattr = 2;
  bool has_extraattr() const;
  private:
  bool _internal_has_extraattr() const;
  public:
  void clear_extraattr();
  const ::ClientCos::ExtraAttr& extraattr() const;
  ::ClientCos::ExtraAttr* release_extraattr();
  ::ClientCos::ExtraAttr* mutable_extraattr();
  void set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr);
  private:
  const ::ClientCos::ExtraAttr& _internal_extraattr() const;
  ::ClientCos::ExtraAttr* _internal_mutable_extraattr();
  public:
  void unsafe_arena_set_allocated_extraattr(
      ::ClientCos::ExtraAttr* extraattr);
  ::ClientCos::ExtraAttr* unsafe_arena_release_extraattr();

  // required uint64 ctime = 1;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.DirCreateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ClientCos::ExtraAttr* extraattr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjAttrModifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjAttrModifyReq) */ {
 public:
  inline ObjAttrModifyReq() : ObjAttrModifyReq(nullptr) {}
  virtual ~ObjAttrModifyReq();

  ObjAttrModifyReq(const ObjAttrModifyReq& from);
  ObjAttrModifyReq(ObjAttrModifyReq&& from) noexcept
    : ObjAttrModifyReq() {
    *this = ::std::move(from);
  }

  inline ObjAttrModifyReq& operator=(const ObjAttrModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjAttrModifyReq& operator=(ObjAttrModifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjAttrModifyReq& default_instance();

  static inline const ObjAttrModifyReq* internal_default_instance() {
    return reinterpret_cast<const ObjAttrModifyReq*>(
               &_ObjAttrModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ObjAttrModifyReq& a, ObjAttrModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjAttrModifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjAttrModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjAttrModifyReq* New() const final {
    return CreateMaybeMessage<ObjAttrModifyReq>(nullptr);
  }

  ObjAttrModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjAttrModifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjAttrModifyReq& from);
  void MergeFrom(const ObjAttrModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjAttrModifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjAttrModifyReq";
  }
  protected:
  explicit ObjAttrModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedattrFieldNumber = 5,
    kCustomheaderFieldNumber = 6,
    kPathFieldNumber = 1,
    kBizAttrFieldNumber = 3,
    kRealShaFieldNumber = 8,
    kVersionFieldNumber = 9,
    kStoragetypeFieldNumber = 10,
    kSkFieldNumber = 12,
    kFlagFieldNumber = 2,
    kForbidFieldNumber = 4,
    kAuthFieldNumber = 7,
    kMtimeFieldNumber = 11,
  };
  // repeated .ClientCos.ReservedAttr reservedattr = 5;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CustomHeader customheader = 6;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes biz_attr = 3;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes real_sha = 8;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // optional bytes version = 9;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes storagetype = 10;
  bool has_storagetype() const;
  private:
  bool _internal_has_storagetype() const;
  public:
  void clear_storagetype();
  const std::string& storagetype() const;
  void set_storagetype(const std::string& value);
  void set_storagetype(std::string&& value);
  void set_storagetype(const char* value);
  void set_storagetype(const void* value, size_t size);
  std::string* mutable_storagetype();
  std::string* release_storagetype();
  void set_allocated_storagetype(std::string* storagetype);
  private:
  const std::string& _internal_storagetype() const;
  void _internal_set_storagetype(const std::string& value);
  std::string* _internal_mutable_storagetype();
  public:

  // optional bytes sk = 12;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // required uint32 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 forbid = 4;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 7;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional uint32 mtime = 11;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjAttrModifyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  int auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjAttrModifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjAttrModifyRsp) */ {
 public:
  inline ObjAttrModifyRsp() : ObjAttrModifyRsp(nullptr) {}
  virtual ~ObjAttrModifyRsp();

  ObjAttrModifyRsp(const ObjAttrModifyRsp& from);
  ObjAttrModifyRsp(ObjAttrModifyRsp&& from) noexcept
    : ObjAttrModifyRsp() {
    *this = ::std::move(from);
  }

  inline ObjAttrModifyRsp& operator=(const ObjAttrModifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjAttrModifyRsp& operator=(ObjAttrModifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjAttrModifyRsp& default_instance();

  static inline const ObjAttrModifyRsp* internal_default_instance() {
    return reinterpret_cast<const ObjAttrModifyRsp*>(
               &_ObjAttrModifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ObjAttrModifyRsp& a, ObjAttrModifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjAttrModifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjAttrModifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjAttrModifyRsp* New() const final {
    return CreateMaybeMessage<ObjAttrModifyRsp>(nullptr);
  }

  ObjAttrModifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjAttrModifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjAttrModifyRsp& from);
  void MergeFrom(const ObjAttrModifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjAttrModifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjAttrModifyRsp";
  }
  protected:
  explicit ObjAttrModifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraattrFieldNumber = 1,
  };
  // optional .ClientCos.ExtraAttr extraattr = 1;
  bool has_extraattr() const;
  private:
  bool _internal_has_extraattr() const;
  public:
  void clear_extraattr();
  const ::ClientCos::ExtraAttr& extraattr() const;
  ::ClientCos::ExtraAttr* release_extraattr();
  ::ClientCos::ExtraAttr* mutable_extraattr();
  void set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr);
  private:
  const ::ClientCos::ExtraAttr& _internal_extraattr() const;
  ::ClientCos::ExtraAttr* _internal_mutable_extraattr();
  public:
  void unsafe_arena_set_allocated_extraattr(
      ::ClientCos::ExtraAttr* extraattr);
  ::ClientCos::ExtraAttr* unsafe_arena_release_extraattr();

  // @@protoc_insertion_point(class_scope:ClientCos.ObjAttrModifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ClientCos::ExtraAttr* extraattr_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SpObjAttrModifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SpObjAttrModifyReq) */ {
 public:
  inline SpObjAttrModifyReq() : SpObjAttrModifyReq(nullptr) {}
  virtual ~SpObjAttrModifyReq();

  SpObjAttrModifyReq(const SpObjAttrModifyReq& from);
  SpObjAttrModifyReq(SpObjAttrModifyReq&& from) noexcept
    : SpObjAttrModifyReq() {
    *this = ::std::move(from);
  }

  inline SpObjAttrModifyReq& operator=(const SpObjAttrModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpObjAttrModifyReq& operator=(SpObjAttrModifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpObjAttrModifyReq& default_instance();

  static inline const SpObjAttrModifyReq* internal_default_instance() {
    return reinterpret_cast<const SpObjAttrModifyReq*>(
               &_SpObjAttrModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SpObjAttrModifyReq& a, SpObjAttrModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SpObjAttrModifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpObjAttrModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpObjAttrModifyReq* New() const final {
    return CreateMaybeMessage<SpObjAttrModifyReq>(nullptr);
  }

  SpObjAttrModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpObjAttrModifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpObjAttrModifyReq& from);
  void MergeFrom(const SpObjAttrModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpObjAttrModifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SpObjAttrModifyReq";
  }
  protected:
  explicit SpObjAttrModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedattrFieldNumber = 9,
    kCustomheaderFieldNumber = 11,
    kCustomheaderPlatFieldNumber = 12,
    kTaglistFieldNumber = 15,
    kPathFieldNumber = 1,
    kSkFieldNumber = 3,
    kVersionFieldNumber = 4,
    kBizAttrFieldNumber = 5,
    kRealShaFieldNumber = 13,
    kStorageTypeFieldNumber = 14,
    kObjexpireattrFieldNumber = 16,
    kFlagFieldNumber = 2,
    kCtimeFieldNumber = 6,
    kMtimeFieldNumber = 7,
    kForbidFieldNumber = 8,
    kAuthFieldNumber = 10,
  };
  // repeated .ClientCos.ReservedAttr reservedattr = 9;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CustomHeader customheader = 11;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // repeated .ClientCos.CustomHeader customheader_plat = 12;
  int customheader_plat_size() const;
  private:
  int _internal_customheader_plat_size() const;
  public:
  void clear_customheader_plat();
  ::ClientCos::CustomHeader* mutable_customheader_plat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader_plat();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader_plat(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader_plat();
  public:
  const ::ClientCos::CustomHeader& customheader_plat(int index) const;
  ::ClientCos::CustomHeader* add_customheader_plat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader_plat() const;

  // repeated .ClientCos.ObjTag taglist = 15;
  int taglist_size() const;
  private:
  int _internal_taglist_size() const;
  public:
  void clear_taglist();
  ::ClientCos::ObjTag* mutable_taglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
      mutable_taglist();
  private:
  const ::ClientCos::ObjTag& _internal_taglist(int index) const;
  ::ClientCos::ObjTag* _internal_add_taglist();
  public:
  const ::ClientCos::ObjTag& taglist(int index) const;
  ::ClientCos::ObjTag* add_taglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
      taglist() const;

  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes sk = 3;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // optional bytes version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes biz_attr = 5;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes real_sha = 13;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // optional bytes storage_type = 14;
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // optional .ClientCos.ObjExpireAttr objexpireattr = 16;
  bool has_objexpireattr() const;
  private:
  bool _internal_has_objexpireattr() const;
  public:
  void clear_objexpireattr();
  const ::ClientCos::ObjExpireAttr& objexpireattr() const;
  ::ClientCos::ObjExpireAttr* release_objexpireattr();
  ::ClientCos::ObjExpireAttr* mutable_objexpireattr();
  void set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr);
  private:
  const ::ClientCos::ObjExpireAttr& _internal_objexpireattr() const;
  ::ClientCos::ObjExpireAttr* _internal_mutable_objexpireattr();
  public:
  void unsafe_arena_set_allocated_objexpireattr(
      ::ClientCos::ObjExpireAttr* objexpireattr);
  ::ClientCos::ObjExpireAttr* unsafe_arena_release_objexpireattr();

  // required uint32 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ctime = 6 [default = 0];
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 7 [default = 0];
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 forbid = 8;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 10;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SpObjAttrModifyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_plat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag > taglist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  ::ClientCos::ObjExpireAttr* objexpireattr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  int auth_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SpObjAttrModifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SpObjAttrModifyRsp) */ {
 public:
  inline SpObjAttrModifyRsp() : SpObjAttrModifyRsp(nullptr) {}
  virtual ~SpObjAttrModifyRsp();

  SpObjAttrModifyRsp(const SpObjAttrModifyRsp& from);
  SpObjAttrModifyRsp(SpObjAttrModifyRsp&& from) noexcept
    : SpObjAttrModifyRsp() {
    *this = ::std::move(from);
  }

  inline SpObjAttrModifyRsp& operator=(const SpObjAttrModifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpObjAttrModifyRsp& operator=(SpObjAttrModifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpObjAttrModifyRsp& default_instance();

  static inline const SpObjAttrModifyRsp* internal_default_instance() {
    return reinterpret_cast<const SpObjAttrModifyRsp*>(
               &_SpObjAttrModifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SpObjAttrModifyRsp& a, SpObjAttrModifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SpObjAttrModifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpObjAttrModifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpObjAttrModifyRsp* New() const final {
    return CreateMaybeMessage<SpObjAttrModifyRsp>(nullptr);
  }

  SpObjAttrModifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpObjAttrModifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpObjAttrModifyRsp& from);
  void MergeFrom(const SpObjAttrModifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpObjAttrModifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SpObjAttrModifyRsp";
  }
  protected:
  explicit SpObjAttrModifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SpObjAttrModifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjAttrQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjAttrQueryReq) */ {
 public:
  inline ObjAttrQueryReq() : ObjAttrQueryReq(nullptr) {}
  virtual ~ObjAttrQueryReq();

  ObjAttrQueryReq(const ObjAttrQueryReq& from);
  ObjAttrQueryReq(ObjAttrQueryReq&& from) noexcept
    : ObjAttrQueryReq() {
    *this = ::std::move(from);
  }

  inline ObjAttrQueryReq& operator=(const ObjAttrQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjAttrQueryReq& operator=(ObjAttrQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjAttrQueryReq& default_instance();

  static inline const ObjAttrQueryReq* internal_default_instance() {
    return reinterpret_cast<const ObjAttrQueryReq*>(
               &_ObjAttrQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ObjAttrQueryReq& a, ObjAttrQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjAttrQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjAttrQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjAttrQueryReq* New() const final {
    return CreateMaybeMessage<ObjAttrQueryReq>(nullptr);
  }

  ObjAttrQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjAttrQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjAttrQueryReq& from);
  void MergeFrom(const ObjAttrQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjAttrQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjAttrQueryReq";
  }
  protected:
  explicit ObjAttrQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // optional bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjAttrQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjAttrQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjAttrQueryRsp) */ {
 public:
  inline ObjAttrQueryRsp() : ObjAttrQueryRsp(nullptr) {}
  virtual ~ObjAttrQueryRsp();

  ObjAttrQueryRsp(const ObjAttrQueryRsp& from);
  ObjAttrQueryRsp(ObjAttrQueryRsp&& from) noexcept
    : ObjAttrQueryRsp() {
    *this = ::std::move(from);
  }

  inline ObjAttrQueryRsp& operator=(const ObjAttrQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjAttrQueryRsp& operator=(ObjAttrQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjAttrQueryRsp& default_instance();

  static inline const ObjAttrQueryRsp* internal_default_instance() {
    return reinterpret_cast<const ObjAttrQueryRsp*>(
               &_ObjAttrQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ObjAttrQueryRsp& a, ObjAttrQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjAttrQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjAttrQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjAttrQueryRsp* New() const final {
    return CreateMaybeMessage<ObjAttrQueryRsp>(nullptr);
  }

  ObjAttrQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjAttrQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjAttrQueryRsp& from);
  void MergeFrom(const ObjAttrQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjAttrQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjAttrQueryRsp";
  }
  protected:
  explicit ObjAttrQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedattrFieldNumber = 8,
    kCustomheaderFieldNumber = 10,
    kTaglistFieldNumber = 23,
    kBizAttrFieldNumber = 1,
    kShaFieldNumber = 6,
    kRealShaFieldNumber = 11,
    kStorageTypeFieldNumber = 14,
    kVersionFieldNumber = 15,
    kUploadSourceFieldNumber = 18,
    kFastUploadKeyFieldNumber = 24,
    kCasinfoFieldNumber = 19,
    kSseinfoFieldNumber = 20,
    kObjexpireattrFieldNumber = 22,
    kOwnerFieldNumber = 25,
    kLockinfoFieldNumber = 27,
    kCtimeFieldNumber = 2,
    kMtimeFieldNumber = 3,
    kFileSizeFieldNumber = 4,
    kFileLengthFieldNumber = 5,
    kForbidFieldNumber = 7,
    kAuthFieldNumber = 9,
    kSlicesizeFieldNumber = 12,
    kTypeFieldNumber = 13,
    kDeleteMarkerFieldNumber = 16,
    kIslatestFieldNumber = 17,
    kIsV4FieldNumber = 28,
    kTagnumFieldNumber = 21,
    kLockExpiredTimeFieldNumber = 26,
  };
  // repeated .ClientCos.ReservedAttr reservedattr = 8;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CustomHeader customheader = 10;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // repeated .ClientCos.ObjTag taglist = 23;
  int taglist_size() const;
  private:
  int _internal_taglist_size() const;
  public:
  void clear_taglist();
  ::ClientCos::ObjTag* mutable_taglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
      mutable_taglist();
  private:
  const ::ClientCos::ObjTag& _internal_taglist(int index) const;
  ::ClientCos::ObjTag* _internal_add_taglist();
  public:
  const ::ClientCos::ObjTag& taglist(int index) const;
  ::ClientCos::ObjTag* add_taglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
      taglist() const;

  // required bytes biz_attr = 1 [default = ""];
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes sha = 6;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes real_sha = 11;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // optional bytes storage_type = 14;
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // optional bytes version = 15;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes upload_source = 18;
  bool has_upload_source() const;
  private:
  bool _internal_has_upload_source() const;
  public:
  void clear_upload_source();
  const std::string& upload_source() const;
  void set_upload_source(const std::string& value);
  void set_upload_source(std::string&& value);
  void set_upload_source(const char* value);
  void set_upload_source(const void* value, size_t size);
  std::string* mutable_upload_source();
  std::string* release_upload_source();
  void set_allocated_upload_source(std::string* upload_source);
  private:
  const std::string& _internal_upload_source() const;
  void _internal_set_upload_source(const std::string& value);
  std::string* _internal_mutable_upload_source();
  public:

  // optional string fast_upload_key = 24;
  bool has_fast_upload_key() const;
  private:
  bool _internal_has_fast_upload_key() const;
  public:
  void clear_fast_upload_key();
  const std::string& fast_upload_key() const;
  void set_fast_upload_key(const std::string& value);
  void set_fast_upload_key(std::string&& value);
  void set_fast_upload_key(const char* value);
  void set_fast_upload_key(const char* value, size_t size);
  std::string* mutable_fast_upload_key();
  std::string* release_fast_upload_key();
  void set_allocated_fast_upload_key(std::string* fast_upload_key);
  private:
  const std::string& _internal_fast_upload_key() const;
  void _internal_set_fast_upload_key(const std::string& value);
  std::string* _internal_mutable_fast_upload_key();
  public:

  // optional .ClientCos.CasInfo casinfo = 19;
  bool has_casinfo() const;
  private:
  bool _internal_has_casinfo() const;
  public:
  void clear_casinfo();
  const ::ClientCos::CasInfo& casinfo() const;
  ::ClientCos::CasInfo* release_casinfo();
  ::ClientCos::CasInfo* mutable_casinfo();
  void set_allocated_casinfo(::ClientCos::CasInfo* casinfo);
  private:
  const ::ClientCos::CasInfo& _internal_casinfo() const;
  ::ClientCos::CasInfo* _internal_mutable_casinfo();
  public:
  void unsafe_arena_set_allocated_casinfo(
      ::ClientCos::CasInfo* casinfo);
  ::ClientCos::CasInfo* unsafe_arena_release_casinfo();

  // optional .ClientCos.SseInfo sseinfo = 20;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::ClientCos::SseInfo& sseinfo() const;
  ::ClientCos::SseInfo* release_sseinfo();
  ::ClientCos::SseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo);
  private:
  const ::ClientCos::SseInfo& _internal_sseinfo() const;
  ::ClientCos::SseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::ClientCos::SseInfo* sseinfo);
  ::ClientCos::SseInfo* unsafe_arena_release_sseinfo();

  // optional .ClientCos.ObjExpireAttr objexpireattr = 22;
  bool has_objexpireattr() const;
  private:
  bool _internal_has_objexpireattr() const;
  public:
  void clear_objexpireattr();
  const ::ClientCos::ObjExpireAttr& objexpireattr() const;
  ::ClientCos::ObjExpireAttr* release_objexpireattr();
  ::ClientCos::ObjExpireAttr* mutable_objexpireattr();
  void set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr);
  private:
  const ::ClientCos::ObjExpireAttr& _internal_objexpireattr() const;
  ::ClientCos::ObjExpireAttr* _internal_mutable_objexpireattr();
  public:
  void unsafe_arena_set_allocated_objexpireattr(
      ::ClientCos::ObjExpireAttr* objexpireattr);
  ::ClientCos::ObjExpireAttr* unsafe_arena_release_objexpireattr();

  // optional .ClientCos.OwnerInfo owner = 25;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::ClientCos::OwnerInfo& owner() const;
  ::ClientCos::OwnerInfo* release_owner();
  ::ClientCos::OwnerInfo* mutable_owner();
  void set_allocated_owner(::ClientCos::OwnerInfo* owner);
  private:
  const ::ClientCos::OwnerInfo& _internal_owner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::ClientCos::OwnerInfo* owner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_owner();

  // optional .ClientCos.LockInfo lockinfo = 27;
  bool has_lockinfo() const;
  private:
  bool _internal_has_lockinfo() const;
  public:
  void clear_lockinfo();
  const ::ClientCos::LockInfo& lockinfo() const;
  ::ClientCos::LockInfo* release_lockinfo();
  ::ClientCos::LockInfo* mutable_lockinfo();
  void set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo);
  private:
  const ::ClientCos::LockInfo& _internal_lockinfo() const;
  ::ClientCos::LockInfo* _internal_mutable_lockinfo();
  public:
  void unsafe_arena_set_allocated_lockinfo(
      ::ClientCos::LockInfo* lockinfo);
  ::ClientCos::LockInfo* unsafe_arena_release_lockinfo();

  // required uint32 ctime = 2 [default = 0];
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mtime = 3 [default = 0];
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 file_size = 4;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 file_length = 5;
  bool has_file_length() const;
  private:
  bool _internal_has_file_length() const;
  public:
  void clear_file_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_length() const;
  void set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_length() const;
  void _internal_set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 forbid = 7;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 9;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional uint32 slicesize = 12;
  bool has_slicesize() const;
  private:
  bool _internal_has_slicesize() const;
  public:
  void clear_slicesize();
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize() const;
  void set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slicesize() const;
  void _internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 13;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool delete_marker = 16;
  bool has_delete_marker() const;
  private:
  bool _internal_has_delete_marker() const;
  public:
  void clear_delete_marker();
  bool delete_marker() const;
  void set_delete_marker(bool value);
  private:
  bool _internal_delete_marker() const;
  void _internal_set_delete_marker(bool value);
  public:

  // optional bool islatest = 17;
  bool has_islatest() const;
  private:
  bool _internal_has_islatest() const;
  public:
  void clear_islatest();
  bool islatest() const;
  void set_islatest(bool value);
  private:
  bool _internal_islatest() const;
  void _internal_set_islatest(bool value);
  public:

  // optional bool is_v4 = 28;
  bool has_is_v4() const;
  private:
  bool _internal_has_is_v4() const;
  public:
  void clear_is_v4();
  bool is_v4() const;
  void set_is_v4(bool value);
  private:
  bool _internal_is_v4() const;
  void _internal_set_is_v4(bool value);
  public:

  // optional uint32 tagnum = 21;
  bool has_tagnum() const;
  private:
  bool _internal_has_tagnum() const;
  public:
  void clear_tagnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 tagnum() const;
  void set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tagnum() const;
  void _internal_set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 lock_expired_time = 26;
  bool has_lock_expired_time() const;
  private:
  bool _internal_has_lock_expired_time() const;
  public:
  void clear_lock_expired_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_expired_time() const;
  void set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_expired_time() const;
  void _internal_set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjAttrQueryRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag > taglist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fast_upload_key_;
  ::ClientCos::CasInfo* casinfo_;
  ::ClientCos::SseInfo* sseinfo_;
  ::ClientCos::ObjExpireAttr* objexpireattr_;
  ::ClientCos::OwnerInfo* owner_;
  ::ClientCos::LockInfo* lockinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  int auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  bool delete_marker_;
  bool islatest_;
  bool is_v4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tagnum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_expired_time_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DeleteReq) */ {
 public:
  inline DeleteReq() : DeleteReq(nullptr) {}
  virtual ~DeleteReq();

  DeleteReq(const DeleteReq& from);
  DeleteReq(DeleteReq&& from) noexcept
    : DeleteReq() {
    *this = ::std::move(from);
  }

  inline DeleteReq& operator=(const DeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq& operator=(DeleteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq& default_instance();

  static inline const DeleteReq* internal_default_instance() {
    return reinterpret_cast<const DeleteReq*>(
               &_DeleteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeleteReq& a, DeleteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq* New() const final {
    return CreateMaybeMessage<DeleteReq>(nullptr);
  }

  DeleteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq& from);
  void MergeFrom(const DeleteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DeleteReq";
  }
  protected:
  explicit DeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.DeleteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DeleteRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DeleteRsp) */ {
 public:
  inline DeleteRsp() : DeleteRsp(nullptr) {}
  virtual ~DeleteRsp();

  DeleteRsp(const DeleteRsp& from);
  DeleteRsp(DeleteRsp&& from) noexcept
    : DeleteRsp() {
    *this = ::std::move(from);
  }

  inline DeleteRsp& operator=(const DeleteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRsp& operator=(DeleteRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRsp& default_instance();

  static inline const DeleteRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteRsp*>(
               &_DeleteRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DeleteRsp& a, DeleteRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRsp* New() const final {
    return CreateMaybeMessage<DeleteRsp>(nullptr);
  }

  DeleteRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRsp& from);
  void MergeFrom(const DeleteRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DeleteRsp";
  }
  protected:
  explicit DeleteRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.DeleteRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListReq) */ {
 public:
  inline ListReq() : ListReq(nullptr) {}
  virtual ~ListReq();

  ListReq(const ListReq& from);
  ListReq(ListReq&& from) noexcept
    : ListReq() {
    *this = ::std::move(from);
  }

  inline ListReq& operator=(const ListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReq& operator=(ListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReq& default_instance();

  static inline const ListReq* internal_default_instance() {
    return reinterpret_cast<const ListReq*>(
               &_ListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListReq& a, ListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReq* New() const final {
    return CreateMaybeMessage<ListReq>(nullptr);
  }

  ListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReq& from);
  void MergeFrom(const ListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListReq";
  }
  protected:
  explicit ListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kDelimiterFieldNumber = 3,
    kFlagFieldNumber = 5,
    kNeedXCosFieldNumber = 6,
    kNeedTagFieldNumber = 7,
    kCountFieldNumber = 4,
  };
  // required bytes prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // required bytes offset = 2 [default = ""];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const std::string& offset() const;
  void set_offset(const std::string& value);
  void set_offset(std::string&& value);
  void set_offset(const char* value);
  void set_offset(const void* value, size_t size);
  std::string* mutable_offset();
  std::string* release_offset();
  void set_allocated_offset(std::string* offset);
  private:
  const std::string& _internal_offset() const;
  void _internal_set_offset(const std::string& value);
  std::string* _internal_mutable_offset();
  public:

  // required bytes delimiter = 3 [default = "/"];
  bool has_delimiter() const;
  private:
  bool _internal_has_delimiter() const;
  public:
  void clear_delimiter();
  const std::string& delimiter() const;
  void set_delimiter(const std::string& value);
  void set_delimiter(std::string&& value);
  void set_delimiter(const char* value);
  void set_delimiter(const void* value, size_t size);
  std::string* mutable_delimiter();
  std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // required bool flag = 5 [default = false];
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // optional bool need_x_cos = 6 [default = false];
  bool has_need_x_cos() const;
  private:
  bool _internal_has_need_x_cos() const;
  public:
  void clear_need_x_cos();
  bool need_x_cos() const;
  void set_need_x_cos(bool value);
  private:
  bool _internal_need_x_cos() const;
  void _internal_set_need_x_cos(bool value);
  public:

  // optional bool need_tag = 7 [default = false];
  bool has_need_tag() const;
  private:
  bool _internal_has_need_tag() const;
  public:
  void clear_need_tag();
  bool need_tag() const;
  void set_need_tag(bool value);
  private:
  bool _internal_need_tag() const;
  void _internal_set_need_tag(bool value);
  public:

  // required uint32 count = 4 [default = 200];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_delimiter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
  bool flag_;
  bool need_x_cos_;
  bool need_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListRsp) */ {
 public:
  inline ListRsp() : ListRsp(nullptr) {}
  virtual ~ListRsp();

  ListRsp(const ListRsp& from);
  ListRsp(ListRsp&& from) noexcept
    : ListRsp() {
    *this = ::std::move(from);
  }

  inline ListRsp& operator=(const ListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRsp& operator=(ListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRsp& default_instance();

  static inline const ListRsp* internal_default_instance() {
    return reinterpret_cast<const ListRsp*>(
               &_ListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ListRsp& a, ListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRsp* New() const final {
    return CreateMaybeMessage<ListRsp>(nullptr);
  }

  ListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRsp& from);
  void MergeFrom(const ListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListRsp";
  }
  protected:
  explicit ListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjsFieldNumber = 1,
    kNextOffsetFieldNumber = 2,
    kListoverFieldNumber = 3,
  };
  // repeated .ClientCos.ObjItem objs = 1;
  int objs_size() const;
  private:
  int _internal_objs_size() const;
  public:
  void clear_objs();
  ::ClientCos::ObjItem* mutable_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >*
      mutable_objs();
  private:
  const ::ClientCos::ObjItem& _internal_objs(int index) const;
  ::ClientCos::ObjItem* _internal_add_objs();
  public:
  const ::ClientCos::ObjItem& objs(int index) const;
  ::ClientCos::ObjItem* add_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >&
      objs() const;

  // optional bytes next_offset = 2 [default = ""];
  bool has_next_offset() const;
  private:
  bool _internal_has_next_offset() const;
  public:
  void clear_next_offset();
  const std::string& next_offset() const;
  void set_next_offset(const std::string& value);
  void set_next_offset(std::string&& value);
  void set_next_offset(const char* value);
  void set_next_offset(const void* value, size_t size);
  std::string* mutable_next_offset();
  std::string* release_next_offset();
  void set_allocated_next_offset(std::string* next_offset);
  private:
  const std::string& _internal_next_offset() const;
  void _internal_set_next_offset(const std::string& value);
  std::string* _internal_mutable_next_offset();
  public:

  // optional bool listover = 3 [default = false];
  bool has_listover() const;
  private:
  bool _internal_has_listover() const;
  public:
  void clear_listover();
  bool listover() const;
  void set_listover(bool value);
  private:
  bool _internal_listover() const;
  void _internal_set_listover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem > objs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_offset_;
  bool listover_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListMutiobjReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListMutiobjReq) */ {
 public:
  inline ListMutiobjReq() : ListMutiobjReq(nullptr) {}
  virtual ~ListMutiobjReq();

  ListMutiobjReq(const ListMutiobjReq& from);
  ListMutiobjReq(ListMutiobjReq&& from) noexcept
    : ListMutiobjReq() {
    *this = ::std::move(from);
  }

  inline ListMutiobjReq& operator=(const ListMutiobjReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMutiobjReq& operator=(ListMutiobjReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMutiobjReq& default_instance();

  static inline const ListMutiobjReq* internal_default_instance() {
    return reinterpret_cast<const ListMutiobjReq*>(
               &_ListMutiobjReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListMutiobjReq& a, ListMutiobjReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMutiobjReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMutiobjReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMutiobjReq* New() const final {
    return CreateMaybeMessage<ListMutiobjReq>(nullptr);
  }

  ListMutiobjReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMutiobjReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMutiobjReq& from);
  void MergeFrom(const ListMutiobjReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMutiobjReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListMutiobjReq";
  }
  protected:
  explicit ListMutiobjReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kObjnamemarkerFieldNumber = 2,
    kUploadkeymarkerFieldNumber = 3,
    kDelimiterFieldNumber = 4,
    kFlagFieldNumber = 6,
    kCountFieldNumber = 5,
  };
  // required bytes prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // required bytes objnamemarker = 2 [default = ""];
  bool has_objnamemarker() const;
  private:
  bool _internal_has_objnamemarker() const;
  public:
  void clear_objnamemarker();
  const std::string& objnamemarker() const;
  void set_objnamemarker(const std::string& value);
  void set_objnamemarker(std::string&& value);
  void set_objnamemarker(const char* value);
  void set_objnamemarker(const void* value, size_t size);
  std::string* mutable_objnamemarker();
  std::string* release_objnamemarker();
  void set_allocated_objnamemarker(std::string* objnamemarker);
  private:
  const std::string& _internal_objnamemarker() const;
  void _internal_set_objnamemarker(const std::string& value);
  std::string* _internal_mutable_objnamemarker();
  public:

  // required bytes uploadkeymarker = 3 [default = ""];
  bool has_uploadkeymarker() const;
  private:
  bool _internal_has_uploadkeymarker() const;
  public:
  void clear_uploadkeymarker();
  const std::string& uploadkeymarker() const;
  void set_uploadkeymarker(const std::string& value);
  void set_uploadkeymarker(std::string&& value);
  void set_uploadkeymarker(const char* value);
  void set_uploadkeymarker(const void* value, size_t size);
  std::string* mutable_uploadkeymarker();
  std::string* release_uploadkeymarker();
  void set_allocated_uploadkeymarker(std::string* uploadkeymarker);
  private:
  const std::string& _internal_uploadkeymarker() const;
  void _internal_set_uploadkeymarker(const std::string& value);
  std::string* _internal_mutable_uploadkeymarker();
  public:

  // required bytes delimiter = 4 [default = ""];
  bool has_delimiter() const;
  private:
  bool _internal_has_delimiter() const;
  public:
  void clear_delimiter();
  const std::string& delimiter() const;
  void set_delimiter(const std::string& value);
  void set_delimiter(std::string&& value);
  void set_delimiter(const char* value);
  void set_delimiter(const void* value, size_t size);
  std::string* mutable_delimiter();
  std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // optional bool flag = 6;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // required uint32 count = 5 [default = 200];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListMutiobjReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objnamemarker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadkeymarker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
  bool flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListMutiobjRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListMutiobjRsp) */ {
 public:
  inline ListMutiobjRsp() : ListMutiobjRsp(nullptr) {}
  virtual ~ListMutiobjRsp();

  ListMutiobjRsp(const ListMutiobjRsp& from);
  ListMutiobjRsp(ListMutiobjRsp&& from) noexcept
    : ListMutiobjRsp() {
    *this = ::std::move(from);
  }

  inline ListMutiobjRsp& operator=(const ListMutiobjRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMutiobjRsp& operator=(ListMutiobjRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMutiobjRsp& default_instance();

  static inline const ListMutiobjRsp* internal_default_instance() {
    return reinterpret_cast<const ListMutiobjRsp*>(
               &_ListMutiobjRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ListMutiobjRsp& a, ListMutiobjRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMutiobjRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMutiobjRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMutiobjRsp* New() const final {
    return CreateMaybeMessage<ListMutiobjRsp>(nullptr);
  }

  ListMutiobjRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMutiobjRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMutiobjRsp& from);
  void MergeFrom(const ListMutiobjRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMutiobjRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListMutiobjRsp";
  }
  protected:
  explicit ListMutiobjRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjsFieldNumber = 1,
    kNextObjnamemarkerFieldNumber = 2,
    kNextUploadkeymarkerFieldNumber = 3,
    kListoverFieldNumber = 4,
  };
  // repeated .ClientCos.MutiObjItem objs = 1;
  int objs_size() const;
  private:
  int _internal_objs_size() const;
  public:
  void clear_objs();
  ::ClientCos::MutiObjItem* mutable_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::MutiObjItem >*
      mutable_objs();
  private:
  const ::ClientCos::MutiObjItem& _internal_objs(int index) const;
  ::ClientCos::MutiObjItem* _internal_add_objs();
  public:
  const ::ClientCos::MutiObjItem& objs(int index) const;
  ::ClientCos::MutiObjItem* add_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::MutiObjItem >&
      objs() const;

  // optional bytes next_objnamemarker = 2 [default = ""];
  bool has_next_objnamemarker() const;
  private:
  bool _internal_has_next_objnamemarker() const;
  public:
  void clear_next_objnamemarker();
  const std::string& next_objnamemarker() const;
  void set_next_objnamemarker(const std::string& value);
  void set_next_objnamemarker(std::string&& value);
  void set_next_objnamemarker(const char* value);
  void set_next_objnamemarker(const void* value, size_t size);
  std::string* mutable_next_objnamemarker();
  std::string* release_next_objnamemarker();
  void set_allocated_next_objnamemarker(std::string* next_objnamemarker);
  private:
  const std::string& _internal_next_objnamemarker() const;
  void _internal_set_next_objnamemarker(const std::string& value);
  std::string* _internal_mutable_next_objnamemarker();
  public:

  // optional bytes next_uploadkeymarker = 3 [default = ""];
  bool has_next_uploadkeymarker() const;
  private:
  bool _internal_has_next_uploadkeymarker() const;
  public:
  void clear_next_uploadkeymarker();
  const std::string& next_uploadkeymarker() const;
  void set_next_uploadkeymarker(const std::string& value);
  void set_next_uploadkeymarker(std::string&& value);
  void set_next_uploadkeymarker(const char* value);
  void set_next_uploadkeymarker(const void* value, size_t size);
  std::string* mutable_next_uploadkeymarker();
  std::string* release_next_uploadkeymarker();
  void set_allocated_next_uploadkeymarker(std::string* next_uploadkeymarker);
  private:
  const std::string& _internal_next_uploadkeymarker() const;
  void _internal_set_next_uploadkeymarker(const std::string& value);
  std::string* _internal_mutable_next_uploadkeymarker();
  public:

  // optional bool listover = 4 [default = false];
  bool has_listover() const;
  private:
  bool _internal_has_listover() const;
  public:
  void clear_listover();
  bool listover() const;
  void set_listover(bool value);
  private:
  bool _internal_listover() const;
  void _internal_set_listover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListMutiobjRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::MutiObjItem > objs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_objnamemarker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_uploadkeymarker_;
  bool listover_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListObjVerReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListObjVerReq) */ {
 public:
  inline ListObjVerReq() : ListObjVerReq(nullptr) {}
  virtual ~ListObjVerReq();

  ListObjVerReq(const ListObjVerReq& from);
  ListObjVerReq(ListObjVerReq&& from) noexcept
    : ListObjVerReq() {
    *this = ::std::move(from);
  }

  inline ListObjVerReq& operator=(const ListObjVerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListObjVerReq& operator=(ListObjVerReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListObjVerReq& default_instance();

  static inline const ListObjVerReq* internal_default_instance() {
    return reinterpret_cast<const ListObjVerReq*>(
               &_ListObjVerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ListObjVerReq& a, ListObjVerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListObjVerReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListObjVerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListObjVerReq* New() const final {
    return CreateMaybeMessage<ListObjVerReq>(nullptr);
  }

  ListObjVerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListObjVerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListObjVerReq& from);
  void MergeFrom(const ListObjVerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListObjVerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListObjVerReq";
  }
  protected:
  explicit ListObjVerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kObjnamemarkerFieldNumber = 2,
    kVersionmarkerFieldNumber = 3,
    kDelimiterFieldNumber = 4,
    kFlagFieldNumber = 6,
    kNeedXCosFieldNumber = 7,
    kNeedTagFieldNumber = 8,
    kCountFieldNumber = 5,
  };
  // required bytes prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // required bytes objnamemarker = 2 [default = ""];
  bool has_objnamemarker() const;
  private:
  bool _internal_has_objnamemarker() const;
  public:
  void clear_objnamemarker();
  const std::string& objnamemarker() const;
  void set_objnamemarker(const std::string& value);
  void set_objnamemarker(std::string&& value);
  void set_objnamemarker(const char* value);
  void set_objnamemarker(const void* value, size_t size);
  std::string* mutable_objnamemarker();
  std::string* release_objnamemarker();
  void set_allocated_objnamemarker(std::string* objnamemarker);
  private:
  const std::string& _internal_objnamemarker() const;
  void _internal_set_objnamemarker(const std::string& value);
  std::string* _internal_mutable_objnamemarker();
  public:

  // required bytes versionmarker = 3 [default = ""];
  bool has_versionmarker() const;
  private:
  bool _internal_has_versionmarker() const;
  public:
  void clear_versionmarker();
  const std::string& versionmarker() const;
  void set_versionmarker(const std::string& value);
  void set_versionmarker(std::string&& value);
  void set_versionmarker(const char* value);
  void set_versionmarker(const void* value, size_t size);
  std::string* mutable_versionmarker();
  std::string* release_versionmarker();
  void set_allocated_versionmarker(std::string* versionmarker);
  private:
  const std::string& _internal_versionmarker() const;
  void _internal_set_versionmarker(const std::string& value);
  std::string* _internal_mutable_versionmarker();
  public:

  // required bytes delimiter = 4 [default = ""];
  bool has_delimiter() const;
  private:
  bool _internal_has_delimiter() const;
  public:
  void clear_delimiter();
  const std::string& delimiter() const;
  void set_delimiter(const std::string& value);
  void set_delimiter(std::string&& value);
  void set_delimiter(const char* value);
  void set_delimiter(const void* value, size_t size);
  std::string* mutable_delimiter();
  std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // required bool flag = 6 [default = false];
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // optional bool need_x_cos = 7 [default = false];
  bool has_need_x_cos() const;
  private:
  bool _internal_has_need_x_cos() const;
  public:
  void clear_need_x_cos();
  bool need_x_cos() const;
  void set_need_x_cos(bool value);
  private:
  bool _internal_need_x_cos() const;
  void _internal_set_need_x_cos(bool value);
  public:

  // optional bool need_tag = 8 [default = false];
  bool has_need_tag() const;
  private:
  bool _internal_has_need_tag() const;
  public:
  void clear_need_tag();
  bool need_tag() const;
  void set_need_tag(bool value);
  private:
  bool _internal_need_tag() const;
  void _internal_set_need_tag(bool value);
  public:

  // required uint32 count = 5 [default = 200];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListObjVerReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objnamemarker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionmarker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
  bool flag_;
  bool need_x_cos_;
  bool need_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListObjVerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListObjVerRsp) */ {
 public:
  inline ListObjVerRsp() : ListObjVerRsp(nullptr) {}
  virtual ~ListObjVerRsp();

  ListObjVerRsp(const ListObjVerRsp& from);
  ListObjVerRsp(ListObjVerRsp&& from) noexcept
    : ListObjVerRsp() {
    *this = ::std::move(from);
  }

  inline ListObjVerRsp& operator=(const ListObjVerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListObjVerRsp& operator=(ListObjVerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListObjVerRsp& default_instance();

  static inline const ListObjVerRsp* internal_default_instance() {
    return reinterpret_cast<const ListObjVerRsp*>(
               &_ListObjVerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ListObjVerRsp& a, ListObjVerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ListObjVerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListObjVerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListObjVerRsp* New() const final {
    return CreateMaybeMessage<ListObjVerRsp>(nullptr);
  }

  ListObjVerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListObjVerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListObjVerRsp& from);
  void MergeFrom(const ListObjVerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListObjVerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListObjVerRsp";
  }
  protected:
  explicit ListObjVerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjsFieldNumber = 1,
    kNextObjnamemarkerFieldNumber = 2,
    kNextVersionmarkerFieldNumber = 3,
    kListoverFieldNumber = 4,
  };
  // repeated .ClientCos.ObjItem objs = 1;
  int objs_size() const;
  private:
  int _internal_objs_size() const;
  public:
  void clear_objs();
  ::ClientCos::ObjItem* mutable_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >*
      mutable_objs();
  private:
  const ::ClientCos::ObjItem& _internal_objs(int index) const;
  ::ClientCos::ObjItem* _internal_add_objs();
  public:
  const ::ClientCos::ObjItem& objs(int index) const;
  ::ClientCos::ObjItem* add_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >&
      objs() const;

  // optional bytes next_objnamemarker = 2 [default = ""];
  bool has_next_objnamemarker() const;
  private:
  bool _internal_has_next_objnamemarker() const;
  public:
  void clear_next_objnamemarker();
  const std::string& next_objnamemarker() const;
  void set_next_objnamemarker(const std::string& value);
  void set_next_objnamemarker(std::string&& value);
  void set_next_objnamemarker(const char* value);
  void set_next_objnamemarker(const void* value, size_t size);
  std::string* mutable_next_objnamemarker();
  std::string* release_next_objnamemarker();
  void set_allocated_next_objnamemarker(std::string* next_objnamemarker);
  private:
  const std::string& _internal_next_objnamemarker() const;
  void _internal_set_next_objnamemarker(const std::string& value);
  std::string* _internal_mutable_next_objnamemarker();
  public:

  // optional bytes next_versionmarker = 3 [default = ""];
  bool has_next_versionmarker() const;
  private:
  bool _internal_has_next_versionmarker() const;
  public:
  void clear_next_versionmarker();
  const std::string& next_versionmarker() const;
  void set_next_versionmarker(const std::string& value);
  void set_next_versionmarker(std::string&& value);
  void set_next_versionmarker(const char* value);
  void set_next_versionmarker(const void* value, size_t size);
  std::string* mutable_next_versionmarker();
  std::string* release_next_versionmarker();
  void set_allocated_next_versionmarker(std::string* next_versionmarker);
  private:
  const std::string& _internal_next_versionmarker() const;
  void _internal_set_next_versionmarker(const std::string& value);
  std::string* _internal_mutable_next_versionmarker();
  public:

  // optional bool listover = 4 [default = false];
  bool has_listover() const;
  private:
  bool _internal_has_listover() const;
  public:
  void clear_listover();
  bool listover() const;
  void set_listover(bool value);
  private:
  bool _internal_listover() const;
  void _internal_set_listover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListObjVerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem > objs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_objnamemarker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_versionmarker_;
  bool listover_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class UnfinObjAttrModifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.UnfinObjAttrModifyReq) */ {
 public:
  inline UnfinObjAttrModifyReq() : UnfinObjAttrModifyReq(nullptr) {}
  virtual ~UnfinObjAttrModifyReq();

  UnfinObjAttrModifyReq(const UnfinObjAttrModifyReq& from);
  UnfinObjAttrModifyReq(UnfinObjAttrModifyReq&& from) noexcept
    : UnfinObjAttrModifyReq() {
    *this = ::std::move(from);
  }

  inline UnfinObjAttrModifyReq& operator=(const UnfinObjAttrModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfinObjAttrModifyReq& operator=(UnfinObjAttrModifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnfinObjAttrModifyReq& default_instance();

  static inline const UnfinObjAttrModifyReq* internal_default_instance() {
    return reinterpret_cast<const UnfinObjAttrModifyReq*>(
               &_UnfinObjAttrModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UnfinObjAttrModifyReq& a, UnfinObjAttrModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UnfinObjAttrModifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfinObjAttrModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnfinObjAttrModifyReq* New() const final {
    return CreateMaybeMessage<UnfinObjAttrModifyReq>(nullptr);
  }

  UnfinObjAttrModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnfinObjAttrModifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnfinObjAttrModifyReq& from);
  void MergeFrom(const UnfinObjAttrModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnfinObjAttrModifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.UnfinObjAttrModifyReq";
  }
  protected:
  explicit UnfinObjAttrModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedattrFieldNumber = 6,
    kCustomheaderFieldNumber = 7,
    kPathFieldNumber = 1,
    kUploadidFieldNumber = 2,
    kBizAttrFieldNumber = 4,
    kFlagFieldNumber = 3,
    kForbidFieldNumber = 5,
    kAuthFieldNumber = 8,
  };
  // repeated .ClientCos.ReservedAttr reservedattr = 6;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CustomHeader customheader = 7;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes uploadid = 2;
  bool has_uploadid() const;
  private:
  bool _internal_has_uploadid() const;
  public:
  void clear_uploadid();
  const std::string& uploadid() const;
  void set_uploadid(const std::string& value);
  void set_uploadid(std::string&& value);
  void set_uploadid(const char* value);
  void set_uploadid(const void* value, size_t size);
  std::string* mutable_uploadid();
  std::string* release_uploadid();
  void set_allocated_uploadid(std::string* uploadid);
  private:
  const std::string& _internal_uploadid() const;
  void _internal_set_uploadid(const std::string& value);
  std::string* _internal_mutable_uploadid();
  public:

  // optional bytes biz_attr = 4;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // required uint32 flag = 3;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 forbid = 5;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 8;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.UnfinObjAttrModifyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  int auth_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class UnfinObjAttrModifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.UnfinObjAttrModifyRsp) */ {
 public:
  inline UnfinObjAttrModifyRsp() : UnfinObjAttrModifyRsp(nullptr) {}
  virtual ~UnfinObjAttrModifyRsp();

  UnfinObjAttrModifyRsp(const UnfinObjAttrModifyRsp& from);
  UnfinObjAttrModifyRsp(UnfinObjAttrModifyRsp&& from) noexcept
    : UnfinObjAttrModifyRsp() {
    *this = ::std::move(from);
  }

  inline UnfinObjAttrModifyRsp& operator=(const UnfinObjAttrModifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfinObjAttrModifyRsp& operator=(UnfinObjAttrModifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnfinObjAttrModifyRsp& default_instance();

  static inline const UnfinObjAttrModifyRsp* internal_default_instance() {
    return reinterpret_cast<const UnfinObjAttrModifyRsp*>(
               &_UnfinObjAttrModifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UnfinObjAttrModifyRsp& a, UnfinObjAttrModifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UnfinObjAttrModifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfinObjAttrModifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnfinObjAttrModifyRsp* New() const final {
    return CreateMaybeMessage<UnfinObjAttrModifyRsp>(nullptr);
  }

  UnfinObjAttrModifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnfinObjAttrModifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnfinObjAttrModifyRsp& from);
  void MergeFrom(const UnfinObjAttrModifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnfinObjAttrModifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.UnfinObjAttrModifyRsp";
  }
  protected:
  explicit UnfinObjAttrModifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.UnfinObjAttrModifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppAttrQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppAttrQueryReq) */ {
 public:
  inline AppAttrQueryReq() : AppAttrQueryReq(nullptr) {}
  virtual ~AppAttrQueryReq();

  AppAttrQueryReq(const AppAttrQueryReq& from);
  AppAttrQueryReq(AppAttrQueryReq&& from) noexcept
    : AppAttrQueryReq() {
    *this = ::std::move(from);
  }

  inline AppAttrQueryReq& operator=(const AppAttrQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppAttrQueryReq& operator=(AppAttrQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppAttrQueryReq& default_instance();

  static inline const AppAttrQueryReq* internal_default_instance() {
    return reinterpret_cast<const AppAttrQueryReq*>(
               &_AppAttrQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AppAttrQueryReq& a, AppAttrQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AppAttrQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppAttrQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppAttrQueryReq* New() const final {
    return CreateMaybeMessage<AppAttrQueryReq>(nullptr);
  }

  AppAttrQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppAttrQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppAttrQueryReq& from);
  void MergeFrom(const AppAttrQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppAttrQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppAttrQueryReq";
  }
  protected:
  explicit AppAttrQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // required bytes appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const void* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AppAttrQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppAttrQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppAttrQueryRsp) */ {
 public:
  inline AppAttrQueryRsp() : AppAttrQueryRsp(nullptr) {}
  virtual ~AppAttrQueryRsp();

  AppAttrQueryRsp(const AppAttrQueryRsp& from);
  AppAttrQueryRsp(AppAttrQueryRsp&& from) noexcept
    : AppAttrQueryRsp() {
    *this = ::std::move(from);
  }

  inline AppAttrQueryRsp& operator=(const AppAttrQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppAttrQueryRsp& operator=(AppAttrQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppAttrQueryRsp& default_instance();

  static inline const AppAttrQueryRsp* internal_default_instance() {
    return reinterpret_cast<const AppAttrQueryRsp*>(
               &_AppAttrQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AppAttrQueryRsp& a, AppAttrQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AppAttrQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppAttrQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppAttrQueryRsp* New() const final {
    return CreateMaybeMessage<AppAttrQueryRsp>(nullptr);
  }

  AppAttrQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppAttrQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppAttrQueryRsp& from);
  void MergeFrom(const AppAttrQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppAttrQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppAttrQueryRsp";
  }
  protected:
  explicit AppAttrQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kCtimeFieldNumber = 2,
    kMtimeFieldNumber = 3,
  };
  // repeated .ClientCos.KeyPair keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::ClientCos::KeyPair* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >*
      mutable_keys();
  private:
  const ::ClientCos::KeyPair& _internal_keys(int index) const;
  ::ClientCos::KeyPair* _internal_add_keys();
  public:
  const ::ClientCos::KeyPair& keys(int index) const;
  ::ClientCos::KeyPair* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >&
      keys() const;

  // optional uint32 ctime = 2;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 3;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AppAttrQueryRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair > keys_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppAttrModifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppAttrModifyReq) */ {
 public:
  inline AppAttrModifyReq() : AppAttrModifyReq(nullptr) {}
  virtual ~AppAttrModifyReq();

  AppAttrModifyReq(const AppAttrModifyReq& from);
  AppAttrModifyReq(AppAttrModifyReq&& from) noexcept
    : AppAttrModifyReq() {
    *this = ::std::move(from);
  }

  inline AppAttrModifyReq& operator=(const AppAttrModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppAttrModifyReq& operator=(AppAttrModifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppAttrModifyReq& default_instance();

  static inline const AppAttrModifyReq* internal_default_instance() {
    return reinterpret_cast<const AppAttrModifyReq*>(
               &_AppAttrModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AppAttrModifyReq& a, AppAttrModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AppAttrModifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppAttrModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppAttrModifyReq* New() const final {
    return CreateMaybeMessage<AppAttrModifyReq>(nullptr);
  }

  AppAttrModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppAttrModifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppAttrModifyReq& from);
  void MergeFrom(const AppAttrModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppAttrModifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppAttrModifyReq";
  }
  protected:
  explicit AppAttrModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // repeated .ClientCos.KeyPair keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::ClientCos::KeyPair* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >*
      mutable_keys();
  private:
  const ::ClientCos::KeyPair& _internal_keys(int index) const;
  ::ClientCos::KeyPair* _internal_add_keys();
  public:
  const ::ClientCos::KeyPair& keys(int index) const;
  ::ClientCos::KeyPair* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >&
      keys() const;

  // required bytes appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const void* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AppAttrModifyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppAttrModifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppAttrModifyRsp) */ {
 public:
  inline AppAttrModifyRsp() : AppAttrModifyRsp(nullptr) {}
  virtual ~AppAttrModifyRsp();

  AppAttrModifyRsp(const AppAttrModifyRsp& from);
  AppAttrModifyRsp(AppAttrModifyRsp&& from) noexcept
    : AppAttrModifyRsp() {
    *this = ::std::move(from);
  }

  inline AppAttrModifyRsp& operator=(const AppAttrModifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppAttrModifyRsp& operator=(AppAttrModifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppAttrModifyRsp& default_instance();

  static inline const AppAttrModifyRsp* internal_default_instance() {
    return reinterpret_cast<const AppAttrModifyRsp*>(
               &_AppAttrModifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(AppAttrModifyRsp& a, AppAttrModifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AppAttrModifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppAttrModifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppAttrModifyRsp* New() const final {
    return CreateMaybeMessage<AppAttrModifyRsp>(nullptr);
  }

  AppAttrModifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppAttrModifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppAttrModifyRsp& from);
  void MergeFrom(const AppAttrModifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppAttrModifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppAttrModifyRsp";
  }
  protected:
  explicit AppAttrModifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.AppAttrModifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PreviewFileAttrQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.PreviewFileAttrQueryReq) */ {
 public:
  inline PreviewFileAttrQueryReq() : PreviewFileAttrQueryReq(nullptr) {}
  virtual ~PreviewFileAttrQueryReq();

  PreviewFileAttrQueryReq(const PreviewFileAttrQueryReq& from);
  PreviewFileAttrQueryReq(PreviewFileAttrQueryReq&& from) noexcept
    : PreviewFileAttrQueryReq() {
    *this = ::std::move(from);
  }

  inline PreviewFileAttrQueryReq& operator=(const PreviewFileAttrQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewFileAttrQueryReq& operator=(PreviewFileAttrQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviewFileAttrQueryReq& default_instance();

  static inline const PreviewFileAttrQueryReq* internal_default_instance() {
    return reinterpret_cast<const PreviewFileAttrQueryReq*>(
               &_PreviewFileAttrQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PreviewFileAttrQueryReq& a, PreviewFileAttrQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewFileAttrQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewFileAttrQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviewFileAttrQueryReq* New() const final {
    return CreateMaybeMessage<PreviewFileAttrQueryReq>(nullptr);
  }

  PreviewFileAttrQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviewFileAttrQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviewFileAttrQueryReq& from);
  void MergeFrom(const PreviewFileAttrQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewFileAttrQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.PreviewFileAttrQueryReq";
  }
  protected:
  explicit PreviewFileAttrQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kSignFieldNumber = 2,
    kReferFieldNumber = 3,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string sign = 2 [default = ""];
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // optional string refer = 3 [default = ""];
  bool has_refer() const;
  private:
  bool _internal_has_refer() const;
  public:
  void clear_refer();
  const std::string& refer() const;
  void set_refer(const std::string& value);
  void set_refer(std::string&& value);
  void set_refer(const char* value);
  void set_refer(const char* value, size_t size);
  std::string* mutable_refer();
  std::string* release_refer();
  void set_allocated_refer(std::string* refer);
  private:
  const std::string& _internal_refer() const;
  void _internal_set_refer(const std::string& value);
  std::string* _internal_mutable_refer();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.PreviewFileAttrQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refer_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PreviewFileAttrQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.PreviewFileAttrQueryRsp) */ {
 public:
  inline PreviewFileAttrQueryRsp() : PreviewFileAttrQueryRsp(nullptr) {}
  virtual ~PreviewFileAttrQueryRsp();

  PreviewFileAttrQueryRsp(const PreviewFileAttrQueryRsp& from);
  PreviewFileAttrQueryRsp(PreviewFileAttrQueryRsp&& from) noexcept
    : PreviewFileAttrQueryRsp() {
    *this = ::std::move(from);
  }

  inline PreviewFileAttrQueryRsp& operator=(const PreviewFileAttrQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewFileAttrQueryRsp& operator=(PreviewFileAttrQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviewFileAttrQueryRsp& default_instance();

  static inline const PreviewFileAttrQueryRsp* internal_default_instance() {
    return reinterpret_cast<const PreviewFileAttrQueryRsp*>(
               &_PreviewFileAttrQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PreviewFileAttrQueryRsp& a, PreviewFileAttrQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewFileAttrQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewFileAttrQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviewFileAttrQueryRsp* New() const final {
    return CreateMaybeMessage<PreviewFileAttrQueryRsp>(nullptr);
  }

  PreviewFileAttrQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviewFileAttrQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviewFileAttrQueryRsp& from);
  void MergeFrom(const PreviewFileAttrQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewFileAttrQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.PreviewFileAttrQueryRsp";
  }
  protected:
  explicit PreviewFileAttrQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBizAttrFieldNumber = 1,
    kShaFieldNumber = 4,
    kFileSizeFieldNumber = 2,
    kFileLengthFieldNumber = 3,
    kCtimeFieldNumber = 5,
    kMtimeFieldNumber = 6,
    kAuthFieldNumber = 7,
    kPreviewFieldNumber = 8,
  };
  // optional bytes biz_attr = 1;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes sha = 4;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional uint64 file_size = 2;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 file_length = 3;
  bool has_file_length() const;
  private:
  bool _internal_has_file_length() const;
  public:
  void clear_file_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_length() const;
  void set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_length() const;
  void _internal_set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ctime = 5;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 6;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 7;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional bool preview = 8;
  bool has_preview() const;
  private:
  bool _internal_has_preview() const;
  public:
  void clear_preview();
  bool preview() const;
  void set_preview(bool value);
  private:
  bool _internal_preview() const;
  void _internal_set_preview(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.PreviewFileAttrQueryRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  int auth_;
  bool preview_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjModTimeStampReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjModTimeStampReq) */ {
 public:
  inline ObjModTimeStampReq() : ObjModTimeStampReq(nullptr) {}
  virtual ~ObjModTimeStampReq();

  ObjModTimeStampReq(const ObjModTimeStampReq& from);
  ObjModTimeStampReq(ObjModTimeStampReq&& from) noexcept
    : ObjModTimeStampReq() {
    *this = ::std::move(from);
  }

  inline ObjModTimeStampReq& operator=(const ObjModTimeStampReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjModTimeStampReq& operator=(ObjModTimeStampReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjModTimeStampReq& default_instance();

  static inline const ObjModTimeStampReq* internal_default_instance() {
    return reinterpret_cast<const ObjModTimeStampReq*>(
               &_ObjModTimeStampReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ObjModTimeStampReq& a, ObjModTimeStampReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjModTimeStampReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjModTimeStampReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjModTimeStampReq* New() const final {
    return CreateMaybeMessage<ObjModTimeStampReq>(nullptr);
  }

  ObjModTimeStampReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjModTimeStampReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjModTimeStampReq& from);
  void MergeFrom(const ObjModTimeStampReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjModTimeStampReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjModTimeStampReq";
  }
  protected:
  explicit ObjModTimeStampReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kCtimeFieldNumber = 2,
    kMtimeFieldNumber = 3,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional uint32 ctime = 2;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 3;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjModTimeStampReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjModTimeStampRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjModTimeStampRsp) */ {
 public:
  inline ObjModTimeStampRsp() : ObjModTimeStampRsp(nullptr) {}
  virtual ~ObjModTimeStampRsp();

  ObjModTimeStampRsp(const ObjModTimeStampRsp& from);
  ObjModTimeStampRsp(ObjModTimeStampRsp&& from) noexcept
    : ObjModTimeStampRsp() {
    *this = ::std::move(from);
  }

  inline ObjModTimeStampRsp& operator=(const ObjModTimeStampRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjModTimeStampRsp& operator=(ObjModTimeStampRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjModTimeStampRsp& default_instance();

  static inline const ObjModTimeStampRsp* internal_default_instance() {
    return reinterpret_cast<const ObjModTimeStampRsp*>(
               &_ObjModTimeStampRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ObjModTimeStampRsp& a, ObjModTimeStampRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjModTimeStampRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjModTimeStampRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjModTimeStampRsp* New() const final {
    return CreateMaybeMessage<ObjModTimeStampRsp>(nullptr);
  }

  ObjModTimeStampRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjModTimeStampRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjModTimeStampRsp& from);
  void MergeFrom(const ObjModTimeStampRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjModTimeStampRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjModTimeStampRsp";
  }
  protected:
  explicit ObjModTimeStampRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.ObjModTimeStampRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class delObj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.delObj) */ {
 public:
  inline delObj() : delObj(nullptr) {}
  virtual ~delObj();

  delObj(const delObj& from);
  delObj(delObj&& from) noexcept
    : delObj() {
    *this = ::std::move(from);
  }

  inline delObj& operator=(const delObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline delObj& operator=(delObj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delObj& default_instance();

  static inline const delObj* internal_default_instance() {
    return reinterpret_cast<const delObj*>(
               &_delObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(delObj& a, delObj& b) {
    a.Swap(&b);
  }
  inline void Swap(delObj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(delObj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delObj* New() const final {
    return CreateMaybeMessage<delObj>(nullptr);
  }

  delObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delObj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delObj& from);
  void MergeFrom(const delObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delObj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.delObj";
  }
  protected:
  explicit delObj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.delObj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileBatchDelReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileBatchDelReq) */ {
 public:
  inline FileBatchDelReq() : FileBatchDelReq(nullptr) {}
  virtual ~FileBatchDelReq();

  FileBatchDelReq(const FileBatchDelReq& from);
  FileBatchDelReq(FileBatchDelReq&& from) noexcept
    : FileBatchDelReq() {
    *this = ::std::move(from);
  }

  inline FileBatchDelReq& operator=(const FileBatchDelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileBatchDelReq& operator=(FileBatchDelReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileBatchDelReq& default_instance();

  static inline const FileBatchDelReq* internal_default_instance() {
    return reinterpret_cast<const FileBatchDelReq*>(
               &_FileBatchDelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(FileBatchDelReq& a, FileBatchDelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileBatchDelReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileBatchDelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileBatchDelReq* New() const final {
    return CreateMaybeMessage<FileBatchDelReq>(nullptr);
  }

  FileBatchDelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileBatchDelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileBatchDelReq& from);
  void MergeFrom(const FileBatchDelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileBatchDelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileBatchDelReq";
  }
  protected:
  explicit FileBatchDelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
  };
  // repeated .ClientCos.delObj obj = 1;
  int obj_size() const;
  private:
  int _internal_obj_size() const;
  public:
  void clear_obj();
  ::ClientCos::delObj* mutable_obj(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::delObj >*
      mutable_obj();
  private:
  const ::ClientCos::delObj& _internal_obj(int index) const;
  ::ClientCos::delObj* _internal_add_obj();
  public:
  const ::ClientCos::delObj& obj(int index) const;
  ::ClientCos::delObj* add_obj();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::delObj >&
      obj() const;

  // @@protoc_insertion_point(class_scope:ClientCos.FileBatchDelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::delObj > obj_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileDelState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileDelState) */ {
 public:
  inline FileDelState() : FileDelState(nullptr) {}
  virtual ~FileDelState();

  FileDelState(const FileDelState& from);
  FileDelState(FileDelState&& from) noexcept
    : FileDelState() {
    *this = ::std::move(from);
  }

  inline FileDelState& operator=(const FileDelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDelState& operator=(FileDelState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileDelState& default_instance();

  static inline const FileDelState* internal_default_instance() {
    return reinterpret_cast<const FileDelState*>(
               &_FileDelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FileDelState& a, FileDelState& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDelState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDelState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileDelState* New() const final {
    return CreateMaybeMessage<FileDelState>(nullptr);
  }

  FileDelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileDelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileDelState& from);
  void MergeFrom(const FileDelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileDelState";
  }
  protected:
  explicit FileDelState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kRetmsgFieldNumber = 3,
    kVersionFieldNumber = 4,
    kRetcodeFieldNumber = 2,
    kDeleteMarkerFieldNumber = 5,
    kAddDelmarkerFieldNumber = 6,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required string retmsg = 3;
  bool has_retmsg() const;
  private:
  bool _internal_has_retmsg() const;
  public:
  void clear_retmsg();
  const std::string& retmsg() const;
  void set_retmsg(const std::string& value);
  void set_retmsg(std::string&& value);
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  std::string* mutable_retmsg();
  std::string* release_retmsg();
  void set_allocated_retmsg(std::string* retmsg);
  private:
  const std::string& _internal_retmsg() const;
  void _internal_set_retmsg(const std::string& value);
  std::string* _internal_mutable_retmsg();
  public:

  // optional bytes version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // required int32 retcode = 2;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::int32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool delete_marker = 5;
  bool has_delete_marker() const;
  private:
  bool _internal_has_delete_marker() const;
  public:
  void clear_delete_marker();
  bool delete_marker() const;
  void set_delete_marker(bool value);
  private:
  bool _internal_delete_marker() const;
  void _internal_set_delete_marker(bool value);
  public:

  // optional bool add_delmarker = 6 [default = false];
  bool has_add_delmarker() const;
  private:
  bool _internal_has_add_delmarker() const;
  public:
  void clear_add_delmarker();
  bool add_delmarker() const;
  void set_add_delmarker(bool value);
  private:
  bool _internal_add_delmarker() const;
  void _internal_set_add_delmarker(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.FileDelState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 retcode_;
  bool delete_marker_;
  bool add_delmarker_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileBatchDelRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileBatchDelRsp) */ {
 public:
  inline FileBatchDelRsp() : FileBatchDelRsp(nullptr) {}
  virtual ~FileBatchDelRsp();

  FileBatchDelRsp(const FileBatchDelRsp& from);
  FileBatchDelRsp(FileBatchDelRsp&& from) noexcept
    : FileBatchDelRsp() {
    *this = ::std::move(from);
  }

  inline FileBatchDelRsp& operator=(const FileBatchDelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileBatchDelRsp& operator=(FileBatchDelRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileBatchDelRsp& default_instance();

  static inline const FileBatchDelRsp* internal_default_instance() {
    return reinterpret_cast<const FileBatchDelRsp*>(
               &_FileBatchDelRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(FileBatchDelRsp& a, FileBatchDelRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileBatchDelRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileBatchDelRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileBatchDelRsp* New() const final {
    return CreateMaybeMessage<FileBatchDelRsp>(nullptr);
  }

  FileBatchDelRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileBatchDelRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileBatchDelRsp& from);
  void MergeFrom(const FileBatchDelRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileBatchDelRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileBatchDelRsp";
  }
  protected:
  explicit FileBatchDelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelstateFieldNumber = 1,
    kExtraattrFieldNumber = 2,
  };
  // repeated .ClientCos.FileDelState delstate = 1;
  int delstate_size() const;
  private:
  int _internal_delstate_size() const;
  public:
  void clear_delstate();
  ::ClientCos::FileDelState* mutable_delstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::FileDelState >*
      mutable_delstate();
  private:
  const ::ClientCos::FileDelState& _internal_delstate(int index) const;
  ::ClientCos::FileDelState* _internal_add_delstate();
  public:
  const ::ClientCos::FileDelState& delstate(int index) const;
  ::ClientCos::FileDelState* add_delstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::FileDelState >&
      delstate() const;

  // optional bytes extraattr = 2;
  bool has_extraattr() const;
  private:
  bool _internal_has_extraattr() const;
  public:
  void clear_extraattr();
  const std::string& extraattr() const;
  void set_extraattr(const std::string& value);
  void set_extraattr(std::string&& value);
  void set_extraattr(const char* value);
  void set_extraattr(const void* value, size_t size);
  std::string* mutable_extraattr();
  std::string* release_extraattr();
  void set_allocated_extraattr(std::string* extraattr);
  private:
  const std::string& _internal_extraattr() const;
  void _internal_set_extraattr(const std::string& value);
  std::string* _internal_mutable_extraattr();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.FileBatchDelRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::FileDelState > delstate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extraattr_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class UploadDelmarkerReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.UploadDelmarkerReq) */ {
 public:
  inline UploadDelmarkerReq() : UploadDelmarkerReq(nullptr) {}
  virtual ~UploadDelmarkerReq();

  UploadDelmarkerReq(const UploadDelmarkerReq& from);
  UploadDelmarkerReq(UploadDelmarkerReq&& from) noexcept
    : UploadDelmarkerReq() {
    *this = ::std::move(from);
  }

  inline UploadDelmarkerReq& operator=(const UploadDelmarkerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadDelmarkerReq& operator=(UploadDelmarkerReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadDelmarkerReq& default_instance();

  static inline const UploadDelmarkerReq* internal_default_instance() {
    return reinterpret_cast<const UploadDelmarkerReq*>(
               &_UploadDelmarkerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UploadDelmarkerReq& a, UploadDelmarkerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadDelmarkerReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadDelmarkerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadDelmarkerReq* New() const final {
    return CreateMaybeMessage<UploadDelmarkerReq>(nullptr);
  }

  UploadDelmarkerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadDelmarkerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadDelmarkerReq& from);
  void MergeFrom(const UploadDelmarkerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadDelmarkerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.UploadDelmarkerReq";
  }
  protected:
  explicit UploadDelmarkerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
    kStorageTypeFieldNumber = 3,
    kTrsfArgsFieldNumber = 5,
    kIsUgcFieldNumber = 4,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes storage_type = 3 [default = "Standard"];
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // optional bytes trsf_args = 5;
  bool has_trsf_args() const;
  private:
  bool _internal_has_trsf_args() const;
  public:
  void clear_trsf_args();
  const std::string& trsf_args() const;
  void set_trsf_args(const std::string& value);
  void set_trsf_args(std::string&& value);
  void set_trsf_args(const char* value);
  void set_trsf_args(const void* value, size_t size);
  std::string* mutable_trsf_args();
  std::string* release_trsf_args();
  void set_allocated_trsf_args(std::string* trsf_args);
  private:
  const std::string& _internal_trsf_args() const;
  void _internal_set_trsf_args(const std::string& value);
  std::string* _internal_mutable_trsf_args();
  public:

  // optional bool is_ugc = 4;
  bool has_is_ugc() const;
  private:
  bool _internal_has_is_ugc() const;
  public:
  void clear_is_ugc();
  bool is_ugc() const;
  void set_is_ugc(bool value);
  private:
  bool _internal_is_ugc() const;
  void _internal_set_is_ugc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.UploadDelmarkerReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_storage_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trsf_args_;
  bool is_ugc_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class UploadDelmarkerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.UploadDelmarkerRsp) */ {
 public:
  inline UploadDelmarkerRsp() : UploadDelmarkerRsp(nullptr) {}
  virtual ~UploadDelmarkerRsp();

  UploadDelmarkerRsp(const UploadDelmarkerRsp& from);
  UploadDelmarkerRsp(UploadDelmarkerRsp&& from) noexcept
    : UploadDelmarkerRsp() {
    *this = ::std::move(from);
  }

  inline UploadDelmarkerRsp& operator=(const UploadDelmarkerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadDelmarkerRsp& operator=(UploadDelmarkerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadDelmarkerRsp& default_instance();

  static inline const UploadDelmarkerRsp* internal_default_instance() {
    return reinterpret_cast<const UploadDelmarkerRsp*>(
               &_UploadDelmarkerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UploadDelmarkerRsp& a, UploadDelmarkerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadDelmarkerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadDelmarkerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadDelmarkerRsp* New() const final {
    return CreateMaybeMessage<UploadDelmarkerRsp>(nullptr);
  }

  UploadDelmarkerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadDelmarkerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadDelmarkerRsp& from);
  void MergeFrom(const UploadDelmarkerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadDelmarkerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.UploadDelmarkerRsp";
  }
  protected:
  explicit UploadDelmarkerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.UploadDelmarkerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileUnfinishAttrQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileUnfinishAttrQueryReq) */ {
 public:
  inline FileUnfinishAttrQueryReq() : FileUnfinishAttrQueryReq(nullptr) {}
  virtual ~FileUnfinishAttrQueryReq();

  FileUnfinishAttrQueryReq(const FileUnfinishAttrQueryReq& from);
  FileUnfinishAttrQueryReq(FileUnfinishAttrQueryReq&& from) noexcept
    : FileUnfinishAttrQueryReq() {
    *this = ::std::move(from);
  }

  inline FileUnfinishAttrQueryReq& operator=(const FileUnfinishAttrQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUnfinishAttrQueryReq& operator=(FileUnfinishAttrQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileUnfinishAttrQueryReq& default_instance();

  static inline const FileUnfinishAttrQueryReq* internal_default_instance() {
    return reinterpret_cast<const FileUnfinishAttrQueryReq*>(
               &_FileUnfinishAttrQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(FileUnfinishAttrQueryReq& a, FileUnfinishAttrQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUnfinishAttrQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUnfinishAttrQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileUnfinishAttrQueryReq* New() const final {
    return CreateMaybeMessage<FileUnfinishAttrQueryReq>(nullptr);
  }

  FileUnfinishAttrQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileUnfinishAttrQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileUnfinishAttrQueryReq& from);
  void MergeFrom(const FileUnfinishAttrQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUnfinishAttrQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileUnfinishAttrQueryReq";
  }
  protected:
  explicit FileUnfinishAttrQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kUploadidFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes uploadid = 2;
  bool has_uploadid() const;
  private:
  bool _internal_has_uploadid() const;
  public:
  void clear_uploadid();
  const std::string& uploadid() const;
  void set_uploadid(const std::string& value);
  void set_uploadid(std::string&& value);
  void set_uploadid(const char* value);
  void set_uploadid(const void* value, size_t size);
  std::string* mutable_uploadid();
  std::string* release_uploadid();
  void set_allocated_uploadid(std::string* uploadid);
  private:
  const std::string& _internal_uploadid() const;
  void _internal_set_uploadid(const std::string& value);
  std::string* _internal_mutable_uploadid();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.FileUnfinishAttrQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadid_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileUnfinishAttrQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileUnfinishAttrQueryRsp) */ {
 public:
  inline FileUnfinishAttrQueryRsp() : FileUnfinishAttrQueryRsp(nullptr) {}
  virtual ~FileUnfinishAttrQueryRsp();

  FileUnfinishAttrQueryRsp(const FileUnfinishAttrQueryRsp& from);
  FileUnfinishAttrQueryRsp(FileUnfinishAttrQueryRsp&& from) noexcept
    : FileUnfinishAttrQueryRsp() {
    *this = ::std::move(from);
  }

  inline FileUnfinishAttrQueryRsp& operator=(const FileUnfinishAttrQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUnfinishAttrQueryRsp& operator=(FileUnfinishAttrQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileUnfinishAttrQueryRsp& default_instance();

  static inline const FileUnfinishAttrQueryRsp* internal_default_instance() {
    return reinterpret_cast<const FileUnfinishAttrQueryRsp*>(
               &_FileUnfinishAttrQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(FileUnfinishAttrQueryRsp& a, FileUnfinishAttrQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUnfinishAttrQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUnfinishAttrQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileUnfinishAttrQueryRsp* New() const final {
    return CreateMaybeMessage<FileUnfinishAttrQueryRsp>(nullptr);
  }

  FileUnfinishAttrQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileUnfinishAttrQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileUnfinishAttrQueryRsp& from);
  void MergeFrom(const FileUnfinishAttrQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUnfinishAttrQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileUnfinishAttrQueryRsp";
  }
  protected:
  explicit FileUnfinishAttrQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 1,
    kStorageTypeFieldNumber = 3,
    kUinFieldNumber = 4,
    kRealShaFieldNumber = 9,
    kInfoFieldNumber = 10,
    kSseinfoFieldNumber = 11,
    kCasinfoFieldNumber = 12,
    kMtimeFieldNumber = 2,
    kCtimeFieldNumber = 5,
    kUsrSliceSizeFieldNumber = 6,
    kRealSliceSizeFieldNumber = 7,
    kFileSizeFieldNumber = 8,
  };
  // required bytes sha = 1;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes storage_type = 3;
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // optional bytes uin = 4;
  bool has_uin() const;
  private:
  bool _internal_has_uin() const;
  public:
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const void* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // optional bytes real_sha = 9;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // optional .storeinfo info = 10;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::storeinfo& info() const;
  ::storeinfo* release_info();
  ::storeinfo* mutable_info();
  void set_allocated_info(::storeinfo* info);
  private:
  const ::storeinfo& _internal_info() const;
  ::storeinfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::storeinfo* info);
  ::storeinfo* unsafe_arena_release_info();

  // optional .ClientCos.SseInfo sseinfo = 11;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::ClientCos::SseInfo& sseinfo() const;
  ::ClientCos::SseInfo* release_sseinfo();
  ::ClientCos::SseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo);
  private:
  const ::ClientCos::SseInfo& _internal_sseinfo() const;
  ::ClientCos::SseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::ClientCos::SseInfo* sseinfo);
  ::ClientCos::SseInfo* unsafe_arena_release_sseinfo();

  // optional .ClientCos.CasInfo casinfo = 12;
  bool has_casinfo() const;
  private:
  bool _internal_has_casinfo() const;
  public:
  void clear_casinfo();
  const ::ClientCos::CasInfo& casinfo() const;
  ::ClientCos::CasInfo* release_casinfo();
  ::ClientCos::CasInfo* mutable_casinfo();
  void set_allocated_casinfo(::ClientCos::CasInfo* casinfo);
  private:
  const ::ClientCos::CasInfo& _internal_casinfo() const;
  ::ClientCos::CasInfo* _internal_mutable_casinfo();
  public:
  void unsafe_arena_set_allocated_casinfo(
      ::ClientCos::CasInfo* casinfo);
  ::ClientCos::CasInfo* unsafe_arena_release_casinfo();

  // required uint32 mtime = 2;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ctime = 5;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 usr_slice_size = 6;
  bool has_usr_slice_size() const;
  private:
  bool _internal_has_usr_slice_size() const;
  public:
  void clear_usr_slice_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_slice_size() const;
  void set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usr_slice_size() const;
  void _internal_set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 real_slice_size = 7;
  bool has_real_slice_size() const;
  private:
  bool _internal_has_real_slice_size() const;
  public:
  void clear_real_slice_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 real_slice_size() const;
  void set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_real_slice_size() const;
  void _internal_set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 file_size = 8;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.FileUnfinishAttrQueryRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::storeinfo* info_;
  ::ClientCos::SseInfo* sseinfo_;
  ::ClientCos::CasInfo* casinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_slice_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 real_slice_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ReduceLifecycleReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ReduceLifecycleReq) */ {
 public:
  inline ReduceLifecycleReq() : ReduceLifecycleReq(nullptr) {}
  virtual ~ReduceLifecycleReq();

  ReduceLifecycleReq(const ReduceLifecycleReq& from);
  ReduceLifecycleReq(ReduceLifecycleReq&& from) noexcept
    : ReduceLifecycleReq() {
    *this = ::std::move(from);
  }

  inline ReduceLifecycleReq& operator=(const ReduceLifecycleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceLifecycleReq& operator=(ReduceLifecycleReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReduceLifecycleReq& default_instance();

  static inline const ReduceLifecycleReq* internal_default_instance() {
    return reinterpret_cast<const ReduceLifecycleReq*>(
               &_ReduceLifecycleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ReduceLifecycleReq& a, ReduceLifecycleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceLifecycleReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceLifecycleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReduceLifecycleReq* New() const final {
    return CreateMaybeMessage<ReduceLifecycleReq>(nullptr);
  }

  ReduceLifecycleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReduceLifecycleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReduceLifecycleReq& from);
  void MergeFrom(const ReduceLifecycleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceLifecycleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ReduceLifecycleReq";
  }
  protected:
  explicit ReduceLifecycleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 2,
    kPathFieldNumber = 1,
    kSkFieldNumber = 3,
  };
  // repeated .ClientCos.Opinfo ops = 2;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::ClientCos::Opinfo* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Opinfo >*
      mutable_ops();
  private:
  const ::ClientCos::Opinfo& _internal_ops(int index) const;
  ::ClientCos::Opinfo* _internal_add_ops();
  public:
  const ::ClientCos::Opinfo& ops(int index) const;
  ::ClientCos::Opinfo* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Opinfo >&
      ops() const;

  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes sk = 3;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ReduceLifecycleReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Opinfo > ops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ReduceLifecycleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ReduceLifecycleRsp) */ {
 public:
  inline ReduceLifecycleRsp() : ReduceLifecycleRsp(nullptr) {}
  virtual ~ReduceLifecycleRsp();

  ReduceLifecycleRsp(const ReduceLifecycleRsp& from);
  ReduceLifecycleRsp(ReduceLifecycleRsp&& from) noexcept
    : ReduceLifecycleRsp() {
    *this = ::std::move(from);
  }

  inline ReduceLifecycleRsp& operator=(const ReduceLifecycleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceLifecycleRsp& operator=(ReduceLifecycleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReduceLifecycleRsp& default_instance();

  static inline const ReduceLifecycleRsp* internal_default_instance() {
    return reinterpret_cast<const ReduceLifecycleRsp*>(
               &_ReduceLifecycleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ReduceLifecycleRsp& a, ReduceLifecycleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceLifecycleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceLifecycleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReduceLifecycleRsp* New() const final {
    return CreateMaybeMessage<ReduceLifecycleRsp>(nullptr);
  }

  ReduceLifecycleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReduceLifecycleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReduceLifecycleRsp& from);
  void MergeFrom(const ReduceLifecycleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceLifecycleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ReduceLifecycleRsp";
  }
  protected:
  explicit ReduceLifecycleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.ReduceLifecycleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class RetrieveLifecycleReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.RetrieveLifecycleReq) */ {
 public:
  inline RetrieveLifecycleReq() : RetrieveLifecycleReq(nullptr) {}
  virtual ~RetrieveLifecycleReq();

  RetrieveLifecycleReq(const RetrieveLifecycleReq& from);
  RetrieveLifecycleReq(RetrieveLifecycleReq&& from) noexcept
    : RetrieveLifecycleReq() {
    *this = ::std::move(from);
  }

  inline RetrieveLifecycleReq& operator=(const RetrieveLifecycleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveLifecycleReq& operator=(RetrieveLifecycleReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetrieveLifecycleReq& default_instance();

  static inline const RetrieveLifecycleReq* internal_default_instance() {
    return reinterpret_cast<const RetrieveLifecycleReq*>(
               &_RetrieveLifecycleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(RetrieveLifecycleReq& a, RetrieveLifecycleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveLifecycleReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveLifecycleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetrieveLifecycleReq* New() const final {
    return CreateMaybeMessage<RetrieveLifecycleReq>(nullptr);
  }

  RetrieveLifecycleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetrieveLifecycleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetrieveLifecycleReq& from);
  void MergeFrom(const RetrieveLifecycleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveLifecycleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.RetrieveLifecycleReq";
  }
  protected:
  explicit RetrieveLifecycleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kSkFieldNumber = 3,
    kSrcTypeFieldNumber = 4,
    kDstTypeFieldNumber = 5,
    kFsizeFieldNumber = 2,
    kOpFieldNumber = 6,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes sk = 3;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // required bytes src_type = 4;
  bool has_src_type() const;
  private:
  bool _internal_has_src_type() const;
  public:
  void clear_src_type();
  const std::string& src_type() const;
  void set_src_type(const std::string& value);
  void set_src_type(std::string&& value);
  void set_src_type(const char* value);
  void set_src_type(const void* value, size_t size);
  std::string* mutable_src_type();
  std::string* release_src_type();
  void set_allocated_src_type(std::string* src_type);
  private:
  const std::string& _internal_src_type() const;
  void _internal_set_src_type(const std::string& value);
  std::string* _internal_mutable_src_type();
  public:

  // optional bytes dst_type = 5;
  bool has_dst_type() const;
  private:
  bool _internal_has_dst_type() const;
  public:
  void clear_dst_type();
  const std::string& dst_type() const;
  void set_dst_type(const std::string& value);
  void set_dst_type(std::string&& value);
  void set_dst_type(const char* value);
  void set_dst_type(const void* value, size_t size);
  std::string* mutable_dst_type();
  std::string* release_dst_type();
  void set_allocated_dst_type(std::string* dst_type);
  private:
  const std::string& _internal_dst_type() const;
  void _internal_set_dst_type(const std::string& value);
  std::string* _internal_mutable_dst_type();
  public:

  // required uint64 fsize = 2;
  bool has_fsize() const;
  private:
  bool _internal_has_fsize() const;
  public:
  void clear_fsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize() const;
  void set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fsize() const;
  void _internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .ClientCos.Action op = 6;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::ClientCos::Action op() const;
  void set_op(::ClientCos::Action value);
  private:
  ::ClientCos::Action _internal_op() const;
  void _internal_set_op(::ClientCos::Action value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.RetrieveLifecycleReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize_;
  int op_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class RetrieveLifecycleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.RetrieveLifecycleRsp) */ {
 public:
  inline RetrieveLifecycleRsp() : RetrieveLifecycleRsp(nullptr) {}
  virtual ~RetrieveLifecycleRsp();

  RetrieveLifecycleRsp(const RetrieveLifecycleRsp& from);
  RetrieveLifecycleRsp(RetrieveLifecycleRsp&& from) noexcept
    : RetrieveLifecycleRsp() {
    *this = ::std::move(from);
  }

  inline RetrieveLifecycleRsp& operator=(const RetrieveLifecycleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveLifecycleRsp& operator=(RetrieveLifecycleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetrieveLifecycleRsp& default_instance();

  static inline const RetrieveLifecycleRsp* internal_default_instance() {
    return reinterpret_cast<const RetrieveLifecycleRsp*>(
               &_RetrieveLifecycleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RetrieveLifecycleRsp& a, RetrieveLifecycleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveLifecycleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveLifecycleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetrieveLifecycleRsp* New() const final {
    return CreateMaybeMessage<RetrieveLifecycleRsp>(nullptr);
  }

  RetrieveLifecycleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetrieveLifecycleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetrieveLifecycleRsp& from);
  void MergeFrom(const RetrieveLifecycleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveLifecycleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.RetrieveLifecycleRsp";
  }
  protected:
  explicit RetrieveLifecycleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.RetrieveLifecycleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class Opinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.Opinfo) */ {
 public:
  inline Opinfo() : Opinfo(nullptr) {}
  virtual ~Opinfo();

  Opinfo(const Opinfo& from);
  Opinfo(Opinfo&& from) noexcept
    : Opinfo() {
    *this = ::std::move(from);
  }

  inline Opinfo& operator=(const Opinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Opinfo& operator=(Opinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Opinfo& default_instance();

  static inline const Opinfo* internal_default_instance() {
    return reinterpret_cast<const Opinfo*>(
               &_Opinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Opinfo& a, Opinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Opinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Opinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Opinfo* New() const final {
    return CreateMaybeMessage<Opinfo>(nullptr);
  }

  Opinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Opinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Opinfo& from);
  void MergeFrom(const Opinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Opinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.Opinfo";
  }
  protected:
  explicit Opinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcTypeFieldNumber = 4,
    kDstTypeFieldNumber = 5,
    kFileCountFieldNumber = 2,
    kStorageFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // optional bytes src_type = 4;
  bool has_src_type() const;
  private:
  bool _internal_has_src_type() const;
  public:
  void clear_src_type();
  const std::string& src_type() const;
  void set_src_type(const std::string& value);
  void set_src_type(std::string&& value);
  void set_src_type(const char* value);
  void set_src_type(const void* value, size_t size);
  std::string* mutable_src_type();
  std::string* release_src_type();
  void set_allocated_src_type(std::string* src_type);
  private:
  const std::string& _internal_src_type() const;
  void _internal_set_src_type(const std::string& value);
  std::string* _internal_mutable_src_type();
  public:

  // optional bytes dst_type = 5;
  bool has_dst_type() const;
  private:
  bool _internal_has_dst_type() const;
  public:
  void clear_dst_type();
  const std::string& dst_type() const;
  void set_dst_type(const std::string& value);
  void set_dst_type(std::string&& value);
  void set_dst_type(const char* value);
  void set_dst_type(const void* value, size_t size);
  std::string* mutable_dst_type();
  std::string* release_dst_type();
  void set_allocated_dst_type(std::string* dst_type);
  private:
  const std::string& _internal_dst_type() const;
  void _internal_set_dst_type(const std::string& value);
  std::string* _internal_mutable_dst_type();
  public:

  // optional uint64 file_count = 2;
  bool has_file_count() const;
  private:
  bool _internal_has_file_count() const;
  public:
  void clear_file_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_count() const;
  void set_file_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_count() const;
  void _internal_set_file_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 storage = 3;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  ::PROTOBUF_NAMESPACE_ID::uint64 storage() const;
  void set_storage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_storage() const;
  void _internal_set_storage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .ClientCos.Action op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::ClientCos::Action op() const;
  void set_op(::ClientCos::Action value);
  private:
  ::ClientCos::Action _internal_op() const;
  void _internal_set_op(::ClientCos::Action value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.Opinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 storage_;
  int op_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ReservedAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ReservedAttr) */ {
 public:
  inline ReservedAttr() : ReservedAttr(nullptr) {}
  virtual ~ReservedAttr();

  ReservedAttr(const ReservedAttr& from);
  ReservedAttr(ReservedAttr&& from) noexcept
    : ReservedAttr() {
    *this = ::std::move(from);
  }

  inline ReservedAttr& operator=(const ReservedAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReservedAttr& operator=(ReservedAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReservedAttr& default_instance();

  static inline const ReservedAttr* internal_default_instance() {
    return reinterpret_cast<const ReservedAttr*>(
               &_ReservedAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ReservedAttr& a, ReservedAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(ReservedAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReservedAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReservedAttr* New() const final {
    return CreateMaybeMessage<ReservedAttr>(nullptr);
  }

  ReservedAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReservedAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReservedAttr& from);
  void MergeFrom(const ReservedAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReservedAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ReservedAttr";
  }
  protected:
  explicit ReservedAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // required bytes value = 2 [default = ""];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required .ClientCos.ReservedAttrKey key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::ClientCos::ReservedAttrKey key() const;
  void set_key(::ClientCos::ReservedAttrKey value);
  private:
  ::ClientCos::ReservedAttrKey _internal_key() const;
  void _internal_set_key(::ClientCos::ReservedAttrKey value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ReservedAttr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int key_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CustomHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CustomHeader) */ {
 public:
  inline CustomHeader() : CustomHeader(nullptr) {}
  virtual ~CustomHeader();

  CustomHeader(const CustomHeader& from);
  CustomHeader(CustomHeader&& from) noexcept
    : CustomHeader() {
    *this = ::std::move(from);
  }

  inline CustomHeader& operator=(const CustomHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomHeader& operator=(CustomHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomHeader& default_instance();

  static inline const CustomHeader* internal_default_instance() {
    return reinterpret_cast<const CustomHeader*>(
               &_CustomHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CustomHeader& a, CustomHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomHeader* New() const final {
    return CreateMaybeMessage<CustomHeader>(nullptr);
  }

  CustomHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomHeader& from);
  void MergeFrom(const CustomHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CustomHeader";
  }
  protected:
  explicit CustomHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required bytes key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CustomHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CorsRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CorsRule) */ {
 public:
  inline CorsRule() : CorsRule(nullptr) {}
  virtual ~CorsRule();

  CorsRule(const CorsRule& from);
  CorsRule(CorsRule&& from) noexcept
    : CorsRule() {
    *this = ::std::move(from);
  }

  inline CorsRule& operator=(const CorsRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorsRule& operator=(CorsRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CorsRule& default_instance();

  static inline const CorsRule* internal_default_instance() {
    return reinterpret_cast<const CorsRule*>(
               &_CorsRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CorsRule& a, CorsRule& b) {
    a.Swap(&b);
  }
  inline void Swap(CorsRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorsRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CorsRule* New() const final {
    return CreateMaybeMessage<CorsRule>(nullptr);
  }

  CorsRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CorsRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CorsRule& from);
  void MergeFrom(const CorsRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CorsRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CorsRule";
  }
  protected:
  explicit CorsRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kMethodsFieldNumber = 2,
    kAllowHeadersFieldNumber = 4,
    kExposeHeadersFieldNumber = 5,
    kIdFieldNumber = 7,
    kCredentialsFieldNumber = 3,
    kMaxAgeFieldNumber = 6,
  };
  // required bytes origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const void* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // required bytes methods = 2;
  bool has_methods() const;
  private:
  bool _internal_has_methods() const;
  public:
  void clear_methods();
  const std::string& methods() const;
  void set_methods(const std::string& value);
  void set_methods(std::string&& value);
  void set_methods(const char* value);
  void set_methods(const void* value, size_t size);
  std::string* mutable_methods();
  std::string* release_methods();
  void set_allocated_methods(std::string* methods);
  private:
  const std::string& _internal_methods() const;
  void _internal_set_methods(const std::string& value);
  std::string* _internal_mutable_methods();
  public:

  // optional bytes allow_headers = 4;
  bool has_allow_headers() const;
  private:
  bool _internal_has_allow_headers() const;
  public:
  void clear_allow_headers();
  const std::string& allow_headers() const;
  void set_allow_headers(const std::string& value);
  void set_allow_headers(std::string&& value);
  void set_allow_headers(const char* value);
  void set_allow_headers(const void* value, size_t size);
  std::string* mutable_allow_headers();
  std::string* release_allow_headers();
  void set_allocated_allow_headers(std::string* allow_headers);
  private:
  const std::string& _internal_allow_headers() const;
  void _internal_set_allow_headers(const std::string& value);
  std::string* _internal_mutable_allow_headers();
  public:

  // optional bytes expose_headers = 5;
  bool has_expose_headers() const;
  private:
  bool _internal_has_expose_headers() const;
  public:
  void clear_expose_headers();
  const std::string& expose_headers() const;
  void set_expose_headers(const std::string& value);
  void set_expose_headers(std::string&& value);
  void set_expose_headers(const char* value);
  void set_expose_headers(const void* value, size_t size);
  std::string* mutable_expose_headers();
  std::string* release_expose_headers();
  void set_allocated_expose_headers(std::string* expose_headers);
  private:
  const std::string& _internal_expose_headers() const;
  void _internal_set_expose_headers(const std::string& value);
  std::string* _internal_mutable_expose_headers();
  public:

  // optional bytes id = 7;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bool credentials = 3;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  bool credentials() const;
  void set_credentials(bool value);
  private:
  bool _internal_credentials() const;
  void _internal_set_credentials(bool value);
  public:

  // optional int32 max_age = 6;
  bool has_max_age() const;
  private:
  bool _internal_has_max_age() const;
  public:
  void clear_max_age();
  ::PROTOBUF_NAMESPACE_ID::int32 max_age() const;
  void set_max_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_age() const;
  void _internal_set_max_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CorsRule)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr methods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allow_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expose_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool credentials_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_age_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {}
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.Tag";
  }
  protected:
  explicit Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required bytes key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.Tag)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjTag) */ {
 public:
  inline ObjTag() : ObjTag(nullptr) {}
  virtual ~ObjTag();

  ObjTag(const ObjTag& from);
  ObjTag(ObjTag&& from) noexcept
    : ObjTag() {
    *this = ::std::move(from);
  }

  inline ObjTag& operator=(const ObjTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjTag& operator=(ObjTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjTag& default_instance();

  static inline const ObjTag* internal_default_instance() {
    return reinterpret_cast<const ObjTag*>(
               &_ObjTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ObjTag& a, ObjTag& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjTag* New() const final {
    return CreateMaybeMessage<ObjTag>(nullptr);
  }

  ObjTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjTag& from);
  void MergeFrom(const ObjTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjTag";
  }
  protected:
  explicit ObjTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required bytes key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class LockInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.LockInfo) */ {
 public:
  inline LockInfo() : LockInfo(nullptr) {}
  virtual ~LockInfo();

  LockInfo(const LockInfo& from);
  LockInfo(LockInfo&& from) noexcept
    : LockInfo() {
    *this = ::std::move(from);
  }

  inline LockInfo& operator=(const LockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockInfo& operator=(LockInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockInfo& default_instance();

  static inline const LockInfo* internal_default_instance() {
    return reinterpret_cast<const LockInfo*>(
               &_LockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(LockInfo& a, LockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LockInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockInfo* New() const final {
    return CreateMaybeMessage<LockInfo>(nullptr);
  }

  LockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockInfo& from);
  void MergeFrom(const LockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.LockInfo";
  }
  protected:
  explicit LockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaysFieldNumber = 1,
  };
  // optional uint32 days = 1;
  bool has_days() const;
  private:
  bool _internal_has_days() const;
  public:
  void clear_days();
  ::PROTOBUF_NAMESPACE_ID::uint32 days() const;
  void set_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_days() const;
  void _internal_set_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.LockInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 days_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppAttr) */ {
 public:
  inline AppAttr() : AppAttr(nullptr) {}
  virtual ~AppAttr();

  AppAttr(const AppAttr& from);
  AppAttr(AppAttr&& from) noexcept
    : AppAttr() {
    *this = ::std::move(from);
  }

  inline AppAttr& operator=(const AppAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppAttr& operator=(AppAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppAttr& default_instance();

  static inline const AppAttr* internal_default_instance() {
    return reinterpret_cast<const AppAttr*>(
               &_AppAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(AppAttr& a, AppAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(AppAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppAttr* New() const final {
    return CreateMaybeMessage<AppAttr>(nullptr);
  }

  AppAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppAttr& from);
  void MergeFrom(const AppAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppAttr";
  }
  protected:
  explicit AppAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 6,
    kCnameFieldNumber = 7,
    kWhitereferFieldNumber = 8,
    kBlackreferFieldNumber = 9,
    kReservedattrFieldNumber = 12,
    kCustomheaderFieldNumber = 14,
    kCorsruleFieldNumber = 15,
    kTagFieldNumber = 22,
    kLfattrFieldNumber = 25,
    kCustomheaderPlatFieldNumber = 31,
    kTaglistFieldNumber = 37,
    kAclsFieldNumber = 45,
    kBizAttrFieldNumber = 1,
    kShaFieldNumber = 3,
    kPathFieldNumber = 5,
    kRealShaFieldNumber = 16,
    kVersionFieldNumber = 19,
    kUploadSourceFieldNumber = 29,
    kUinFieldNumber = 32,
    kInventoryFieldNumber = 50,
    kExtraattrFieldNumber = 17,
    kCasinfoFieldNumber = 34,
    kSseinfoFieldNumber = 35,
    kWebsiteinfoFieldNumber = 36,
    kObjexpireattrFieldNumber = 38,
    kObjOwnerFieldNumber = 43,
    kBucketOwnerFieldNumber = 44,
    kLockinfoFieldNumber = 48,
    kMigrateinfoFieldNumber = 52,
    kTypeFieldNumber = 2,
    kAuthFieldNumber = 4,
    kUsrSliceSizeFieldNumber = 10,
    kForbidFieldNumber = 11,
    kRealSliceSizeFieldNumber = 13,
    kMultiVersionFlagFieldNumber = 20,
    kCtimeMsFieldNumber = 18,
    kMultiVersionHisflagFieldNumber = 21,
    kBucketnumFieldNumber = 23,
    kIdcnumFieldNumber = 24,
    kReferAbleFieldNumber = 26,
    kEmptyreferconfigFieldNumber = 27,
    kCnameAbleFieldNumber = 28,
    kNofileFieldNumber = 33,
    kCtimeMsTempFieldNumber = 30,
    kCamauthFieldNumber = 39,
    kIsV4FieldNumber = 40,
    kVisitV4FieldNumber = 41,
    kIsChunkFieldNumber = 42,
    kIsUgcFieldNumber = 47,
    kNslotFieldNumber = 46,
    kMtimeTempFieldNumber = 49,
    kInventoryMtimeFieldNumber = 51,
  };
  // repeated .ClientCos.KeyPair keys = 6;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::ClientCos::KeyPair* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >*
      mutable_keys();
  private:
  const ::ClientCos::KeyPair& _internal_keys(int index) const;
  ::ClientCos::KeyPair* _internal_add_keys();
  public:
  const ::ClientCos::KeyPair& keys(int index) const;
  ::ClientCos::KeyPair* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >&
      keys() const;

  // repeated string cname = 7;
  int cname_size() const;
  private:
  int _internal_cname_size() const;
  public:
  void clear_cname();
  const std::string& cname(int index) const;
  std::string* mutable_cname(int index);
  void set_cname(int index, const std::string& value);
  void set_cname(int index, std::string&& value);
  void set_cname(int index, const char* value);
  void set_cname(int index, const char* value, size_t size);
  std::string* add_cname();
  void add_cname(const std::string& value);
  void add_cname(std::string&& value);
  void add_cname(const char* value);
  void add_cname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cname();
  private:
  const std::string& _internal_cname(int index) const;
  std::string* _internal_add_cname();
  public:

  // repeated string whiterefer = 8;
  int whiterefer_size() const;
  private:
  int _internal_whiterefer_size() const;
  public:
  void clear_whiterefer();
  const std::string& whiterefer(int index) const;
  std::string* mutable_whiterefer(int index);
  void set_whiterefer(int index, const std::string& value);
  void set_whiterefer(int index, std::string&& value);
  void set_whiterefer(int index, const char* value);
  void set_whiterefer(int index, const char* value, size_t size);
  std::string* add_whiterefer();
  void add_whiterefer(const std::string& value);
  void add_whiterefer(std::string&& value);
  void add_whiterefer(const char* value);
  void add_whiterefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& whiterefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_whiterefer();
  private:
  const std::string& _internal_whiterefer(int index) const;
  std::string* _internal_add_whiterefer();
  public:

  // repeated string blackrefer = 9;
  int blackrefer_size() const;
  private:
  int _internal_blackrefer_size() const;
  public:
  void clear_blackrefer();
  const std::string& blackrefer(int index) const;
  std::string* mutable_blackrefer(int index);
  void set_blackrefer(int index, const std::string& value);
  void set_blackrefer(int index, std::string&& value);
  void set_blackrefer(int index, const char* value);
  void set_blackrefer(int index, const char* value, size_t size);
  std::string* add_blackrefer();
  void add_blackrefer(const std::string& value);
  void add_blackrefer(std::string&& value);
  void add_blackrefer(const char* value);
  void add_blackrefer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blackrefer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blackrefer();
  private:
  const std::string& _internal_blackrefer(int index) const;
  std::string* _internal_add_blackrefer();
  public:

  // repeated .ClientCos.ReservedAttr reservedattr = 12;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CustomHeader customheader = 14;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // repeated .ClientCos.CorsRule corsrule = 15;
  int corsrule_size() const;
  private:
  int _internal_corsrule_size() const;
  public:
  void clear_corsrule();
  ::ClientCos::CorsRule* mutable_corsrule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
      mutable_corsrule();
  private:
  const ::ClientCos::CorsRule& _internal_corsrule(int index) const;
  ::ClientCos::CorsRule* _internal_add_corsrule();
  public:
  const ::ClientCos::CorsRule& corsrule(int index) const;
  ::ClientCos::CorsRule* add_corsrule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
      corsrule() const;

  // repeated .ClientCos.Tag tag = 22;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  ::ClientCos::Tag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >*
      mutable_tag();
  private:
  const ::ClientCos::Tag& _internal_tag(int index) const;
  ::ClientCos::Tag* _internal_add_tag();
  public:
  const ::ClientCos::Tag& tag(int index) const;
  ::ClientCos::Tag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >&
      tag() const;

  // repeated .ClientCos.LFAttr lfattr = 25;
  int lfattr_size() const;
  private:
  int _internal_lfattr_size() const;
  public:
  void clear_lfattr();
  ::ClientCos::LFAttr* mutable_lfattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >*
      mutable_lfattr();
  private:
  const ::ClientCos::LFAttr& _internal_lfattr(int index) const;
  ::ClientCos::LFAttr* _internal_add_lfattr();
  public:
  const ::ClientCos::LFAttr& lfattr(int index) const;
  ::ClientCos::LFAttr* add_lfattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >&
      lfattr() const;

  // repeated .ClientCos.CustomHeader customheader_plat = 31;
  int customheader_plat_size() const;
  private:
  int _internal_customheader_plat_size() const;
  public:
  void clear_customheader_plat();
  ::ClientCos::CustomHeader* mutable_customheader_plat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader_plat();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader_plat(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader_plat();
  public:
  const ::ClientCos::CustomHeader& customheader_plat(int index) const;
  ::ClientCos::CustomHeader* add_customheader_plat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader_plat() const;

  // repeated .ClientCos.ObjTag taglist = 37;
  int taglist_size() const;
  private:
  int _internal_taglist_size() const;
  public:
  void clear_taglist();
  ::ClientCos::ObjTag* mutable_taglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
      mutable_taglist();
  private:
  const ::ClientCos::ObjTag& _internal_taglist(int index) const;
  ::ClientCos::ObjTag* _internal_add_taglist();
  public:
  const ::ClientCos::ObjTag& taglist(int index) const;
  ::ClientCos::ObjTag* add_taglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
      taglist() const;

  // repeated .ClientCos.AclInfo acls = 45;
  int acls_size() const;
  private:
  int _internal_acls_size() const;
  public:
  void clear_acls();
  ::ClientCos::AclInfo* mutable_acls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
      mutable_acls();
  private:
  const ::ClientCos::AclInfo& _internal_acls(int index) const;
  ::ClientCos::AclInfo* _internal_add_acls();
  public:
  const ::ClientCos::AclInfo& acls(int index) const;
  ::ClientCos::AclInfo* add_acls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
      acls() const;

  // optional bytes biz_attr = 1;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes sha = 3;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes path = 5;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes real_sha = 16;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // optional bytes version = 19;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes upload_source = 29;
  bool has_upload_source() const;
  private:
  bool _internal_has_upload_source() const;
  public:
  void clear_upload_source();
  const std::string& upload_source() const;
  void set_upload_source(const std::string& value);
  void set_upload_source(std::string&& value);
  void set_upload_source(const char* value);
  void set_upload_source(const void* value, size_t size);
  std::string* mutable_upload_source();
  std::string* release_upload_source();
  void set_allocated_upload_source(std::string* upload_source);
  private:
  const std::string& _internal_upload_source() const;
  void _internal_set_upload_source(const std::string& value);
  std::string* _internal_mutable_upload_source();
  public:

  // optional bytes uin = 32;
  bool has_uin() const;
  private:
  bool _internal_has_uin() const;
  public:
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const void* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // optional bytes inventory = 50;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  const std::string& inventory() const;
  void set_inventory(const std::string& value);
  void set_inventory(std::string&& value);
  void set_inventory(const char* value);
  void set_inventory(const void* value, size_t size);
  std::string* mutable_inventory();
  std::string* release_inventory();
  void set_allocated_inventory(std::string* inventory);
  private:
  const std::string& _internal_inventory() const;
  void _internal_set_inventory(const std::string& value);
  std::string* _internal_mutable_inventory();
  public:

  // optional .ClientCos.ExtraAttr extraattr = 17;
  bool has_extraattr() const;
  private:
  bool _internal_has_extraattr() const;
  public:
  void clear_extraattr();
  const ::ClientCos::ExtraAttr& extraattr() const;
  ::ClientCos::ExtraAttr* release_extraattr();
  ::ClientCos::ExtraAttr* mutable_extraattr();
  void set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr);
  private:
  const ::ClientCos::ExtraAttr& _internal_extraattr() const;
  ::ClientCos::ExtraAttr* _internal_mutable_extraattr();
  public:
  void unsafe_arena_set_allocated_extraattr(
      ::ClientCos::ExtraAttr* extraattr);
  ::ClientCos::ExtraAttr* unsafe_arena_release_extraattr();

  // optional .ClientCos.CasInfo casinfo = 34;
  bool has_casinfo() const;
  private:
  bool _internal_has_casinfo() const;
  public:
  void clear_casinfo();
  const ::ClientCos::CasInfo& casinfo() const;
  ::ClientCos::CasInfo* release_casinfo();
  ::ClientCos::CasInfo* mutable_casinfo();
  void set_allocated_casinfo(::ClientCos::CasInfo* casinfo);
  private:
  const ::ClientCos::CasInfo& _internal_casinfo() const;
  ::ClientCos::CasInfo* _internal_mutable_casinfo();
  public:
  void unsafe_arena_set_allocated_casinfo(
      ::ClientCos::CasInfo* casinfo);
  ::ClientCos::CasInfo* unsafe_arena_release_casinfo();

  // optional .ClientCos.SseInfo sseinfo = 35;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::ClientCos::SseInfo& sseinfo() const;
  ::ClientCos::SseInfo* release_sseinfo();
  ::ClientCos::SseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo);
  private:
  const ::ClientCos::SseInfo& _internal_sseinfo() const;
  ::ClientCos::SseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::ClientCos::SseInfo* sseinfo);
  ::ClientCos::SseInfo* unsafe_arena_release_sseinfo();

  // optional .ClientCos.WebsiteInfo websiteinfo = 36;
  bool has_websiteinfo() const;
  private:
  bool _internal_has_websiteinfo() const;
  public:
  void clear_websiteinfo();
  const ::ClientCos::WebsiteInfo& websiteinfo() const;
  ::ClientCos::WebsiteInfo* release_websiteinfo();
  ::ClientCos::WebsiteInfo* mutable_websiteinfo();
  void set_allocated_websiteinfo(::ClientCos::WebsiteInfo* websiteinfo);
  private:
  const ::ClientCos::WebsiteInfo& _internal_websiteinfo() const;
  ::ClientCos::WebsiteInfo* _internal_mutable_websiteinfo();
  public:
  void unsafe_arena_set_allocated_websiteinfo(
      ::ClientCos::WebsiteInfo* websiteinfo);
  ::ClientCos::WebsiteInfo* unsafe_arena_release_websiteinfo();

  // optional .ClientCos.ObjExpireAttr objexpireattr = 38;
  bool has_objexpireattr() const;
  private:
  bool _internal_has_objexpireattr() const;
  public:
  void clear_objexpireattr();
  const ::ClientCos::ObjExpireAttr& objexpireattr() const;
  ::ClientCos::ObjExpireAttr* release_objexpireattr();
  ::ClientCos::ObjExpireAttr* mutable_objexpireattr();
  void set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr);
  private:
  const ::ClientCos::ObjExpireAttr& _internal_objexpireattr() const;
  ::ClientCos::ObjExpireAttr* _internal_mutable_objexpireattr();
  public:
  void unsafe_arena_set_allocated_objexpireattr(
      ::ClientCos::ObjExpireAttr* objexpireattr);
  ::ClientCos::ObjExpireAttr* unsafe_arena_release_objexpireattr();

  // optional .ClientCos.OwnerInfo objOwner = 43;
  bool has_objowner() const;
  private:
  bool _internal_has_objowner() const;
  public:
  void clear_objowner();
  const ::ClientCos::OwnerInfo& objowner() const;
  ::ClientCos::OwnerInfo* release_objowner();
  ::ClientCos::OwnerInfo* mutable_objowner();
  void set_allocated_objowner(::ClientCos::OwnerInfo* objowner);
  private:
  const ::ClientCos::OwnerInfo& _internal_objowner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_objowner();
  public:
  void unsafe_arena_set_allocated_objowner(
      ::ClientCos::OwnerInfo* objowner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_objowner();

  // optional .ClientCos.OwnerInfo bucketOwner = 44;
  bool has_bucketowner() const;
  private:
  bool _internal_has_bucketowner() const;
  public:
  void clear_bucketowner();
  const ::ClientCos::OwnerInfo& bucketowner() const;
  ::ClientCos::OwnerInfo* release_bucketowner();
  ::ClientCos::OwnerInfo* mutable_bucketowner();
  void set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner);
  private:
  const ::ClientCos::OwnerInfo& _internal_bucketowner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_bucketowner();
  public:
  void unsafe_arena_set_allocated_bucketowner(
      ::ClientCos::OwnerInfo* bucketowner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_bucketowner();

  // optional .ClientCos.LockInfo lockinfo = 48;
  bool has_lockinfo() const;
  private:
  bool _internal_has_lockinfo() const;
  public:
  void clear_lockinfo();
  const ::ClientCos::LockInfo& lockinfo() const;
  ::ClientCos::LockInfo* release_lockinfo();
  ::ClientCos::LockInfo* mutable_lockinfo();
  void set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo);
  private:
  const ::ClientCos::LockInfo& _internal_lockinfo() const;
  ::ClientCos::LockInfo* _internal_mutable_lockinfo();
  public:
  void unsafe_arena_set_allocated_lockinfo(
      ::ClientCos::LockInfo* lockinfo);
  ::ClientCos::LockInfo* unsafe_arena_release_lockinfo();

  // optional .ClientCos.Migrateinfo migrateinfo = 52;
  bool has_migrateinfo() const;
  private:
  bool _internal_has_migrateinfo() const;
  public:
  void clear_migrateinfo();
  const ::ClientCos::Migrateinfo& migrateinfo() const;
  ::ClientCos::Migrateinfo* release_migrateinfo();
  ::ClientCos::Migrateinfo* mutable_migrateinfo();
  void set_allocated_migrateinfo(::ClientCos::Migrateinfo* migrateinfo);
  private:
  const ::ClientCos::Migrateinfo& _internal_migrateinfo() const;
  ::ClientCos::Migrateinfo* _internal_mutable_migrateinfo();
  public:
  void unsafe_arena_set_allocated_migrateinfo(
      ::ClientCos::Migrateinfo* migrateinfo);
  ::ClientCos::Migrateinfo* unsafe_arena_release_migrateinfo();

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 4;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional uint32 usr_slice_size = 10 [default = 0];
  bool has_usr_slice_size() const;
  private:
  bool _internal_has_usr_slice_size() const;
  public:
  void clear_usr_slice_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_slice_size() const;
  void set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usr_slice_size() const;
  void _internal_set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 forbid = 11 [default = 0];
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 real_slice_size = 13 [default = 0];
  bool has_real_slice_size() const;
  private:
  bool _internal_has_real_slice_size() const;
  public:
  void clear_real_slice_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 real_slice_size() const;
  void set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_real_slice_size() const;
  void _internal_set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 multi_version_flag = 20;
  bool has_multi_version_flag() const;
  private:
  bool _internal_has_multi_version_flag() const;
  public:
  void clear_multi_version_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_flag() const;
  void set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multi_version_flag() const;
  void _internal_set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 ctime_ms = 18;
  bool has_ctime_ms() const;
  private:
  bool _internal_has_ctime_ms() const;
  public:
  void clear_ctime_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_ms() const;
  void set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ctime_ms() const;
  void _internal_set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 multi_version_hisflag = 21;
  bool has_multi_version_hisflag() const;
  private:
  bool _internal_has_multi_version_hisflag() const;
  public:
  void clear_multi_version_hisflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_hisflag() const;
  void set_multi_version_hisflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multi_version_hisflag() const;
  void _internal_set_multi_version_hisflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bucketnum = 23;
  bool has_bucketnum() const;
  private:
  bool _internal_has_bucketnum() const;
  public:
  void clear_bucketnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 bucketnum() const;
  void set_bucketnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bucketnum() const;
  void _internal_set_bucketnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 idcnum = 24;
  bool has_idcnum() const;
  private:
  bool _internal_has_idcnum() const;
  public:
  void clear_idcnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum() const;
  void set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idcnum() const;
  void _internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool refer_able = 26;
  bool has_refer_able() const;
  private:
  bool _internal_has_refer_able() const;
  public:
  void clear_refer_able();
  bool refer_able() const;
  void set_refer_able(bool value);
  private:
  bool _internal_refer_able() const;
  void _internal_set_refer_able(bool value);
  public:

  // optional bool emptyreferconfig = 27;
  bool has_emptyreferconfig() const;
  private:
  bool _internal_has_emptyreferconfig() const;
  public:
  void clear_emptyreferconfig();
  bool emptyreferconfig() const;
  void set_emptyreferconfig(bool value);
  private:
  bool _internal_emptyreferconfig() const;
  void _internal_set_emptyreferconfig(bool value);
  public:

  // optional bool cname_able = 28;
  bool has_cname_able() const;
  private:
  bool _internal_has_cname_able() const;
  public:
  void clear_cname_able();
  bool cname_able() const;
  void set_cname_able(bool value);
  private:
  bool _internal_cname_able() const;
  void _internal_set_cname_able(bool value);
  public:

  // optional bool nofile = 33;
  bool has_nofile() const;
  private:
  bool _internal_has_nofile() const;
  public:
  void clear_nofile();
  bool nofile() const;
  void set_nofile(bool value);
  private:
  bool _internal_nofile() const;
  void _internal_set_nofile(bool value);
  public:

  // optional uint64 ctime_ms_temp = 30;
  bool has_ctime_ms_temp() const;
  private:
  bool _internal_has_ctime_ms_temp() const;
  public:
  void clear_ctime_ms_temp();
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_ms_temp() const;
  void set_ctime_ms_temp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ctime_ms_temp() const;
  void _internal_set_ctime_ms_temp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ClientCos.CamAuth camauth = 39;
  bool has_camauth() const;
  private:
  bool _internal_has_camauth() const;
  public:
  void clear_camauth();
  ::ClientCos::CamAuth camauth() const;
  void set_camauth(::ClientCos::CamAuth value);
  private:
  ::ClientCos::CamAuth _internal_camauth() const;
  void _internal_set_camauth(::ClientCos::CamAuth value);
  public:

  // optional bool is_v4 = 40;
  bool has_is_v4() const;
  private:
  bool _internal_has_is_v4() const;
  public:
  void clear_is_v4();
  bool is_v4() const;
  void set_is_v4(bool value);
  private:
  bool _internal_is_v4() const;
  void _internal_set_is_v4(bool value);
  public:

  // optional bool visit_v4 = 41;
  bool has_visit_v4() const;
  private:
  bool _internal_has_visit_v4() const;
  public:
  void clear_visit_v4();
  bool visit_v4() const;
  void set_visit_v4(bool value);
  private:
  bool _internal_visit_v4() const;
  void _internal_set_visit_v4(bool value);
  public:

  // optional bool is_chunk = 42;
  bool has_is_chunk() const;
  private:
  bool _internal_has_is_chunk() const;
  public:
  void clear_is_chunk();
  bool is_chunk() const;
  void set_is_chunk(bool value);
  private:
  bool _internal_is_chunk() const;
  void _internal_set_is_chunk(bool value);
  public:

  // optional bool is_ugc = 47;
  bool has_is_ugc() const;
  private:
  bool _internal_has_is_ugc() const;
  public:
  void clear_is_ugc();
  bool is_ugc() const;
  void set_is_ugc(bool value);
  private:
  bool _internal_is_ugc() const;
  void _internal_set_is_ugc(bool value);
  public:

  // optional .ClientCos.NSlot nslot = 46;
  bool has_nslot() const;
  private:
  bool _internal_has_nslot() const;
  public:
  void clear_nslot();
  ::ClientCos::NSlot nslot() const;
  void set_nslot(::ClientCos::NSlot value);
  private:
  ::ClientCos::NSlot _internal_nslot() const;
  void _internal_set_nslot(::ClientCos::NSlot value);
  public:

  // optional uint32 mtime_temp = 49;
  bool has_mtime_temp() const;
  private:
  bool _internal_has_mtime_temp() const;
  public:
  void clear_mtime_temp();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_temp() const;
  void set_mtime_temp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime_temp() const;
  void _internal_set_mtime_temp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 inventory_mtime = 51;
  bool has_inventory_mtime() const;
  private:
  bool _internal_has_inventory_mtime() const;
  public:
  void clear_inventory_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 inventory_mtime() const;
  void set_inventory_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inventory_mtime() const;
  void _internal_set_inventory_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AppAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair > keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> whiterefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blackrefer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule > corsrule_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag > tag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr > lfattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_plat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag > taglist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo > acls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventory_;
  ::ClientCos::ExtraAttr* extraattr_;
  ::ClientCos::CasInfo* casinfo_;
  ::ClientCos::SseInfo* sseinfo_;
  ::ClientCos::WebsiteInfo* websiteinfo_;
  ::ClientCos::ObjExpireAttr* objexpireattr_;
  ::ClientCos::OwnerInfo* objowner_;
  ::ClientCos::OwnerInfo* bucketowner_;
  ::ClientCos::LockInfo* lockinfo_;
  ::ClientCos::Migrateinfo* migrateinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  int auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_slice_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 real_slice_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_version_hisflag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bucketnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum_;
  bool refer_able_;
  bool emptyreferconfig_;
  bool cname_able_;
  bool nofile_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_ms_temp_;
  int camauth_;
  bool is_v4_;
  bool visit_v4_;
  bool is_chunk_;
  bool is_ugc_;
  int nslot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_temp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inventory_mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class KeyPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.KeyPair) */ {
 public:
  inline KeyPair() : KeyPair(nullptr) {}
  virtual ~KeyPair();

  KeyPair(const KeyPair& from);
  KeyPair(KeyPair&& from) noexcept
    : KeyPair() {
    *this = ::std::move(from);
  }

  inline KeyPair& operator=(const KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPair& operator=(KeyPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyPair& default_instance();

  static inline const KeyPair* internal_default_instance() {
    return reinterpret_cast<const KeyPair*>(
               &_KeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(KeyPair& a, KeyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPair* New() const final {
    return CreateMaybeMessage<KeyPair>(nullptr);
  }

  KeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyPair& from);
  void MergeFrom(const KeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.KeyPair";
  }
  protected:
  explicit KeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccesskeyFieldNumber = 1,
    kSecretkeyFieldNumber = 2,
  };
  // optional string accesskey = 1;
  bool has_accesskey() const;
  private:
  bool _internal_has_accesskey() const;
  public:
  void clear_accesskey();
  const std::string& accesskey() const;
  void set_accesskey(const std::string& value);
  void set_accesskey(std::string&& value);
  void set_accesskey(const char* value);
  void set_accesskey(const char* value, size_t size);
  std::string* mutable_accesskey();
  std::string* release_accesskey();
  void set_allocated_accesskey(std::string* accesskey);
  private:
  const std::string& _internal_accesskey() const;
  void _internal_set_accesskey(const std::string& value);
  std::string* _internal_mutable_accesskey();
  public:

  // optional string secretkey = 2;
  bool has_secretkey() const;
  private:
  bool _internal_has_secretkey() const;
  public:
  void clear_secretkey();
  const std::string& secretkey() const;
  void set_secretkey(const std::string& value);
  void set_secretkey(std::string&& value);
  void set_secretkey(const char* value);
  void set_secretkey(const char* value, size_t size);
  std::string* mutable_secretkey();
  std::string* release_secretkey();
  void set_allocated_secretkey(std::string* secretkey);
  private:
  const std::string& _internal_secretkey() const;
  void _internal_set_secretkey(const std::string& value);
  std::string* _internal_mutable_secretkey();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.KeyPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesskey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secretkey_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjItem) */ {
 public:
  inline ObjItem() : ObjItem(nullptr) {}
  virtual ~ObjItem();

  ObjItem(const ObjItem& from);
  ObjItem(ObjItem&& from) noexcept
    : ObjItem() {
    *this = ::std::move(from);
  }

  inline ObjItem& operator=(const ObjItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjItem& operator=(ObjItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjItem& default_instance();

  static inline const ObjItem* internal_default_instance() {
    return reinterpret_cast<const ObjItem*>(
               &_ObjItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ObjItem& a, ObjItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjItem* New() const final {
    return CreateMaybeMessage<ObjItem>(nullptr);
  }

  ObjItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjItem& from);
  void MergeFrom(const ObjItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjItem";
  }
  protected:
  explicit ObjItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedattrFieldNumber = 10,
    kTaglistFieldNumber = 18,
    kCustomheaderFieldNumber = 20,
    kXCosCustomheaderFieldNumber = 22,
    kNameFieldNumber = 1,
    kBizAttrFieldNumber = 7,
    kShaFieldNumber = 8,
    kRealShaFieldNumber = 11,
    kVersionFieldNumber = 12,
    kStorageTypeFieldNumber = 14,
    kObjexpireattrFieldNumber = 19,
    kSseinfoFieldNumber = 21,
    kFileSizeFieldNumber = 3,
    kUploadSizeFieldNumber = 4,
    kCtimeFieldNumber = 5,
    kMtimeFieldNumber = 6,
    kCtimeMsFieldNumber = 13,
    kAuthFieldNumber = 9,
    kTypeFieldNumber = 17,
    kDeleteMarkerFieldNumber = 15,
    kIslatestFieldNumber = 16,
    kIsUgcFieldNumber = 24,
    kForbidFieldNumber = 23,
  };
  // repeated .ClientCos.ReservedAttr reservedattr = 10;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.ObjTag taglist = 18;
  int taglist_size() const;
  private:
  int _internal_taglist_size() const;
  public:
  void clear_taglist();
  ::ClientCos::ObjTag* mutable_taglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
      mutable_taglist();
  private:
  const ::ClientCos::ObjTag& _internal_taglist(int index) const;
  ::ClientCos::ObjTag* _internal_add_taglist();
  public:
  const ::ClientCos::ObjTag& taglist(int index) const;
  ::ClientCos::ObjTag* add_taglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
      taglist() const;

  // repeated .ClientCos.CustomHeader customheader = 20;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // repeated .ClientCos.CustomHeader x_cos_customheader = 22;
  int x_cos_customheader_size() const;
  private:
  int _internal_x_cos_customheader_size() const;
  public:
  void clear_x_cos_customheader();
  ::ClientCos::CustomHeader* mutable_x_cos_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_x_cos_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_x_cos_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_x_cos_customheader();
  public:
  const ::ClientCos::CustomHeader& x_cos_customheader(int index) const;
  ::ClientCos::CustomHeader* add_x_cos_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      x_cos_customheader() const;

  // optional bytes name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes biz_attr = 7;
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes sha = 8;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes real_sha = 11;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // optional bytes version = 12;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes storage_type = 14;
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // optional .ClientCos.ObjExpireAttr objexpireattr = 19;
  bool has_objexpireattr() const;
  private:
  bool _internal_has_objexpireattr() const;
  public:
  void clear_objexpireattr();
  const ::ClientCos::ObjExpireAttr& objexpireattr() const;
  ::ClientCos::ObjExpireAttr* release_objexpireattr();
  ::ClientCos::ObjExpireAttr* mutable_objexpireattr();
  void set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr);
  private:
  const ::ClientCos::ObjExpireAttr& _internal_objexpireattr() const;
  ::ClientCos::ObjExpireAttr* _internal_mutable_objexpireattr();
  public:
  void unsafe_arena_set_allocated_objexpireattr(
      ::ClientCos::ObjExpireAttr* objexpireattr);
  ::ClientCos::ObjExpireAttr* unsafe_arena_release_objexpireattr();

  // optional .ClientCos.SseInfo sseinfo = 21;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::ClientCos::SseInfo& sseinfo() const;
  ::ClientCos::SseInfo* release_sseinfo();
  ::ClientCos::SseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo);
  private:
  const ::ClientCos::SseInfo& _internal_sseinfo() const;
  ::ClientCos::SseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::ClientCos::SseInfo* sseinfo);
  ::ClientCos::SseInfo* unsafe_arena_release_sseinfo();

  // optional uint64 file_size = 3;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 upload_size = 4;
  bool has_upload_size() const;
  private:
  bool _internal_has_upload_size() const;
  public:
  void clear_upload_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 upload_size() const;
  void set_upload_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_upload_size() const;
  void _internal_set_upload_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 ctime = 5;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 mtime = 6;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 ctime_ms = 13;
  bool has_ctime_ms() const;
  private:
  bool _internal_has_ctime_ms() const;
  public:
  void clear_ctime_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_ms() const;
  void set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ctime_ms() const;
  void _internal_set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ClientCos.Authority auth = 9;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional uint32 type = 17;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool delete_marker = 15;
  bool has_delete_marker() const;
  private:
  bool _internal_has_delete_marker() const;
  public:
  void clear_delete_marker();
  bool delete_marker() const;
  void set_delete_marker(bool value);
  private:
  bool _internal_delete_marker() const;
  void _internal_set_delete_marker(bool value);
  public:

  // optional bool islatest = 16;
  bool has_islatest() const;
  private:
  bool _internal_has_islatest() const;
  public:
  void clear_islatest();
  bool islatest() const;
  void set_islatest(bool value);
  private:
  bool _internal_islatest() const;
  void _internal_set_islatest(bool value);
  public:

  // optional bool is_ugc = 24;
  bool has_is_ugc() const;
  private:
  bool _internal_has_is_ugc() const;
  public:
  void clear_is_ugc();
  bool is_ugc() const;
  void set_is_ugc(bool value);
  private:
  bool _internal_is_ugc() const;
  void _internal_set_is_ugc(bool value);
  public:

  // optional uint32 forbid = 23;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag > taglist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > x_cos_customheader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  ::ClientCos::ObjExpireAttr* objexpireattr_;
  ::ClientCos::SseInfo* sseinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 upload_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_ms_;
  int auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  bool delete_marker_;
  bool islatest_;
  bool is_ugc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class MutiObjItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.MutiObjItem) */ {
 public:
  inline MutiObjItem() : MutiObjItem(nullptr) {}
  virtual ~MutiObjItem();

  MutiObjItem(const MutiObjItem& from);
  MutiObjItem(MutiObjItem&& from) noexcept
    : MutiObjItem() {
    *this = ::std::move(from);
  }

  inline MutiObjItem& operator=(const MutiObjItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutiObjItem& operator=(MutiObjItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutiObjItem& default_instance();

  static inline const MutiObjItem* internal_default_instance() {
    return reinterpret_cast<const MutiObjItem*>(
               &_MutiObjItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(MutiObjItem& a, MutiObjItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MutiObjItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutiObjItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutiObjItem* New() const final {
    return CreateMaybeMessage<MutiObjItem>(nullptr);
  }

  MutiObjItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutiObjItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutiObjItem& from);
  void MergeFrom(const MutiObjItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutiObjItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.MutiObjItem";
  }
  protected:
  explicit MutiObjItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUploadkeyFieldNumber = 3,
    kStorageTypeFieldNumber = 6,
    kUinFieldNumber = 7,
    kCtimeFieldNumber = 4,
    kMtimeFieldNumber = 5,
    kFileSizeFieldNumber = 8,
  };
  // optional bytes name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes uploadkey = 3;
  bool has_uploadkey() const;
  private:
  bool _internal_has_uploadkey() const;
  public:
  void clear_uploadkey();
  const std::string& uploadkey() const;
  void set_uploadkey(const std::string& value);
  void set_uploadkey(std::string&& value);
  void set_uploadkey(const char* value);
  void set_uploadkey(const void* value, size_t size);
  std::string* mutable_uploadkey();
  std::string* release_uploadkey();
  void set_allocated_uploadkey(std::string* uploadkey);
  private:
  const std::string& _internal_uploadkey() const;
  void _internal_set_uploadkey(const std::string& value);
  std::string* _internal_mutable_uploadkey();
  public:

  // optional bytes storage_type = 6;
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // optional bytes uin = 7;
  bool has_uin() const;
  private:
  bool _internal_has_uin() const;
  public:
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const void* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // optional uint32 ctime = 4;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 5;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 file_size = 8;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.MutiObjItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DelObjExpireAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DelObjExpireAttr) */ {
 public:
  inline DelObjExpireAttr() : DelObjExpireAttr(nullptr) {}
  virtual ~DelObjExpireAttr();

  DelObjExpireAttr(const DelObjExpireAttr& from);
  DelObjExpireAttr(DelObjExpireAttr&& from) noexcept
    : DelObjExpireAttr() {
    *this = ::std::move(from);
  }

  inline DelObjExpireAttr& operator=(const DelObjExpireAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelObjExpireAttr& operator=(DelObjExpireAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelObjExpireAttr& default_instance();

  static inline const DelObjExpireAttr* internal_default_instance() {
    return reinterpret_cast<const DelObjExpireAttr*>(
               &_DelObjExpireAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(DelObjExpireAttr& a, DelObjExpireAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(DelObjExpireAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelObjExpireAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelObjExpireAttr* New() const final {
    return CreateMaybeMessage<DelObjExpireAttr>(nullptr);
  }

  DelObjExpireAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelObjExpireAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelObjExpireAttr& from);
  void MergeFrom(const DelObjExpireAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelObjExpireAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DelObjExpireAttr";
  }
  protected:
  explicit DelObjExpireAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextVersionFieldNumber = 4,
    kOpFieldNumber = 1,
    kIsLatestFieldNumber = 2,
    kIsDeleteMarkerFieldNumber = 3,
    kNextVersionSeedFieldNumber = 6,
    kNextVersionCtimeFieldNumber = 5,
  };
  // optional bytes next_version = 4;
  bool has_next_version() const;
  private:
  bool _internal_has_next_version() const;
  public:
  void clear_next_version();
  const std::string& next_version() const;
  void set_next_version(const std::string& value);
  void set_next_version(std::string&& value);
  void set_next_version(const char* value);
  void set_next_version(const void* value, size_t size);
  std::string* mutable_next_version();
  std::string* release_next_version();
  void set_allocated_next_version(std::string* next_version);
  private:
  const std::string& _internal_next_version() const;
  void _internal_set_next_version(const std::string& value);
  std::string* _internal_mutable_next_version();
  public:

  // required uint32 op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::PROTOBUF_NAMESPACE_ID::uint32 op() const;
  void set_op(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_op() const;
  void _internal_set_op(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isLatest = 2;
  bool has_islatest() const;
  private:
  bool _internal_has_islatest() const;
  public:
  void clear_islatest();
  bool islatest() const;
  void set_islatest(bool value);
  private:
  bool _internal_islatest() const;
  void _internal_set_islatest(bool value);
  public:

  // optional bool isDeleteMarker = 3;
  bool has_isdeletemarker() const;
  private:
  bool _internal_has_isdeletemarker() const;
  public:
  void clear_isdeletemarker();
  bool isdeletemarker() const;
  void set_isdeletemarker(bool value);
  private:
  bool _internal_isdeletemarker() const;
  void _internal_set_isdeletemarker(bool value);
  public:

  // optional uint64 next_version_seed = 6;
  bool has_next_version_seed() const;
  private:
  bool _internal_has_next_version_seed() const;
  public:
  void clear_next_version_seed();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_version_seed() const;
  void set_next_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_version_seed() const;
  void _internal_set_next_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 next_version_ctime = 5;
  bool has_next_version_ctime() const;
  private:
  bool _internal_has_next_version_ctime() const;
  public:
  void clear_next_version_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_version_ctime() const;
  void set_next_version_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_version_ctime() const;
  void _internal_set_next_version_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.DelObjExpireAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 op_;
  bool islatest_;
  bool isdeletemarker_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_version_seed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_version_ctime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DelExpireFileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DelExpireFileReq) */ {
 public:
  inline DelExpireFileReq() : DelExpireFileReq(nullptr) {}
  virtual ~DelExpireFileReq();

  DelExpireFileReq(const DelExpireFileReq& from);
  DelExpireFileReq(DelExpireFileReq&& from) noexcept
    : DelExpireFileReq() {
    *this = ::std::move(from);
  }

  inline DelExpireFileReq& operator=(const DelExpireFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelExpireFileReq& operator=(DelExpireFileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelExpireFileReq& default_instance();

  static inline const DelExpireFileReq* internal_default_instance() {
    return reinterpret_cast<const DelExpireFileReq*>(
               &_DelExpireFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(DelExpireFileReq& a, DelExpireFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DelExpireFileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelExpireFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelExpireFileReq* New() const final {
    return CreateMaybeMessage<DelExpireFileReq>(nullptr);
  }

  DelExpireFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelExpireFileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelExpireFileReq& from);
  void MergeFrom(const DelExpireFileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelExpireFileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DelExpireFileReq";
  }
  protected:
  explicit DelExpireFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kExpireAttrFieldNumber = 4,
    kMtimeFieldNumber = 2,
    kSwitchFlagFieldNumber = 3,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .ClientCos.DelObjExpireAttr expire_attr = 4;
  bool has_expire_attr() const;
  private:
  bool _internal_has_expire_attr() const;
  public:
  void clear_expire_attr();
  const ::ClientCos::DelObjExpireAttr& expire_attr() const;
  ::ClientCos::DelObjExpireAttr* release_expire_attr();
  ::ClientCos::DelObjExpireAttr* mutable_expire_attr();
  void set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr);
  private:
  const ::ClientCos::DelObjExpireAttr& _internal_expire_attr() const;
  ::ClientCos::DelObjExpireAttr* _internal_mutable_expire_attr();
  public:
  void unsafe_arena_set_allocated_expire_attr(
      ::ClientCos::DelObjExpireAttr* expire_attr);
  ::ClientCos::DelObjExpireAttr* unsafe_arena_release_expire_attr();

  // required uint32 mtime = 2;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool switch_flag = 3;
  bool has_switch_flag() const;
  private:
  bool _internal_has_switch_flag() const;
  public:
  void clear_switch_flag();
  bool switch_flag() const;
  void set_switch_flag(bool value);
  private:
  bool _internal_switch_flag() const;
  void _internal_set_switch_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.DelExpireFileReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::ClientCos::DelObjExpireAttr* expire_attr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  bool switch_flag_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DelExpireFileRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DelExpireFileRsp) */ {
 public:
  inline DelExpireFileRsp() : DelExpireFileRsp(nullptr) {}
  virtual ~DelExpireFileRsp();

  DelExpireFileRsp(const DelExpireFileRsp& from);
  DelExpireFileRsp(DelExpireFileRsp&& from) noexcept
    : DelExpireFileRsp() {
    *this = ::std::move(from);
  }

  inline DelExpireFileRsp& operator=(const DelExpireFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelExpireFileRsp& operator=(DelExpireFileRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelExpireFileRsp& default_instance();

  static inline const DelExpireFileRsp* internal_default_instance() {
    return reinterpret_cast<const DelExpireFileRsp*>(
               &_DelExpireFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DelExpireFileRsp& a, DelExpireFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DelExpireFileRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelExpireFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelExpireFileRsp* New() const final {
    return CreateMaybeMessage<DelExpireFileRsp>(nullptr);
  }

  DelExpireFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelExpireFileRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelExpireFileRsp& from);
  void MergeFrom(const DelExpireFileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelExpireFileRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DelExpireFileRsp";
  }
  protected:
  explicit DelExpireFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtimeFieldNumber = 1,
  };
  // optional uint32 mtime = 1;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.DelExpireFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class StorageTypeAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.StorageTypeAttr) */ {
 public:
  inline StorageTypeAttr() : StorageTypeAttr(nullptr) {}
  virtual ~StorageTypeAttr();

  StorageTypeAttr(const StorageTypeAttr& from);
  StorageTypeAttr(StorageTypeAttr&& from) noexcept
    : StorageTypeAttr() {
    *this = ::std::move(from);
  }

  inline StorageTypeAttr& operator=(const StorageTypeAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageTypeAttr& operator=(StorageTypeAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageTypeAttr& default_instance();

  static inline const StorageTypeAttr* internal_default_instance() {
    return reinterpret_cast<const StorageTypeAttr*>(
               &_StorageTypeAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(StorageTypeAttr& a, StorageTypeAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageTypeAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageTypeAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageTypeAttr* New() const final {
    return CreateMaybeMessage<StorageTypeAttr>(nullptr);
  }

  StorageTypeAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageTypeAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageTypeAttr& from);
  void MergeFrom(const StorageTypeAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageTypeAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.StorageTypeAttr";
  }
  protected:
  explicit StorageTypeAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinDelDaysFieldNumber = 1,
    kMinFileSizeFieldNumber = 2,
  };
  // required uint32 min_del_days = 1;
  bool has_min_del_days() const;
  private:
  bool _internal_has_min_del_days() const;
  public:
  void clear_min_del_days();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_del_days() const;
  void set_min_del_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_del_days() const;
  void _internal_set_min_del_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_file_size = 2 [default = 64000];
  bool has_min_file_size() const;
  private:
  bool _internal_has_min_file_size() const;
  public:
  void clear_min_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_file_size() const;
  void set_min_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_file_size() const;
  void _internal_set_min_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.StorageTypeAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_del_days_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_file_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class LFAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.LFAttr) */ {
 public:
  inline LFAttr() : LFAttr(nullptr) {}
  virtual ~LFAttr();

  LFAttr(const LFAttr& from);
  LFAttr(LFAttr&& from) noexcept
    : LFAttr() {
    *this = ::std::move(from);
  }

  inline LFAttr& operator=(const LFAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline LFAttr& operator=(LFAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LFAttr& default_instance();

  static inline const LFAttr* internal_default_instance() {
    return reinterpret_cast<const LFAttr*>(
               &_LFAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(LFAttr& a, LFAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(LFAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LFAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LFAttr* New() const final {
    return CreateMaybeMessage<LFAttr>(nullptr);
  }

  LFAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LFAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LFAttr& from);
  void MergeFrom(const LFAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LFAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.LFAttr";
  }
  protected:
  explicit LFAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoragetypeFieldNumber = 1,
    kStoragetypeattrFieldNumber = 2,
  };
  // required bytes storagetype = 1;
  bool has_storagetype() const;
  private:
  bool _internal_has_storagetype() const;
  public:
  void clear_storagetype();
  const std::string& storagetype() const;
  void set_storagetype(const std::string& value);
  void set_storagetype(std::string&& value);
  void set_storagetype(const char* value);
  void set_storagetype(const void* value, size_t size);
  std::string* mutable_storagetype();
  std::string* release_storagetype();
  void set_allocated_storagetype(std::string* storagetype);
  private:
  const std::string& _internal_storagetype() const;
  void _internal_set_storagetype(const std::string& value);
  std::string* _internal_mutable_storagetype();
  public:

  // required .ClientCos.StorageTypeAttr storagetypeattr = 2;
  bool has_storagetypeattr() const;
  private:
  bool _internal_has_storagetypeattr() const;
  public:
  void clear_storagetypeattr();
  const ::ClientCos::StorageTypeAttr& storagetypeattr() const;
  ::ClientCos::StorageTypeAttr* release_storagetypeattr();
  ::ClientCos::StorageTypeAttr* mutable_storagetypeattr();
  void set_allocated_storagetypeattr(::ClientCos::StorageTypeAttr* storagetypeattr);
  private:
  const ::ClientCos::StorageTypeAttr& _internal_storagetypeattr() const;
  ::ClientCos::StorageTypeAttr* _internal_mutable_storagetypeattr();
  public:
  void unsafe_arena_set_allocated_storagetypeattr(
      ::ClientCos::StorageTypeAttr* storagetypeattr);
  ::ClientCos::StorageTypeAttr* unsafe_arena_release_storagetypeattr();

  // @@protoc_insertion_point(class_scope:ClientCos.LFAttr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storagetype_;
  ::ClientCos::StorageTypeAttr* storagetypeattr_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileDelReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileDelReq) */ {
 public:
  inline FileDelReq() : FileDelReq(nullptr) {}
  virtual ~FileDelReq();

  FileDelReq(const FileDelReq& from);
  FileDelReq(FileDelReq&& from) noexcept
    : FileDelReq() {
    *this = ::std::move(from);
  }

  inline FileDelReq& operator=(const FileDelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDelReq& operator=(FileDelReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileDelReq& default_instance();

  static inline const FileDelReq* internal_default_instance() {
    return reinterpret_cast<const FileDelReq*>(
               &_FileDelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(FileDelReq& a, FileDelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDelReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileDelReq* New() const final {
    return CreateMaybeMessage<FileDelReq>(nullptr);
  }

  FileDelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileDelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileDelReq& from);
  void MergeFrom(const FileDelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileDelReq";
  }
  protected:
  explicit FileDelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kUploadidFieldNumber = 2,
    kExpireAttrFieldNumber = 5,
    kSwitchFlagFieldNumber = 3,
    kIsExpireReqFieldNumber = 4,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes uploadid = 2;
  bool has_uploadid() const;
  private:
  bool _internal_has_uploadid() const;
  public:
  void clear_uploadid();
  const std::string& uploadid() const;
  void set_uploadid(const std::string& value);
  void set_uploadid(std::string&& value);
  void set_uploadid(const char* value);
  void set_uploadid(const void* value, size_t size);
  std::string* mutable_uploadid();
  std::string* release_uploadid();
  void set_allocated_uploadid(std::string* uploadid);
  private:
  const std::string& _internal_uploadid() const;
  void _internal_set_uploadid(const std::string& value);
  std::string* _internal_mutable_uploadid();
  public:

  // optional .ClientCos.DelObjExpireAttr expire_attr = 5;
  bool has_expire_attr() const;
  private:
  bool _internal_has_expire_attr() const;
  public:
  void clear_expire_attr();
  const ::ClientCos::DelObjExpireAttr& expire_attr() const;
  ::ClientCos::DelObjExpireAttr* release_expire_attr();
  ::ClientCos::DelObjExpireAttr* mutable_expire_attr();
  void set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr);
  private:
  const ::ClientCos::DelObjExpireAttr& _internal_expire_attr() const;
  ::ClientCos::DelObjExpireAttr* _internal_mutable_expire_attr();
  public:
  void unsafe_arena_set_allocated_expire_attr(
      ::ClientCos::DelObjExpireAttr* expire_attr);
  ::ClientCos::DelObjExpireAttr* unsafe_arena_release_expire_attr();

  // optional bool switch_flag = 3;
  bool has_switch_flag() const;
  private:
  bool _internal_has_switch_flag() const;
  public:
  void clear_switch_flag();
  bool switch_flag() const;
  void set_switch_flag(bool value);
  private:
  bool _internal_switch_flag() const;
  void _internal_set_switch_flag(bool value);
  public:

  // optional bool isExpireReq = 4;
  bool has_isexpirereq() const;
  private:
  bool _internal_has_isexpirereq() const;
  public:
  void clear_isexpirereq();
  bool isexpirereq() const;
  void set_isexpirereq(bool value);
  private:
  bool _internal_isexpirereq() const;
  void _internal_set_isexpirereq(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.FileDelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadid_;
  ::ClientCos::DelObjExpireAttr* expire_attr_;
  bool switch_flag_;
  bool isexpirereq_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileDelRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileDelRsp) */ {
 public:
  inline FileDelRsp() : FileDelRsp(nullptr) {}
  virtual ~FileDelRsp();

  FileDelRsp(const FileDelRsp& from);
  FileDelRsp(FileDelRsp&& from) noexcept
    : FileDelRsp() {
    *this = ::std::move(from);
  }

  inline FileDelRsp& operator=(const FileDelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDelRsp& operator=(FileDelRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileDelRsp& default_instance();

  static inline const FileDelRsp* internal_default_instance() {
    return reinterpret_cast<const FileDelRsp*>(
               &_FileDelRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(FileDelRsp& a, FileDelRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDelRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDelRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileDelRsp* New() const final {
    return CreateMaybeMessage<FileDelRsp>(nullptr);
  }

  FileDelRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileDelRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileDelRsp& from);
  void MergeFrom(const FileDelRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDelRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileDelRsp";
  }
  protected:
  explicit FileDelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.FileDelRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ExpireFileDelNoVerReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ExpireFileDelNoVerReq) */ {
 public:
  inline ExpireFileDelNoVerReq() : ExpireFileDelNoVerReq(nullptr) {}
  virtual ~ExpireFileDelNoVerReq();

  ExpireFileDelNoVerReq(const ExpireFileDelNoVerReq& from);
  ExpireFileDelNoVerReq(ExpireFileDelNoVerReq&& from) noexcept
    : ExpireFileDelNoVerReq() {
    *this = ::std::move(from);
  }

  inline ExpireFileDelNoVerReq& operator=(const ExpireFileDelNoVerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpireFileDelNoVerReq& operator=(ExpireFileDelNoVerReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpireFileDelNoVerReq& default_instance();

  static inline const ExpireFileDelNoVerReq* internal_default_instance() {
    return reinterpret_cast<const ExpireFileDelNoVerReq*>(
               &_ExpireFileDelNoVerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ExpireFileDelNoVerReq& a, ExpireFileDelNoVerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpireFileDelNoVerReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpireFileDelNoVerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpireFileDelNoVerReq* New() const final {
    return CreateMaybeMessage<ExpireFileDelNoVerReq>(nullptr);
  }

  ExpireFileDelNoVerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpireFileDelNoVerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpireFileDelNoVerReq& from);
  void MergeFrom(const ExpireFileDelNoVerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpireFileDelNoVerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ExpireFileDelNoVerReq";
  }
  protected:
  explicit ExpireFileDelNoVerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kExpireAttrFieldNumber = 3,
    kSwitchFlagFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .ClientCos.DelObjExpireAttr expire_attr = 3;
  bool has_expire_attr() const;
  private:
  bool _internal_has_expire_attr() const;
  public:
  void clear_expire_attr();
  const ::ClientCos::DelObjExpireAttr& expire_attr() const;
  ::ClientCos::DelObjExpireAttr* release_expire_attr();
  ::ClientCos::DelObjExpireAttr* mutable_expire_attr();
  void set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr);
  private:
  const ::ClientCos::DelObjExpireAttr& _internal_expire_attr() const;
  ::ClientCos::DelObjExpireAttr* _internal_mutable_expire_attr();
  public:
  void unsafe_arena_set_allocated_expire_attr(
      ::ClientCos::DelObjExpireAttr* expire_attr);
  ::ClientCos::DelObjExpireAttr* unsafe_arena_release_expire_attr();

  // optional bool switch_flag = 2;
  bool has_switch_flag() const;
  private:
  bool _internal_has_switch_flag() const;
  public:
  void clear_switch_flag();
  bool switch_flag() const;
  void set_switch_flag(bool value);
  private:
  bool _internal_switch_flag() const;
  void _internal_set_switch_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ExpireFileDelNoVerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::ClientCos::DelObjExpireAttr* expire_attr_;
  bool switch_flag_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ExpireFileDelNoverRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ExpireFileDelNoverRsp) */ {
 public:
  inline ExpireFileDelNoverRsp() : ExpireFileDelNoverRsp(nullptr) {}
  virtual ~ExpireFileDelNoverRsp();

  ExpireFileDelNoverRsp(const ExpireFileDelNoverRsp& from);
  ExpireFileDelNoverRsp(ExpireFileDelNoverRsp&& from) noexcept
    : ExpireFileDelNoverRsp() {
    *this = ::std::move(from);
  }

  inline ExpireFileDelNoverRsp& operator=(const ExpireFileDelNoverRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpireFileDelNoverRsp& operator=(ExpireFileDelNoverRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpireFileDelNoverRsp& default_instance();

  static inline const ExpireFileDelNoverRsp* internal_default_instance() {
    return reinterpret_cast<const ExpireFileDelNoverRsp*>(
               &_ExpireFileDelNoverRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(ExpireFileDelNoverRsp& a, ExpireFileDelNoverRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpireFileDelNoverRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpireFileDelNoverRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpireFileDelNoverRsp* New() const final {
    return CreateMaybeMessage<ExpireFileDelNoverRsp>(nullptr);
  }

  ExpireFileDelNoverRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpireFileDelNoverRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpireFileDelNoverRsp& from);
  void MergeFrom(const ExpireFileDelNoverRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpireFileDelNoverRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ExpireFileDelNoverRsp";
  }
  protected:
  explicit ExpireFileDelNoverRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMtimeFieldNumber = 2,
  };
  // required bytes version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // required uint32 mtime = 2;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ExpireFileDelNoverRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ExpireFileDelVerReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ExpireFileDelVerReq) */ {
 public:
  inline ExpireFileDelVerReq() : ExpireFileDelVerReq(nullptr) {}
  virtual ~ExpireFileDelVerReq();

  ExpireFileDelVerReq(const ExpireFileDelVerReq& from);
  ExpireFileDelVerReq(ExpireFileDelVerReq&& from) noexcept
    : ExpireFileDelVerReq() {
    *this = ::std::move(from);
  }

  inline ExpireFileDelVerReq& operator=(const ExpireFileDelVerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpireFileDelVerReq& operator=(ExpireFileDelVerReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpireFileDelVerReq& default_instance();

  static inline const ExpireFileDelVerReq* internal_default_instance() {
    return reinterpret_cast<const ExpireFileDelVerReq*>(
               &_ExpireFileDelVerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ExpireFileDelVerReq& a, ExpireFileDelVerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpireFileDelVerReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpireFileDelVerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpireFileDelVerReq* New() const final {
    return CreateMaybeMessage<ExpireFileDelVerReq>(nullptr);
  }

  ExpireFileDelVerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpireFileDelVerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpireFileDelVerReq& from);
  void MergeFrom(const ExpireFileDelVerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpireFileDelVerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ExpireFileDelVerReq";
  }
  protected:
  explicit ExpireFileDelVerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
    kExpireAttrFieldNumber = 5,
    kMtimeFieldNumber = 3,
    kSwitchFlagFieldNumber = 4,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional .ClientCos.DelObjExpireAttr expire_attr = 5;
  bool has_expire_attr() const;
  private:
  bool _internal_has_expire_attr() const;
  public:
  void clear_expire_attr();
  const ::ClientCos::DelObjExpireAttr& expire_attr() const;
  ::ClientCos::DelObjExpireAttr* release_expire_attr();
  ::ClientCos::DelObjExpireAttr* mutable_expire_attr();
  void set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr);
  private:
  const ::ClientCos::DelObjExpireAttr& _internal_expire_attr() const;
  ::ClientCos::DelObjExpireAttr* _internal_mutable_expire_attr();
  public:
  void unsafe_arena_set_allocated_expire_attr(
      ::ClientCos::DelObjExpireAttr* expire_attr);
  ::ClientCos::DelObjExpireAttr* unsafe_arena_release_expire_attr();

  // required uint32 mtime = 3;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool switch_flag = 4;
  bool has_switch_flag() const;
  private:
  bool _internal_has_switch_flag() const;
  public:
  void clear_switch_flag();
  bool switch_flag() const;
  void set_switch_flag(bool value);
  private:
  bool _internal_switch_flag() const;
  void _internal_set_switch_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ExpireFileDelVerReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::ClientCos::DelObjExpireAttr* expire_attr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  bool switch_flag_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ExpireFileDelVerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ExpireFileDelVerRsp) */ {
 public:
  inline ExpireFileDelVerRsp() : ExpireFileDelVerRsp(nullptr) {}
  virtual ~ExpireFileDelVerRsp();

  ExpireFileDelVerRsp(const ExpireFileDelVerRsp& from);
  ExpireFileDelVerRsp(ExpireFileDelVerRsp&& from) noexcept
    : ExpireFileDelVerRsp() {
    *this = ::std::move(from);
  }

  inline ExpireFileDelVerRsp& operator=(const ExpireFileDelVerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpireFileDelVerRsp& operator=(ExpireFileDelVerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpireFileDelVerRsp& default_instance();

  static inline const ExpireFileDelVerRsp* internal_default_instance() {
    return reinterpret_cast<const ExpireFileDelVerRsp*>(
               &_ExpireFileDelVerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ExpireFileDelVerRsp& a, ExpireFileDelVerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpireFileDelVerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpireFileDelVerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpireFileDelVerRsp* New() const final {
    return CreateMaybeMessage<ExpireFileDelVerRsp>(nullptr);
  }

  ExpireFileDelVerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpireFileDelVerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpireFileDelVerRsp& from);
  void MergeFrom(const ExpireFileDelVerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpireFileDelVerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ExpireFileDelVerRsp";
  }
  protected:
  explicit ExpireFileDelVerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeleteMarkerFieldNumber = 1,
    kMtimeFieldNumber = 2,
  };
  // required bool delete_marker = 1;
  bool has_delete_marker() const;
  private:
  bool _internal_has_delete_marker() const;
  public:
  void clear_delete_marker();
  bool delete_marker() const;
  void set_delete_marker(bool value);
  private:
  bool _internal_delete_marker() const;
  void _internal_set_delete_marker(bool value);
  public:

  // required uint32 mtime = 2;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ExpireFileDelVerRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool delete_marker_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketPriAttrReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketPriAttrReq) */ {
 public:
  inline SetBucketPriAttrReq() : SetBucketPriAttrReq(nullptr) {}
  virtual ~SetBucketPriAttrReq();

  SetBucketPriAttrReq(const SetBucketPriAttrReq& from);
  SetBucketPriAttrReq(SetBucketPriAttrReq&& from) noexcept
    : SetBucketPriAttrReq() {
    *this = ::std::move(from);
  }

  inline SetBucketPriAttrReq& operator=(const SetBucketPriAttrReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketPriAttrReq& operator=(SetBucketPriAttrReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketPriAttrReq& default_instance();

  static inline const SetBucketPriAttrReq* internal_default_instance() {
    return reinterpret_cast<const SetBucketPriAttrReq*>(
               &_SetBucketPriAttrReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SetBucketPriAttrReq& a, SetBucketPriAttrReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketPriAttrReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketPriAttrReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketPriAttrReq* New() const final {
    return CreateMaybeMessage<SetBucketPriAttrReq>(nullptr);
  }

  SetBucketPriAttrReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketPriAttrReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketPriAttrReq& from);
  void MergeFrom(const SetBucketPriAttrReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketPriAttrReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketPriAttrReq";
  }
  protected:
  explicit SetBucketPriAttrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kFlagFieldNumber = 2,
    kNofileFieldNumber = 3,
    kVisitV4FieldNumber = 4,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required uint32 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool nofile = 3;
  bool has_nofile() const;
  private:
  bool _internal_has_nofile() const;
  public:
  void clear_nofile();
  bool nofile() const;
  void set_nofile(bool value);
  private:
  bool _internal_nofile() const;
  void _internal_set_nofile(bool value);
  public:

  // optional bool visit_v4 = 4;
  bool has_visit_v4() const;
  private:
  bool _internal_has_visit_v4() const;
  public:
  void clear_visit_v4();
  bool visit_v4() const;
  void set_visit_v4(bool value);
  private:
  bool _internal_visit_v4() const;
  void _internal_set_visit_v4(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketPriAttrReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  bool nofile_;
  bool visit_v4_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketPriAttrRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketPriAttrRsp) */ {
 public:
  inline SetBucketPriAttrRsp() : SetBucketPriAttrRsp(nullptr) {}
  virtual ~SetBucketPriAttrRsp();

  SetBucketPriAttrRsp(const SetBucketPriAttrRsp& from);
  SetBucketPriAttrRsp(SetBucketPriAttrRsp&& from) noexcept
    : SetBucketPriAttrRsp() {
    *this = ::std::move(from);
  }

  inline SetBucketPriAttrRsp& operator=(const SetBucketPriAttrRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketPriAttrRsp& operator=(SetBucketPriAttrRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketPriAttrRsp& default_instance();

  static inline const SetBucketPriAttrRsp* internal_default_instance() {
    return reinterpret_cast<const SetBucketPriAttrRsp*>(
               &_SetBucketPriAttrRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SetBucketPriAttrRsp& a, SetBucketPriAttrRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketPriAttrRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketPriAttrRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketPriAttrRsp* New() const final {
    return CreateMaybeMessage<SetBucketPriAttrRsp>(nullptr);
  }

  SetBucketPriAttrRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketPriAttrRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketPriAttrRsp& from);
  void MergeFrom(const SetBucketPriAttrRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketPriAttrRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketPriAttrRsp";
  }
  protected:
  explicit SetBucketPriAttrRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketPriAttrRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileDownToCASReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileDownToCASReq) */ {
 public:
  inline FileDownToCASReq() : FileDownToCASReq(nullptr) {}
  virtual ~FileDownToCASReq();

  FileDownToCASReq(const FileDownToCASReq& from);
  FileDownToCASReq(FileDownToCASReq&& from) noexcept
    : FileDownToCASReq() {
    *this = ::std::move(from);
  }

  inline FileDownToCASReq& operator=(const FileDownToCASReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownToCASReq& operator=(FileDownToCASReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileDownToCASReq& default_instance();

  static inline const FileDownToCASReq* internal_default_instance() {
    return reinterpret_cast<const FileDownToCASReq*>(
               &_FileDownToCASReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(FileDownToCASReq& a, FileDownToCASReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownToCASReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownToCASReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileDownToCASReq* New() const final {
    return CreateMaybeMessage<FileDownToCASReq>(nullptr);
  }

  FileDownToCASReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileDownToCASReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileDownToCASReq& from);
  void MergeFrom(const FileDownToCASReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownToCASReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileDownToCASReq";
  }
  protected:
  explicit FileDownToCASReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kArchiveIdFieldNumber = 2,
    kSkFieldNumber = 3,
    kVersionFieldNumber = 5,
    kCheckMtimeFieldNumber = 4,
    kSwitchFlagFieldNumber = 6,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes archive_id = 2;
  bool has_archive_id() const;
  private:
  bool _internal_has_archive_id() const;
  public:
  void clear_archive_id();
  const std::string& archive_id() const;
  void set_archive_id(const std::string& value);
  void set_archive_id(std::string&& value);
  void set_archive_id(const char* value);
  void set_archive_id(const void* value, size_t size);
  std::string* mutable_archive_id();
  std::string* release_archive_id();
  void set_allocated_archive_id(std::string* archive_id);
  private:
  const std::string& _internal_archive_id() const;
  void _internal_set_archive_id(const std::string& value);
  std::string* _internal_mutable_archive_id();
  public:

  // required bytes sk = 3;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // optional bytes version = 5;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // required uint32 check_mtime = 4;
  bool has_check_mtime() const;
  private:
  bool _internal_has_check_mtime() const;
  public:
  void clear_check_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 check_mtime() const;
  void set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_check_mtime() const;
  void _internal_set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool switch_flag = 6;
  bool has_switch_flag() const;
  private:
  bool _internal_has_switch_flag() const;
  public:
  void clear_switch_flag();
  bool switch_flag() const;
  void set_switch_flag(bool value);
  private:
  bool _internal_switch_flag() const;
  void _internal_set_switch_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.FileDownToCASReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 check_mtime_;
  bool switch_flag_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FileDownToCASRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.FileDownToCASRsp) */ {
 public:
  inline FileDownToCASRsp() : FileDownToCASRsp(nullptr) {}
  virtual ~FileDownToCASRsp();

  FileDownToCASRsp(const FileDownToCASRsp& from);
  FileDownToCASRsp(FileDownToCASRsp&& from) noexcept
    : FileDownToCASRsp() {
    *this = ::std::move(from);
  }

  inline FileDownToCASRsp& operator=(const FileDownToCASRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownToCASRsp& operator=(FileDownToCASRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileDownToCASRsp& default_instance();

  static inline const FileDownToCASRsp* internal_default_instance() {
    return reinterpret_cast<const FileDownToCASRsp*>(
               &_FileDownToCASRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(FileDownToCASRsp& a, FileDownToCASRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownToCASRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownToCASRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileDownToCASRsp* New() const final {
    return CreateMaybeMessage<FileDownToCASRsp>(nullptr);
  }

  FileDownToCASRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileDownToCASRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileDownToCASRsp& from);
  void MergeFrom(const FileDownToCASRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownToCASRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.FileDownToCASRsp";
  }
  protected:
  explicit FileDownToCASRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCasfilekeyFieldNumber = 1,
  };
  // optional bytes casfilekey = 1;
  bool has_casfilekey() const;
  private:
  bool _internal_has_casfilekey() const;
  public:
  void clear_casfilekey();
  const std::string& casfilekey() const;
  void set_casfilekey(const std::string& value);
  void set_casfilekey(std::string&& value);
  void set_casfilekey(const char* value);
  void set_casfilekey(const void* value, size_t size);
  std::string* mutable_casfilekey();
  std::string* release_casfilekey();
  void set_allocated_casfilekey(std::string* casfilekey);
  private:
  const std::string& _internal_casfilekey() const;
  void _internal_set_casfilekey(const std::string& value);
  std::string* _internal_mutable_casfilekey();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.FileDownToCASRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr casfilekey_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasObjAttrModifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasObjAttrModifyReq) */ {
 public:
  inline CasObjAttrModifyReq() : CasObjAttrModifyReq(nullptr) {}
  virtual ~CasObjAttrModifyReq();

  CasObjAttrModifyReq(const CasObjAttrModifyReq& from);
  CasObjAttrModifyReq(CasObjAttrModifyReq&& from) noexcept
    : CasObjAttrModifyReq() {
    *this = ::std::move(from);
  }

  inline CasObjAttrModifyReq& operator=(const CasObjAttrModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasObjAttrModifyReq& operator=(CasObjAttrModifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasObjAttrModifyReq& default_instance();

  static inline const CasObjAttrModifyReq* internal_default_instance() {
    return reinterpret_cast<const CasObjAttrModifyReq*>(
               &_CasObjAttrModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CasObjAttrModifyReq& a, CasObjAttrModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CasObjAttrModifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasObjAttrModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasObjAttrModifyReq* New() const final {
    return CreateMaybeMessage<CasObjAttrModifyReq>(nullptr);
  }

  CasObjAttrModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasObjAttrModifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasObjAttrModifyReq& from);
  void MergeFrom(const CasObjAttrModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasObjAttrModifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasObjAttrModifyReq";
  }
  protected:
  explicit CasObjAttrModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
    kExpiredTimeFieldNumber = 3,
    kRestoreTierFieldNumber = 4,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // required uint64 expired_time = 3;
  bool has_expired_time() const;
  private:
  bool _internal_has_expired_time() const;
  public:
  void clear_expired_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expired_time() const;
  void set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expired_time() const;
  void _internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ClientCos.CASRestoreTier restore_tier = 4;
  bool has_restore_tier() const;
  private:
  bool _internal_has_restore_tier() const;
  public:
  void clear_restore_tier();
  ::ClientCos::CASRestoreTier restore_tier() const;
  void set_restore_tier(::ClientCos::CASRestoreTier value);
  private:
  ::ClientCos::CASRestoreTier _internal_restore_tier() const;
  void _internal_set_restore_tier(::ClientCos::CASRestoreTier value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CasObjAttrModifyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expired_time_;
  int restore_tier_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasObjAttrModifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasObjAttrModifyRsp) */ {
 public:
  inline CasObjAttrModifyRsp() : CasObjAttrModifyRsp(nullptr) {}
  virtual ~CasObjAttrModifyRsp();

  CasObjAttrModifyRsp(const CasObjAttrModifyRsp& from);
  CasObjAttrModifyRsp(CasObjAttrModifyRsp&& from) noexcept
    : CasObjAttrModifyRsp() {
    *this = ::std::move(from);
  }

  inline CasObjAttrModifyRsp& operator=(const CasObjAttrModifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasObjAttrModifyRsp& operator=(CasObjAttrModifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasObjAttrModifyRsp& default_instance();

  static inline const CasObjAttrModifyRsp* internal_default_instance() {
    return reinterpret_cast<const CasObjAttrModifyRsp*>(
               &_CasObjAttrModifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CasObjAttrModifyRsp& a, CasObjAttrModifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CasObjAttrModifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasObjAttrModifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasObjAttrModifyRsp* New() const final {
    return CreateMaybeMessage<CasObjAttrModifyRsp>(nullptr);
  }

  CasObjAttrModifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasObjAttrModifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasObjAttrModifyRsp& from);
  void MergeFrom(const CasObjAttrModifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasObjAttrModifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasObjAttrModifyRsp";
  }
  protected:
  explicit CasObjAttrModifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.CasObjAttrModifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasFileRecoverDelReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasFileRecoverDelReq) */ {
 public:
  inline CasFileRecoverDelReq() : CasFileRecoverDelReq(nullptr) {}
  virtual ~CasFileRecoverDelReq();

  CasFileRecoverDelReq(const CasFileRecoverDelReq& from);
  CasFileRecoverDelReq(CasFileRecoverDelReq&& from) noexcept
    : CasFileRecoverDelReq() {
    *this = ::std::move(from);
  }

  inline CasFileRecoverDelReq& operator=(const CasFileRecoverDelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasFileRecoverDelReq& operator=(CasFileRecoverDelReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasFileRecoverDelReq& default_instance();

  static inline const CasFileRecoverDelReq* internal_default_instance() {
    return reinterpret_cast<const CasFileRecoverDelReq*>(
               &_CasFileRecoverDelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CasFileRecoverDelReq& a, CasFileRecoverDelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CasFileRecoverDelReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasFileRecoverDelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasFileRecoverDelReq* New() const final {
    return CreateMaybeMessage<CasFileRecoverDelReq>(nullptr);
  }

  CasFileRecoverDelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasFileRecoverDelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasFileRecoverDelReq& from);
  void MergeFrom(const CasFileRecoverDelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasFileRecoverDelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasFileRecoverDelReq";
  }
  protected:
  explicit CasFileRecoverDelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CasFileRecoverDelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasFileRecoverDelRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasFileRecoverDelRsp) */ {
 public:
  inline CasFileRecoverDelRsp() : CasFileRecoverDelRsp(nullptr) {}
  virtual ~CasFileRecoverDelRsp();

  CasFileRecoverDelRsp(const CasFileRecoverDelRsp& from);
  CasFileRecoverDelRsp(CasFileRecoverDelRsp&& from) noexcept
    : CasFileRecoverDelRsp() {
    *this = ::std::move(from);
  }

  inline CasFileRecoverDelRsp& operator=(const CasFileRecoverDelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasFileRecoverDelRsp& operator=(CasFileRecoverDelRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasFileRecoverDelRsp& default_instance();

  static inline const CasFileRecoverDelRsp* internal_default_instance() {
    return reinterpret_cast<const CasFileRecoverDelRsp*>(
               &_CasFileRecoverDelRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CasFileRecoverDelRsp& a, CasFileRecoverDelRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CasFileRecoverDelRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasFileRecoverDelRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasFileRecoverDelRsp* New() const final {
    return CreateMaybeMessage<CasFileRecoverDelRsp>(nullptr);
  }

  CasFileRecoverDelRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasFileRecoverDelRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasFileRecoverDelRsp& from);
  void MergeFrom(const CasFileRecoverDelRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasFileRecoverDelRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasFileRecoverDelRsp";
  }
  protected:
  explicit CasFileRecoverDelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpiredTimeFieldNumber = 1,
  };
  // required uint64 expired_time = 1;
  bool has_expired_time() const;
  private:
  bool _internal_has_expired_time() const;
  public:
  void clear_expired_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expired_time() const;
  void set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expired_time() const;
  void _internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CasFileRecoverDelRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expired_time_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasObjRestoreErrReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasObjRestoreErrReq) */ {
 public:
  inline CasObjRestoreErrReq() : CasObjRestoreErrReq(nullptr) {}
  virtual ~CasObjRestoreErrReq();

  CasObjRestoreErrReq(const CasObjRestoreErrReq& from);
  CasObjRestoreErrReq(CasObjRestoreErrReq&& from) noexcept
    : CasObjRestoreErrReq() {
    *this = ::std::move(from);
  }

  inline CasObjRestoreErrReq& operator=(const CasObjRestoreErrReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasObjRestoreErrReq& operator=(CasObjRestoreErrReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasObjRestoreErrReq& default_instance();

  static inline const CasObjRestoreErrReq* internal_default_instance() {
    return reinterpret_cast<const CasObjRestoreErrReq*>(
               &_CasObjRestoreErrReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CasObjRestoreErrReq& a, CasObjRestoreErrReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CasObjRestoreErrReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasObjRestoreErrReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasObjRestoreErrReq* New() const final {
    return CreateMaybeMessage<CasObjRestoreErrReq>(nullptr);
  }

  CasObjRestoreErrReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasObjRestoreErrReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasObjRestoreErrReq& from);
  void MergeFrom(const CasObjRestoreErrReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasObjRestoreErrReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasObjRestoreErrReq";
  }
  protected:
  explicit CasObjRestoreErrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CasObjRestoreErrReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasObjRestoreErrRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasObjRestoreErrRsp) */ {
 public:
  inline CasObjRestoreErrRsp() : CasObjRestoreErrRsp(nullptr) {}
  virtual ~CasObjRestoreErrRsp();

  CasObjRestoreErrRsp(const CasObjRestoreErrRsp& from);
  CasObjRestoreErrRsp(CasObjRestoreErrRsp&& from) noexcept
    : CasObjRestoreErrRsp() {
    *this = ::std::move(from);
  }

  inline CasObjRestoreErrRsp& operator=(const CasObjRestoreErrRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasObjRestoreErrRsp& operator=(CasObjRestoreErrRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasObjRestoreErrRsp& default_instance();

  static inline const CasObjRestoreErrRsp* internal_default_instance() {
    return reinterpret_cast<const CasObjRestoreErrRsp*>(
               &_CasObjRestoreErrRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CasObjRestoreErrRsp& a, CasObjRestoreErrRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CasObjRestoreErrRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasObjRestoreErrRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasObjRestoreErrRsp* New() const final {
    return CreateMaybeMessage<CasObjRestoreErrRsp>(nullptr);
  }

  CasObjRestoreErrRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasObjRestoreErrRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasObjRestoreErrRsp& from);
  void MergeFrom(const CasObjRestoreErrRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasObjRestoreErrRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasObjRestoreErrRsp";
  }
  protected:
  explicit CasObjRestoreErrRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.CasObjRestoreErrRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasObjRestoreFinReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasObjRestoreFinReq) */ {
 public:
  inline CasObjRestoreFinReq() : CasObjRestoreFinReq(nullptr) {}
  virtual ~CasObjRestoreFinReq();

  CasObjRestoreFinReq(const CasObjRestoreFinReq& from);
  CasObjRestoreFinReq(CasObjRestoreFinReq&& from) noexcept
    : CasObjRestoreFinReq() {
    *this = ::std::move(from);
  }

  inline CasObjRestoreFinReq& operator=(const CasObjRestoreFinReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasObjRestoreFinReq& operator=(CasObjRestoreFinReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasObjRestoreFinReq& default_instance();

  static inline const CasObjRestoreFinReq* internal_default_instance() {
    return reinterpret_cast<const CasObjRestoreFinReq*>(
               &_CasObjRestoreFinReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CasObjRestoreFinReq& a, CasObjRestoreFinReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CasObjRestoreFinReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasObjRestoreFinReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasObjRestoreFinReq* New() const final {
    return CreateMaybeMessage<CasObjRestoreFinReq>(nullptr);
  }

  CasObjRestoreFinReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasObjRestoreFinReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasObjRestoreFinReq& from);
  void MergeFrom(const CasObjRestoreFinReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasObjRestoreFinReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasObjRestoreFinReq";
  }
  protected:
  explicit CasObjRestoreFinReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSkFieldNumber = 3,
    kStorageTypeFieldNumber = 4,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes sk = 3;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // optional bytes storage_type = 4;
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CasObjRestoreFinReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CasObjRestoreFinRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CasObjRestoreFinRsp) */ {
 public:
  inline CasObjRestoreFinRsp() : CasObjRestoreFinRsp(nullptr) {}
  virtual ~CasObjRestoreFinRsp();

  CasObjRestoreFinRsp(const CasObjRestoreFinRsp& from);
  CasObjRestoreFinRsp(CasObjRestoreFinRsp&& from) noexcept
    : CasObjRestoreFinRsp() {
    *this = ::std::move(from);
  }

  inline CasObjRestoreFinRsp& operator=(const CasObjRestoreFinRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasObjRestoreFinRsp& operator=(CasObjRestoreFinRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasObjRestoreFinRsp& default_instance();

  static inline const CasObjRestoreFinRsp* internal_default_instance() {
    return reinterpret_cast<const CasObjRestoreFinRsp*>(
               &_CasObjRestoreFinRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CasObjRestoreFinRsp& a, CasObjRestoreFinRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CasObjRestoreFinRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasObjRestoreFinRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasObjRestoreFinRsp* New() const final {
    return CreateMaybeMessage<CasObjRestoreFinRsp>(nullptr);
  }

  CasObjRestoreFinRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasObjRestoreFinRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasObjRestoreFinRsp& from);
  void MergeFrom(const CasObjRestoreFinRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasObjRestoreFinRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CasObjRestoreFinRsp";
  }
  protected:
  explicit CasObjRestoreFinRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.CasObjRestoreFinRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SpObjAttrQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SpObjAttrQueryReq) */ {
 public:
  inline SpObjAttrQueryReq() : SpObjAttrQueryReq(nullptr) {}
  virtual ~SpObjAttrQueryReq();

  SpObjAttrQueryReq(const SpObjAttrQueryReq& from);
  SpObjAttrQueryReq(SpObjAttrQueryReq&& from) noexcept
    : SpObjAttrQueryReq() {
    *this = ::std::move(from);
  }

  inline SpObjAttrQueryReq& operator=(const SpObjAttrQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpObjAttrQueryReq& operator=(SpObjAttrQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpObjAttrQueryReq& default_instance();

  static inline const SpObjAttrQueryReq* internal_default_instance() {
    return reinterpret_cast<const SpObjAttrQueryReq*>(
               &_SpObjAttrQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SpObjAttrQueryReq& a, SpObjAttrQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SpObjAttrQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpObjAttrQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpObjAttrQueryReq* New() const final {
    return CreateMaybeMessage<SpObjAttrQueryReq>(nullptr);
  }

  SpObjAttrQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpObjAttrQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpObjAttrQueryReq& from);
  void MergeFrom(const SpObjAttrQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpObjAttrQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SpObjAttrQueryReq";
  }
  protected:
  explicit SpObjAttrQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SpObjAttrQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SpObjAttrQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SpObjAttrQueryRsp) */ {
 public:
  inline SpObjAttrQueryRsp() : SpObjAttrQueryRsp(nullptr) {}
  virtual ~SpObjAttrQueryRsp();

  SpObjAttrQueryRsp(const SpObjAttrQueryRsp& from);
  SpObjAttrQueryRsp(SpObjAttrQueryRsp&& from) noexcept
    : SpObjAttrQueryRsp() {
    *this = ::std::move(from);
  }

  inline SpObjAttrQueryRsp& operator=(const SpObjAttrQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpObjAttrQueryRsp& operator=(SpObjAttrQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpObjAttrQueryRsp& default_instance();

  static inline const SpObjAttrQueryRsp* internal_default_instance() {
    return reinterpret_cast<const SpObjAttrQueryRsp*>(
               &_SpObjAttrQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SpObjAttrQueryRsp& a, SpObjAttrQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SpObjAttrQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpObjAttrQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpObjAttrQueryRsp* New() const final {
    return CreateMaybeMessage<SpObjAttrQueryRsp>(nullptr);
  }

  SpObjAttrQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpObjAttrQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpObjAttrQueryRsp& from);
  void MergeFrom(const SpObjAttrQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpObjAttrQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SpObjAttrQueryRsp";
  }
  protected:
  explicit SpObjAttrQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedattrFieldNumber = 8,
    kCustomheaderFieldNumber = 10,
    kTaglistFieldNumber = 23,
    kAclsFieldNumber = 28,
    kBizAttrFieldNumber = 1,
    kShaFieldNumber = 6,
    kRealShaFieldNumber = 11,
    kStorageTypeFieldNumber = 14,
    kVersionFieldNumber = 15,
    kUploadSourceFieldNumber = 18,
    kCasinfoFieldNumber = 19,
    kSseinfoFieldNumber = 20,
    kObjexpireattrFieldNumber = 22,
    kOwnerFieldNumber = 26,
    kCtimeFieldNumber = 2,
    kMtimeFieldNumber = 3,
    kFileSizeFieldNumber = 4,
    kFileLengthFieldNumber = 5,
    kForbidFieldNumber = 7,
    kAuthFieldNumber = 9,
    kSlicesizeFieldNumber = 12,
    kTypeFieldNumber = 13,
    kTagnumFieldNumber = 21,
    kDeleteMarkerFieldNumber = 16,
    kIslatestFieldNumber = 17,
    kIsUgcFieldNumber = 25,
    kIsCasFieldNumber = 27,
    kVersionSeedFieldNumber = 24,
    kLockExpiredTimeFieldNumber = 29,
    kIsV4FieldNumber = 30,
  };
  // repeated .ClientCos.ReservedAttr reservedattr = 8;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // repeated .ClientCos.CustomHeader customheader = 10;
  int customheader_size() const;
  private:
  int _internal_customheader_size() const;
  public:
  void clear_customheader();
  ::ClientCos::CustomHeader* mutable_customheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader();
  public:
  const ::ClientCos::CustomHeader& customheader(int index) const;
  ::ClientCos::CustomHeader* add_customheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader() const;

  // repeated .ClientCos.ObjTag taglist = 23;
  int taglist_size() const;
  private:
  int _internal_taglist_size() const;
  public:
  void clear_taglist();
  ::ClientCos::ObjTag* mutable_taglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
      mutable_taglist();
  private:
  const ::ClientCos::ObjTag& _internal_taglist(int index) const;
  ::ClientCos::ObjTag* _internal_add_taglist();
  public:
  const ::ClientCos::ObjTag& taglist(int index) const;
  ::ClientCos::ObjTag* add_taglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
      taglist() const;

  // repeated .ClientCos.AclInfo acls = 28;
  int acls_size() const;
  private:
  int _internal_acls_size() const;
  public:
  void clear_acls();
  ::ClientCos::AclInfo* mutable_acls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
      mutable_acls();
  private:
  const ::ClientCos::AclInfo& _internal_acls(int index) const;
  ::ClientCos::AclInfo* _internal_add_acls();
  public:
  const ::ClientCos::AclInfo& acls(int index) const;
  ::ClientCos::AclInfo* add_acls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
      acls() const;

  // required bytes biz_attr = 1 [default = ""];
  bool has_biz_attr() const;
  private:
  bool _internal_has_biz_attr() const;
  public:
  void clear_biz_attr();
  const std::string& biz_attr() const;
  void set_biz_attr(const std::string& value);
  void set_biz_attr(std::string&& value);
  void set_biz_attr(const char* value);
  void set_biz_attr(const void* value, size_t size);
  std::string* mutable_biz_attr();
  std::string* release_biz_attr();
  void set_allocated_biz_attr(std::string* biz_attr);
  private:
  const std::string& _internal_biz_attr() const;
  void _internal_set_biz_attr(const std::string& value);
  std::string* _internal_mutable_biz_attr();
  public:

  // optional bytes sha = 6;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes real_sha = 11;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // optional bytes storage_type = 14;
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  const std::string& storage_type() const;
  void set_storage_type(const std::string& value);
  void set_storage_type(std::string&& value);
  void set_storage_type(const char* value);
  void set_storage_type(const void* value, size_t size);
  std::string* mutable_storage_type();
  std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // optional bytes version = 15;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes upload_source = 18;
  bool has_upload_source() const;
  private:
  bool _internal_has_upload_source() const;
  public:
  void clear_upload_source();
  const std::string& upload_source() const;
  void set_upload_source(const std::string& value);
  void set_upload_source(std::string&& value);
  void set_upload_source(const char* value);
  void set_upload_source(const void* value, size_t size);
  std::string* mutable_upload_source();
  std::string* release_upload_source();
  void set_allocated_upload_source(std::string* upload_source);
  private:
  const std::string& _internal_upload_source() const;
  void _internal_set_upload_source(const std::string& value);
  std::string* _internal_mutable_upload_source();
  public:

  // optional .ClientCos.CasInfo casinfo = 19;
  bool has_casinfo() const;
  private:
  bool _internal_has_casinfo() const;
  public:
  void clear_casinfo();
  const ::ClientCos::CasInfo& casinfo() const;
  ::ClientCos::CasInfo* release_casinfo();
  ::ClientCos::CasInfo* mutable_casinfo();
  void set_allocated_casinfo(::ClientCos::CasInfo* casinfo);
  private:
  const ::ClientCos::CasInfo& _internal_casinfo() const;
  ::ClientCos::CasInfo* _internal_mutable_casinfo();
  public:
  void unsafe_arena_set_allocated_casinfo(
      ::ClientCos::CasInfo* casinfo);
  ::ClientCos::CasInfo* unsafe_arena_release_casinfo();

  // optional .ClientCos.SseInfo sseinfo = 20;
  bool has_sseinfo() const;
  private:
  bool _internal_has_sseinfo() const;
  public:
  void clear_sseinfo();
  const ::ClientCos::SseInfo& sseinfo() const;
  ::ClientCos::SseInfo* release_sseinfo();
  ::ClientCos::SseInfo* mutable_sseinfo();
  void set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo);
  private:
  const ::ClientCos::SseInfo& _internal_sseinfo() const;
  ::ClientCos::SseInfo* _internal_mutable_sseinfo();
  public:
  void unsafe_arena_set_allocated_sseinfo(
      ::ClientCos::SseInfo* sseinfo);
  ::ClientCos::SseInfo* unsafe_arena_release_sseinfo();

  // optional .ClientCos.ObjExpireAttr objexpireattr = 22;
  bool has_objexpireattr() const;
  private:
  bool _internal_has_objexpireattr() const;
  public:
  void clear_objexpireattr();
  const ::ClientCos::ObjExpireAttr& objexpireattr() const;
  ::ClientCos::ObjExpireAttr* release_objexpireattr();
  ::ClientCos::ObjExpireAttr* mutable_objexpireattr();
  void set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr);
  private:
  const ::ClientCos::ObjExpireAttr& _internal_objexpireattr() const;
  ::ClientCos::ObjExpireAttr* _internal_mutable_objexpireattr();
  public:
  void unsafe_arena_set_allocated_objexpireattr(
      ::ClientCos::ObjExpireAttr* objexpireattr);
  ::ClientCos::ObjExpireAttr* unsafe_arena_release_objexpireattr();

  // optional .ClientCos.OwnerInfo owner = 26;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::ClientCos::OwnerInfo& owner() const;
  ::ClientCos::OwnerInfo* release_owner();
  ::ClientCos::OwnerInfo* mutable_owner();
  void set_allocated_owner(::ClientCos::OwnerInfo* owner);
  private:
  const ::ClientCos::OwnerInfo& _internal_owner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::ClientCos::OwnerInfo* owner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_owner();

  // required uint32 ctime = 2 [default = 0];
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mtime = 3 [default = 0];
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 file_size = 4;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 file_length = 5;
  bool has_file_length() const;
  private:
  bool _internal_has_file_length() const;
  public:
  void clear_file_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_length() const;
  void set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_length() const;
  void _internal_set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 forbid = 7;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 9;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // optional uint32 slicesize = 12;
  bool has_slicesize() const;
  private:
  bool _internal_has_slicesize() const;
  public:
  void clear_slicesize();
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize() const;
  void set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slicesize() const;
  void _internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 13;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tagnum = 21;
  bool has_tagnum() const;
  private:
  bool _internal_has_tagnum() const;
  public:
  void clear_tagnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 tagnum() const;
  void set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tagnum() const;
  void _internal_set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool delete_marker = 16;
  bool has_delete_marker() const;
  private:
  bool _internal_has_delete_marker() const;
  public:
  void clear_delete_marker();
  bool delete_marker() const;
  void set_delete_marker(bool value);
  private:
  bool _internal_delete_marker() const;
  void _internal_set_delete_marker(bool value);
  public:

  // optional bool islatest = 17;
  bool has_islatest() const;
  private:
  bool _internal_has_islatest() const;
  public:
  void clear_islatest();
  bool islatest() const;
  void set_islatest(bool value);
  private:
  bool _internal_islatest() const;
  void _internal_set_islatest(bool value);
  public:

  // optional bool is_ugc = 25;
  bool has_is_ugc() const;
  private:
  bool _internal_has_is_ugc() const;
  public:
  void clear_is_ugc();
  bool is_ugc() const;
  void set_is_ugc(bool value);
  private:
  bool _internal_is_ugc() const;
  void _internal_set_is_ugc(bool value);
  public:

  // optional bool is_cas = 27;
  bool has_is_cas() const;
  private:
  bool _internal_has_is_cas() const;
  public:
  void clear_is_cas();
  bool is_cas() const;
  void set_is_cas(bool value);
  private:
  bool _internal_is_cas() const;
  void _internal_set_is_cas(bool value);
  public:

  // optional uint64 version_seed = 24;
  bool has_version_seed() const;
  private:
  bool _internal_has_version_seed() const;
  public:
  void clear_version_seed();
  ::PROTOBUF_NAMESPACE_ID::uint64 version_seed() const;
  void set_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version_seed() const;
  void _internal_set_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 lock_expired_time = 29;
  bool has_lock_expired_time() const;
  private:
  bool _internal_has_lock_expired_time() const;
  public:
  void clear_lock_expired_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_expired_time() const;
  void set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_expired_time() const;
  void _internal_set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_v4 = 30;
  bool has_is_v4() const;
  private:
  bool _internal_has_is_v4() const;
  public:
  void clear_is_v4();
  bool is_v4() const;
  void set_is_v4(bool value);
  private:
  bool _internal_is_v4() const;
  void _internal_set_is_v4(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SpObjAttrQueryRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag > taglist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo > acls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_source_;
  ::ClientCos::CasInfo* casinfo_;
  ::ClientCos::SseInfo* sseinfo_;
  ::ClientCos::ObjExpireAttr* objexpireattr_;
  ::ClientCos::OwnerInfo* owner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  int auth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tagnum_;
  bool delete_marker_;
  bool islatest_;
  bool is_ugc_;
  bool is_cas_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_seed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_expired_time_;
  bool is_v4_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjModStorageTypeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjModStorageTypeReq) */ {
 public:
  inline ObjModStorageTypeReq() : ObjModStorageTypeReq(nullptr) {}
  virtual ~ObjModStorageTypeReq();

  ObjModStorageTypeReq(const ObjModStorageTypeReq& from);
  ObjModStorageTypeReq(ObjModStorageTypeReq&& from) noexcept
    : ObjModStorageTypeReq() {
    *this = ::std::move(from);
  }

  inline ObjModStorageTypeReq& operator=(const ObjModStorageTypeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjModStorageTypeReq& operator=(ObjModStorageTypeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjModStorageTypeReq& default_instance();

  static inline const ObjModStorageTypeReq* internal_default_instance() {
    return reinterpret_cast<const ObjModStorageTypeReq*>(
               &_ObjModStorageTypeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ObjModStorageTypeReq& a, ObjModStorageTypeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjModStorageTypeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjModStorageTypeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjModStorageTypeReq* New() const final {
    return CreateMaybeMessage<ObjModStorageTypeReq>(nullptr);
  }

  ObjModStorageTypeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjModStorageTypeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjModStorageTypeReq& from);
  void MergeFrom(const ObjModStorageTypeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjModStorageTypeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjModStorageTypeReq";
  }
  protected:
  explicit ObjModStorageTypeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kStoragetypeFieldNumber = 2,
    kVersionFieldNumber = 3,
    kSkFieldNumber = 5,
    kSwitchFlagFieldNumber = 4,
    kCheckMtimeFieldNumber = 6,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes storagetype = 2;
  bool has_storagetype() const;
  private:
  bool _internal_has_storagetype() const;
  public:
  void clear_storagetype();
  const std::string& storagetype() const;
  void set_storagetype(const std::string& value);
  void set_storagetype(std::string&& value);
  void set_storagetype(const char* value);
  void set_storagetype(const void* value, size_t size);
  std::string* mutable_storagetype();
  std::string* release_storagetype();
  void set_allocated_storagetype(std::string* storagetype);
  private:
  const std::string& _internal_storagetype() const;
  void _internal_set_storagetype(const std::string& value);
  std::string* _internal_mutable_storagetype();
  public:

  // optional bytes version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes sk = 5;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // optional bool switch_flag = 4;
  bool has_switch_flag() const;
  private:
  bool _internal_has_switch_flag() const;
  public:
  void clear_switch_flag();
  bool switch_flag() const;
  void set_switch_flag(bool value);
  private:
  bool _internal_switch_flag() const;
  void _internal_set_switch_flag(bool value);
  public:

  // optional uint32 check_mtime = 6;
  bool has_check_mtime() const;
  private:
  bool _internal_has_check_mtime() const;
  public:
  void clear_check_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 check_mtime() const;
  void set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_check_mtime() const;
  void _internal_set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ObjModStorageTypeReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  bool switch_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 check_mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ObjModStorageTypeRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ObjModStorageTypeRsp) */ {
 public:
  inline ObjModStorageTypeRsp() : ObjModStorageTypeRsp(nullptr) {}
  virtual ~ObjModStorageTypeRsp();

  ObjModStorageTypeRsp(const ObjModStorageTypeRsp& from);
  ObjModStorageTypeRsp(ObjModStorageTypeRsp&& from) noexcept
    : ObjModStorageTypeRsp() {
    *this = ::std::move(from);
  }

  inline ObjModStorageTypeRsp& operator=(const ObjModStorageTypeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjModStorageTypeRsp& operator=(ObjModStorageTypeRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjModStorageTypeRsp& default_instance();

  static inline const ObjModStorageTypeRsp* internal_default_instance() {
    return reinterpret_cast<const ObjModStorageTypeRsp*>(
               &_ObjModStorageTypeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ObjModStorageTypeRsp& a, ObjModStorageTypeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjModStorageTypeRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjModStorageTypeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjModStorageTypeRsp* New() const final {
    return CreateMaybeMessage<ObjModStorageTypeRsp>(nullptr);
  }

  ObjModStorageTypeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjModStorageTypeRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjModStorageTypeRsp& from);
  void MergeFrom(const ObjModStorageTypeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjModStorageTypeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ObjModStorageTypeRsp";
  }
  protected:
  explicit ObjModStorageTypeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.ObjModStorageTypeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SseInfo) */ {
 public:
  inline SseInfo() : SseInfo(nullptr) {}
  virtual ~SseInfo();

  SseInfo(const SseInfo& from);
  SseInfo(SseInfo&& from) noexcept
    : SseInfo() {
    *this = ::std::move(from);
  }

  inline SseInfo& operator=(const SseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SseInfo& operator=(SseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SseInfo& default_instance();

  static inline const SseInfo* internal_default_instance() {
    return reinterpret_cast<const SseInfo*>(
               &_SseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(SseInfo& a, SseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SseInfo* New() const final {
    return CreateMaybeMessage<SseInfo>(nullptr);
  }

  SseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SseInfo& from);
  void MergeFrom(const SseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SseInfo";
  }
  protected:
  explicit SseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmFieldNumber = 2,
    kSsecKeyFieldNumber = 3,
    kSsecKeyMd5FieldNumber = 4,
    kKmsIdFieldNumber = 5,
    kKmsContextFieldNumber = 6,
    kKmsDatakeyFieldNumber = 7,
    kKmsDatakeyEncrypFieldNumber = 8,
    kSseEtagFieldNumber = 9,
    kSsetypeFieldNumber = 1,
  };
  // optional bytes algorithm = 2;
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const void* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // optional bytes ssec_key = 3;
  bool has_ssec_key() const;
  private:
  bool _internal_has_ssec_key() const;
  public:
  void clear_ssec_key();
  const std::string& ssec_key() const;
  void set_ssec_key(const std::string& value);
  void set_ssec_key(std::string&& value);
  void set_ssec_key(const char* value);
  void set_ssec_key(const void* value, size_t size);
  std::string* mutable_ssec_key();
  std::string* release_ssec_key();
  void set_allocated_ssec_key(std::string* ssec_key);
  private:
  const std::string& _internal_ssec_key() const;
  void _internal_set_ssec_key(const std::string& value);
  std::string* _internal_mutable_ssec_key();
  public:

  // optional bytes ssec_key_md5 = 4;
  bool has_ssec_key_md5() const;
  private:
  bool _internal_has_ssec_key_md5() const;
  public:
  void clear_ssec_key_md5();
  const std::string& ssec_key_md5() const;
  void set_ssec_key_md5(const std::string& value);
  void set_ssec_key_md5(std::string&& value);
  void set_ssec_key_md5(const char* value);
  void set_ssec_key_md5(const void* value, size_t size);
  std::string* mutable_ssec_key_md5();
  std::string* release_ssec_key_md5();
  void set_allocated_ssec_key_md5(std::string* ssec_key_md5);
  private:
  const std::string& _internal_ssec_key_md5() const;
  void _internal_set_ssec_key_md5(const std::string& value);
  std::string* _internal_mutable_ssec_key_md5();
  public:

  // optional bytes kms_id = 5;
  bool has_kms_id() const;
  private:
  bool _internal_has_kms_id() const;
  public:
  void clear_kms_id();
  const std::string& kms_id() const;
  void set_kms_id(const std::string& value);
  void set_kms_id(std::string&& value);
  void set_kms_id(const char* value);
  void set_kms_id(const void* value, size_t size);
  std::string* mutable_kms_id();
  std::string* release_kms_id();
  void set_allocated_kms_id(std::string* kms_id);
  private:
  const std::string& _internal_kms_id() const;
  void _internal_set_kms_id(const std::string& value);
  std::string* _internal_mutable_kms_id();
  public:

  // optional bytes kms_context = 6;
  bool has_kms_context() const;
  private:
  bool _internal_has_kms_context() const;
  public:
  void clear_kms_context();
  const std::string& kms_context() const;
  void set_kms_context(const std::string& value);
  void set_kms_context(std::string&& value);
  void set_kms_context(const char* value);
  void set_kms_context(const void* value, size_t size);
  std::string* mutable_kms_context();
  std::string* release_kms_context();
  void set_allocated_kms_context(std::string* kms_context);
  private:
  const std::string& _internal_kms_context() const;
  void _internal_set_kms_context(const std::string& value);
  std::string* _internal_mutable_kms_context();
  public:

  // optional bytes kms_datakey = 7;
  bool has_kms_datakey() const;
  private:
  bool _internal_has_kms_datakey() const;
  public:
  void clear_kms_datakey();
  const std::string& kms_datakey() const;
  void set_kms_datakey(const std::string& value);
  void set_kms_datakey(std::string&& value);
  void set_kms_datakey(const char* value);
  void set_kms_datakey(const void* value, size_t size);
  std::string* mutable_kms_datakey();
  std::string* release_kms_datakey();
  void set_allocated_kms_datakey(std::string* kms_datakey);
  private:
  const std::string& _internal_kms_datakey() const;
  void _internal_set_kms_datakey(const std::string& value);
  std::string* _internal_mutable_kms_datakey();
  public:

  // optional bytes kms_datakey_encryp = 8;
  bool has_kms_datakey_encryp() const;
  private:
  bool _internal_has_kms_datakey_encryp() const;
  public:
  void clear_kms_datakey_encryp();
  const std::string& kms_datakey_encryp() const;
  void set_kms_datakey_encryp(const std::string& value);
  void set_kms_datakey_encryp(std::string&& value);
  void set_kms_datakey_encryp(const char* value);
  void set_kms_datakey_encryp(const void* value, size_t size);
  std::string* mutable_kms_datakey_encryp();
  std::string* release_kms_datakey_encryp();
  void set_allocated_kms_datakey_encryp(std::string* kms_datakey_encryp);
  private:
  const std::string& _internal_kms_datakey_encryp() const;
  void _internal_set_kms_datakey_encryp(const std::string& value);
  std::string* _internal_mutable_kms_datakey_encryp();
  public:

  // optional bytes sse_etag = 9;
  bool has_sse_etag() const;
  private:
  bool _internal_has_sse_etag() const;
  public:
  void clear_sse_etag();
  const std::string& sse_etag() const;
  void set_sse_etag(const std::string& value);
  void set_sse_etag(std::string&& value);
  void set_sse_etag(const char* value);
  void set_sse_etag(const void* value, size_t size);
  std::string* mutable_sse_etag();
  std::string* release_sse_etag();
  void set_allocated_sse_etag(std::string* sse_etag);
  private:
  const std::string& _internal_sse_etag() const;
  void _internal_set_sse_etag(const std::string& value);
  std::string* _internal_mutable_sse_etag();
  public:

  // optional .ClientCos.SseType ssetype = 1;
  bool has_ssetype() const;
  private:
  bool _internal_has_ssetype() const;
  public:
  void clear_ssetype();
  ::ClientCos::SseType ssetype() const;
  void set_ssetype(::ClientCos::SseType value);
  private:
  ::ClientCos::SseType _internal_ssetype() const;
  void _internal_set_ssetype(::ClientCos::SseType value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssec_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssec_key_md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_datakey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_datakey_encryp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sse_etag_;
  int ssetype_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ErrorCodeReturned PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ErrorCodeReturned) */ {
 public:
  inline ErrorCodeReturned() : ErrorCodeReturned(nullptr) {}
  virtual ~ErrorCodeReturned();

  ErrorCodeReturned(const ErrorCodeReturned& from);
  ErrorCodeReturned(ErrorCodeReturned&& from) noexcept
    : ErrorCodeReturned() {
    *this = ::std::move(from);
  }

  inline ErrorCodeReturned& operator=(const ErrorCodeReturned& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorCodeReturned& operator=(ErrorCodeReturned&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorCodeReturned& default_instance();

  static inline const ErrorCodeReturned* internal_default_instance() {
    return reinterpret_cast<const ErrorCodeReturned*>(
               &_ErrorCodeReturned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ErrorCodeReturned& a, ErrorCodeReturned& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorCodeReturned* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorCodeReturned* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorCodeReturned* New() const final {
    return CreateMaybeMessage<ErrorCodeReturned>(nullptr);
  }

  ErrorCodeReturned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorCodeReturned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorCodeReturned& from);
  void MergeFrom(const ErrorCodeReturned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorCodeReturned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ErrorCodeReturned";
  }
  protected:
  explicit ErrorCodeReturned(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 2,
    kReplacekeywithFieldNumber = 3,
    kHostnameFieldNumber = 4,
    kErrorcodeFieldNumber = 1,
  };
  // optional bytes protocol = 2;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const void* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // optional bytes replacekeywith = 3;
  bool has_replacekeywith() const;
  private:
  bool _internal_has_replacekeywith() const;
  public:
  void clear_replacekeywith();
  const std::string& replacekeywith() const;
  void set_replacekeywith(const std::string& value);
  void set_replacekeywith(std::string&& value);
  void set_replacekeywith(const char* value);
  void set_replacekeywith(const void* value, size_t size);
  std::string* mutable_replacekeywith();
  std::string* release_replacekeywith();
  void set_allocated_replacekeywith(std::string* replacekeywith);
  private:
  const std::string& _internal_replacekeywith() const;
  void _internal_set_replacekeywith(const std::string& value);
  std::string* _internal_mutable_replacekeywith();
  public:

  // optional bytes hostname = 4;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const void* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // required uint32 errorcode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ErrorCodeReturned)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacekeywith_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PrefixReturned PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.PrefixReturned) */ {
 public:
  inline PrefixReturned() : PrefixReturned(nullptr) {}
  virtual ~PrefixReturned();

  PrefixReturned(const PrefixReturned& from);
  PrefixReturned(PrefixReturned&& from) noexcept
    : PrefixReturned() {
    *this = ::std::move(from);
  }

  inline PrefixReturned& operator=(const PrefixReturned& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixReturned& operator=(PrefixReturned&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrefixReturned& default_instance();

  static inline const PrefixReturned* internal_default_instance() {
    return reinterpret_cast<const PrefixReturned*>(
               &_PrefixReturned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(PrefixReturned& a, PrefixReturned& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefixReturned* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefixReturned* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrefixReturned* New() const final {
    return CreateMaybeMessage<PrefixReturned>(nullptr);
  }

  PrefixReturned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrefixReturned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrefixReturned& from);
  void MergeFrom(const PrefixReturned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrefixReturned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.PrefixReturned";
  }
  protected:
  explicit PrefixReturned(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyprefixFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kReplacekeyprefixwithFieldNumber = 3,
    kReplacekeywithFieldNumber = 4,
    kHostnameFieldNumber = 5,
    kHttpredirectcodeFieldNumber = 6,
  };
  // required bytes keyprefix = 1;
  bool has_keyprefix() const;
  private:
  bool _internal_has_keyprefix() const;
  public:
  void clear_keyprefix();
  const std::string& keyprefix() const;
  void set_keyprefix(const std::string& value);
  void set_keyprefix(std::string&& value);
  void set_keyprefix(const char* value);
  void set_keyprefix(const void* value, size_t size);
  std::string* mutable_keyprefix();
  std::string* release_keyprefix();
  void set_allocated_keyprefix(std::string* keyprefix);
  private:
  const std::string& _internal_keyprefix() const;
  void _internal_set_keyprefix(const std::string& value);
  std::string* _internal_mutable_keyprefix();
  public:

  // optional bytes protocol = 2;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const void* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // optional bytes replacekeyprefixwith = 3;
  bool has_replacekeyprefixwith() const;
  private:
  bool _internal_has_replacekeyprefixwith() const;
  public:
  void clear_replacekeyprefixwith();
  const std::string& replacekeyprefixwith() const;
  void set_replacekeyprefixwith(const std::string& value);
  void set_replacekeyprefixwith(std::string&& value);
  void set_replacekeyprefixwith(const char* value);
  void set_replacekeyprefixwith(const void* value, size_t size);
  std::string* mutable_replacekeyprefixwith();
  std::string* release_replacekeyprefixwith();
  void set_allocated_replacekeyprefixwith(std::string* replacekeyprefixwith);
  private:
  const std::string& _internal_replacekeyprefixwith() const;
  void _internal_set_replacekeyprefixwith(const std::string& value);
  std::string* _internal_mutable_replacekeyprefixwith();
  public:

  // optional bytes replacekeywith = 4;
  bool has_replacekeywith() const;
  private:
  bool _internal_has_replacekeywith() const;
  public:
  void clear_replacekeywith();
  const std::string& replacekeywith() const;
  void set_replacekeywith(const std::string& value);
  void set_replacekeywith(std::string&& value);
  void set_replacekeywith(const char* value);
  void set_replacekeywith(const void* value, size_t size);
  std::string* mutable_replacekeywith();
  std::string* release_replacekeywith();
  void set_allocated_replacekeywith(std::string* replacekeywith);
  private:
  const std::string& _internal_replacekeywith() const;
  void _internal_set_replacekeywith(const std::string& value);
  std::string* _internal_mutable_replacekeywith();
  public:

  // optional bytes hostname = 5;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const void* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional bytes httpredirectcode = 6;
  bool has_httpredirectcode() const;
  private:
  bool _internal_has_httpredirectcode() const;
  public:
  void clear_httpredirectcode();
  const std::string& httpredirectcode() const;
  void set_httpredirectcode(const std::string& value);
  void set_httpredirectcode(std::string&& value);
  void set_httpredirectcode(const char* value);
  void set_httpredirectcode(const void* value, size_t size);
  std::string* mutable_httpredirectcode();
  std::string* release_httpredirectcode();
  void set_allocated_httpredirectcode(std::string* httpredirectcode);
  private:
  const std::string& _internal_httpredirectcode() const;
  void _internal_set_httpredirectcode(const std::string& value);
  std::string* _internal_mutable_httpredirectcode();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.PrefixReturned)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyprefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacekeyprefixwith_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacekeywith_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr httpredirectcode_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class PrefixAndErrcodeReturned PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.PrefixAndErrcodeReturned) */ {
 public:
  inline PrefixAndErrcodeReturned() : PrefixAndErrcodeReturned(nullptr) {}
  virtual ~PrefixAndErrcodeReturned();

  PrefixAndErrcodeReturned(const PrefixAndErrcodeReturned& from);
  PrefixAndErrcodeReturned(PrefixAndErrcodeReturned&& from) noexcept
    : PrefixAndErrcodeReturned() {
    *this = ::std::move(from);
  }

  inline PrefixAndErrcodeReturned& operator=(const PrefixAndErrcodeReturned& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixAndErrcodeReturned& operator=(PrefixAndErrcodeReturned&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrefixAndErrcodeReturned& default_instance();

  static inline const PrefixAndErrcodeReturned* internal_default_instance() {
    return reinterpret_cast<const PrefixAndErrcodeReturned*>(
               &_PrefixAndErrcodeReturned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(PrefixAndErrcodeReturned& a, PrefixAndErrcodeReturned& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefixAndErrcodeReturned* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefixAndErrcodeReturned* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrefixAndErrcodeReturned* New() const final {
    return CreateMaybeMessage<PrefixAndErrcodeReturned>(nullptr);
  }

  PrefixAndErrcodeReturned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrefixAndErrcodeReturned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrefixAndErrcodeReturned& from);
  void MergeFrom(const PrefixAndErrcodeReturned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrefixAndErrcodeReturned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.PrefixAndErrcodeReturned";
  }
  protected:
  explicit PrefixAndErrcodeReturned(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyprefixFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kHostnameFieldNumber = 4,
    kReplacekeyprefixwithFieldNumber = 5,
    kReplacekeywithFieldNumber = 6,
    kHttpredirectcodeFieldNumber = 7,
    kErrorcodeFieldNumber = 1,
  };
  // optional bytes keyprefix = 2;
  bool has_keyprefix() const;
  private:
  bool _internal_has_keyprefix() const;
  public:
  void clear_keyprefix();
  const std::string& keyprefix() const;
  void set_keyprefix(const std::string& value);
  void set_keyprefix(std::string&& value);
  void set_keyprefix(const char* value);
  void set_keyprefix(const void* value, size_t size);
  std::string* mutable_keyprefix();
  std::string* release_keyprefix();
  void set_allocated_keyprefix(std::string* keyprefix);
  private:
  const std::string& _internal_keyprefix() const;
  void _internal_set_keyprefix(const std::string& value);
  std::string* _internal_mutable_keyprefix();
  public:

  // optional bytes protocol = 3;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const void* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // optional bytes hostname = 4;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const void* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional bytes replacekeyprefixwith = 5;
  bool has_replacekeyprefixwith() const;
  private:
  bool _internal_has_replacekeyprefixwith() const;
  public:
  void clear_replacekeyprefixwith();
  const std::string& replacekeyprefixwith() const;
  void set_replacekeyprefixwith(const std::string& value);
  void set_replacekeyprefixwith(std::string&& value);
  void set_replacekeyprefixwith(const char* value);
  void set_replacekeyprefixwith(const void* value, size_t size);
  std::string* mutable_replacekeyprefixwith();
  std::string* release_replacekeyprefixwith();
  void set_allocated_replacekeyprefixwith(std::string* replacekeyprefixwith);
  private:
  const std::string& _internal_replacekeyprefixwith() const;
  void _internal_set_replacekeyprefixwith(const std::string& value);
  std::string* _internal_mutable_replacekeyprefixwith();
  public:

  // optional bytes replacekeywith = 6;
  bool has_replacekeywith() const;
  private:
  bool _internal_has_replacekeywith() const;
  public:
  void clear_replacekeywith();
  const std::string& replacekeywith() const;
  void set_replacekeywith(const std::string& value);
  void set_replacekeywith(std::string&& value);
  void set_replacekeywith(const char* value);
  void set_replacekeywith(const void* value, size_t size);
  std::string* mutable_replacekeywith();
  std::string* release_replacekeywith();
  void set_allocated_replacekeywith(std::string* replacekeywith);
  private:
  const std::string& _internal_replacekeywith() const;
  void _internal_set_replacekeywith(const std::string& value);
  std::string* _internal_mutable_replacekeywith();
  public:

  // optional bytes httpredirectcode = 7;
  bool has_httpredirectcode() const;
  private:
  bool _internal_has_httpredirectcode() const;
  public:
  void clear_httpredirectcode();
  const std::string& httpredirectcode() const;
  void set_httpredirectcode(const std::string& value);
  void set_httpredirectcode(std::string&& value);
  void set_httpredirectcode(const char* value);
  void set_httpredirectcode(const void* value, size_t size);
  std::string* mutable_httpredirectcode();
  std::string* release_httpredirectcode();
  void set_allocated_httpredirectcode(std::string* httpredirectcode);
  private:
  const std::string& _internal_httpredirectcode() const;
  void _internal_set_httpredirectcode(const std::string& value);
  std::string* _internal_mutable_httpredirectcode();
  public:

  // optional uint32 errorcode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.PrefixAndErrcodeReturned)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyprefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacekeyprefixwith_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacekeywith_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr httpredirectcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class RoutingRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.RoutingRule) */ {
 public:
  inline RoutingRule() : RoutingRule(nullptr) {}
  virtual ~RoutingRule();

  RoutingRule(const RoutingRule& from);
  RoutingRule(RoutingRule&& from) noexcept
    : RoutingRule() {
    *this = ::std::move(from);
  }

  inline RoutingRule& operator=(const RoutingRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingRule& operator=(RoutingRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingRule& default_instance();

  static inline const RoutingRule* internal_default_instance() {
    return reinterpret_cast<const RoutingRule*>(
               &_RoutingRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(RoutingRule& a, RoutingRule& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingRule* New() const final {
    return CreateMaybeMessage<RoutingRule>(nullptr);
  }

  RoutingRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingRule& from);
  void MergeFrom(const RoutingRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.RoutingRule";
  }
  protected:
  explicit RoutingRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorcodereturnedFieldNumber = 1,
    kPrefixreturnedFieldNumber = 2,
    kPrefixanderrcodereturnedFieldNumber = 3,
  };
  // repeated .ClientCos.ErrorCodeReturned errorcodereturned = 1;
  int errorcodereturned_size() const;
  private:
  int _internal_errorcodereturned_size() const;
  public:
  void clear_errorcodereturned();
  ::ClientCos::ErrorCodeReturned* mutable_errorcodereturned(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ErrorCodeReturned >*
      mutable_errorcodereturned();
  private:
  const ::ClientCos::ErrorCodeReturned& _internal_errorcodereturned(int index) const;
  ::ClientCos::ErrorCodeReturned* _internal_add_errorcodereturned();
  public:
  const ::ClientCos::ErrorCodeReturned& errorcodereturned(int index) const;
  ::ClientCos::ErrorCodeReturned* add_errorcodereturned();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ErrorCodeReturned >&
      errorcodereturned() const;

  // repeated .ClientCos.PrefixReturned prefixreturned = 2;
  int prefixreturned_size() const;
  private:
  int _internal_prefixreturned_size() const;
  public:
  void clear_prefixreturned();
  ::ClientCos::PrefixReturned* mutable_prefixreturned(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixReturned >*
      mutable_prefixreturned();
  private:
  const ::ClientCos::PrefixReturned& _internal_prefixreturned(int index) const;
  ::ClientCos::PrefixReturned* _internal_add_prefixreturned();
  public:
  const ::ClientCos::PrefixReturned& prefixreturned(int index) const;
  ::ClientCos::PrefixReturned* add_prefixreturned();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixReturned >&
      prefixreturned() const;

  // repeated .ClientCos.PrefixAndErrcodeReturned prefixanderrcodereturned = 3;
  int prefixanderrcodereturned_size() const;
  private:
  int _internal_prefixanderrcodereturned_size() const;
  public:
  void clear_prefixanderrcodereturned();
  ::ClientCos::PrefixAndErrcodeReturned* mutable_prefixanderrcodereturned(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixAndErrcodeReturned >*
      mutable_prefixanderrcodereturned();
  private:
  const ::ClientCos::PrefixAndErrcodeReturned& _internal_prefixanderrcodereturned(int index) const;
  ::ClientCos::PrefixAndErrcodeReturned* _internal_add_prefixanderrcodereturned();
  public:
  const ::ClientCos::PrefixAndErrcodeReturned& prefixanderrcodereturned(int index) const;
  ::ClientCos::PrefixAndErrcodeReturned* add_prefixanderrcodereturned();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixAndErrcodeReturned >&
      prefixanderrcodereturned() const;

  // @@protoc_insertion_point(class_scope:ClientCos.RoutingRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ErrorCodeReturned > errorcodereturned_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixReturned > prefixreturned_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixAndErrcodeReturned > prefixanderrcodereturned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class WebsiteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.WebsiteInfo) */ {
 public:
  inline WebsiteInfo() : WebsiteInfo(nullptr) {}
  virtual ~WebsiteInfo();

  WebsiteInfo(const WebsiteInfo& from);
  WebsiteInfo(WebsiteInfo&& from) noexcept
    : WebsiteInfo() {
    *this = ::std::move(from);
  }

  inline WebsiteInfo& operator=(const WebsiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebsiteInfo& operator=(WebsiteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WebsiteInfo& default_instance();

  static inline const WebsiteInfo* internal_default_instance() {
    return reinterpret_cast<const WebsiteInfo*>(
               &_WebsiteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(WebsiteInfo& a, WebsiteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WebsiteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebsiteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebsiteInfo* New() const final {
    return CreateMaybeMessage<WebsiteInfo>(nullptr);
  }

  WebsiteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebsiteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WebsiteInfo& from);
  void MergeFrom(const WebsiteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebsiteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.WebsiteInfo";
  }
  protected:
  explicit WebsiteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexdocumentFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kErrordocumentFieldNumber = 3,
    kHostnameFieldNumber = 5,
    kRoutingruleFieldNumber = 4,
  };
  // required bytes indexdocument = 1;
  bool has_indexdocument() const;
  private:
  bool _internal_has_indexdocument() const;
  public:
  void clear_indexdocument();
  const std::string& indexdocument() const;
  void set_indexdocument(const std::string& value);
  void set_indexdocument(std::string&& value);
  void set_indexdocument(const char* value);
  void set_indexdocument(const void* value, size_t size);
  std::string* mutable_indexdocument();
  std::string* release_indexdocument();
  void set_allocated_indexdocument(std::string* indexdocument);
  private:
  const std::string& _internal_indexdocument() const;
  void _internal_set_indexdocument(const std::string& value);
  std::string* _internal_mutable_indexdocument();
  public:

  // optional bytes protocol = 2;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const void* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // optional bytes errordocument = 3;
  bool has_errordocument() const;
  private:
  bool _internal_has_errordocument() const;
  public:
  void clear_errordocument();
  const std::string& errordocument() const;
  void set_errordocument(const std::string& value);
  void set_errordocument(std::string&& value);
  void set_errordocument(const char* value);
  void set_errordocument(const void* value, size_t size);
  std::string* mutable_errordocument();
  std::string* release_errordocument();
  void set_allocated_errordocument(std::string* errordocument);
  private:
  const std::string& _internal_errordocument() const;
  void _internal_set_errordocument(const std::string& value);
  std::string* _internal_mutable_errordocument();
  public:

  // optional bytes hostname = 5;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const void* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional .ClientCos.RoutingRule routingrule = 4;
  bool has_routingrule() const;
  private:
  bool _internal_has_routingrule() const;
  public:
  void clear_routingrule();
  const ::ClientCos::RoutingRule& routingrule() const;
  ::ClientCos::RoutingRule* release_routingrule();
  ::ClientCos::RoutingRule* mutable_routingrule();
  void set_allocated_routingrule(::ClientCos::RoutingRule* routingrule);
  private:
  const ::ClientCos::RoutingRule& _internal_routingrule() const;
  ::ClientCos::RoutingRule* _internal_mutable_routingrule();
  public:
  void unsafe_arena_set_allocated_routingrule(
      ::ClientCos::RoutingRule* routingrule);
  ::ClientCos::RoutingRule* unsafe_arena_release_routingrule();

  // @@protoc_insertion_point(class_scope:ClientCos.WebsiteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indexdocument_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordocument_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::ClientCos::RoutingRule* routingrule_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketWebsiteInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketWebsiteInfoReq) */ {
 public:
  inline SetBucketWebsiteInfoReq() : SetBucketWebsiteInfoReq(nullptr) {}
  virtual ~SetBucketWebsiteInfoReq();

  SetBucketWebsiteInfoReq(const SetBucketWebsiteInfoReq& from);
  SetBucketWebsiteInfoReq(SetBucketWebsiteInfoReq&& from) noexcept
    : SetBucketWebsiteInfoReq() {
    *this = ::std::move(from);
  }

  inline SetBucketWebsiteInfoReq& operator=(const SetBucketWebsiteInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketWebsiteInfoReq& operator=(SetBucketWebsiteInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketWebsiteInfoReq& default_instance();

  static inline const SetBucketWebsiteInfoReq* internal_default_instance() {
    return reinterpret_cast<const SetBucketWebsiteInfoReq*>(
               &_SetBucketWebsiteInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SetBucketWebsiteInfoReq& a, SetBucketWebsiteInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketWebsiteInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketWebsiteInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketWebsiteInfoReq* New() const final {
    return CreateMaybeMessage<SetBucketWebsiteInfoReq>(nullptr);
  }

  SetBucketWebsiteInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketWebsiteInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketWebsiteInfoReq& from);
  void MergeFrom(const SetBucketWebsiteInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketWebsiteInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketWebsiteInfoReq";
  }
  protected:
  explicit SetBucketWebsiteInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kWebsiteinfoFieldNumber = 3,
    kSetflagFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .ClientCos.WebsiteInfo websiteinfo = 3;
  bool has_websiteinfo() const;
  private:
  bool _internal_has_websiteinfo() const;
  public:
  void clear_websiteinfo();
  const ::ClientCos::WebsiteInfo& websiteinfo() const;
  ::ClientCos::WebsiteInfo* release_websiteinfo();
  ::ClientCos::WebsiteInfo* mutable_websiteinfo();
  void set_allocated_websiteinfo(::ClientCos::WebsiteInfo* websiteinfo);
  private:
  const ::ClientCos::WebsiteInfo& _internal_websiteinfo() const;
  ::ClientCos::WebsiteInfo* _internal_mutable_websiteinfo();
  public:
  void unsafe_arena_set_allocated_websiteinfo(
      ::ClientCos::WebsiteInfo* websiteinfo);
  ::ClientCos::WebsiteInfo* unsafe_arena_release_websiteinfo();

  // required uint32 setflag = 2;
  bool has_setflag() const;
  private:
  bool _internal_has_setflag() const;
  public:
  void clear_setflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 setflag() const;
  void set_setflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setflag() const;
  void _internal_set_setflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketWebsiteInfoReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::ClientCos::WebsiteInfo* websiteinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 setflag_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketWebsiteInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketWebsiteInfoRsp) */ {
 public:
  inline SetBucketWebsiteInfoRsp() : SetBucketWebsiteInfoRsp(nullptr) {}
  virtual ~SetBucketWebsiteInfoRsp();

  SetBucketWebsiteInfoRsp(const SetBucketWebsiteInfoRsp& from);
  SetBucketWebsiteInfoRsp(SetBucketWebsiteInfoRsp&& from) noexcept
    : SetBucketWebsiteInfoRsp() {
    *this = ::std::move(from);
  }

  inline SetBucketWebsiteInfoRsp& operator=(const SetBucketWebsiteInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketWebsiteInfoRsp& operator=(SetBucketWebsiteInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketWebsiteInfoRsp& default_instance();

  static inline const SetBucketWebsiteInfoRsp* internal_default_instance() {
    return reinterpret_cast<const SetBucketWebsiteInfoRsp*>(
               &_SetBucketWebsiteInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(SetBucketWebsiteInfoRsp& a, SetBucketWebsiteInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketWebsiteInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketWebsiteInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketWebsiteInfoRsp* New() const final {
    return CreateMaybeMessage<SetBucketWebsiteInfoRsp>(nullptr);
  }

  SetBucketWebsiteInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketWebsiteInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketWebsiteInfoRsp& from);
  void MergeFrom(const SetBucketWebsiteInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketWebsiteInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketWebsiteInfoRsp";
  }
  protected:
  explicit SetBucketWebsiteInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketWebsiteInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetCamAttrReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetCamAttrReq) */ {
 public:
  inline SetCamAttrReq() : SetCamAttrReq(nullptr) {}
  virtual ~SetCamAttrReq();

  SetCamAttrReq(const SetCamAttrReq& from);
  SetCamAttrReq(SetCamAttrReq&& from) noexcept
    : SetCamAttrReq() {
    *this = ::std::move(from);
  }

  inline SetCamAttrReq& operator=(const SetCamAttrReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCamAttrReq& operator=(SetCamAttrReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCamAttrReq& default_instance();

  static inline const SetCamAttrReq* internal_default_instance() {
    return reinterpret_cast<const SetCamAttrReq*>(
               &_SetCamAttrReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SetCamAttrReq& a, SetCamAttrReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCamAttrReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCamAttrReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCamAttrReq* New() const final {
    return CreateMaybeMessage<SetCamAttrReq>(nullptr);
  }

  SetCamAttrReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCamAttrReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCamAttrReq& from);
  void MergeFrom(const SetCamAttrReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCamAttrReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetCamAttrReq";
  }
  protected:
  explicit SetCamAttrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kCamauthFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required .ClientCos.CamAuth camauth = 2;
  bool has_camauth() const;
  private:
  bool _internal_has_camauth() const;
  public:
  void clear_camauth();
  ::ClientCos::CamAuth camauth() const;
  void set_camauth(::ClientCos::CamAuth value);
  private:
  ::ClientCos::CamAuth _internal_camauth() const;
  void _internal_set_camauth(::ClientCos::CamAuth value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SetCamAttrReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  int camauth_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetCamAttrRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetCamAttrRsp) */ {
 public:
  inline SetCamAttrRsp() : SetCamAttrRsp(nullptr) {}
  virtual ~SetCamAttrRsp();

  SetCamAttrRsp(const SetCamAttrRsp& from);
  SetCamAttrRsp(SetCamAttrRsp&& from) noexcept
    : SetCamAttrRsp() {
    *this = ::std::move(from);
  }

  inline SetCamAttrRsp& operator=(const SetCamAttrRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCamAttrRsp& operator=(SetCamAttrRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCamAttrRsp& default_instance();

  static inline const SetCamAttrRsp* internal_default_instance() {
    return reinterpret_cast<const SetCamAttrRsp*>(
               &_SetCamAttrRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SetCamAttrRsp& a, SetCamAttrRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCamAttrRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCamAttrRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCamAttrRsp* New() const final {
    return CreateMaybeMessage<SetCamAttrRsp>(nullptr);
  }

  SetCamAttrRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCamAttrRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCamAttrRsp& from);
  void MergeFrom(const SetCamAttrRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCamAttrRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetCamAttrRsp";
  }
  protected:
  explicit SetCamAttrRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetCamAttrRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketCamAuthQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketCamAuthQueryReq) */ {
 public:
  inline BucketCamAuthQueryReq() : BucketCamAuthQueryReq(nullptr) {}
  virtual ~BucketCamAuthQueryReq();

  BucketCamAuthQueryReq(const BucketCamAuthQueryReq& from);
  BucketCamAuthQueryReq(BucketCamAuthQueryReq&& from) noexcept
    : BucketCamAuthQueryReq() {
    *this = ::std::move(from);
  }

  inline BucketCamAuthQueryReq& operator=(const BucketCamAuthQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketCamAuthQueryReq& operator=(BucketCamAuthQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketCamAuthQueryReq& default_instance();

  static inline const BucketCamAuthQueryReq* internal_default_instance() {
    return reinterpret_cast<const BucketCamAuthQueryReq*>(
               &_BucketCamAuthQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(BucketCamAuthQueryReq& a, BucketCamAuthQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketCamAuthQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketCamAuthQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketCamAuthQueryReq* New() const final {
    return CreateMaybeMessage<BucketCamAuthQueryReq>(nullptr);
  }

  BucketCamAuthQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketCamAuthQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketCamAuthQueryReq& from);
  void MergeFrom(const BucketCamAuthQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketCamAuthQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketCamAuthQueryReq";
  }
  protected:
  explicit BucketCamAuthQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.BucketCamAuthQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BucketCamAuthQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.BucketCamAuthQueryRsp) */ {
 public:
  inline BucketCamAuthQueryRsp() : BucketCamAuthQueryRsp(nullptr) {}
  virtual ~BucketCamAuthQueryRsp();

  BucketCamAuthQueryRsp(const BucketCamAuthQueryRsp& from);
  BucketCamAuthQueryRsp(BucketCamAuthQueryRsp&& from) noexcept
    : BucketCamAuthQueryRsp() {
    *this = ::std::move(from);
  }

  inline BucketCamAuthQueryRsp& operator=(const BucketCamAuthQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketCamAuthQueryRsp& operator=(BucketCamAuthQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketCamAuthQueryRsp& default_instance();

  static inline const BucketCamAuthQueryRsp* internal_default_instance() {
    return reinterpret_cast<const BucketCamAuthQueryRsp*>(
               &_BucketCamAuthQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(BucketCamAuthQueryRsp& a, BucketCamAuthQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketCamAuthQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketCamAuthQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketCamAuthQueryRsp* New() const final {
    return CreateMaybeMessage<BucketCamAuthQueryRsp>(nullptr);
  }

  BucketCamAuthQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketCamAuthQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketCamAuthQueryRsp& from);
  void MergeFrom(const BucketCamAuthQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketCamAuthQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.BucketCamAuthQueryRsp";
  }
  protected:
  explicit BucketCamAuthQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIscamauthFieldNumber = 1,
  };
  // required bool iscamauth = 1;
  bool has_iscamauth() const;
  private:
  bool _internal_has_iscamauth() const;
  public:
  void clear_iscamauth();
  bool iscamauth() const;
  void set_iscamauth(bool value);
  private:
  bool _internal_iscamauth() const;
  void _internal_set_iscamauth(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.BucketCamAuthQueryRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool iscamauth_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CamAtuhItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CamAtuhItem) */ {
 public:
  inline CamAtuhItem() : CamAtuhItem(nullptr) {}
  virtual ~CamAtuhItem();

  CamAtuhItem(const CamAtuhItem& from);
  CamAtuhItem(CamAtuhItem&& from) noexcept
    : CamAtuhItem() {
    *this = ::std::move(from);
  }

  inline CamAtuhItem& operator=(const CamAtuhItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamAtuhItem& operator=(CamAtuhItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CamAtuhItem& default_instance();

  static inline const CamAtuhItem* internal_default_instance() {
    return reinterpret_cast<const CamAtuhItem*>(
               &_CamAtuhItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CamAtuhItem& a, CamAtuhItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CamAtuhItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamAtuhItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CamAtuhItem* New() const final {
    return CreateMaybeMessage<CamAtuhItem>(nullptr);
  }

  CamAtuhItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CamAtuhItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CamAtuhItem& from);
  void MergeFrom(const CamAtuhItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamAtuhItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CamAtuhItem";
  }
  protected:
  explicit CamAtuhItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketpathFieldNumber = 1,
    kIscamauthFieldNumber = 2,
  };
  // required bytes bucketpath = 1;
  bool has_bucketpath() const;
  private:
  bool _internal_has_bucketpath() const;
  public:
  void clear_bucketpath();
  const std::string& bucketpath() const;
  void set_bucketpath(const std::string& value);
  void set_bucketpath(std::string&& value);
  void set_bucketpath(const char* value);
  void set_bucketpath(const void* value, size_t size);
  std::string* mutable_bucketpath();
  std::string* release_bucketpath();
  void set_allocated_bucketpath(std::string* bucketpath);
  private:
  const std::string& _internal_bucketpath() const;
  void _internal_set_bucketpath(const std::string& value);
  std::string* _internal_mutable_bucketpath();
  public:

  // required bool iscamauth = 2;
  bool has_iscamauth() const;
  private:
  bool _internal_has_iscamauth() const;
  public:
  void clear_iscamauth();
  bool iscamauth() const;
  void set_iscamauth(bool value);
  private:
  bool _internal_iscamauth() const;
  void _internal_set_iscamauth(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CamAtuhItem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucketpath_;
  bool iscamauth_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppCamAuthQueryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppCamAuthQueryReq) */ {
 public:
  inline AppCamAuthQueryReq() : AppCamAuthQueryReq(nullptr) {}
  virtual ~AppCamAuthQueryReq();

  AppCamAuthQueryReq(const AppCamAuthQueryReq& from);
  AppCamAuthQueryReq(AppCamAuthQueryReq&& from) noexcept
    : AppCamAuthQueryReq() {
    *this = ::std::move(from);
  }

  inline AppCamAuthQueryReq& operator=(const AppCamAuthQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppCamAuthQueryReq& operator=(AppCamAuthQueryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppCamAuthQueryReq& default_instance();

  static inline const AppCamAuthQueryReq* internal_default_instance() {
    return reinterpret_cast<const AppCamAuthQueryReq*>(
               &_AppCamAuthQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(AppCamAuthQueryReq& a, AppCamAuthQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AppCamAuthQueryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppCamAuthQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppCamAuthQueryReq* New() const final {
    return CreateMaybeMessage<AppCamAuthQueryReq>(nullptr);
  }

  AppCamAuthQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppCamAuthQueryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppCamAuthQueryReq& from);
  void MergeFrom(const AppCamAuthQueryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppCamAuthQueryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppCamAuthQueryReq";
  }
  protected:
  explicit AppCamAuthQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kNextBucketFieldNumber = 2,
  };
  // required bytes appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const void* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // required bytes next_bucket = 2;
  bool has_next_bucket() const;
  private:
  bool _internal_has_next_bucket() const;
  public:
  void clear_next_bucket();
  const std::string& next_bucket() const;
  void set_next_bucket(const std::string& value);
  void set_next_bucket(std::string&& value);
  void set_next_bucket(const char* value);
  void set_next_bucket(const void* value, size_t size);
  std::string* mutable_next_bucket();
  std::string* release_next_bucket();
  void set_allocated_next_bucket(std::string* next_bucket);
  private:
  const std::string& _internal_next_bucket() const;
  void _internal_set_next_bucket(const std::string& value);
  std::string* _internal_mutable_next_bucket();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AppCamAuthQueryReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_bucket_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AppCamAuthQueryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AppCamAuthQueryRsp) */ {
 public:
  inline AppCamAuthQueryRsp() : AppCamAuthQueryRsp(nullptr) {}
  virtual ~AppCamAuthQueryRsp();

  AppCamAuthQueryRsp(const AppCamAuthQueryRsp& from);
  AppCamAuthQueryRsp(AppCamAuthQueryRsp&& from) noexcept
    : AppCamAuthQueryRsp() {
    *this = ::std::move(from);
  }

  inline AppCamAuthQueryRsp& operator=(const AppCamAuthQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppCamAuthQueryRsp& operator=(AppCamAuthQueryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppCamAuthQueryRsp& default_instance();

  static inline const AppCamAuthQueryRsp* internal_default_instance() {
    return reinterpret_cast<const AppCamAuthQueryRsp*>(
               &_AppCamAuthQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(AppCamAuthQueryRsp& a, AppCamAuthQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AppCamAuthQueryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppCamAuthQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppCamAuthQueryRsp* New() const final {
    return CreateMaybeMessage<AppCamAuthQueryRsp>(nullptr);
  }

  AppCamAuthQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppCamAuthQueryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppCamAuthQueryRsp& from);
  void MergeFrom(const AppCamAuthQueryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppCamAuthQueryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AppCamAuthQueryRsp";
  }
  protected:
  explicit AppCamAuthQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kNextBucketFieldNumber = 2,
    kCamauthFieldNumber = 1,
    kIsoverFieldNumber = 4,
  };
  // repeated .ClientCos.CamAtuhItem item = 3;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::ClientCos::CamAtuhItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CamAtuhItem >*
      mutable_item();
  private:
  const ::ClientCos::CamAtuhItem& _internal_item(int index) const;
  ::ClientCos::CamAtuhItem* _internal_add_item();
  public:
  const ::ClientCos::CamAtuhItem& item(int index) const;
  ::ClientCos::CamAtuhItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CamAtuhItem >&
      item() const;

  // required bytes next_bucket = 2;
  bool has_next_bucket() const;
  private:
  bool _internal_has_next_bucket() const;
  public:
  void clear_next_bucket();
  const std::string& next_bucket() const;
  void set_next_bucket(const std::string& value);
  void set_next_bucket(std::string&& value);
  void set_next_bucket(const char* value);
  void set_next_bucket(const void* value, size_t size);
  std::string* mutable_next_bucket();
  std::string* release_next_bucket();
  void set_allocated_next_bucket(std::string* next_bucket);
  private:
  const std::string& _internal_next_bucket() const;
  void _internal_set_next_bucket(const std::string& value);
  std::string* _internal_mutable_next_bucket();
  public:

  // required .ClientCos.CamAuth camauth = 1;
  bool has_camauth() const;
  private:
  bool _internal_has_camauth() const;
  public:
  void clear_camauth();
  ::ClientCos::CamAuth camauth() const;
  void set_camauth(::ClientCos::CamAuth value);
  private:
  ::ClientCos::CamAuth _internal_camauth() const;
  void _internal_set_camauth(::ClientCos::CamAuth value);
  public:

  // required bool isover = 4 [default = false];
  bool has_isover() const;
  private:
  bool _internal_has_isover() const;
  public:
  void clear_isover();
  bool isover() const;
  void set_isover(bool value);
  private:
  bool _internal_isover() const;
  void _internal_set_isover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AppCamAuthQueryRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CamAtuhItem > item_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_bucket_;
  int camauth_;
  bool isover_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CgiArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CgiArgs) */ {
 public:
  inline CgiArgs() : CgiArgs(nullptr) {}
  virtual ~CgiArgs();

  CgiArgs(const CgiArgs& from);
  CgiArgs(CgiArgs&& from) noexcept
    : CgiArgs() {
    *this = ::std::move(from);
  }

  inline CgiArgs& operator=(const CgiArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgiArgs& operator=(CgiArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CgiArgs& default_instance();

  static inline const CgiArgs* internal_default_instance() {
    return reinterpret_cast<const CgiArgs*>(
               &_CgiArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CgiArgs& a, CgiArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(CgiArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgiArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgiArgs* New() const final {
    return CreateMaybeMessage<CgiArgs>(nullptr);
  }

  CgiArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgiArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CgiArgs& from);
  void MergeFrom(const CgiArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgiArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CgiArgs";
  }
  protected:
  explicit CgiArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAclsFieldNumber = 3,
    kAuthInfoFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // repeated .ClientCos.AclInfo acls = 3;
  int acls_size() const;
  private:
  int _internal_acls_size() const;
  public:
  void clear_acls();
  ::ClientCos::AclInfo* mutable_acls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
      mutable_acls();
  private:
  const ::ClientCos::AclInfo& _internal_acls(int index) const;
  ::ClientCos::AclInfo* _internal_add_acls();
  public:
  const ::ClientCos::AclInfo& acls(int index) const;
  ::ClientCos::AclInfo* add_acls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
      acls() const;

  // optional .ClientCos.AuthInfo auth_info = 1;
  bool has_auth_info() const;
  private:
  bool _internal_has_auth_info() const;
  public:
  void clear_auth_info();
  const ::ClientCos::AuthInfo& auth_info() const;
  ::ClientCos::AuthInfo* release_auth_info();
  ::ClientCos::AuthInfo* mutable_auth_info();
  void set_allocated_auth_info(::ClientCos::AuthInfo* auth_info);
  private:
  const ::ClientCos::AuthInfo& _internal_auth_info() const;
  ::ClientCos::AuthInfo* _internal_mutable_auth_info();
  public:
  void unsafe_arena_set_allocated_auth_info(
      ::ClientCos::AuthInfo* auth_info);
  ::ClientCos::AuthInfo* unsafe_arena_release_auth_info();

  // optional .ClientCos.OwnerInfo owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::ClientCos::OwnerInfo& owner() const;
  ::ClientCos::OwnerInfo* release_owner();
  ::ClientCos::OwnerInfo* mutable_owner();
  void set_allocated_owner(::ClientCos::OwnerInfo* owner);
  private:
  const ::ClientCos::OwnerInfo& _internal_owner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::ClientCos::OwnerInfo* owner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_owner();

  // @@protoc_insertion_point(class_scope:ClientCos.CgiArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo > acls_;
  ::ClientCos::AuthInfo* auth_info_;
  ::ClientCos::OwnerInfo* owner_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CgiParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CgiParams) */ {
 public:
  inline CgiParams() : CgiParams(nullptr) {}
  virtual ~CgiParams();

  CgiParams(const CgiParams& from);
  CgiParams(CgiParams&& from) noexcept
    : CgiParams() {
    *this = ::std::move(from);
  }

  inline CgiParams& operator=(const CgiParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgiParams& operator=(CgiParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CgiParams& default_instance();

  static inline const CgiParams* internal_default_instance() {
    return reinterpret_cast<const CgiParams*>(
               &_CgiParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CgiParams& a, CgiParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CgiParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgiParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgiParams* New() const final {
    return CreateMaybeMessage<CgiParams>(nullptr);
  }

  CgiParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgiParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CgiParams& from);
  void MergeFrom(const CgiParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgiParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CgiParams";
  }
  protected:
  explicit CgiParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetObjectExtendFieldNumber = 1,
    kCompleteMultiUploadExtendFieldNumber = 2,
  };
  // optional .ClientCos.GetObjectExtend get_object_extend = 1;
  bool has_get_object_extend() const;
  private:
  bool _internal_has_get_object_extend() const;
  public:
  void clear_get_object_extend();
  const ::ClientCos::GetObjectExtend& get_object_extend() const;
  ::ClientCos::GetObjectExtend* release_get_object_extend();
  ::ClientCos::GetObjectExtend* mutable_get_object_extend();
  void set_allocated_get_object_extend(::ClientCos::GetObjectExtend* get_object_extend);
  private:
  const ::ClientCos::GetObjectExtend& _internal_get_object_extend() const;
  ::ClientCos::GetObjectExtend* _internal_mutable_get_object_extend();
  public:
  void unsafe_arena_set_allocated_get_object_extend(
      ::ClientCos::GetObjectExtend* get_object_extend);
  ::ClientCos::GetObjectExtend* unsafe_arena_release_get_object_extend();

  // optional .ClientCos.CompleteMultiUploadExtend complete_multi_upload_extend = 2;
  bool has_complete_multi_upload_extend() const;
  private:
  bool _internal_has_complete_multi_upload_extend() const;
  public:
  void clear_complete_multi_upload_extend();
  const ::ClientCos::CompleteMultiUploadExtend& complete_multi_upload_extend() const;
  ::ClientCos::CompleteMultiUploadExtend* release_complete_multi_upload_extend();
  ::ClientCos::CompleteMultiUploadExtend* mutable_complete_multi_upload_extend();
  void set_allocated_complete_multi_upload_extend(::ClientCos::CompleteMultiUploadExtend* complete_multi_upload_extend);
  private:
  const ::ClientCos::CompleteMultiUploadExtend& _internal_complete_multi_upload_extend() const;
  ::ClientCos::CompleteMultiUploadExtend* _internal_mutable_complete_multi_upload_extend();
  public:
  void unsafe_arena_set_allocated_complete_multi_upload_extend(
      ::ClientCos::CompleteMultiUploadExtend* complete_multi_upload_extend);
  ::ClientCos::CompleteMultiUploadExtend* unsafe_arena_release_complete_multi_upload_extend();

  // @@protoc_insertion_point(class_scope:ClientCos.CgiParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ClientCos::GetObjectExtend* get_object_extend_;
  ::ClientCos::CompleteMultiUploadExtend* complete_multi_upload_extend_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetObjectExtend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetObjectExtend) */ {
 public:
  inline GetObjectExtend() : GetObjectExtend(nullptr) {}
  virtual ~GetObjectExtend();

  GetObjectExtend(const GetObjectExtend& from);
  GetObjectExtend(GetObjectExtend&& from) noexcept
    : GetObjectExtend() {
    *this = ::std::move(from);
  }

  inline GetObjectExtend& operator=(const GetObjectExtend& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectExtend& operator=(GetObjectExtend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjectExtend& default_instance();

  static inline const GetObjectExtend* internal_default_instance() {
    return reinterpret_cast<const GetObjectExtend*>(
               &_GetObjectExtend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(GetObjectExtend& a, GetObjectExtend& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectExtend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectExtend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjectExtend* New() const final {
    return CreateMaybeMessage<GetObjectExtend>(nullptr);
  }

  GetObjectExtend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectExtend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjectExtend& from);
  void MergeFrom(const GetObjectExtend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectExtend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetObjectExtend";
  }
  protected:
  explicit GetObjectExtend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckReferFieldNumber = 1,
  };
  // optional bool check_refer = 1 [default = true];
  bool has_check_refer() const;
  private:
  bool _internal_has_check_refer() const;
  public:
  void clear_check_refer();
  bool check_refer() const;
  void set_check_refer(bool value);
  private:
  bool _internal_check_refer() const;
  void _internal_set_check_refer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.GetObjectExtend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool check_refer_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CompleteMultiUploadExtend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CompleteMultiUploadExtend) */ {
 public:
  inline CompleteMultiUploadExtend() : CompleteMultiUploadExtend(nullptr) {}
  virtual ~CompleteMultiUploadExtend();

  CompleteMultiUploadExtend(const CompleteMultiUploadExtend& from);
  CompleteMultiUploadExtend(CompleteMultiUploadExtend&& from) noexcept
    : CompleteMultiUploadExtend() {
    *this = ::std::move(from);
  }

  inline CompleteMultiUploadExtend& operator=(const CompleteMultiUploadExtend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteMultiUploadExtend& operator=(CompleteMultiUploadExtend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteMultiUploadExtend& default_instance();

  static inline const CompleteMultiUploadExtend* internal_default_instance() {
    return reinterpret_cast<const CompleteMultiUploadExtend*>(
               &_CompleteMultiUploadExtend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CompleteMultiUploadExtend& a, CompleteMultiUploadExtend& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteMultiUploadExtend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteMultiUploadExtend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteMultiUploadExtend* New() const final {
    return CreateMaybeMessage<CompleteMultiUploadExtend>(nullptr);
  }

  CompleteMultiUploadExtend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteMultiUploadExtend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteMultiUploadExtend& from);
  void MergeFrom(const CompleteMultiUploadExtend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteMultiUploadExtend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CompleteMultiUploadExtend";
  }
  protected:
  explicit CompleteMultiUploadExtend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinPartSizeFieldNumber = 1,
  };
  // optional int32 min_part_size = 1;
  bool has_min_part_size() const;
  private:
  bool _internal_has_min_part_size() const;
  public:
  void clear_min_part_size();
  ::PROTOBUF_NAMESPACE_ID::int32 min_part_size() const;
  void set_min_part_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_part_size() const;
  void _internal_set_min_part_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CompleteMultiUploadExtend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_part_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class TrsfArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.TrsfArgs) */ {
 public:
  inline TrsfArgs() : TrsfArgs(nullptr) {}
  virtual ~TrsfArgs();

  TrsfArgs(const TrsfArgs& from);
  TrsfArgs(TrsfArgs&& from) noexcept
    : TrsfArgs() {
    *this = ::std::move(from);
  }

  inline TrsfArgs& operator=(const TrsfArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrsfArgs& operator=(TrsfArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrsfArgs& default_instance();

  static inline const TrsfArgs* internal_default_instance() {
    return reinterpret_cast<const TrsfArgs*>(
               &_TrsfArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(TrsfArgs& a, TrsfArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(TrsfArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrsfArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrsfArgs* New() const final {
    return CreateMaybeMessage<TrsfArgs>(nullptr);
  }

  TrsfArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrsfArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrsfArgs& from);
  void MergeFrom(const TrsfArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrsfArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.TrsfArgs";
  }
  protected:
  explicit TrsfArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomheaderPlatFieldNumber = 1,
    kReservedattrFieldNumber = 5,
    kSrcCtimeFieldNumber = 2,
    kMtimeFieldNumber = 3,
    kForbidFieldNumber = 4,
    kAuthFieldNumber = 6,
  };
  // repeated .ClientCos.CustomHeader customheader_plat = 1;
  int customheader_plat_size() const;
  private:
  int _internal_customheader_plat_size() const;
  public:
  void clear_customheader_plat();
  ::ClientCos::CustomHeader* mutable_customheader_plat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
      mutable_customheader_plat();
  private:
  const ::ClientCos::CustomHeader& _internal_customheader_plat(int index) const;
  ::ClientCos::CustomHeader* _internal_add_customheader_plat();
  public:
  const ::ClientCos::CustomHeader& customheader_plat(int index) const;
  ::ClientCos::CustomHeader* add_customheader_plat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
      customheader_plat() const;

  // repeated .ClientCos.ReservedAttr reservedattr = 5;
  int reservedattr_size() const;
  private:
  int _internal_reservedattr_size() const;
  public:
  void clear_reservedattr();
  ::ClientCos::ReservedAttr* mutable_reservedattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
      mutable_reservedattr();
  private:
  const ::ClientCos::ReservedAttr& _internal_reservedattr(int index) const;
  ::ClientCos::ReservedAttr* _internal_add_reservedattr();
  public:
  const ::ClientCos::ReservedAttr& reservedattr(int index) const;
  ::ClientCos::ReservedAttr* add_reservedattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
      reservedattr() const;

  // optional uint32 src_ctime = 2;
  bool has_src_ctime() const;
  private:
  bool _internal_has_src_ctime() const;
  public:
  void clear_src_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_ctime() const;
  void set_src_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_ctime() const;
  void _internal_set_src_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 3 [default = 0];
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 forbid = 4;
  bool has_forbid() const;
  private:
  bool _internal_has_forbid() const;
  public:
  void clear_forbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid() const;
  void set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forbid() const;
  void _internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ClientCos.Authority auth = 6;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  ::ClientCos::Authority auth() const;
  void set_auth(::ClientCos::Authority value);
  private:
  ::ClientCos::Authority _internal_auth() const;
  void _internal_set_auth(::ClientCos::Authority value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.TrsfArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader > customheader_plat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr > reservedattr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forbid_;
  int auth_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AclInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AclInfo) */ {
 public:
  inline AclInfo() : AclInfo(nullptr) {}
  virtual ~AclInfo();

  AclInfo(const AclInfo& from);
  AclInfo(AclInfo&& from) noexcept
    : AclInfo() {
    *this = ::std::move(from);
  }

  inline AclInfo& operator=(const AclInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AclInfo& operator=(AclInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AclInfo& default_instance();

  static inline const AclInfo* internal_default_instance() {
    return reinterpret_cast<const AclInfo*>(
               &_AclInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(AclInfo& a, AclInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AclInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AclInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AclInfo* New() const final {
    return CreateMaybeMessage<AclInfo>(nullptr);
  }

  AclInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AclInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AclInfo& from);
  void MergeFrom(const AclInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AclInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AclInfo";
  }
  protected:
  explicit AclInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFieldNumber = 1,
    kPermFieldNumber = 2,
  };
  // optional bytes uin = 1;
  bool has_uin() const;
  private:
  bool _internal_has_uin() const;
  public:
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const void* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // optional int32 perm = 2;
  bool has_perm() const;
  private:
  bool _internal_has_perm() const;
  public:
  void clear_perm();
  ::PROTOBUF_NAMESPACE_ID::int32 perm() const;
  void set_perm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_perm() const;
  void _internal_set_perm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AclInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::PROTOBUF_NAMESPACE_ID::int32 perm_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class AuthInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.AuthInfo) */ {
 public:
  inline AuthInfo() : AuthInfo(nullptr) {}
  virtual ~AuthInfo();

  AuthInfo(const AuthInfo& from);
  AuthInfo(AuthInfo&& from) noexcept
    : AuthInfo() {
    *this = ::std::move(from);
  }

  inline AuthInfo& operator=(const AuthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthInfo& operator=(AuthInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthInfo& default_instance();

  static inline const AuthInfo* internal_default_instance() {
    return reinterpret_cast<const AuthInfo*>(
               &_AuthInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(AuthInfo& a, AuthInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthInfo* New() const final {
    return CreateMaybeMessage<AuthInfo>(nullptr);
  }

  AuthInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthInfo& from);
  void MergeFrom(const AuthInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.AuthInfo";
  }
  protected:
  explicit AuthInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqUinFieldNumber = 1,
    kContextPassFieldNumber = 2,
    kNeedAclFieldNumber = 3,
  };
  // optional bytes reqUin = 1;
  bool has_requin() const;
  private:
  bool _internal_has_requin() const;
  public:
  void clear_requin();
  const std::string& requin() const;
  void set_requin(const std::string& value);
  void set_requin(std::string&& value);
  void set_requin(const char* value);
  void set_requin(const void* value, size_t size);
  std::string* mutable_requin();
  std::string* release_requin();
  void set_allocated_requin(std::string* requin);
  private:
  const std::string& _internal_requin() const;
  void _internal_set_requin(const std::string& value);
  std::string* _internal_mutable_requin();
  public:

  // optional bool contextPass = 2;
  bool has_contextpass() const;
  private:
  bool _internal_has_contextpass() const;
  public:
  void clear_contextpass();
  bool contextpass() const;
  void set_contextpass(bool value);
  private:
  bool _internal_contextpass() const;
  void _internal_set_contextpass(bool value);
  public:

  // optional bool needAcl = 3;
  bool has_needacl() const;
  private:
  bool _internal_has_needacl() const;
  public:
  void clear_needacl();
  bool needacl() const;
  void set_needacl(bool value);
  private:
  bool _internal_needacl() const;
  void _internal_set_needacl(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.AuthInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requin_;
  bool contextpass_;
  bool needacl_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class OwnerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.OwnerInfo) */ {
 public:
  inline OwnerInfo() : OwnerInfo(nullptr) {}
  virtual ~OwnerInfo();

  OwnerInfo(const OwnerInfo& from);
  OwnerInfo(OwnerInfo&& from) noexcept
    : OwnerInfo() {
    *this = ::std::move(from);
  }

  inline OwnerInfo& operator=(const OwnerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerInfo& operator=(OwnerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OwnerInfo& default_instance();

  static inline const OwnerInfo* internal_default_instance() {
    return reinterpret_cast<const OwnerInfo*>(
               &_OwnerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(OwnerInfo& a, OwnerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OwnerInfo* New() const final {
    return CreateMaybeMessage<OwnerInfo>(nullptr);
  }

  OwnerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OwnerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OwnerInfo& from);
  void MergeFrom(const OwnerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.OwnerInfo";
  }
  protected:
  explicit OwnerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFieldNumber = 1,
  };
  // optional bytes uin = 1;
  bool has_uin() const;
  private:
  bool _internal_has_uin() const;
  public:
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const void* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.OwnerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CheckObjAclReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CheckObjAclReq) */ {
 public:
  inline CheckObjAclReq() : CheckObjAclReq(nullptr) {}
  virtual ~CheckObjAclReq();

  CheckObjAclReq(const CheckObjAclReq& from);
  CheckObjAclReq(CheckObjAclReq&& from) noexcept
    : CheckObjAclReq() {
    *this = ::std::move(from);
  }

  inline CheckObjAclReq& operator=(const CheckObjAclReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckObjAclReq& operator=(CheckObjAclReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckObjAclReq& default_instance();

  static inline const CheckObjAclReq* internal_default_instance() {
    return reinterpret_cast<const CheckObjAclReq*>(
               &_CheckObjAclReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CheckObjAclReq& a, CheckObjAclReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckObjAclReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckObjAclReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckObjAclReq* New() const final {
    return CreateMaybeMessage<CheckObjAclReq>(nullptr);
  }

  CheckObjAclReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckObjAclReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckObjAclReq& from);
  void MergeFrom(const CheckObjAclReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckObjAclReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CheckObjAclReq";
  }
  protected:
  explicit CheckObjAclReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
    kPermFieldNumber = 3,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional int32 perm = 3;
  bool has_perm() const;
  private:
  bool _internal_has_perm() const;
  public:
  void clear_perm();
  ::PROTOBUF_NAMESPACE_ID::int32 perm() const;
  void set_perm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_perm() const;
  void _internal_set_perm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.CheckObjAclReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 perm_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class CheckObjAclRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.CheckObjAclRsp) */ {
 public:
  inline CheckObjAclRsp() : CheckObjAclRsp(nullptr) {}
  virtual ~CheckObjAclRsp();

  CheckObjAclRsp(const CheckObjAclRsp& from);
  CheckObjAclRsp(CheckObjAclRsp&& from) noexcept
    : CheckObjAclRsp() {
    *this = ::std::move(from);
  }

  inline CheckObjAclRsp& operator=(const CheckObjAclRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckObjAclRsp& operator=(CheckObjAclRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckObjAclRsp& default_instance();

  static inline const CheckObjAclRsp* internal_default_instance() {
    return reinterpret_cast<const CheckObjAclRsp*>(
               &_CheckObjAclRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CheckObjAclRsp& a, CheckObjAclRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckObjAclRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckObjAclRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckObjAclRsp* New() const final {
    return CreateMaybeMessage<CheckObjAclRsp>(nullptr);
  }

  CheckObjAclRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckObjAclRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckObjAclRsp& from);
  void MergeFrom(const CheckObjAclRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckObjAclRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.CheckObjAclRsp";
  }
  protected:
  explicit CheckObjAclRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.CheckObjAclRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetObjAclReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetObjAclReq) */ {
 public:
  inline SetObjAclReq() : SetObjAclReq(nullptr) {}
  virtual ~SetObjAclReq();

  SetObjAclReq(const SetObjAclReq& from);
  SetObjAclReq(SetObjAclReq&& from) noexcept
    : SetObjAclReq() {
    *this = ::std::move(from);
  }

  inline SetObjAclReq& operator=(const SetObjAclReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetObjAclReq& operator=(SetObjAclReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetObjAclReq& default_instance();

  static inline const SetObjAclReq* internal_default_instance() {
    return reinterpret_cast<const SetObjAclReq*>(
               &_SetObjAclReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SetObjAclReq& a, SetObjAclReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetObjAclReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetObjAclReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetObjAclReq* New() const final {
    return CreateMaybeMessage<SetObjAclReq>(nullptr);
  }

  SetObjAclReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetObjAclReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetObjAclReq& from);
  void MergeFrom(const SetObjAclReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetObjAclReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetObjAclReq";
  }
  protected:
  explicit SetObjAclReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAclsFieldNumber = 3,
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .ClientCos.AclInfo acls = 3;
  int acls_size() const;
  private:
  int _internal_acls_size() const;
  public:
  void clear_acls();
  ::ClientCos::AclInfo* mutable_acls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
      mutable_acls();
  private:
  const ::ClientCos::AclInfo& _internal_acls(int index) const;
  ::ClientCos::AclInfo* _internal_add_acls();
  public:
  const ::ClientCos::AclInfo& acls(int index) const;
  ::ClientCos::AclInfo* add_acls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
      acls() const;

  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SetObjAclReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo > acls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetObjAclRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetObjAclRsp) */ {
 public:
  inline SetObjAclRsp() : SetObjAclRsp(nullptr) {}
  virtual ~SetObjAclRsp();

  SetObjAclRsp(const SetObjAclRsp& from);
  SetObjAclRsp(SetObjAclRsp&& from) noexcept
    : SetObjAclRsp() {
    *this = ::std::move(from);
  }

  inline SetObjAclRsp& operator=(const SetObjAclRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetObjAclRsp& operator=(SetObjAclRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetObjAclRsp& default_instance();

  static inline const SetObjAclRsp* internal_default_instance() {
    return reinterpret_cast<const SetObjAclRsp*>(
               &_SetObjAclRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SetObjAclRsp& a, SetObjAclRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetObjAclRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetObjAclRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetObjAclRsp* New() const final {
    return CreateMaybeMessage<SetObjAclRsp>(nullptr);
  }

  SetObjAclRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetObjAclRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetObjAclRsp& from);
  void MergeFrom(const SetObjAclRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetObjAclRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetObjAclRsp";
  }
  protected:
  explicit SetObjAclRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetObjAclRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetObjAclReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetObjAclReq) */ {
 public:
  inline GetObjAclReq() : GetObjAclReq(nullptr) {}
  virtual ~GetObjAclReq();

  GetObjAclReq(const GetObjAclReq& from);
  GetObjAclReq(GetObjAclReq&& from) noexcept
    : GetObjAclReq() {
    *this = ::std::move(from);
  }

  inline GetObjAclReq& operator=(const GetObjAclReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjAclReq& operator=(GetObjAclReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjAclReq& default_instance();

  static inline const GetObjAclReq* internal_default_instance() {
    return reinterpret_cast<const GetObjAclReq*>(
               &_GetObjAclReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(GetObjAclReq& a, GetObjAclReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjAclReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjAclReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjAclReq* New() const final {
    return CreateMaybeMessage<GetObjAclReq>(nullptr);
  }

  GetObjAclReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjAclReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjAclReq& from);
  void MergeFrom(const GetObjAclReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjAclReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetObjAclReq";
  }
  protected:
  explicit GetObjAclReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.GetObjAclReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetObjAclRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetObjAclRsp) */ {
 public:
  inline GetObjAclRsp() : GetObjAclRsp(nullptr) {}
  virtual ~GetObjAclRsp();

  GetObjAclRsp(const GetObjAclRsp& from);
  GetObjAclRsp(GetObjAclRsp&& from) noexcept
    : GetObjAclRsp() {
    *this = ::std::move(from);
  }

  inline GetObjAclRsp& operator=(const GetObjAclRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjAclRsp& operator=(GetObjAclRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjAclRsp& default_instance();

  static inline const GetObjAclRsp* internal_default_instance() {
    return reinterpret_cast<const GetObjAclRsp*>(
               &_GetObjAclRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(GetObjAclRsp& a, GetObjAclRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjAclRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjAclRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjAclRsp* New() const final {
    return CreateMaybeMessage<GetObjAclRsp>(nullptr);
  }

  GetObjAclRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjAclRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjAclRsp& from);
  void MergeFrom(const GetObjAclRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjAclRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetObjAclRsp";
  }
  protected:
  explicit GetObjAclRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAclsFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // repeated .ClientCos.AclInfo acls = 1;
  int acls_size() const;
  private:
  int _internal_acls_size() const;
  public:
  void clear_acls();
  ::ClientCos::AclInfo* mutable_acls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
      mutable_acls();
  private:
  const ::ClientCos::AclInfo& _internal_acls(int index) const;
  ::ClientCos::AclInfo* _internal_add_acls();
  public:
  const ::ClientCos::AclInfo& acls(int index) const;
  ::ClientCos::AclInfo* add_acls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
      acls() const;

  // optional .ClientCos.OwnerInfo owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::ClientCos::OwnerInfo& owner() const;
  ::ClientCos::OwnerInfo* release_owner();
  ::ClientCos::OwnerInfo* mutable_owner();
  void set_allocated_owner(::ClientCos::OwnerInfo* owner);
  private:
  const ::ClientCos::OwnerInfo& _internal_owner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::ClientCos::OwnerInfo* owner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_owner();

  // @@protoc_insertion_point(class_scope:ClientCos.GetObjAclRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo > acls_;
  ::ClientCos::OwnerInfo* owner_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketUinReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketUinReq) */ {
 public:
  inline SetBucketUinReq() : SetBucketUinReq(nullptr) {}
  virtual ~SetBucketUinReq();

  SetBucketUinReq(const SetBucketUinReq& from);
  SetBucketUinReq(SetBucketUinReq&& from) noexcept
    : SetBucketUinReq() {
    *this = ::std::move(from);
  }

  inline SetBucketUinReq& operator=(const SetBucketUinReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketUinReq& operator=(SetBucketUinReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketUinReq& default_instance();

  static inline const SetBucketUinReq* internal_default_instance() {
    return reinterpret_cast<const SetBucketUinReq*>(
               &_SetBucketUinReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(SetBucketUinReq& a, SetBucketUinReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketUinReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketUinReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketUinReq* New() const final {
    return CreateMaybeMessage<SetBucketUinReq>(nullptr);
  }

  SetBucketUinReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketUinReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketUinReq& from);
  void MergeFrom(const SetBucketUinReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketUinReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketUinReq";
  }
  protected:
  explicit SetBucketUinReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kBucketOwnerFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .ClientCos.OwnerInfo bucketOwner = 2;
  bool has_bucketowner() const;
  private:
  bool _internal_has_bucketowner() const;
  public:
  void clear_bucketowner();
  const ::ClientCos::OwnerInfo& bucketowner() const;
  ::ClientCos::OwnerInfo* release_bucketowner();
  ::ClientCos::OwnerInfo* mutable_bucketowner();
  void set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner);
  private:
  const ::ClientCos::OwnerInfo& _internal_bucketowner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_bucketowner();
  public:
  void unsafe_arena_set_allocated_bucketowner(
      ::ClientCos::OwnerInfo* bucketowner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_bucketowner();

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketUinReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::ClientCos::OwnerInfo* bucketowner_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketUinRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketUinRsp) */ {
 public:
  inline SetBucketUinRsp() : SetBucketUinRsp(nullptr) {}
  virtual ~SetBucketUinRsp();

  SetBucketUinRsp(const SetBucketUinRsp& from);
  SetBucketUinRsp(SetBucketUinRsp&& from) noexcept
    : SetBucketUinRsp() {
    *this = ::std::move(from);
  }

  inline SetBucketUinRsp& operator=(const SetBucketUinRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketUinRsp& operator=(SetBucketUinRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketUinRsp& default_instance();

  static inline const SetBucketUinRsp* internal_default_instance() {
    return reinterpret_cast<const SetBucketUinRsp*>(
               &_SetBucketUinRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(SetBucketUinRsp& a, SetBucketUinRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketUinRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketUinRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketUinRsp* New() const final {
    return CreateMaybeMessage<SetBucketUinRsp>(nullptr);
  }

  SetBucketUinRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketUinRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketUinRsp& from);
  void MergeFrom(const SetBucketUinRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketUinRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketUinRsp";
  }
  protected:
  explicit SetBucketUinRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketUinRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetBucketUinReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetBucketUinReq) */ {
 public:
  inline GetBucketUinReq() : GetBucketUinReq(nullptr) {}
  virtual ~GetBucketUinReq();

  GetBucketUinReq(const GetBucketUinReq& from);
  GetBucketUinReq(GetBucketUinReq&& from) noexcept
    : GetBucketUinReq() {
    *this = ::std::move(from);
  }

  inline GetBucketUinReq& operator=(const GetBucketUinReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBucketUinReq& operator=(GetBucketUinReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBucketUinReq& default_instance();

  static inline const GetBucketUinReq* internal_default_instance() {
    return reinterpret_cast<const GetBucketUinReq*>(
               &_GetBucketUinReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(GetBucketUinReq& a, GetBucketUinReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBucketUinReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBucketUinReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBucketUinReq* New() const final {
    return CreateMaybeMessage<GetBucketUinReq>(nullptr);
  }

  GetBucketUinReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBucketUinReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBucketUinReq& from);
  void MergeFrom(const GetBucketUinReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBucketUinReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetBucketUinReq";
  }
  protected:
  explicit GetBucketUinReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.GetBucketUinReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetBucketUinRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetBucketUinRsp) */ {
 public:
  inline GetBucketUinRsp() : GetBucketUinRsp(nullptr) {}
  virtual ~GetBucketUinRsp();

  GetBucketUinRsp(const GetBucketUinRsp& from);
  GetBucketUinRsp(GetBucketUinRsp&& from) noexcept
    : GetBucketUinRsp() {
    *this = ::std::move(from);
  }

  inline GetBucketUinRsp& operator=(const GetBucketUinRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBucketUinRsp& operator=(GetBucketUinRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBucketUinRsp& default_instance();

  static inline const GetBucketUinRsp* internal_default_instance() {
    return reinterpret_cast<const GetBucketUinRsp*>(
               &_GetBucketUinRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(GetBucketUinRsp& a, GetBucketUinRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBucketUinRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBucketUinRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBucketUinRsp* New() const final {
    return CreateMaybeMessage<GetBucketUinRsp>(nullptr);
  }

  GetBucketUinRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBucketUinRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBucketUinRsp& from);
  void MergeFrom(const GetBucketUinRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBucketUinRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetBucketUinRsp";
  }
  protected:
  explicit GetBucketUinRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketOwnerFieldNumber = 2,
  };
  // optional .ClientCos.OwnerInfo bucketOwner = 2;
  bool has_bucketowner() const;
  private:
  bool _internal_has_bucketowner() const;
  public:
  void clear_bucketowner();
  const ::ClientCos::OwnerInfo& bucketowner() const;
  ::ClientCos::OwnerInfo* release_bucketowner();
  ::ClientCos::OwnerInfo* mutable_bucketowner();
  void set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner);
  private:
  const ::ClientCos::OwnerInfo& _internal_bucketowner() const;
  ::ClientCos::OwnerInfo* _internal_mutable_bucketowner();
  public:
  void unsafe_arena_set_allocated_bucketowner(
      ::ClientCos::OwnerInfo* bucketowner);
  ::ClientCos::OwnerInfo* unsafe_arena_release_bucketowner();

  // @@protoc_insertion_point(class_scope:ClientCos.GetBucketUinRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ClientCos::OwnerInfo* bucketowner_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketLockReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketLockReq) */ {
 public:
  inline SetBucketLockReq() : SetBucketLockReq(nullptr) {}
  virtual ~SetBucketLockReq();

  SetBucketLockReq(const SetBucketLockReq& from);
  SetBucketLockReq(SetBucketLockReq&& from) noexcept
    : SetBucketLockReq() {
    *this = ::std::move(from);
  }

  inline SetBucketLockReq& operator=(const SetBucketLockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketLockReq& operator=(SetBucketLockReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketLockReq& default_instance();

  static inline const SetBucketLockReq* internal_default_instance() {
    return reinterpret_cast<const SetBucketLockReq*>(
               &_SetBucketLockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(SetBucketLockReq& a, SetBucketLockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketLockReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketLockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketLockReq* New() const final {
    return CreateMaybeMessage<SetBucketLockReq>(nullptr);
  }

  SetBucketLockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketLockReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketLockReq& from);
  void MergeFrom(const SetBucketLockReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketLockReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketLockReq";
  }
  protected:
  explicit SetBucketLockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kLockinfoFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .ClientCos.LockInfo lockinfo = 2;
  bool has_lockinfo() const;
  private:
  bool _internal_has_lockinfo() const;
  public:
  void clear_lockinfo();
  const ::ClientCos::LockInfo& lockinfo() const;
  ::ClientCos::LockInfo* release_lockinfo();
  ::ClientCos::LockInfo* mutable_lockinfo();
  void set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo);
  private:
  const ::ClientCos::LockInfo& _internal_lockinfo() const;
  ::ClientCos::LockInfo* _internal_mutable_lockinfo();
  public:
  void unsafe_arena_set_allocated_lockinfo(
      ::ClientCos::LockInfo* lockinfo);
  ::ClientCos::LockInfo* unsafe_arena_release_lockinfo();

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketLockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::ClientCos::LockInfo* lockinfo_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketLockRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketLockRsp) */ {
 public:
  inline SetBucketLockRsp() : SetBucketLockRsp(nullptr) {}
  virtual ~SetBucketLockRsp();

  SetBucketLockRsp(const SetBucketLockRsp& from);
  SetBucketLockRsp(SetBucketLockRsp&& from) noexcept
    : SetBucketLockRsp() {
    *this = ::std::move(from);
  }

  inline SetBucketLockRsp& operator=(const SetBucketLockRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketLockRsp& operator=(SetBucketLockRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketLockRsp& default_instance();

  static inline const SetBucketLockRsp* internal_default_instance() {
    return reinterpret_cast<const SetBucketLockRsp*>(
               &_SetBucketLockRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(SetBucketLockRsp& a, SetBucketLockRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketLockRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketLockRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketLockRsp* New() const final {
    return CreateMaybeMessage<SetBucketLockRsp>(nullptr);
  }

  SetBucketLockRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketLockRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketLockRsp& from);
  void MergeFrom(const SetBucketLockRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketLockRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketLockRsp";
  }
  protected:
  explicit SetBucketLockRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketLockRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetBucketLockReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetBucketLockReq) */ {
 public:
  inline GetBucketLockReq() : GetBucketLockReq(nullptr) {}
  virtual ~GetBucketLockReq();

  GetBucketLockReq(const GetBucketLockReq& from);
  GetBucketLockReq(GetBucketLockReq&& from) noexcept
    : GetBucketLockReq() {
    *this = ::std::move(from);
  }

  inline GetBucketLockReq& operator=(const GetBucketLockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBucketLockReq& operator=(GetBucketLockReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBucketLockReq& default_instance();

  static inline const GetBucketLockReq* internal_default_instance() {
    return reinterpret_cast<const GetBucketLockReq*>(
               &_GetBucketLockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(GetBucketLockReq& a, GetBucketLockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBucketLockReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBucketLockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBucketLockReq* New() const final {
    return CreateMaybeMessage<GetBucketLockReq>(nullptr);
  }

  GetBucketLockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBucketLockReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBucketLockReq& from);
  void MergeFrom(const GetBucketLockReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBucketLockReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetBucketLockReq";
  }
  protected:
  explicit GetBucketLockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.GetBucketLockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetBucketLockRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetBucketLockRsp) */ {
 public:
  inline GetBucketLockRsp() : GetBucketLockRsp(nullptr) {}
  virtual ~GetBucketLockRsp();

  GetBucketLockRsp(const GetBucketLockRsp& from);
  GetBucketLockRsp(GetBucketLockRsp&& from) noexcept
    : GetBucketLockRsp() {
    *this = ::std::move(from);
  }

  inline GetBucketLockRsp& operator=(const GetBucketLockRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBucketLockRsp& operator=(GetBucketLockRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBucketLockRsp& default_instance();

  static inline const GetBucketLockRsp* internal_default_instance() {
    return reinterpret_cast<const GetBucketLockRsp*>(
               &_GetBucketLockRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(GetBucketLockRsp& a, GetBucketLockRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBucketLockRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBucketLockRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBucketLockRsp* New() const final {
    return CreateMaybeMessage<GetBucketLockRsp>(nullptr);
  }

  GetBucketLockRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBucketLockRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBucketLockRsp& from);
  void MergeFrom(const GetBucketLockRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBucketLockRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetBucketLockRsp";
  }
  protected:
  explicit GetBucketLockRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockinfoFieldNumber = 1,
  };
  // optional .ClientCos.LockInfo lockinfo = 1;
  bool has_lockinfo() const;
  private:
  bool _internal_has_lockinfo() const;
  public:
  void clear_lockinfo();
  const ::ClientCos::LockInfo& lockinfo() const;
  ::ClientCos::LockInfo* release_lockinfo();
  ::ClientCos::LockInfo* mutable_lockinfo();
  void set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo);
  private:
  const ::ClientCos::LockInfo& _internal_lockinfo() const;
  ::ClientCos::LockInfo* _internal_mutable_lockinfo();
  public:
  void unsafe_arena_set_allocated_lockinfo(
      ::ClientCos::LockInfo* lockinfo);
  ::ClientCos::LockInfo* unsafe_arena_release_lockinfo();

  // @@protoc_insertion_point(class_scope:ClientCos.GetBucketLockRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ClientCos::LockInfo* lockinfo_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketInventoryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketInventoryReq) */ {
 public:
  inline SetBucketInventoryReq() : SetBucketInventoryReq(nullptr) {}
  virtual ~SetBucketInventoryReq();

  SetBucketInventoryReq(const SetBucketInventoryReq& from);
  SetBucketInventoryReq(SetBucketInventoryReq&& from) noexcept
    : SetBucketInventoryReq() {
    *this = ::std::move(from);
  }

  inline SetBucketInventoryReq& operator=(const SetBucketInventoryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketInventoryReq& operator=(SetBucketInventoryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketInventoryReq& default_instance();

  static inline const SetBucketInventoryReq* internal_default_instance() {
    return reinterpret_cast<const SetBucketInventoryReq*>(
               &_SetBucketInventoryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(SetBucketInventoryReq& a, SetBucketInventoryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketInventoryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketInventoryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketInventoryReq* New() const final {
    return CreateMaybeMessage<SetBucketInventoryReq>(nullptr);
  }

  SetBucketInventoryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketInventoryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketInventoryReq& from);
  void MergeFrom(const SetBucketInventoryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketInventoryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketInventoryReq";
  }
  protected:
  explicit SetBucketInventoryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kInventoryFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes inventory = 2;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  const std::string& inventory() const;
  void set_inventory(const std::string& value);
  void set_inventory(std::string&& value);
  void set_inventory(const char* value);
  void set_inventory(const void* value, size_t size);
  std::string* mutable_inventory();
  std::string* release_inventory();
  void set_allocated_inventory(std::string* inventory);
  private:
  const std::string& _internal_inventory() const;
  void _internal_set_inventory(const std::string& value);
  std::string* _internal_mutable_inventory();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketInventoryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventory_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetBucketInventoryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetBucketInventoryRsp) */ {
 public:
  inline SetBucketInventoryRsp() : SetBucketInventoryRsp(nullptr) {}
  virtual ~SetBucketInventoryRsp();

  SetBucketInventoryRsp(const SetBucketInventoryRsp& from);
  SetBucketInventoryRsp(SetBucketInventoryRsp&& from) noexcept
    : SetBucketInventoryRsp() {
    *this = ::std::move(from);
  }

  inline SetBucketInventoryRsp& operator=(const SetBucketInventoryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBucketInventoryRsp& operator=(SetBucketInventoryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBucketInventoryRsp& default_instance();

  static inline const SetBucketInventoryRsp* internal_default_instance() {
    return reinterpret_cast<const SetBucketInventoryRsp*>(
               &_SetBucketInventoryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(SetBucketInventoryRsp& a, SetBucketInventoryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBucketInventoryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBucketInventoryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBucketInventoryRsp* New() const final {
    return CreateMaybeMessage<SetBucketInventoryRsp>(nullptr);
  }

  SetBucketInventoryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBucketInventoryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBucketInventoryRsp& from);
  void MergeFrom(const SetBucketInventoryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBucketInventoryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetBucketInventoryRsp";
  }
  protected:
  explicit SetBucketInventoryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetBucketInventoryRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetBucketInventoryReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetBucketInventoryReq) */ {
 public:
  inline GetBucketInventoryReq() : GetBucketInventoryReq(nullptr) {}
  virtual ~GetBucketInventoryReq();

  GetBucketInventoryReq(const GetBucketInventoryReq& from);
  GetBucketInventoryReq(GetBucketInventoryReq&& from) noexcept
    : GetBucketInventoryReq() {
    *this = ::std::move(from);
  }

  inline GetBucketInventoryReq& operator=(const GetBucketInventoryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBucketInventoryReq& operator=(GetBucketInventoryReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBucketInventoryReq& default_instance();

  static inline const GetBucketInventoryReq* internal_default_instance() {
    return reinterpret_cast<const GetBucketInventoryReq*>(
               &_GetBucketInventoryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(GetBucketInventoryReq& a, GetBucketInventoryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBucketInventoryReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBucketInventoryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBucketInventoryReq* New() const final {
    return CreateMaybeMessage<GetBucketInventoryReq>(nullptr);
  }

  GetBucketInventoryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBucketInventoryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBucketInventoryReq& from);
  void MergeFrom(const GetBucketInventoryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBucketInventoryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetBucketInventoryReq";
  }
  protected:
  explicit GetBucketInventoryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.GetBucketInventoryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class GetBucketInventoryRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.GetBucketInventoryRsp) */ {
 public:
  inline GetBucketInventoryRsp() : GetBucketInventoryRsp(nullptr) {}
  virtual ~GetBucketInventoryRsp();

  GetBucketInventoryRsp(const GetBucketInventoryRsp& from);
  GetBucketInventoryRsp(GetBucketInventoryRsp&& from) noexcept
    : GetBucketInventoryRsp() {
    *this = ::std::move(from);
  }

  inline GetBucketInventoryRsp& operator=(const GetBucketInventoryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBucketInventoryRsp& operator=(GetBucketInventoryRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBucketInventoryRsp& default_instance();

  static inline const GetBucketInventoryRsp* internal_default_instance() {
    return reinterpret_cast<const GetBucketInventoryRsp*>(
               &_GetBucketInventoryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(GetBucketInventoryRsp& a, GetBucketInventoryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBucketInventoryRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBucketInventoryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBucketInventoryRsp* New() const final {
    return CreateMaybeMessage<GetBucketInventoryRsp>(nullptr);
  }

  GetBucketInventoryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBucketInventoryRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBucketInventoryRsp& from);
  void MergeFrom(const GetBucketInventoryRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBucketInventoryRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.GetBucketInventoryRsp";
  }
  protected:
  explicit GetBucketInventoryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryFieldNumber = 1,
  };
  // optional bytes inventory = 1;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  const std::string& inventory() const;
  void set_inventory(const std::string& value);
  void set_inventory(std::string&& value);
  void set_inventory(const char* value);
  void set_inventory(const void* value, size_t size);
  std::string* mutable_inventory();
  std::string* release_inventory();
  void set_allocated_inventory(std::string* inventory);
  private:
  const std::string& _internal_inventory() const;
  void _internal_set_inventory(const std::string& value);
  std::string* _internal_mutable_inventory();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.GetBucketInventoryRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventory_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class COSTransToCASReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.COSTransToCASReq) */ {
 public:
  inline COSTransToCASReq() : COSTransToCASReq(nullptr) {}
  virtual ~COSTransToCASReq();

  COSTransToCASReq(const COSTransToCASReq& from);
  COSTransToCASReq(COSTransToCASReq&& from) noexcept
    : COSTransToCASReq() {
    *this = ::std::move(from);
  }

  inline COSTransToCASReq& operator=(const COSTransToCASReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline COSTransToCASReq& operator=(COSTransToCASReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COSTransToCASReq& default_instance();

  static inline const COSTransToCASReq* internal_default_instance() {
    return reinterpret_cast<const COSTransToCASReq*>(
               &_COSTransToCASReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(COSTransToCASReq& a, COSTransToCASReq& b) {
    a.Swap(&b);
  }
  inline void Swap(COSTransToCASReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COSTransToCASReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COSTransToCASReq* New() const final {
    return CreateMaybeMessage<COSTransToCASReq>(nullptr);
  }

  COSTransToCASReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COSTransToCASReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COSTransToCASReq& from);
  void MergeFrom(const COSTransToCASReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COSTransToCASReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.COSTransToCASReq";
  }
  protected:
  explicit COSTransToCASReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSkFieldNumber = 4,
    kSwitchFlagFieldNumber = 3,
    kCheckMtimeFieldNumber = 5,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes sk = 4;
  bool has_sk() const;
  private:
  bool _internal_has_sk() const;
  public:
  void clear_sk();
  const std::string& sk() const;
  void set_sk(const std::string& value);
  void set_sk(std::string&& value);
  void set_sk(const char* value);
  void set_sk(const void* value, size_t size);
  std::string* mutable_sk();
  std::string* release_sk();
  void set_allocated_sk(std::string* sk);
  private:
  const std::string& _internal_sk() const;
  void _internal_set_sk(const std::string& value);
  std::string* _internal_mutable_sk();
  public:

  // optional bool switch_flag = 3;
  bool has_switch_flag() const;
  private:
  bool _internal_has_switch_flag() const;
  public:
  void clear_switch_flag();
  bool switch_flag() const;
  void set_switch_flag(bool value);
  private:
  bool _internal_switch_flag() const;
  void _internal_set_switch_flag(bool value);
  public:

  // optional uint32 check_mtime = 5;
  bool has_check_mtime() const;
  private:
  bool _internal_has_check_mtime() const;
  public:
  void clear_check_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 check_mtime() const;
  void set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_check_mtime() const;
  void _internal_set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.COSTransToCASReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sk_;
  bool switch_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 check_mtime_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class COSTransToCASRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.COSTransToCASRsp) */ {
 public:
  inline COSTransToCASRsp() : COSTransToCASRsp(nullptr) {}
  virtual ~COSTransToCASRsp();

  COSTransToCASRsp(const COSTransToCASRsp& from);
  COSTransToCASRsp(COSTransToCASRsp&& from) noexcept
    : COSTransToCASRsp() {
    *this = ::std::move(from);
  }

  inline COSTransToCASRsp& operator=(const COSTransToCASRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline COSTransToCASRsp& operator=(COSTransToCASRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COSTransToCASRsp& default_instance();

  static inline const COSTransToCASRsp* internal_default_instance() {
    return reinterpret_cast<const COSTransToCASRsp*>(
               &_COSTransToCASRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(COSTransToCASRsp& a, COSTransToCASRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(COSTransToCASRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COSTransToCASRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COSTransToCASRsp* New() const final {
    return CreateMaybeMessage<COSTransToCASRsp>(nullptr);
  }

  COSTransToCASRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COSTransToCASRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COSTransToCASRsp& from);
  void MergeFrom(const COSTransToCASRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COSTransToCASRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.COSTransToCASRsp";
  }
  protected:
  explicit COSTransToCASRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.COSTransToCASRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListDirectReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListDirectReq) */ {
 public:
  inline ListDirectReq() : ListDirectReq(nullptr) {}
  virtual ~ListDirectReq();

  ListDirectReq(const ListDirectReq& from);
  ListDirectReq(ListDirectReq&& from) noexcept
    : ListDirectReq() {
    *this = ::std::move(from);
  }

  inline ListDirectReq& operator=(const ListDirectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDirectReq& operator=(ListDirectReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDirectReq& default_instance();

  static inline const ListDirectReq* internal_default_instance() {
    return reinterpret_cast<const ListDirectReq*>(
               &_ListDirectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(ListDirectReq& a, ListDirectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDirectReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDirectReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDirectReq* New() const final {
    return CreateMaybeMessage<ListDirectReq>(nullptr);
  }

  ListDirectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDirectReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDirectReq& from);
  void MergeFrom(const ListDirectReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDirectReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListDirectReq";
  }
  protected:
  explicit ListDirectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListDirectReq_ListType ListType;
  static constexpr ListType LIST =
    ListDirectReq_ListType_LIST;
  static constexpr ListType LISTVER =
    ListDirectReq_ListType_LISTVER;
  static constexpr ListType LISTUF =
    ListDirectReq_ListType_LISTUF;
  static inline bool ListType_IsValid(int value) {
    return ListDirectReq_ListType_IsValid(value);
  }
  static constexpr ListType ListType_MIN =
    ListDirectReq_ListType_ListType_MIN;
  static constexpr ListType ListType_MAX =
    ListDirectReq_ListType_ListType_MAX;
  static constexpr int ListType_ARRAYSIZE =
    ListDirectReq_ListType_ListType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ListType_descriptor() {
    return ListDirectReq_ListType_descriptor();
  }
  template<typename T>
  static inline const std::string& ListType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ListType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ListType_Name.");
    return ListDirectReq_ListType_Name(enum_t_value);
  }
  static inline bool ListType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ListType* value) {
    return ListDirectReq_ListType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kMarkerFieldNumber = 2,
    kSubmarkerFieldNumber = 3,
    kDelimiterFieldNumber = 4,
    kBadIpFieldNumber = 10,
    kFlagFieldNumber = 6,
    kTypeFieldNumber = 7,
    kBadPortFieldNumber = 11,
    kCountFieldNumber = 5,
  };
  // optional string prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional string marker = 2 [default = ""];
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  const std::string& marker() const;
  void set_marker(const std::string& value);
  void set_marker(std::string&& value);
  void set_marker(const char* value);
  void set_marker(const char* value, size_t size);
  std::string* mutable_marker();
  std::string* release_marker();
  void set_allocated_marker(std::string* marker);
  private:
  const std::string& _internal_marker() const;
  void _internal_set_marker(const std::string& value);
  std::string* _internal_mutable_marker();
  public:

  // optional string submarker = 3 [default = ""];
  bool has_submarker() const;
  private:
  bool _internal_has_submarker() const;
  public:
  void clear_submarker();
  const std::string& submarker() const;
  void set_submarker(const std::string& value);
  void set_submarker(std::string&& value);
  void set_submarker(const char* value);
  void set_submarker(const char* value, size_t size);
  std::string* mutable_submarker();
  std::string* release_submarker();
  void set_allocated_submarker(std::string* submarker);
  private:
  const std::string& _internal_submarker() const;
  void _internal_set_submarker(const std::string& value);
  std::string* _internal_mutable_submarker();
  public:

  // optional string delimiter = 4 [default = ""];
  bool has_delimiter() const;
  private:
  bool _internal_has_delimiter() const;
  public:
  void clear_delimiter();
  const std::string& delimiter() const;
  void set_delimiter(const std::string& value);
  void set_delimiter(std::string&& value);
  void set_delimiter(const char* value);
  void set_delimiter(const char* value, size_t size);
  std::string* mutable_delimiter();
  std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // optional string bad_ip = 10;
  bool has_bad_ip() const;
  private:
  bool _internal_has_bad_ip() const;
  public:
  void clear_bad_ip();
  const std::string& bad_ip() const;
  void set_bad_ip(const std::string& value);
  void set_bad_ip(std::string&& value);
  void set_bad_ip(const char* value);
  void set_bad_ip(const char* value, size_t size);
  std::string* mutable_bad_ip();
  std::string* release_bad_ip();
  void set_allocated_bad_ip(std::string* bad_ip);
  private:
  const std::string& _internal_bad_ip() const;
  void _internal_set_bad_ip(const std::string& value);
  std::string* _internal_mutable_bad_ip();
  public:

  // optional bool flag = 6 [default = false];
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // optional .ClientCos.ListDirectReq.ListType type = 7 [default = LIST];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ClientCos::ListDirectReq_ListType type() const;
  void set_type(::ClientCos::ListDirectReq_ListType value);
  private:
  ::ClientCos::ListDirectReq_ListType _internal_type() const;
  void _internal_set_type(::ClientCos::ListDirectReq_ListType value);
  public:

  // optional uint32 bad_port = 11;
  bool has_bad_port() const;
  private:
  bool _internal_has_bad_port() const;
  public:
  void clear_bad_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 bad_port() const;
  void set_bad_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bad_port() const;
  void _internal_set_bad_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 5 [default = 200];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListDirectReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submarker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bad_ip_;
  bool flag_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bad_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class ListDirectRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.ListDirectRsp) */ {
 public:
  inline ListDirectRsp() : ListDirectRsp(nullptr) {}
  virtual ~ListDirectRsp();

  ListDirectRsp(const ListDirectRsp& from);
  ListDirectRsp(ListDirectRsp&& from) noexcept
    : ListDirectRsp() {
    *this = ::std::move(from);
  }

  inline ListDirectRsp& operator=(const ListDirectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDirectRsp& operator=(ListDirectRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDirectRsp& default_instance();

  static inline const ListDirectRsp* internal_default_instance() {
    return reinterpret_cast<const ListDirectRsp*>(
               &_ListDirectRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(ListDirectRsp& a, ListDirectRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDirectRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDirectRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDirectRsp* New() const final {
    return CreateMaybeMessage<ListDirectRsp>(nullptr);
  }

  ListDirectRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDirectRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDirectRsp& from);
  void MergeFrom(const ListDirectRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDirectRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.ListDirectRsp";
  }
  protected:
  explicit ListDirectRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kTermFieldNumber = 3,
  };
  // required string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 term = 3;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.ListDirectRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class MigrateFinFileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.MigrateFinFileReq) */ {
 public:
  inline MigrateFinFileReq() : MigrateFinFileReq(nullptr) {}
  virtual ~MigrateFinFileReq();

  MigrateFinFileReq(const MigrateFinFileReq& from);
  MigrateFinFileReq(MigrateFinFileReq&& from) noexcept
    : MigrateFinFileReq() {
    *this = ::std::move(from);
  }

  inline MigrateFinFileReq& operator=(const MigrateFinFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateFinFileReq& operator=(MigrateFinFileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrateFinFileReq& default_instance();

  static inline const MigrateFinFileReq* internal_default_instance() {
    return reinterpret_cast<const MigrateFinFileReq*>(
               &_MigrateFinFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(MigrateFinFileReq& a, MigrateFinFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateFinFileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateFinFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrateFinFileReq* New() const final {
    return CreateMaybeMessage<MigrateFinFileReq>(nullptr);
  }

  MigrateFinFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrateFinFileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrateFinFileReq& from);
  void MergeFrom(const MigrateFinFileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateFinFileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.MigrateFinFileReq";
  }
  protected:
  explicit MigrateFinFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.MigrateFinFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class MigrateFinFileRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.MigrateFinFileRsp) */ {
 public:
  inline MigrateFinFileRsp() : MigrateFinFileRsp(nullptr) {}
  virtual ~MigrateFinFileRsp();

  MigrateFinFileRsp(const MigrateFinFileRsp& from);
  MigrateFinFileRsp(MigrateFinFileRsp&& from) noexcept
    : MigrateFinFileRsp() {
    *this = ::std::move(from);
  }

  inline MigrateFinFileRsp& operator=(const MigrateFinFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateFinFileRsp& operator=(MigrateFinFileRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrateFinFileRsp& default_instance();

  static inline const MigrateFinFileRsp* internal_default_instance() {
    return reinterpret_cast<const MigrateFinFileRsp*>(
               &_MigrateFinFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(MigrateFinFileRsp& a, MigrateFinFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateFinFileRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateFinFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrateFinFileRsp* New() const final {
    return CreateMaybeMessage<MigrateFinFileRsp>(nullptr);
  }

  MigrateFinFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrateFinFileRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrateFinFileRsp& from);
  void MergeFrom(const MigrateFinFileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateFinFileRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.MigrateFinFileRsp";
  }
  protected:
  explicit MigrateFinFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilekeyFieldNumber = 1,
    kUuidFieldNumber = 2,
    kFiletypeFieldNumber = 3,
  };
  // optional bytes filekey = 1;
  bool has_filekey() const;
  private:
  bool _internal_has_filekey() const;
  public:
  void clear_filekey();
  const std::string& filekey() const;
  void set_filekey(const std::string& value);
  void set_filekey(std::string&& value);
  void set_filekey(const char* value);
  void set_filekey(const void* value, size_t size);
  std::string* mutable_filekey();
  std::string* release_filekey();
  void set_allocated_filekey(std::string* filekey);
  private:
  const std::string& _internal_filekey() const;
  void _internal_set_filekey(const std::string& value);
  std::string* _internal_mutable_filekey();
  public:

  // optional bytes uuid = 2;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional uint32 filetype = 3;
  bool has_filetype() const;
  private:
  bool _internal_has_filetype() const;
  public:
  void clear_filetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 filetype() const;
  void set_filetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filetype() const;
  void _internal_set_filetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.MigrateFinFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filekey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filetype_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class MigrateUnFinFileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.MigrateUnFinFileReq) */ {
 public:
  inline MigrateUnFinFileReq() : MigrateUnFinFileReq(nullptr) {}
  virtual ~MigrateUnFinFileReq();

  MigrateUnFinFileReq(const MigrateUnFinFileReq& from);
  MigrateUnFinFileReq(MigrateUnFinFileReq&& from) noexcept
    : MigrateUnFinFileReq() {
    *this = ::std::move(from);
  }

  inline MigrateUnFinFileReq& operator=(const MigrateUnFinFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateUnFinFileReq& operator=(MigrateUnFinFileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrateUnFinFileReq& default_instance();

  static inline const MigrateUnFinFileReq* internal_default_instance() {
    return reinterpret_cast<const MigrateUnFinFileReq*>(
               &_MigrateUnFinFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(MigrateUnFinFileReq& a, MigrateUnFinFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateUnFinFileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateUnFinFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrateUnFinFileReq* New() const final {
    return CreateMaybeMessage<MigrateUnFinFileReq>(nullptr);
  }

  MigrateUnFinFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrateUnFinFileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrateUnFinFileReq& from);
  void MergeFrom(const MigrateUnFinFileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateUnFinFileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.MigrateUnFinFileReq";
  }
  protected:
  explicit MigrateUnFinFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kUploadidFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes uploadid = 2;
  bool has_uploadid() const;
  private:
  bool _internal_has_uploadid() const;
  public:
  void clear_uploadid();
  const std::string& uploadid() const;
  void set_uploadid(const std::string& value);
  void set_uploadid(std::string&& value);
  void set_uploadid(const char* value);
  void set_uploadid(const void* value, size_t size);
  std::string* mutable_uploadid();
  std::string* release_uploadid();
  void set_allocated_uploadid(std::string* uploadid);
  private:
  const std::string& _internal_uploadid() const;
  void _internal_set_uploadid(const std::string& value);
  std::string* _internal_mutable_uploadid();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.MigrateUnFinFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadid_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class MigrateUnFinFileRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.MigrateUnFinFileRsp) */ {
 public:
  inline MigrateUnFinFileRsp() : MigrateUnFinFileRsp(nullptr) {}
  virtual ~MigrateUnFinFileRsp();

  MigrateUnFinFileRsp(const MigrateUnFinFileRsp& from);
  MigrateUnFinFileRsp(MigrateUnFinFileRsp&& from) noexcept
    : MigrateUnFinFileRsp() {
    *this = ::std::move(from);
  }

  inline MigrateUnFinFileRsp& operator=(const MigrateUnFinFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateUnFinFileRsp& operator=(MigrateUnFinFileRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrateUnFinFileRsp& default_instance();

  static inline const MigrateUnFinFileRsp* internal_default_instance() {
    return reinterpret_cast<const MigrateUnFinFileRsp*>(
               &_MigrateUnFinFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(MigrateUnFinFileRsp& a, MigrateUnFinFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateUnFinFileRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateUnFinFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrateUnFinFileRsp* New() const final {
    return CreateMaybeMessage<MigrateUnFinFileRsp>(nullptr);
  }

  MigrateUnFinFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrateUnFinFileRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrateUnFinFileRsp& from);
  void MergeFrom(const MigrateUnFinFileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateUnFinFileRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.MigrateUnFinFileRsp";
  }
  protected:
  explicit MigrateUnFinFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.MigrateUnFinFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetMigrateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetMigrateReq) */ {
 public:
  inline SetMigrateReq() : SetMigrateReq(nullptr) {}
  virtual ~SetMigrateReq();

  SetMigrateReq(const SetMigrateReq& from);
  SetMigrateReq(SetMigrateReq&& from) noexcept
    : SetMigrateReq() {
    *this = ::std::move(from);
  }

  inline SetMigrateReq& operator=(const SetMigrateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMigrateReq& operator=(SetMigrateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMigrateReq& default_instance();

  static inline const SetMigrateReq* internal_default_instance() {
    return reinterpret_cast<const SetMigrateReq*>(
               &_SetMigrateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(SetMigrateReq& a, SetMigrateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMigrateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMigrateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMigrateReq* New() const final {
    return CreateMaybeMessage<SetMigrateReq>(nullptr);
  }

  SetMigrateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMigrateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMigrateReq& from);
  void MergeFrom(const SetMigrateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMigrateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetMigrateReq";
  }
  protected:
  explicit SetMigrateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .ClientCos.MigrateStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::ClientCos::MigrateStatus status() const;
  void set_status(::ClientCos::MigrateStatus value);
  private:
  ::ClientCos::MigrateStatus _internal_status() const;
  void _internal_set_status(::ClientCos::MigrateStatus value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.SetMigrateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  int status_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SetMigrateRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.SetMigrateRsp) */ {
 public:
  inline SetMigrateRsp() : SetMigrateRsp(nullptr) {}
  virtual ~SetMigrateRsp();

  SetMigrateRsp(const SetMigrateRsp& from);
  SetMigrateRsp(SetMigrateRsp&& from) noexcept
    : SetMigrateRsp() {
    *this = ::std::move(from);
  }

  inline SetMigrateRsp& operator=(const SetMigrateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMigrateRsp& operator=(SetMigrateRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMigrateRsp& default_instance();

  static inline const SetMigrateRsp* internal_default_instance() {
    return reinterpret_cast<const SetMigrateRsp*>(
               &_SetMigrateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(SetMigrateRsp& a, SetMigrateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMigrateRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMigrateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMigrateRsp* New() const final {
    return CreateMaybeMessage<SetMigrateRsp>(nullptr);
  }

  SetMigrateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMigrateRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMigrateRsp& from);
  void MergeFrom(const SetMigrateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMigrateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.SetMigrateRsp";
  }
  protected:
  explicit SetMigrateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.SetMigrateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DelNoHashFileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DelNoHashFileReq) */ {
 public:
  inline DelNoHashFileReq() : DelNoHashFileReq(nullptr) {}
  virtual ~DelNoHashFileReq();

  DelNoHashFileReq(const DelNoHashFileReq& from);
  DelNoHashFileReq(DelNoHashFileReq&& from) noexcept
    : DelNoHashFileReq() {
    *this = ::std::move(from);
  }

  inline DelNoHashFileReq& operator=(const DelNoHashFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelNoHashFileReq& operator=(DelNoHashFileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelNoHashFileReq& default_instance();

  static inline const DelNoHashFileReq* internal_default_instance() {
    return reinterpret_cast<const DelNoHashFileReq*>(
               &_DelNoHashFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(DelNoHashFileReq& a, DelNoHashFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DelNoHashFileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelNoHashFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelNoHashFileReq* New() const final {
    return CreateMaybeMessage<DelNoHashFileReq>(nullptr);
  }

  DelNoHashFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelNoHashFileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelNoHashFileReq& from);
  void MergeFrom(const DelNoHashFileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelNoHashFileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DelNoHashFileReq";
  }
  protected:
  explicit DelNoHashFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kUuidFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes uuid = 2;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:ClientCos.DelNoHashFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// -------------------------------------------------------------------

class DelNoHashFileRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCos.DelNoHashFileRsp) */ {
 public:
  inline DelNoHashFileRsp() : DelNoHashFileRsp(nullptr) {}
  virtual ~DelNoHashFileRsp();

  DelNoHashFileRsp(const DelNoHashFileRsp& from);
  DelNoHashFileRsp(DelNoHashFileRsp&& from) noexcept
    : DelNoHashFileRsp() {
    *this = ::std::move(from);
  }

  inline DelNoHashFileRsp& operator=(const DelNoHashFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelNoHashFileRsp& operator=(DelNoHashFileRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelNoHashFileRsp& default_instance();

  static inline const DelNoHashFileRsp* internal_default_instance() {
    return reinterpret_cast<const DelNoHashFileRsp*>(
               &_DelNoHashFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(DelNoHashFileRsp& a, DelNoHashFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DelNoHashFileRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelNoHashFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelNoHashFileRsp* New() const final {
    return CreateMaybeMessage<DelNoHashFileRsp>(nullptr);
  }

  DelNoHashFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelNoHashFileRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelNoHashFileRsp& from);
  void MergeFrom(const DelNoHashFileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelNoHashFileRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCos.DelNoHashFileRsp";
  }
  protected:
  explicit DelNoHashFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cosv4_5fclient_2eproto);
    return ::descriptor_table_cosv4_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientCos.DelNoHashFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cosv4_5fclient_2eproto;
};
// ===================================================================

static const int kCosReqMsgBodyFieldNumber = 100;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::ClientCos::AppMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::ClientCos::CosReqMsg >, 11, false >
  CosReqMsg_body;
static const int kCosRspMsgBodyFieldNumber = 101;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::ClientCos::AppMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::ClientCos::CosRspMsg >, 11, false >
  CosRspMsg_body;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CosAppMsg

// required uint32 seq = 1;
inline bool CosAppMsg::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosAppMsg::has_seq() const {
  return _internal_has_seq();
}
inline void CosAppMsg::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosAppMsg::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosAppMsg::seq() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosAppMsg.seq)
  return _internal_seq();
}
inline void CosAppMsg::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  seq_ = value;
}
inline void CosAppMsg::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosAppMsg.seq)
}

// required .ClientCos.AppMsg body = 2;
inline bool CosAppMsg::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || body_ != nullptr);
  return value;
}
inline bool CosAppMsg::has_body() const {
  return _internal_has_body();
}
inline void CosAppMsg::clear_body() {
  if (body_ != nullptr) body_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::AppMsg& CosAppMsg::_internal_body() const {
  const ::ClientCos::AppMsg* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AppMsg&>(
      ::ClientCos::_AppMsg_default_instance_);
}
inline const ::ClientCos::AppMsg& CosAppMsg::body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosAppMsg.body)
  return _internal_body();
}
inline void CosAppMsg::unsafe_arena_set_allocated_body(
    ::ClientCos::AppMsg* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosAppMsg.body)
}
inline ::ClientCos::AppMsg* CosAppMsg::release_body() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::AppMsg* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AppMsg* CosAppMsg::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosAppMsg.body)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::AppMsg* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::ClientCos::AppMsg* CosAppMsg::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AppMsg>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::ClientCos::AppMsg* CosAppMsg::mutable_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosAppMsg.body)
  return _internal_mutable_body();
}
inline void CosAppMsg::set_allocated_body(::ClientCos::AppMsg* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosAppMsg.body)
}

// -------------------------------------------------------------------

// AppMsg

// required .ClientCos.AppMsg.Type type = 1;
inline bool AppMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppMsg::has_type() const {
  return _internal_has_type();
}
inline void AppMsg::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ClientCos::AppMsg_Type AppMsg::_internal_type() const {
  return static_cast< ::ClientCos::AppMsg_Type >(type_);
}
inline ::ClientCos::AppMsg_Type AppMsg::type() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppMsg.type)
  return _internal_type();
}
inline void AppMsg::_internal_set_type(::ClientCos::AppMsg_Type value) {
  assert(::ClientCos::AppMsg_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void AppMsg::set_type(::ClientCos::AppMsg_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppMsg.type)
}

// -------------------------------------------------------------------

// CosReqMsg

// optional bytes request_id = 1;
inline bool CosReqMsg::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosReqMsg::has_request_id() const {
  return _internal_has_request_id();
}
inline void CosReqMsg::clear_request_id() {
  request_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosReqMsg::request_id() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.request_id)
  return _internal_request_id();
}
inline void CosReqMsg::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosReqMsg.request_id)
}
inline std::string* CosReqMsg::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CosReqMsg::_internal_request_id() const {
  return request_id_.Get();
}
inline void CosReqMsg::_internal_set_request_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosReqMsg::set_request_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CosReqMsg.request_id)
}
inline void CosReqMsg::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CosReqMsg.request_id)
}
inline void CosReqMsg::set_request_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CosReqMsg.request_id)
}
inline std::string* CosReqMsg::_internal_mutable_request_id() {
  _has_bits_[0] |= 0x00000001u;
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosReqMsg::release_request_id() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosReqMsg::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.request_id)
}

// optional bytes cgi_attr = 2;
inline bool CosReqMsg::_internal_has_cgi_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosReqMsg::has_cgi_attr() const {
  return _internal_has_cgi_attr();
}
inline void CosReqMsg::clear_cgi_attr() {
  cgi_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CosReqMsg::cgi_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.cgi_attr)
  return _internal_cgi_attr();
}
inline void CosReqMsg::set_cgi_attr(const std::string& value) {
  _internal_set_cgi_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosReqMsg.cgi_attr)
}
inline std::string* CosReqMsg::mutable_cgi_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.cgi_attr)
  return _internal_mutable_cgi_attr();
}
inline const std::string& CosReqMsg::_internal_cgi_attr() const {
  return cgi_attr_.Get();
}
inline void CosReqMsg::_internal_set_cgi_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cgi_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosReqMsg::set_cgi_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cgi_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CosReqMsg.cgi_attr)
}
inline void CosReqMsg::set_cgi_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cgi_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CosReqMsg.cgi_attr)
}
inline void CosReqMsg::set_cgi_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cgi_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CosReqMsg.cgi_attr)
}
inline std::string* CosReqMsg::_internal_mutable_cgi_attr() {
  _has_bits_[0] |= 0x00000002u;
  return cgi_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosReqMsg::release_cgi_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.cgi_attr)
  if (!_internal_has_cgi_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cgi_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosReqMsg::set_allocated_cgi_attr(std::string* cgi_attr) {
  if (cgi_attr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cgi_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgi_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.cgi_attr)
}

// optional bytes cgi_params = 3;
inline bool CosReqMsg::_internal_has_cgi_params() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CosReqMsg::has_cgi_params() const {
  return _internal_has_cgi_params();
}
inline void CosReqMsg::clear_cgi_params() {
  cgi_params_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CosReqMsg::cgi_params() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.cgi_params)
  return _internal_cgi_params();
}
inline void CosReqMsg::set_cgi_params(const std::string& value) {
  _internal_set_cgi_params(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosReqMsg.cgi_params)
}
inline std::string* CosReqMsg::mutable_cgi_params() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.cgi_params)
  return _internal_mutable_cgi_params();
}
inline const std::string& CosReqMsg::_internal_cgi_params() const {
  return cgi_params_.Get();
}
inline void CosReqMsg::_internal_set_cgi_params(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cgi_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosReqMsg::set_cgi_params(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cgi_params_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CosReqMsg.cgi_params)
}
inline void CosReqMsg::set_cgi_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cgi_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CosReqMsg.cgi_params)
}
inline void CosReqMsg::set_cgi_params(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cgi_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CosReqMsg.cgi_params)
}
inline std::string* CosReqMsg::_internal_mutable_cgi_params() {
  _has_bits_[0] |= 0x00000004u;
  return cgi_params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosReqMsg::release_cgi_params() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.cgi_params)
  if (!_internal_has_cgi_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cgi_params_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosReqMsg::set_allocated_cgi_params(std::string* cgi_params) {
  if (cgi_params != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cgi_params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgi_params,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.cgi_params)
}

// required .ClientCos.CosReqMsg.SubType sub_type = 10;
inline bool CosReqMsg::_internal_has_sub_type() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CosReqMsg::has_sub_type() const {
  return _internal_has_sub_type();
}
inline void CosReqMsg::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::ClientCos::CosReqMsg_SubType CosReqMsg::_internal_sub_type() const {
  return static_cast< ::ClientCos::CosReqMsg_SubType >(sub_type_);
}
inline ::ClientCos::CosReqMsg_SubType CosReqMsg::sub_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.sub_type)
  return _internal_sub_type();
}
inline void CosReqMsg::_internal_set_sub_type(::ClientCos::CosReqMsg_SubType value) {
  assert(::ClientCos::CosReqMsg_SubType_IsValid(value));
  _has_bits_[1] |= 0x00800000u;
  sub_type_ = value;
}
inline void CosReqMsg::set_sub_type(::ClientCos::CosReqMsg_SubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosReqMsg.sub_type)
}

// optional .ClientCos.BucketCreateReq BucketCreateReq_body = 21;
inline bool CosReqMsg::_internal_has_bucketcreatereq_body() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || bucketcreatereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_bucketcreatereq_body() const {
  return _internal_has_bucketcreatereq_body();
}
inline void CosReqMsg::clear_bucketcreatereq_body() {
  if (bucketcreatereq_body_ != nullptr) bucketcreatereq_body_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ClientCos::BucketCreateReq& CosReqMsg::_internal_bucketcreatereq_body() const {
  const ::ClientCos::BucketCreateReq* p = bucketcreatereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketCreateReq&>(
      ::ClientCos::_BucketCreateReq_default_instance_);
}
inline const ::ClientCos::BucketCreateReq& CosReqMsg::bucketcreatereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.BucketCreateReq_body)
  return _internal_bucketcreatereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_bucketcreatereq_body(
    ::ClientCos::BucketCreateReq* bucketcreatereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketcreatereq_body_);
  }
  bucketcreatereq_body_ = bucketcreatereq_body;
  if (bucketcreatereq_body) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.BucketCreateReq_body)
}
inline ::ClientCos::BucketCreateReq* CosReqMsg::release_bucketcreatereq_body() {
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::BucketCreateReq* temp = bucketcreatereq_body_;
  bucketcreatereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketCreateReq* CosReqMsg::unsafe_arena_release_bucketcreatereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.BucketCreateReq_body)
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::BucketCreateReq* temp = bucketcreatereq_body_;
  bucketcreatereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketCreateReq* CosReqMsg::_internal_mutable_bucketcreatereq_body() {
  _has_bits_[0] |= 0x00000008u;
  if (bucketcreatereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketCreateReq>(GetArena());
    bucketcreatereq_body_ = p;
  }
  return bucketcreatereq_body_;
}
inline ::ClientCos::BucketCreateReq* CosReqMsg::mutable_bucketcreatereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.BucketCreateReq_body)
  return _internal_mutable_bucketcreatereq_body();
}
inline void CosReqMsg::set_allocated_bucketcreatereq_body(::ClientCos::BucketCreateReq* bucketcreatereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketcreatereq_body_;
  }
  if (bucketcreatereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketcreatereq_body);
    if (message_arena != submessage_arena) {
      bucketcreatereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketcreatereq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bucketcreatereq_body_ = bucketcreatereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.BucketCreateReq_body)
}

// optional .ClientCos.BucketAttrModifyReq BucketAttrModifyReq_body = 22;
inline bool CosReqMsg::_internal_has_bucketattrmodifyreq_body() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || bucketattrmodifyreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_bucketattrmodifyreq_body() const {
  return _internal_has_bucketattrmodifyreq_body();
}
inline void CosReqMsg::clear_bucketattrmodifyreq_body() {
  if (bucketattrmodifyreq_body_ != nullptr) bucketattrmodifyreq_body_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ClientCos::BucketAttrModifyReq& CosReqMsg::_internal_bucketattrmodifyreq_body() const {
  const ::ClientCos::BucketAttrModifyReq* p = bucketattrmodifyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketAttrModifyReq&>(
      ::ClientCos::_BucketAttrModifyReq_default_instance_);
}
inline const ::ClientCos::BucketAttrModifyReq& CosReqMsg::bucketattrmodifyreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.BucketAttrModifyReq_body)
  return _internal_bucketattrmodifyreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_bucketattrmodifyreq_body(
    ::ClientCos::BucketAttrModifyReq* bucketattrmodifyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketattrmodifyreq_body_);
  }
  bucketattrmodifyreq_body_ = bucketattrmodifyreq_body;
  if (bucketattrmodifyreq_body) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.BucketAttrModifyReq_body)
}
inline ::ClientCos::BucketAttrModifyReq* CosReqMsg::release_bucketattrmodifyreq_body() {
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::BucketAttrModifyReq* temp = bucketattrmodifyreq_body_;
  bucketattrmodifyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketAttrModifyReq* CosReqMsg::unsafe_arena_release_bucketattrmodifyreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.BucketAttrModifyReq_body)
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::BucketAttrModifyReq* temp = bucketattrmodifyreq_body_;
  bucketattrmodifyreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketAttrModifyReq* CosReqMsg::_internal_mutable_bucketattrmodifyreq_body() {
  _has_bits_[0] |= 0x00000010u;
  if (bucketattrmodifyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketAttrModifyReq>(GetArena());
    bucketattrmodifyreq_body_ = p;
  }
  return bucketattrmodifyreq_body_;
}
inline ::ClientCos::BucketAttrModifyReq* CosReqMsg::mutable_bucketattrmodifyreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.BucketAttrModifyReq_body)
  return _internal_mutable_bucketattrmodifyreq_body();
}
inline void CosReqMsg::set_allocated_bucketattrmodifyreq_body(::ClientCos::BucketAttrModifyReq* bucketattrmodifyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketattrmodifyreq_body_;
  }
  if (bucketattrmodifyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketattrmodifyreq_body);
    if (message_arena != submessage_arena) {
      bucketattrmodifyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketattrmodifyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bucketattrmodifyreq_body_ = bucketattrmodifyreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.BucketAttrModifyReq_body)
}

// optional .ClientCos.BucketAttrQueryReq BucketAttrQueryReq_body = 23;
inline bool CosReqMsg::_internal_has_bucketattrqueryreq_body() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || bucketattrqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_bucketattrqueryreq_body() const {
  return _internal_has_bucketattrqueryreq_body();
}
inline void CosReqMsg::clear_bucketattrqueryreq_body() {
  if (bucketattrqueryreq_body_ != nullptr) bucketattrqueryreq_body_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ClientCos::BucketAttrQueryReq& CosReqMsg::_internal_bucketattrqueryreq_body() const {
  const ::ClientCos::BucketAttrQueryReq* p = bucketattrqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketAttrQueryReq&>(
      ::ClientCos::_BucketAttrQueryReq_default_instance_);
}
inline const ::ClientCos::BucketAttrQueryReq& CosReqMsg::bucketattrqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.BucketAttrQueryReq_body)
  return _internal_bucketattrqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_bucketattrqueryreq_body(
    ::ClientCos::BucketAttrQueryReq* bucketattrqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketattrqueryreq_body_);
  }
  bucketattrqueryreq_body_ = bucketattrqueryreq_body;
  if (bucketattrqueryreq_body) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.BucketAttrQueryReq_body)
}
inline ::ClientCos::BucketAttrQueryReq* CosReqMsg::release_bucketattrqueryreq_body() {
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::BucketAttrQueryReq* temp = bucketattrqueryreq_body_;
  bucketattrqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketAttrQueryReq* CosReqMsg::unsafe_arena_release_bucketattrqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.BucketAttrQueryReq_body)
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::BucketAttrQueryReq* temp = bucketattrqueryreq_body_;
  bucketattrqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketAttrQueryReq* CosReqMsg::_internal_mutable_bucketattrqueryreq_body() {
  _has_bits_[0] |= 0x00000020u;
  if (bucketattrqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketAttrQueryReq>(GetArena());
    bucketattrqueryreq_body_ = p;
  }
  return bucketattrqueryreq_body_;
}
inline ::ClientCos::BucketAttrQueryReq* CosReqMsg::mutable_bucketattrqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.BucketAttrQueryReq_body)
  return _internal_mutable_bucketattrqueryreq_body();
}
inline void CosReqMsg::set_allocated_bucketattrqueryreq_body(::ClientCos::BucketAttrQueryReq* bucketattrqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketattrqueryreq_body_;
  }
  if (bucketattrqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketattrqueryreq_body);
    if (message_arena != submessage_arena) {
      bucketattrqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketattrqueryreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  bucketattrqueryreq_body_ = bucketattrqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.BucketAttrQueryReq_body)
}

// optional .ClientCos.DirCreateReq DirCreateReq_body = 24;
inline bool CosReqMsg::_internal_has_dircreatereq_body() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || dircreatereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_dircreatereq_body() const {
  return _internal_has_dircreatereq_body();
}
inline void CosReqMsg::clear_dircreatereq_body() {
  if (dircreatereq_body_ != nullptr) dircreatereq_body_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ClientCos::DirCreateReq& CosReqMsg::_internal_dircreatereq_body() const {
  const ::ClientCos::DirCreateReq* p = dircreatereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DirCreateReq&>(
      ::ClientCos::_DirCreateReq_default_instance_);
}
inline const ::ClientCos::DirCreateReq& CosReqMsg::dircreatereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.DirCreateReq_body)
  return _internal_dircreatereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_dircreatereq_body(
    ::ClientCos::DirCreateReq* dircreatereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dircreatereq_body_);
  }
  dircreatereq_body_ = dircreatereq_body;
  if (dircreatereq_body) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.DirCreateReq_body)
}
inline ::ClientCos::DirCreateReq* CosReqMsg::release_dircreatereq_body() {
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::DirCreateReq* temp = dircreatereq_body_;
  dircreatereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DirCreateReq* CosReqMsg::unsafe_arena_release_dircreatereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.DirCreateReq_body)
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::DirCreateReq* temp = dircreatereq_body_;
  dircreatereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DirCreateReq* CosReqMsg::_internal_mutable_dircreatereq_body() {
  _has_bits_[0] |= 0x00000040u;
  if (dircreatereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DirCreateReq>(GetArena());
    dircreatereq_body_ = p;
  }
  return dircreatereq_body_;
}
inline ::ClientCos::DirCreateReq* CosReqMsg::mutable_dircreatereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.DirCreateReq_body)
  return _internal_mutable_dircreatereq_body();
}
inline void CosReqMsg::set_allocated_dircreatereq_body(::ClientCos::DirCreateReq* dircreatereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dircreatereq_body_;
  }
  if (dircreatereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dircreatereq_body);
    if (message_arena != submessage_arena) {
      dircreatereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dircreatereq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dircreatereq_body_ = dircreatereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.DirCreateReq_body)
}

// optional .ClientCos.ObjAttrQueryReq ObjAttrQueryReq_body = 25;
inline bool CosReqMsg::_internal_has_objattrqueryreq_body() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || objattrqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_objattrqueryreq_body() const {
  return _internal_has_objattrqueryreq_body();
}
inline void CosReqMsg::clear_objattrqueryreq_body() {
  if (objattrqueryreq_body_ != nullptr) objattrqueryreq_body_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ClientCos::ObjAttrQueryReq& CosReqMsg::_internal_objattrqueryreq_body() const {
  const ::ClientCos::ObjAttrQueryReq* p = objattrqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjAttrQueryReq&>(
      ::ClientCos::_ObjAttrQueryReq_default_instance_);
}
inline const ::ClientCos::ObjAttrQueryReq& CosReqMsg::objattrqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ObjAttrQueryReq_body)
  return _internal_objattrqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_objattrqueryreq_body(
    ::ClientCos::ObjAttrQueryReq* objattrqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objattrqueryreq_body_);
  }
  objattrqueryreq_body_ = objattrqueryreq_body;
  if (objattrqueryreq_body) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ObjAttrQueryReq_body)
}
inline ::ClientCos::ObjAttrQueryReq* CosReqMsg::release_objattrqueryreq_body() {
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::ObjAttrQueryReq* temp = objattrqueryreq_body_;
  objattrqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjAttrQueryReq* CosReqMsg::unsafe_arena_release_objattrqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ObjAttrQueryReq_body)
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::ObjAttrQueryReq* temp = objattrqueryreq_body_;
  objattrqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjAttrQueryReq* CosReqMsg::_internal_mutable_objattrqueryreq_body() {
  _has_bits_[0] |= 0x00000080u;
  if (objattrqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjAttrQueryReq>(GetArena());
    objattrqueryreq_body_ = p;
  }
  return objattrqueryreq_body_;
}
inline ::ClientCos::ObjAttrQueryReq* CosReqMsg::mutable_objattrqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ObjAttrQueryReq_body)
  return _internal_mutable_objattrqueryreq_body();
}
inline void CosReqMsg::set_allocated_objattrqueryreq_body(::ClientCos::ObjAttrQueryReq* objattrqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objattrqueryreq_body_;
  }
  if (objattrqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objattrqueryreq_body);
    if (message_arena != submessage_arena) {
      objattrqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objattrqueryreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  objattrqueryreq_body_ = objattrqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ObjAttrQueryReq_body)
}

// optional .ClientCos.ObjAttrModifyReq ObjAttrModifyReq_body = 26;
inline bool CosReqMsg::_internal_has_objattrmodifyreq_body() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || objattrmodifyreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_objattrmodifyreq_body() const {
  return _internal_has_objattrmodifyreq_body();
}
inline void CosReqMsg::clear_objattrmodifyreq_body() {
  if (objattrmodifyreq_body_ != nullptr) objattrmodifyreq_body_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ClientCos::ObjAttrModifyReq& CosReqMsg::_internal_objattrmodifyreq_body() const {
  const ::ClientCos::ObjAttrModifyReq* p = objattrmodifyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjAttrModifyReq&>(
      ::ClientCos::_ObjAttrModifyReq_default_instance_);
}
inline const ::ClientCos::ObjAttrModifyReq& CosReqMsg::objattrmodifyreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ObjAttrModifyReq_body)
  return _internal_objattrmodifyreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_objattrmodifyreq_body(
    ::ClientCos::ObjAttrModifyReq* objattrmodifyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objattrmodifyreq_body_);
  }
  objattrmodifyreq_body_ = objattrmodifyreq_body;
  if (objattrmodifyreq_body) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ObjAttrModifyReq_body)
}
inline ::ClientCos::ObjAttrModifyReq* CosReqMsg::release_objattrmodifyreq_body() {
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ObjAttrModifyReq* temp = objattrmodifyreq_body_;
  objattrmodifyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjAttrModifyReq* CosReqMsg::unsafe_arena_release_objattrmodifyreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ObjAttrModifyReq_body)
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ObjAttrModifyReq* temp = objattrmodifyreq_body_;
  objattrmodifyreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjAttrModifyReq* CosReqMsg::_internal_mutable_objattrmodifyreq_body() {
  _has_bits_[0] |= 0x00000100u;
  if (objattrmodifyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjAttrModifyReq>(GetArena());
    objattrmodifyreq_body_ = p;
  }
  return objattrmodifyreq_body_;
}
inline ::ClientCos::ObjAttrModifyReq* CosReqMsg::mutable_objattrmodifyreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ObjAttrModifyReq_body)
  return _internal_mutable_objattrmodifyreq_body();
}
inline void CosReqMsg::set_allocated_objattrmodifyreq_body(::ClientCos::ObjAttrModifyReq* objattrmodifyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objattrmodifyreq_body_;
  }
  if (objattrmodifyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objattrmodifyreq_body);
    if (message_arena != submessage_arena) {
      objattrmodifyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objattrmodifyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  objattrmodifyreq_body_ = objattrmodifyreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ObjAttrModifyReq_body)
}

// optional .ClientCos.DeleteReq DeleteReq_body = 27;
inline bool CosReqMsg::_internal_has_deletereq_body() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || deletereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_deletereq_body() const {
  return _internal_has_deletereq_body();
}
inline void CosReqMsg::clear_deletereq_body() {
  if (deletereq_body_ != nullptr) deletereq_body_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ClientCos::DeleteReq& CosReqMsg::_internal_deletereq_body() const {
  const ::ClientCos::DeleteReq* p = deletereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DeleteReq&>(
      ::ClientCos::_DeleteReq_default_instance_);
}
inline const ::ClientCos::DeleteReq& CosReqMsg::deletereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.DeleteReq_body)
  return _internal_deletereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_deletereq_body(
    ::ClientCos::DeleteReq* deletereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deletereq_body_);
  }
  deletereq_body_ = deletereq_body;
  if (deletereq_body) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.DeleteReq_body)
}
inline ::ClientCos::DeleteReq* CosReqMsg::release_deletereq_body() {
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::DeleteReq* temp = deletereq_body_;
  deletereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DeleteReq* CosReqMsg::unsafe_arena_release_deletereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.DeleteReq_body)
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::DeleteReq* temp = deletereq_body_;
  deletereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DeleteReq* CosReqMsg::_internal_mutable_deletereq_body() {
  _has_bits_[0] |= 0x00000200u;
  if (deletereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DeleteReq>(GetArena());
    deletereq_body_ = p;
  }
  return deletereq_body_;
}
inline ::ClientCos::DeleteReq* CosReqMsg::mutable_deletereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.DeleteReq_body)
  return _internal_mutable_deletereq_body();
}
inline void CosReqMsg::set_allocated_deletereq_body(::ClientCos::DeleteReq* deletereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deletereq_body_;
  }
  if (deletereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deletereq_body);
    if (message_arena != submessage_arena) {
      deletereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deletereq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  deletereq_body_ = deletereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.DeleteReq_body)
}

// optional .ClientCos.ListReq ListReq_body = 28;
inline bool CosReqMsg::_internal_has_listreq_body() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || listreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_listreq_body() const {
  return _internal_has_listreq_body();
}
inline void CosReqMsg::clear_listreq_body() {
  if (listreq_body_ != nullptr) listreq_body_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::ClientCos::ListReq& CosReqMsg::_internal_listreq_body() const {
  const ::ClientCos::ListReq* p = listreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListReq&>(
      ::ClientCos::_ListReq_default_instance_);
}
inline const ::ClientCos::ListReq& CosReqMsg::listreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ListReq_body)
  return _internal_listreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_listreq_body(
    ::ClientCos::ListReq* listreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listreq_body_);
  }
  listreq_body_ = listreq_body;
  if (listreq_body) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ListReq_body)
}
inline ::ClientCos::ListReq* CosReqMsg::release_listreq_body() {
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::ListReq* temp = listreq_body_;
  listreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListReq* CosReqMsg::unsafe_arena_release_listreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ListReq_body)
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::ListReq* temp = listreq_body_;
  listreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListReq* CosReqMsg::_internal_mutable_listreq_body() {
  _has_bits_[0] |= 0x00000400u;
  if (listreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListReq>(GetArena());
    listreq_body_ = p;
  }
  return listreq_body_;
}
inline ::ClientCos::ListReq* CosReqMsg::mutable_listreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ListReq_body)
  return _internal_mutable_listreq_body();
}
inline void CosReqMsg::set_allocated_listreq_body(::ClientCos::ListReq* listreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listreq_body_;
  }
  if (listreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listreq_body);
    if (message_arena != submessage_arena) {
      listreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  listreq_body_ = listreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ListReq_body)
}

// optional .ClientCos.AppAttrQueryReq AppAttrQueryReq_body = 29;
inline bool CosReqMsg::_internal_has_appattrqueryreq_body() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || appattrqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_appattrqueryreq_body() const {
  return _internal_has_appattrqueryreq_body();
}
inline void CosReqMsg::clear_appattrqueryreq_body() {
  if (appattrqueryreq_body_ != nullptr) appattrqueryreq_body_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::ClientCos::AppAttrQueryReq& CosReqMsg::_internal_appattrqueryreq_body() const {
  const ::ClientCos::AppAttrQueryReq* p = appattrqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AppAttrQueryReq&>(
      ::ClientCos::_AppAttrQueryReq_default_instance_);
}
inline const ::ClientCos::AppAttrQueryReq& CosReqMsg::appattrqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.AppAttrQueryReq_body)
  return _internal_appattrqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_appattrqueryreq_body(
    ::ClientCos::AppAttrQueryReq* appattrqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appattrqueryreq_body_);
  }
  appattrqueryreq_body_ = appattrqueryreq_body;
  if (appattrqueryreq_body) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.AppAttrQueryReq_body)
}
inline ::ClientCos::AppAttrQueryReq* CosReqMsg::release_appattrqueryreq_body() {
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::AppAttrQueryReq* temp = appattrqueryreq_body_;
  appattrqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AppAttrQueryReq* CosReqMsg::unsafe_arena_release_appattrqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.AppAttrQueryReq_body)
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::AppAttrQueryReq* temp = appattrqueryreq_body_;
  appattrqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::AppAttrQueryReq* CosReqMsg::_internal_mutable_appattrqueryreq_body() {
  _has_bits_[0] |= 0x00000800u;
  if (appattrqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AppAttrQueryReq>(GetArena());
    appattrqueryreq_body_ = p;
  }
  return appattrqueryreq_body_;
}
inline ::ClientCos::AppAttrQueryReq* CosReqMsg::mutable_appattrqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.AppAttrQueryReq_body)
  return _internal_mutable_appattrqueryreq_body();
}
inline void CosReqMsg::set_allocated_appattrqueryreq_body(::ClientCos::AppAttrQueryReq* appattrqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appattrqueryreq_body_;
  }
  if (appattrqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appattrqueryreq_body);
    if (message_arena != submessage_arena) {
      appattrqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appattrqueryreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  appattrqueryreq_body_ = appattrqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.AppAttrQueryReq_body)
}

// optional .ClientCos.AppAttrModifyReq AppAttrModifyReq_body = 30;
inline bool CosReqMsg::_internal_has_appattrmodifyreq_body() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || appattrmodifyreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_appattrmodifyreq_body() const {
  return _internal_has_appattrmodifyreq_body();
}
inline void CosReqMsg::clear_appattrmodifyreq_body() {
  if (appattrmodifyreq_body_ != nullptr) appattrmodifyreq_body_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::ClientCos::AppAttrModifyReq& CosReqMsg::_internal_appattrmodifyreq_body() const {
  const ::ClientCos::AppAttrModifyReq* p = appattrmodifyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AppAttrModifyReq&>(
      ::ClientCos::_AppAttrModifyReq_default_instance_);
}
inline const ::ClientCos::AppAttrModifyReq& CosReqMsg::appattrmodifyreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.AppAttrModifyReq_body)
  return _internal_appattrmodifyreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_appattrmodifyreq_body(
    ::ClientCos::AppAttrModifyReq* appattrmodifyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appattrmodifyreq_body_);
  }
  appattrmodifyreq_body_ = appattrmodifyreq_body;
  if (appattrmodifyreq_body) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.AppAttrModifyReq_body)
}
inline ::ClientCos::AppAttrModifyReq* CosReqMsg::release_appattrmodifyreq_body() {
  _has_bits_[0] &= ~0x00001000u;
  ::ClientCos::AppAttrModifyReq* temp = appattrmodifyreq_body_;
  appattrmodifyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AppAttrModifyReq* CosReqMsg::unsafe_arena_release_appattrmodifyreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.AppAttrModifyReq_body)
  _has_bits_[0] &= ~0x00001000u;
  ::ClientCos::AppAttrModifyReq* temp = appattrmodifyreq_body_;
  appattrmodifyreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::AppAttrModifyReq* CosReqMsg::_internal_mutable_appattrmodifyreq_body() {
  _has_bits_[0] |= 0x00001000u;
  if (appattrmodifyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AppAttrModifyReq>(GetArena());
    appattrmodifyreq_body_ = p;
  }
  return appattrmodifyreq_body_;
}
inline ::ClientCos::AppAttrModifyReq* CosReqMsg::mutable_appattrmodifyreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.AppAttrModifyReq_body)
  return _internal_mutable_appattrmodifyreq_body();
}
inline void CosReqMsg::set_allocated_appattrmodifyreq_body(::ClientCos::AppAttrModifyReq* appattrmodifyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appattrmodifyreq_body_;
  }
  if (appattrmodifyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appattrmodifyreq_body);
    if (message_arena != submessage_arena) {
      appattrmodifyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appattrmodifyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  appattrmodifyreq_body_ = appattrmodifyreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.AppAttrModifyReq_body)
}

// optional .ClientCos.PreviewFileAttrQueryReq PreviewFileAttrQueryReq_body = 31;
inline bool CosReqMsg::_internal_has_previewfileattrqueryreq_body() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || previewfileattrqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_previewfileattrqueryreq_body() const {
  return _internal_has_previewfileattrqueryreq_body();
}
inline void CosReqMsg::clear_previewfileattrqueryreq_body() {
  if (previewfileattrqueryreq_body_ != nullptr) previewfileattrqueryreq_body_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::ClientCos::PreviewFileAttrQueryReq& CosReqMsg::_internal_previewfileattrqueryreq_body() const {
  const ::ClientCos::PreviewFileAttrQueryReq* p = previewfileattrqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::PreviewFileAttrQueryReq&>(
      ::ClientCos::_PreviewFileAttrQueryReq_default_instance_);
}
inline const ::ClientCos::PreviewFileAttrQueryReq& CosReqMsg::previewfileattrqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.PreviewFileAttrQueryReq_body)
  return _internal_previewfileattrqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_previewfileattrqueryreq_body(
    ::ClientCos::PreviewFileAttrQueryReq* previewfileattrqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previewfileattrqueryreq_body_);
  }
  previewfileattrqueryreq_body_ = previewfileattrqueryreq_body;
  if (previewfileattrqueryreq_body) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.PreviewFileAttrQueryReq_body)
}
inline ::ClientCos::PreviewFileAttrQueryReq* CosReqMsg::release_previewfileattrqueryreq_body() {
  _has_bits_[0] &= ~0x00002000u;
  ::ClientCos::PreviewFileAttrQueryReq* temp = previewfileattrqueryreq_body_;
  previewfileattrqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::PreviewFileAttrQueryReq* CosReqMsg::unsafe_arena_release_previewfileattrqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.PreviewFileAttrQueryReq_body)
  _has_bits_[0] &= ~0x00002000u;
  ::ClientCos::PreviewFileAttrQueryReq* temp = previewfileattrqueryreq_body_;
  previewfileattrqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::PreviewFileAttrQueryReq* CosReqMsg::_internal_mutable_previewfileattrqueryreq_body() {
  _has_bits_[0] |= 0x00002000u;
  if (previewfileattrqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::PreviewFileAttrQueryReq>(GetArena());
    previewfileattrqueryreq_body_ = p;
  }
  return previewfileattrqueryreq_body_;
}
inline ::ClientCos::PreviewFileAttrQueryReq* CosReqMsg::mutable_previewfileattrqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.PreviewFileAttrQueryReq_body)
  return _internal_mutable_previewfileattrqueryreq_body();
}
inline void CosReqMsg::set_allocated_previewfileattrqueryreq_body(::ClientCos::PreviewFileAttrQueryReq* previewfileattrqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previewfileattrqueryreq_body_;
  }
  if (previewfileattrqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previewfileattrqueryreq_body);
    if (message_arena != submessage_arena) {
      previewfileattrqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previewfileattrqueryreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  previewfileattrqueryreq_body_ = previewfileattrqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.PreviewFileAttrQueryReq_body)
}

// optional .ClientCos.ObjModTimeStampReq ObjModTimeStampReq_body = 32;
inline bool CosReqMsg::_internal_has_objmodtimestampreq_body() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || objmodtimestampreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_objmodtimestampreq_body() const {
  return _internal_has_objmodtimestampreq_body();
}
inline void CosReqMsg::clear_objmodtimestampreq_body() {
  if (objmodtimestampreq_body_ != nullptr) objmodtimestampreq_body_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::ClientCos::ObjModTimeStampReq& CosReqMsg::_internal_objmodtimestampreq_body() const {
  const ::ClientCos::ObjModTimeStampReq* p = objmodtimestampreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjModTimeStampReq&>(
      ::ClientCos::_ObjModTimeStampReq_default_instance_);
}
inline const ::ClientCos::ObjModTimeStampReq& CosReqMsg::objmodtimestampreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ObjModTimeStampReq_body)
  return _internal_objmodtimestampreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_objmodtimestampreq_body(
    ::ClientCos::ObjModTimeStampReq* objmodtimestampreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objmodtimestampreq_body_);
  }
  objmodtimestampreq_body_ = objmodtimestampreq_body;
  if (objmodtimestampreq_body) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ObjModTimeStampReq_body)
}
inline ::ClientCos::ObjModTimeStampReq* CosReqMsg::release_objmodtimestampreq_body() {
  _has_bits_[0] &= ~0x00004000u;
  ::ClientCos::ObjModTimeStampReq* temp = objmodtimestampreq_body_;
  objmodtimestampreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjModTimeStampReq* CosReqMsg::unsafe_arena_release_objmodtimestampreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ObjModTimeStampReq_body)
  _has_bits_[0] &= ~0x00004000u;
  ::ClientCos::ObjModTimeStampReq* temp = objmodtimestampreq_body_;
  objmodtimestampreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjModTimeStampReq* CosReqMsg::_internal_mutable_objmodtimestampreq_body() {
  _has_bits_[0] |= 0x00004000u;
  if (objmodtimestampreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjModTimeStampReq>(GetArena());
    objmodtimestampreq_body_ = p;
  }
  return objmodtimestampreq_body_;
}
inline ::ClientCos::ObjModTimeStampReq* CosReqMsg::mutable_objmodtimestampreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ObjModTimeStampReq_body)
  return _internal_mutable_objmodtimestampreq_body();
}
inline void CosReqMsg::set_allocated_objmodtimestampreq_body(::ClientCos::ObjModTimeStampReq* objmodtimestampreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objmodtimestampreq_body_;
  }
  if (objmodtimestampreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objmodtimestampreq_body);
    if (message_arena != submessage_arena) {
      objmodtimestampreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objmodtimestampreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  objmodtimestampreq_body_ = objmodtimestampreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ObjModTimeStampReq_body)
}

// optional .ClientCos.ListMutiobjReq ListMutiobjReq_body = 33;
inline bool CosReqMsg::_internal_has_listmutiobjreq_body() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || listmutiobjreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_listmutiobjreq_body() const {
  return _internal_has_listmutiobjreq_body();
}
inline void CosReqMsg::clear_listmutiobjreq_body() {
  if (listmutiobjreq_body_ != nullptr) listmutiobjreq_body_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::ClientCos::ListMutiobjReq& CosReqMsg::_internal_listmutiobjreq_body() const {
  const ::ClientCos::ListMutiobjReq* p = listmutiobjreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListMutiobjReq&>(
      ::ClientCos::_ListMutiobjReq_default_instance_);
}
inline const ::ClientCos::ListMutiobjReq& CosReqMsg::listmutiobjreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ListMutiobjReq_body)
  return _internal_listmutiobjreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_listmutiobjreq_body(
    ::ClientCos::ListMutiobjReq* listmutiobjreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listmutiobjreq_body_);
  }
  listmutiobjreq_body_ = listmutiobjreq_body;
  if (listmutiobjreq_body) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ListMutiobjReq_body)
}
inline ::ClientCos::ListMutiobjReq* CosReqMsg::release_listmutiobjreq_body() {
  _has_bits_[0] &= ~0x00008000u;
  ::ClientCos::ListMutiobjReq* temp = listmutiobjreq_body_;
  listmutiobjreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListMutiobjReq* CosReqMsg::unsafe_arena_release_listmutiobjreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ListMutiobjReq_body)
  _has_bits_[0] &= ~0x00008000u;
  ::ClientCos::ListMutiobjReq* temp = listmutiobjreq_body_;
  listmutiobjreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListMutiobjReq* CosReqMsg::_internal_mutable_listmutiobjreq_body() {
  _has_bits_[0] |= 0x00008000u;
  if (listmutiobjreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListMutiobjReq>(GetArena());
    listmutiobjreq_body_ = p;
  }
  return listmutiobjreq_body_;
}
inline ::ClientCos::ListMutiobjReq* CosReqMsg::mutable_listmutiobjreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ListMutiobjReq_body)
  return _internal_mutable_listmutiobjreq_body();
}
inline void CosReqMsg::set_allocated_listmutiobjreq_body(::ClientCos::ListMutiobjReq* listmutiobjreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listmutiobjreq_body_;
  }
  if (listmutiobjreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listmutiobjreq_body);
    if (message_arena != submessage_arena) {
      listmutiobjreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listmutiobjreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  listmutiobjreq_body_ = listmutiobjreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ListMutiobjReq_body)
}

// optional .ClientCos.UnfinObjAttrModifyReq UnfinObjAttrModifyReq_body = 34;
inline bool CosReqMsg::_internal_has_unfinobjattrmodifyreq_body() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || unfinobjattrmodifyreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_unfinobjattrmodifyreq_body() const {
  return _internal_has_unfinobjattrmodifyreq_body();
}
inline void CosReqMsg::clear_unfinobjattrmodifyreq_body() {
  if (unfinobjattrmodifyreq_body_ != nullptr) unfinobjattrmodifyreq_body_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::ClientCos::UnfinObjAttrModifyReq& CosReqMsg::_internal_unfinobjattrmodifyreq_body() const {
  const ::ClientCos::UnfinObjAttrModifyReq* p = unfinobjattrmodifyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::UnfinObjAttrModifyReq&>(
      ::ClientCos::_UnfinObjAttrModifyReq_default_instance_);
}
inline const ::ClientCos::UnfinObjAttrModifyReq& CosReqMsg::unfinobjattrmodifyreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.UnfinObjAttrModifyReq_body)
  return _internal_unfinobjattrmodifyreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_unfinobjattrmodifyreq_body(
    ::ClientCos::UnfinObjAttrModifyReq* unfinobjattrmodifyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unfinobjattrmodifyreq_body_);
  }
  unfinobjattrmodifyreq_body_ = unfinobjattrmodifyreq_body;
  if (unfinobjattrmodifyreq_body) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.UnfinObjAttrModifyReq_body)
}
inline ::ClientCos::UnfinObjAttrModifyReq* CosReqMsg::release_unfinobjattrmodifyreq_body() {
  _has_bits_[0] &= ~0x00010000u;
  ::ClientCos::UnfinObjAttrModifyReq* temp = unfinobjattrmodifyreq_body_;
  unfinobjattrmodifyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::UnfinObjAttrModifyReq* CosReqMsg::unsafe_arena_release_unfinobjattrmodifyreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.UnfinObjAttrModifyReq_body)
  _has_bits_[0] &= ~0x00010000u;
  ::ClientCos::UnfinObjAttrModifyReq* temp = unfinobjattrmodifyreq_body_;
  unfinobjattrmodifyreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::UnfinObjAttrModifyReq* CosReqMsg::_internal_mutable_unfinobjattrmodifyreq_body() {
  _has_bits_[0] |= 0x00010000u;
  if (unfinobjattrmodifyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::UnfinObjAttrModifyReq>(GetArena());
    unfinobjattrmodifyreq_body_ = p;
  }
  return unfinobjattrmodifyreq_body_;
}
inline ::ClientCos::UnfinObjAttrModifyReq* CosReqMsg::mutable_unfinobjattrmodifyreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.UnfinObjAttrModifyReq_body)
  return _internal_mutable_unfinobjattrmodifyreq_body();
}
inline void CosReqMsg::set_allocated_unfinobjattrmodifyreq_body(::ClientCos::UnfinObjAttrModifyReq* unfinobjattrmodifyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unfinobjattrmodifyreq_body_;
  }
  if (unfinobjattrmodifyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unfinobjattrmodifyreq_body);
    if (message_arena != submessage_arena) {
      unfinobjattrmodifyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfinobjattrmodifyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  unfinobjattrmodifyreq_body_ = unfinobjattrmodifyreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.UnfinObjAttrModifyReq_body)
}

// optional .ClientCos.FileBatchDelReq FileBatchDelReq_body = 35;
inline bool CosReqMsg::_internal_has_filebatchdelreq_body() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || filebatchdelreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_filebatchdelreq_body() const {
  return _internal_has_filebatchdelreq_body();
}
inline void CosReqMsg::clear_filebatchdelreq_body() {
  if (filebatchdelreq_body_ != nullptr) filebatchdelreq_body_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::ClientCos::FileBatchDelReq& CosReqMsg::_internal_filebatchdelreq_body() const {
  const ::ClientCos::FileBatchDelReq* p = filebatchdelreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileBatchDelReq&>(
      ::ClientCos::_FileBatchDelReq_default_instance_);
}
inline const ::ClientCos::FileBatchDelReq& CosReqMsg::filebatchdelreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.FileBatchDelReq_body)
  return _internal_filebatchdelreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_filebatchdelreq_body(
    ::ClientCos::FileBatchDelReq* filebatchdelreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filebatchdelreq_body_);
  }
  filebatchdelreq_body_ = filebatchdelreq_body;
  if (filebatchdelreq_body) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.FileBatchDelReq_body)
}
inline ::ClientCos::FileBatchDelReq* CosReqMsg::release_filebatchdelreq_body() {
  _has_bits_[0] &= ~0x00020000u;
  ::ClientCos::FileBatchDelReq* temp = filebatchdelreq_body_;
  filebatchdelreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileBatchDelReq* CosReqMsg::unsafe_arena_release_filebatchdelreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.FileBatchDelReq_body)
  _has_bits_[0] &= ~0x00020000u;
  ::ClientCos::FileBatchDelReq* temp = filebatchdelreq_body_;
  filebatchdelreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileBatchDelReq* CosReqMsg::_internal_mutable_filebatchdelreq_body() {
  _has_bits_[0] |= 0x00020000u;
  if (filebatchdelreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileBatchDelReq>(GetArena());
    filebatchdelreq_body_ = p;
  }
  return filebatchdelreq_body_;
}
inline ::ClientCos::FileBatchDelReq* CosReqMsg::mutable_filebatchdelreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.FileBatchDelReq_body)
  return _internal_mutable_filebatchdelreq_body();
}
inline void CosReqMsg::set_allocated_filebatchdelreq_body(::ClientCos::FileBatchDelReq* filebatchdelreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filebatchdelreq_body_;
  }
  if (filebatchdelreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filebatchdelreq_body);
    if (message_arena != submessage_arena) {
      filebatchdelreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filebatchdelreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  filebatchdelreq_body_ = filebatchdelreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.FileBatchDelReq_body)
}

// optional .ClientCos.ListObjVerReq ListObjVerReq_body = 36;
inline bool CosReqMsg::_internal_has_listobjverreq_body() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || listobjverreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_listobjverreq_body() const {
  return _internal_has_listobjverreq_body();
}
inline void CosReqMsg::clear_listobjverreq_body() {
  if (listobjverreq_body_ != nullptr) listobjverreq_body_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::ClientCos::ListObjVerReq& CosReqMsg::_internal_listobjverreq_body() const {
  const ::ClientCos::ListObjVerReq* p = listobjverreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListObjVerReq&>(
      ::ClientCos::_ListObjVerReq_default_instance_);
}
inline const ::ClientCos::ListObjVerReq& CosReqMsg::listobjverreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ListObjVerReq_body)
  return _internal_listobjverreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_listobjverreq_body(
    ::ClientCos::ListObjVerReq* listobjverreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listobjverreq_body_);
  }
  listobjverreq_body_ = listobjverreq_body;
  if (listobjverreq_body) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ListObjVerReq_body)
}
inline ::ClientCos::ListObjVerReq* CosReqMsg::release_listobjverreq_body() {
  _has_bits_[0] &= ~0x00040000u;
  ::ClientCos::ListObjVerReq* temp = listobjverreq_body_;
  listobjverreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListObjVerReq* CosReqMsg::unsafe_arena_release_listobjverreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ListObjVerReq_body)
  _has_bits_[0] &= ~0x00040000u;
  ::ClientCos::ListObjVerReq* temp = listobjverreq_body_;
  listobjverreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListObjVerReq* CosReqMsg::_internal_mutable_listobjverreq_body() {
  _has_bits_[0] |= 0x00040000u;
  if (listobjverreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListObjVerReq>(GetArena());
    listobjverreq_body_ = p;
  }
  return listobjverreq_body_;
}
inline ::ClientCos::ListObjVerReq* CosReqMsg::mutable_listobjverreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ListObjVerReq_body)
  return _internal_mutable_listobjverreq_body();
}
inline void CosReqMsg::set_allocated_listobjverreq_body(::ClientCos::ListObjVerReq* listobjverreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listobjverreq_body_;
  }
  if (listobjverreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listobjverreq_body);
    if (message_arena != submessage_arena) {
      listobjverreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listobjverreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  listobjverreq_body_ = listobjverreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ListObjVerReq_body)
}

// optional .ClientCos.DelExpireFileReq DelExpireFileReq_body = 37;
inline bool CosReqMsg::_internal_has_delexpirefilereq_body() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || delexpirefilereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_delexpirefilereq_body() const {
  return _internal_has_delexpirefilereq_body();
}
inline void CosReqMsg::clear_delexpirefilereq_body() {
  if (delexpirefilereq_body_ != nullptr) delexpirefilereq_body_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::ClientCos::DelExpireFileReq& CosReqMsg::_internal_delexpirefilereq_body() const {
  const ::ClientCos::DelExpireFileReq* p = delexpirefilereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelExpireFileReq&>(
      ::ClientCos::_DelExpireFileReq_default_instance_);
}
inline const ::ClientCos::DelExpireFileReq& CosReqMsg::delexpirefilereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.DelExpireFileReq_body)
  return _internal_delexpirefilereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_delexpirefilereq_body(
    ::ClientCos::DelExpireFileReq* delexpirefilereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delexpirefilereq_body_);
  }
  delexpirefilereq_body_ = delexpirefilereq_body;
  if (delexpirefilereq_body) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.DelExpireFileReq_body)
}
inline ::ClientCos::DelExpireFileReq* CosReqMsg::release_delexpirefilereq_body() {
  _has_bits_[0] &= ~0x00080000u;
  ::ClientCos::DelExpireFileReq* temp = delexpirefilereq_body_;
  delexpirefilereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelExpireFileReq* CosReqMsg::unsafe_arena_release_delexpirefilereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.DelExpireFileReq_body)
  _has_bits_[0] &= ~0x00080000u;
  ::ClientCos::DelExpireFileReq* temp = delexpirefilereq_body_;
  delexpirefilereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DelExpireFileReq* CosReqMsg::_internal_mutable_delexpirefilereq_body() {
  _has_bits_[0] |= 0x00080000u;
  if (delexpirefilereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelExpireFileReq>(GetArena());
    delexpirefilereq_body_ = p;
  }
  return delexpirefilereq_body_;
}
inline ::ClientCos::DelExpireFileReq* CosReqMsg::mutable_delexpirefilereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.DelExpireFileReq_body)
  return _internal_mutable_delexpirefilereq_body();
}
inline void CosReqMsg::set_allocated_delexpirefilereq_body(::ClientCos::DelExpireFileReq* delexpirefilereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delexpirefilereq_body_;
  }
  if (delexpirefilereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delexpirefilereq_body);
    if (message_arena != submessage_arena) {
      delexpirefilereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delexpirefilereq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  delexpirefilereq_body_ = delexpirefilereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.DelExpireFileReq_body)
}

// optional .ClientCos.FileDelReq FileDelReq_body = 38;
inline bool CosReqMsg::_internal_has_filedelreq_body() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || filedelreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_filedelreq_body() const {
  return _internal_has_filedelreq_body();
}
inline void CosReqMsg::clear_filedelreq_body() {
  if (filedelreq_body_ != nullptr) filedelreq_body_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::ClientCos::FileDelReq& CosReqMsg::_internal_filedelreq_body() const {
  const ::ClientCos::FileDelReq* p = filedelreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileDelReq&>(
      ::ClientCos::_FileDelReq_default_instance_);
}
inline const ::ClientCos::FileDelReq& CosReqMsg::filedelreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.FileDelReq_body)
  return _internal_filedelreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_filedelreq_body(
    ::ClientCos::FileDelReq* filedelreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedelreq_body_);
  }
  filedelreq_body_ = filedelreq_body;
  if (filedelreq_body) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.FileDelReq_body)
}
inline ::ClientCos::FileDelReq* CosReqMsg::release_filedelreq_body() {
  _has_bits_[0] &= ~0x00100000u;
  ::ClientCos::FileDelReq* temp = filedelreq_body_;
  filedelreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileDelReq* CosReqMsg::unsafe_arena_release_filedelreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.FileDelReq_body)
  _has_bits_[0] &= ~0x00100000u;
  ::ClientCos::FileDelReq* temp = filedelreq_body_;
  filedelreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileDelReq* CosReqMsg::_internal_mutable_filedelreq_body() {
  _has_bits_[0] |= 0x00100000u;
  if (filedelreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileDelReq>(GetArena());
    filedelreq_body_ = p;
  }
  return filedelreq_body_;
}
inline ::ClientCos::FileDelReq* CosReqMsg::mutable_filedelreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.FileDelReq_body)
  return _internal_mutable_filedelreq_body();
}
inline void CosReqMsg::set_allocated_filedelreq_body(::ClientCos::FileDelReq* filedelreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filedelreq_body_;
  }
  if (filedelreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filedelreq_body);
    if (message_arena != submessage_arena) {
      filedelreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedelreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  filedelreq_body_ = filedelreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.FileDelReq_body)
}

// optional .ClientCos.SpObjAttrModifyReq SpObjAttrModifyReq_body = 39;
inline bool CosReqMsg::_internal_has_spobjattrmodifyreq_body() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || spobjattrmodifyreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_spobjattrmodifyreq_body() const {
  return _internal_has_spobjattrmodifyreq_body();
}
inline void CosReqMsg::clear_spobjattrmodifyreq_body() {
  if (spobjattrmodifyreq_body_ != nullptr) spobjattrmodifyreq_body_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::ClientCos::SpObjAttrModifyReq& CosReqMsg::_internal_spobjattrmodifyreq_body() const {
  const ::ClientCos::SpObjAttrModifyReq* p = spobjattrmodifyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SpObjAttrModifyReq&>(
      ::ClientCos::_SpObjAttrModifyReq_default_instance_);
}
inline const ::ClientCos::SpObjAttrModifyReq& CosReqMsg::spobjattrmodifyreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SpObjAttrModifyReq_body)
  return _internal_spobjattrmodifyreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_spobjattrmodifyreq_body(
    ::ClientCos::SpObjAttrModifyReq* spobjattrmodifyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spobjattrmodifyreq_body_);
  }
  spobjattrmodifyreq_body_ = spobjattrmodifyreq_body;
  if (spobjattrmodifyreq_body) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SpObjAttrModifyReq_body)
}
inline ::ClientCos::SpObjAttrModifyReq* CosReqMsg::release_spobjattrmodifyreq_body() {
  _has_bits_[0] &= ~0x00200000u;
  ::ClientCos::SpObjAttrModifyReq* temp = spobjattrmodifyreq_body_;
  spobjattrmodifyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SpObjAttrModifyReq* CosReqMsg::unsafe_arena_release_spobjattrmodifyreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SpObjAttrModifyReq_body)
  _has_bits_[0] &= ~0x00200000u;
  ::ClientCos::SpObjAttrModifyReq* temp = spobjattrmodifyreq_body_;
  spobjattrmodifyreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SpObjAttrModifyReq* CosReqMsg::_internal_mutable_spobjattrmodifyreq_body() {
  _has_bits_[0] |= 0x00200000u;
  if (spobjattrmodifyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SpObjAttrModifyReq>(GetArena());
    spobjattrmodifyreq_body_ = p;
  }
  return spobjattrmodifyreq_body_;
}
inline ::ClientCos::SpObjAttrModifyReq* CosReqMsg::mutable_spobjattrmodifyreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SpObjAttrModifyReq_body)
  return _internal_mutable_spobjattrmodifyreq_body();
}
inline void CosReqMsg::set_allocated_spobjattrmodifyreq_body(::ClientCos::SpObjAttrModifyReq* spobjattrmodifyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spobjattrmodifyreq_body_;
  }
  if (spobjattrmodifyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spobjattrmodifyreq_body);
    if (message_arena != submessage_arena) {
      spobjattrmodifyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spobjattrmodifyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  spobjattrmodifyreq_body_ = spobjattrmodifyreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SpObjAttrModifyReq_body)
}

// optional .ClientCos.UploadDelmarkerReq UploadDelmarkerReq_body = 40;
inline bool CosReqMsg::_internal_has_uploaddelmarkerreq_body() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || uploaddelmarkerreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_uploaddelmarkerreq_body() const {
  return _internal_has_uploaddelmarkerreq_body();
}
inline void CosReqMsg::clear_uploaddelmarkerreq_body() {
  if (uploaddelmarkerreq_body_ != nullptr) uploaddelmarkerreq_body_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::ClientCos::UploadDelmarkerReq& CosReqMsg::_internal_uploaddelmarkerreq_body() const {
  const ::ClientCos::UploadDelmarkerReq* p = uploaddelmarkerreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::UploadDelmarkerReq&>(
      ::ClientCos::_UploadDelmarkerReq_default_instance_);
}
inline const ::ClientCos::UploadDelmarkerReq& CosReqMsg::uploaddelmarkerreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.UploadDelmarkerReq_body)
  return _internal_uploaddelmarkerreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_uploaddelmarkerreq_body(
    ::ClientCos::UploadDelmarkerReq* uploaddelmarkerreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploaddelmarkerreq_body_);
  }
  uploaddelmarkerreq_body_ = uploaddelmarkerreq_body;
  if (uploaddelmarkerreq_body) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.UploadDelmarkerReq_body)
}
inline ::ClientCos::UploadDelmarkerReq* CosReqMsg::release_uploaddelmarkerreq_body() {
  _has_bits_[0] &= ~0x00400000u;
  ::ClientCos::UploadDelmarkerReq* temp = uploaddelmarkerreq_body_;
  uploaddelmarkerreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::UploadDelmarkerReq* CosReqMsg::unsafe_arena_release_uploaddelmarkerreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.UploadDelmarkerReq_body)
  _has_bits_[0] &= ~0x00400000u;
  ::ClientCos::UploadDelmarkerReq* temp = uploaddelmarkerreq_body_;
  uploaddelmarkerreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::UploadDelmarkerReq* CosReqMsg::_internal_mutable_uploaddelmarkerreq_body() {
  _has_bits_[0] |= 0x00400000u;
  if (uploaddelmarkerreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::UploadDelmarkerReq>(GetArena());
    uploaddelmarkerreq_body_ = p;
  }
  return uploaddelmarkerreq_body_;
}
inline ::ClientCos::UploadDelmarkerReq* CosReqMsg::mutable_uploaddelmarkerreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.UploadDelmarkerReq_body)
  return _internal_mutable_uploaddelmarkerreq_body();
}
inline void CosReqMsg::set_allocated_uploaddelmarkerreq_body(::ClientCos::UploadDelmarkerReq* uploaddelmarkerreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uploaddelmarkerreq_body_;
  }
  if (uploaddelmarkerreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uploaddelmarkerreq_body);
    if (message_arena != submessage_arena) {
      uploaddelmarkerreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uploaddelmarkerreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  uploaddelmarkerreq_body_ = uploaddelmarkerreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.UploadDelmarkerReq_body)
}

// optional .ClientCos.ExpireFileDelVerReq ExpireFileDelVerReq_body = 41;
inline bool CosReqMsg::_internal_has_expirefiledelverreq_body() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || expirefiledelverreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_expirefiledelverreq_body() const {
  return _internal_has_expirefiledelverreq_body();
}
inline void CosReqMsg::clear_expirefiledelverreq_body() {
  if (expirefiledelverreq_body_ != nullptr) expirefiledelverreq_body_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::ClientCos::ExpireFileDelVerReq& CosReqMsg::_internal_expirefiledelverreq_body() const {
  const ::ClientCos::ExpireFileDelVerReq* p = expirefiledelverreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExpireFileDelVerReq&>(
      ::ClientCos::_ExpireFileDelVerReq_default_instance_);
}
inline const ::ClientCos::ExpireFileDelVerReq& CosReqMsg::expirefiledelverreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ExpireFileDelVerReq_body)
  return _internal_expirefiledelverreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_expirefiledelverreq_body(
    ::ClientCos::ExpireFileDelVerReq* expirefiledelverreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirefiledelverreq_body_);
  }
  expirefiledelverreq_body_ = expirefiledelverreq_body;
  if (expirefiledelverreq_body) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ExpireFileDelVerReq_body)
}
inline ::ClientCos::ExpireFileDelVerReq* CosReqMsg::release_expirefiledelverreq_body() {
  _has_bits_[0] &= ~0x00800000u;
  ::ClientCos::ExpireFileDelVerReq* temp = expirefiledelverreq_body_;
  expirefiledelverreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExpireFileDelVerReq* CosReqMsg::unsafe_arena_release_expirefiledelverreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ExpireFileDelVerReq_body)
  _has_bits_[0] &= ~0x00800000u;
  ::ClientCos::ExpireFileDelVerReq* temp = expirefiledelverreq_body_;
  expirefiledelverreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ExpireFileDelVerReq* CosReqMsg::_internal_mutable_expirefiledelverreq_body() {
  _has_bits_[0] |= 0x00800000u;
  if (expirefiledelverreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExpireFileDelVerReq>(GetArena());
    expirefiledelverreq_body_ = p;
  }
  return expirefiledelverreq_body_;
}
inline ::ClientCos::ExpireFileDelVerReq* CosReqMsg::mutable_expirefiledelverreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ExpireFileDelVerReq_body)
  return _internal_mutable_expirefiledelverreq_body();
}
inline void CosReqMsg::set_allocated_expirefiledelverreq_body(::ClientCos::ExpireFileDelVerReq* expirefiledelverreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expirefiledelverreq_body_;
  }
  if (expirefiledelverreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expirefiledelverreq_body);
    if (message_arena != submessage_arena) {
      expirefiledelverreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirefiledelverreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  expirefiledelverreq_body_ = expirefiledelverreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ExpireFileDelVerReq_body)
}

// optional .ClientCos.ExpireFileDelNoVerReq ExpireFileDelNoverReq_body = 42;
inline bool CosReqMsg::_internal_has_expirefiledelnoverreq_body() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || expirefiledelnoverreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_expirefiledelnoverreq_body() const {
  return _internal_has_expirefiledelnoverreq_body();
}
inline void CosReqMsg::clear_expirefiledelnoverreq_body() {
  if (expirefiledelnoverreq_body_ != nullptr) expirefiledelnoverreq_body_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::ClientCos::ExpireFileDelNoVerReq& CosReqMsg::_internal_expirefiledelnoverreq_body() const {
  const ::ClientCos::ExpireFileDelNoVerReq* p = expirefiledelnoverreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExpireFileDelNoVerReq&>(
      ::ClientCos::_ExpireFileDelNoVerReq_default_instance_);
}
inline const ::ClientCos::ExpireFileDelNoVerReq& CosReqMsg::expirefiledelnoverreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ExpireFileDelNoverReq_body)
  return _internal_expirefiledelnoverreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_expirefiledelnoverreq_body(
    ::ClientCos::ExpireFileDelNoVerReq* expirefiledelnoverreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirefiledelnoverreq_body_);
  }
  expirefiledelnoverreq_body_ = expirefiledelnoverreq_body;
  if (expirefiledelnoverreq_body) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ExpireFileDelNoverReq_body)
}
inline ::ClientCos::ExpireFileDelNoVerReq* CosReqMsg::release_expirefiledelnoverreq_body() {
  _has_bits_[0] &= ~0x01000000u;
  ::ClientCos::ExpireFileDelNoVerReq* temp = expirefiledelnoverreq_body_;
  expirefiledelnoverreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExpireFileDelNoVerReq* CosReqMsg::unsafe_arena_release_expirefiledelnoverreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ExpireFileDelNoverReq_body)
  _has_bits_[0] &= ~0x01000000u;
  ::ClientCos::ExpireFileDelNoVerReq* temp = expirefiledelnoverreq_body_;
  expirefiledelnoverreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ExpireFileDelNoVerReq* CosReqMsg::_internal_mutable_expirefiledelnoverreq_body() {
  _has_bits_[0] |= 0x01000000u;
  if (expirefiledelnoverreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExpireFileDelNoVerReq>(GetArena());
    expirefiledelnoverreq_body_ = p;
  }
  return expirefiledelnoverreq_body_;
}
inline ::ClientCos::ExpireFileDelNoVerReq* CosReqMsg::mutable_expirefiledelnoverreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ExpireFileDelNoverReq_body)
  return _internal_mutable_expirefiledelnoverreq_body();
}
inline void CosReqMsg::set_allocated_expirefiledelnoverreq_body(::ClientCos::ExpireFileDelNoVerReq* expirefiledelnoverreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expirefiledelnoverreq_body_;
  }
  if (expirefiledelnoverreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expirefiledelnoverreq_body);
    if (message_arena != submessage_arena) {
      expirefiledelnoverreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirefiledelnoverreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  expirefiledelnoverreq_body_ = expirefiledelnoverreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ExpireFileDelNoverReq_body)
}

// optional .ClientCos.SetBucketPriAttrReq SetBucketPriAttrReq_body = 43;
inline bool CosReqMsg::_internal_has_setbucketpriattrreq_body() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || setbucketpriattrreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setbucketpriattrreq_body() const {
  return _internal_has_setbucketpriattrreq_body();
}
inline void CosReqMsg::clear_setbucketpriattrreq_body() {
  if (setbucketpriattrreq_body_ != nullptr) setbucketpriattrreq_body_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::ClientCos::SetBucketPriAttrReq& CosReqMsg::_internal_setbucketpriattrreq_body() const {
  const ::ClientCos::SetBucketPriAttrReq* p = setbucketpriattrreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketPriAttrReq&>(
      ::ClientCos::_SetBucketPriAttrReq_default_instance_);
}
inline const ::ClientCos::SetBucketPriAttrReq& CosReqMsg::setbucketpriattrreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetBucketPriAttrReq_body)
  return _internal_setbucketpriattrreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setbucketpriattrreq_body(
    ::ClientCos::SetBucketPriAttrReq* setbucketpriattrreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketpriattrreq_body_);
  }
  setbucketpriattrreq_body_ = setbucketpriattrreq_body;
  if (setbucketpriattrreq_body) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetBucketPriAttrReq_body)
}
inline ::ClientCos::SetBucketPriAttrReq* CosReqMsg::release_setbucketpriattrreq_body() {
  _has_bits_[0] &= ~0x02000000u;
  ::ClientCos::SetBucketPriAttrReq* temp = setbucketpriattrreq_body_;
  setbucketpriattrreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketPriAttrReq* CosReqMsg::unsafe_arena_release_setbucketpriattrreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetBucketPriAttrReq_body)
  _has_bits_[0] &= ~0x02000000u;
  ::ClientCos::SetBucketPriAttrReq* temp = setbucketpriattrreq_body_;
  setbucketpriattrreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketPriAttrReq* CosReqMsg::_internal_mutable_setbucketpriattrreq_body() {
  _has_bits_[0] |= 0x02000000u;
  if (setbucketpriattrreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketPriAttrReq>(GetArena());
    setbucketpriattrreq_body_ = p;
  }
  return setbucketpriattrreq_body_;
}
inline ::ClientCos::SetBucketPriAttrReq* CosReqMsg::mutable_setbucketpriattrreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetBucketPriAttrReq_body)
  return _internal_mutable_setbucketpriattrreq_body();
}
inline void CosReqMsg::set_allocated_setbucketpriattrreq_body(::ClientCos::SetBucketPriAttrReq* setbucketpriattrreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketpriattrreq_body_;
  }
  if (setbucketpriattrreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketpriattrreq_body);
    if (message_arena != submessage_arena) {
      setbucketpriattrreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketpriattrreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  setbucketpriattrreq_body_ = setbucketpriattrreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetBucketPriAttrReq_body)
}

// optional .ClientCos.FileDownToCASReq FileDownToCASReq_body = 44;
inline bool CosReqMsg::_internal_has_filedowntocasreq_body() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || filedowntocasreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_filedowntocasreq_body() const {
  return _internal_has_filedowntocasreq_body();
}
inline void CosReqMsg::clear_filedowntocasreq_body() {
  if (filedowntocasreq_body_ != nullptr) filedowntocasreq_body_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::ClientCos::FileDownToCASReq& CosReqMsg::_internal_filedowntocasreq_body() const {
  const ::ClientCos::FileDownToCASReq* p = filedowntocasreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileDownToCASReq&>(
      ::ClientCos::_FileDownToCASReq_default_instance_);
}
inline const ::ClientCos::FileDownToCASReq& CosReqMsg::filedowntocasreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.FileDownToCASReq_body)
  return _internal_filedowntocasreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_filedowntocasreq_body(
    ::ClientCos::FileDownToCASReq* filedowntocasreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedowntocasreq_body_);
  }
  filedowntocasreq_body_ = filedowntocasreq_body;
  if (filedowntocasreq_body) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.FileDownToCASReq_body)
}
inline ::ClientCos::FileDownToCASReq* CosReqMsg::release_filedowntocasreq_body() {
  _has_bits_[0] &= ~0x04000000u;
  ::ClientCos::FileDownToCASReq* temp = filedowntocasreq_body_;
  filedowntocasreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileDownToCASReq* CosReqMsg::unsafe_arena_release_filedowntocasreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.FileDownToCASReq_body)
  _has_bits_[0] &= ~0x04000000u;
  ::ClientCos::FileDownToCASReq* temp = filedowntocasreq_body_;
  filedowntocasreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileDownToCASReq* CosReqMsg::_internal_mutable_filedowntocasreq_body() {
  _has_bits_[0] |= 0x04000000u;
  if (filedowntocasreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileDownToCASReq>(GetArena());
    filedowntocasreq_body_ = p;
  }
  return filedowntocasreq_body_;
}
inline ::ClientCos::FileDownToCASReq* CosReqMsg::mutable_filedowntocasreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.FileDownToCASReq_body)
  return _internal_mutable_filedowntocasreq_body();
}
inline void CosReqMsg::set_allocated_filedowntocasreq_body(::ClientCos::FileDownToCASReq* filedowntocasreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filedowntocasreq_body_;
  }
  if (filedowntocasreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filedowntocasreq_body);
    if (message_arena != submessage_arena) {
      filedowntocasreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedowntocasreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  filedowntocasreq_body_ = filedowntocasreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.FileDownToCASReq_body)
}

// optional .ClientCos.CasObjAttrModifyReq CasObjAttrModifyReq_body = 45;
inline bool CosReqMsg::_internal_has_casobjattrmodifyreq_body() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || casobjattrmodifyreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_casobjattrmodifyreq_body() const {
  return _internal_has_casobjattrmodifyreq_body();
}
inline void CosReqMsg::clear_casobjattrmodifyreq_body() {
  if (casobjattrmodifyreq_body_ != nullptr) casobjattrmodifyreq_body_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::ClientCos::CasObjAttrModifyReq& CosReqMsg::_internal_casobjattrmodifyreq_body() const {
  const ::ClientCos::CasObjAttrModifyReq* p = casobjattrmodifyreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasObjAttrModifyReq&>(
      ::ClientCos::_CasObjAttrModifyReq_default_instance_);
}
inline const ::ClientCos::CasObjAttrModifyReq& CosReqMsg::casobjattrmodifyreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.CasObjAttrModifyReq_body)
  return _internal_casobjattrmodifyreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_casobjattrmodifyreq_body(
    ::ClientCos::CasObjAttrModifyReq* casobjattrmodifyreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casobjattrmodifyreq_body_);
  }
  casobjattrmodifyreq_body_ = casobjattrmodifyreq_body;
  if (casobjattrmodifyreq_body) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.CasObjAttrModifyReq_body)
}
inline ::ClientCos::CasObjAttrModifyReq* CosReqMsg::release_casobjattrmodifyreq_body() {
  _has_bits_[0] &= ~0x08000000u;
  ::ClientCos::CasObjAttrModifyReq* temp = casobjattrmodifyreq_body_;
  casobjattrmodifyreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasObjAttrModifyReq* CosReqMsg::unsafe_arena_release_casobjattrmodifyreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.CasObjAttrModifyReq_body)
  _has_bits_[0] &= ~0x08000000u;
  ::ClientCos::CasObjAttrModifyReq* temp = casobjattrmodifyreq_body_;
  casobjattrmodifyreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasObjAttrModifyReq* CosReqMsg::_internal_mutable_casobjattrmodifyreq_body() {
  _has_bits_[0] |= 0x08000000u;
  if (casobjattrmodifyreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasObjAttrModifyReq>(GetArena());
    casobjattrmodifyreq_body_ = p;
  }
  return casobjattrmodifyreq_body_;
}
inline ::ClientCos::CasObjAttrModifyReq* CosReqMsg::mutable_casobjattrmodifyreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.CasObjAttrModifyReq_body)
  return _internal_mutable_casobjattrmodifyreq_body();
}
inline void CosReqMsg::set_allocated_casobjattrmodifyreq_body(::ClientCos::CasObjAttrModifyReq* casobjattrmodifyreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casobjattrmodifyreq_body_;
  }
  if (casobjattrmodifyreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casobjattrmodifyreq_body);
    if (message_arena != submessage_arena) {
      casobjattrmodifyreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casobjattrmodifyreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  casobjattrmodifyreq_body_ = casobjattrmodifyreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.CasObjAttrModifyReq_body)
}

// optional .ClientCos.CasFileRecoverDelReq CasFileRecoverDelReq_body = 46;
inline bool CosReqMsg::_internal_has_casfilerecoverdelreq_body() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || casfilerecoverdelreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_casfilerecoverdelreq_body() const {
  return _internal_has_casfilerecoverdelreq_body();
}
inline void CosReqMsg::clear_casfilerecoverdelreq_body() {
  if (casfilerecoverdelreq_body_ != nullptr) casfilerecoverdelreq_body_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::ClientCos::CasFileRecoverDelReq& CosReqMsg::_internal_casfilerecoverdelreq_body() const {
  const ::ClientCos::CasFileRecoverDelReq* p = casfilerecoverdelreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasFileRecoverDelReq&>(
      ::ClientCos::_CasFileRecoverDelReq_default_instance_);
}
inline const ::ClientCos::CasFileRecoverDelReq& CosReqMsg::casfilerecoverdelreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.CasFileRecoverDelReq_body)
  return _internal_casfilerecoverdelreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_casfilerecoverdelreq_body(
    ::ClientCos::CasFileRecoverDelReq* casfilerecoverdelreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casfilerecoverdelreq_body_);
  }
  casfilerecoverdelreq_body_ = casfilerecoverdelreq_body;
  if (casfilerecoverdelreq_body) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.CasFileRecoverDelReq_body)
}
inline ::ClientCos::CasFileRecoverDelReq* CosReqMsg::release_casfilerecoverdelreq_body() {
  _has_bits_[0] &= ~0x10000000u;
  ::ClientCos::CasFileRecoverDelReq* temp = casfilerecoverdelreq_body_;
  casfilerecoverdelreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasFileRecoverDelReq* CosReqMsg::unsafe_arena_release_casfilerecoverdelreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.CasFileRecoverDelReq_body)
  _has_bits_[0] &= ~0x10000000u;
  ::ClientCos::CasFileRecoverDelReq* temp = casfilerecoverdelreq_body_;
  casfilerecoverdelreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasFileRecoverDelReq* CosReqMsg::_internal_mutable_casfilerecoverdelreq_body() {
  _has_bits_[0] |= 0x10000000u;
  if (casfilerecoverdelreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasFileRecoverDelReq>(GetArena());
    casfilerecoverdelreq_body_ = p;
  }
  return casfilerecoverdelreq_body_;
}
inline ::ClientCos::CasFileRecoverDelReq* CosReqMsg::mutable_casfilerecoverdelreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.CasFileRecoverDelReq_body)
  return _internal_mutable_casfilerecoverdelreq_body();
}
inline void CosReqMsg::set_allocated_casfilerecoverdelreq_body(::ClientCos::CasFileRecoverDelReq* casfilerecoverdelreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casfilerecoverdelreq_body_;
  }
  if (casfilerecoverdelreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casfilerecoverdelreq_body);
    if (message_arena != submessage_arena) {
      casfilerecoverdelreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casfilerecoverdelreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  casfilerecoverdelreq_body_ = casfilerecoverdelreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.CasFileRecoverDelReq_body)
}

// optional .ClientCos.CasObjRestoreErrReq CasObjRestoreErrReq_body = 47;
inline bool CosReqMsg::_internal_has_casobjrestoreerrreq_body() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || casobjrestoreerrreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_casobjrestoreerrreq_body() const {
  return _internal_has_casobjrestoreerrreq_body();
}
inline void CosReqMsg::clear_casobjrestoreerrreq_body() {
  if (casobjrestoreerrreq_body_ != nullptr) casobjrestoreerrreq_body_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::ClientCos::CasObjRestoreErrReq& CosReqMsg::_internal_casobjrestoreerrreq_body() const {
  const ::ClientCos::CasObjRestoreErrReq* p = casobjrestoreerrreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasObjRestoreErrReq&>(
      ::ClientCos::_CasObjRestoreErrReq_default_instance_);
}
inline const ::ClientCos::CasObjRestoreErrReq& CosReqMsg::casobjrestoreerrreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.CasObjRestoreErrReq_body)
  return _internal_casobjrestoreerrreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_casobjrestoreerrreq_body(
    ::ClientCos::CasObjRestoreErrReq* casobjrestoreerrreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casobjrestoreerrreq_body_);
  }
  casobjrestoreerrreq_body_ = casobjrestoreerrreq_body;
  if (casobjrestoreerrreq_body) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.CasObjRestoreErrReq_body)
}
inline ::ClientCos::CasObjRestoreErrReq* CosReqMsg::release_casobjrestoreerrreq_body() {
  _has_bits_[0] &= ~0x20000000u;
  ::ClientCos::CasObjRestoreErrReq* temp = casobjrestoreerrreq_body_;
  casobjrestoreerrreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasObjRestoreErrReq* CosReqMsg::unsafe_arena_release_casobjrestoreerrreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.CasObjRestoreErrReq_body)
  _has_bits_[0] &= ~0x20000000u;
  ::ClientCos::CasObjRestoreErrReq* temp = casobjrestoreerrreq_body_;
  casobjrestoreerrreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasObjRestoreErrReq* CosReqMsg::_internal_mutable_casobjrestoreerrreq_body() {
  _has_bits_[0] |= 0x20000000u;
  if (casobjrestoreerrreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasObjRestoreErrReq>(GetArena());
    casobjrestoreerrreq_body_ = p;
  }
  return casobjrestoreerrreq_body_;
}
inline ::ClientCos::CasObjRestoreErrReq* CosReqMsg::mutable_casobjrestoreerrreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.CasObjRestoreErrReq_body)
  return _internal_mutable_casobjrestoreerrreq_body();
}
inline void CosReqMsg::set_allocated_casobjrestoreerrreq_body(::ClientCos::CasObjRestoreErrReq* casobjrestoreerrreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casobjrestoreerrreq_body_;
  }
  if (casobjrestoreerrreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casobjrestoreerrreq_body);
    if (message_arena != submessage_arena) {
      casobjrestoreerrreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casobjrestoreerrreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  casobjrestoreerrreq_body_ = casobjrestoreerrreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.CasObjRestoreErrReq_body)
}

// optional .ClientCos.SpObjAttrQueryReq SpObjAttrQueryReq_body = 48;
inline bool CosReqMsg::_internal_has_spobjattrqueryreq_body() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || spobjattrqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_spobjattrqueryreq_body() const {
  return _internal_has_spobjattrqueryreq_body();
}
inline void CosReqMsg::clear_spobjattrqueryreq_body() {
  if (spobjattrqueryreq_body_ != nullptr) spobjattrqueryreq_body_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::ClientCos::SpObjAttrQueryReq& CosReqMsg::_internal_spobjattrqueryreq_body() const {
  const ::ClientCos::SpObjAttrQueryReq* p = spobjattrqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SpObjAttrQueryReq&>(
      ::ClientCos::_SpObjAttrQueryReq_default_instance_);
}
inline const ::ClientCos::SpObjAttrQueryReq& CosReqMsg::spobjattrqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SpObjAttrQueryReq_body)
  return _internal_spobjattrqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_spobjattrqueryreq_body(
    ::ClientCos::SpObjAttrQueryReq* spobjattrqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spobjattrqueryreq_body_);
  }
  spobjattrqueryreq_body_ = spobjattrqueryreq_body;
  if (spobjattrqueryreq_body) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SpObjAttrQueryReq_body)
}
inline ::ClientCos::SpObjAttrQueryReq* CosReqMsg::release_spobjattrqueryreq_body() {
  _has_bits_[0] &= ~0x40000000u;
  ::ClientCos::SpObjAttrQueryReq* temp = spobjattrqueryreq_body_;
  spobjattrqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SpObjAttrQueryReq* CosReqMsg::unsafe_arena_release_spobjattrqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SpObjAttrQueryReq_body)
  _has_bits_[0] &= ~0x40000000u;
  ::ClientCos::SpObjAttrQueryReq* temp = spobjattrqueryreq_body_;
  spobjattrqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SpObjAttrQueryReq* CosReqMsg::_internal_mutable_spobjattrqueryreq_body() {
  _has_bits_[0] |= 0x40000000u;
  if (spobjattrqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SpObjAttrQueryReq>(GetArena());
    spobjattrqueryreq_body_ = p;
  }
  return spobjattrqueryreq_body_;
}
inline ::ClientCos::SpObjAttrQueryReq* CosReqMsg::mutable_spobjattrqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SpObjAttrQueryReq_body)
  return _internal_mutable_spobjattrqueryreq_body();
}
inline void CosReqMsg::set_allocated_spobjattrqueryreq_body(::ClientCos::SpObjAttrQueryReq* spobjattrqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spobjattrqueryreq_body_;
  }
  if (spobjattrqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spobjattrqueryreq_body);
    if (message_arena != submessage_arena) {
      spobjattrqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spobjattrqueryreq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  spobjattrqueryreq_body_ = spobjattrqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SpObjAttrQueryReq_body)
}

// optional .ClientCos.ObjModStorageTypeReq ObjModStorageTypeReq_body = 49;
inline bool CosReqMsg::_internal_has_objmodstoragetypereq_body() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || objmodstoragetypereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_objmodstoragetypereq_body() const {
  return _internal_has_objmodstoragetypereq_body();
}
inline void CosReqMsg::clear_objmodstoragetypereq_body() {
  if (objmodstoragetypereq_body_ != nullptr) objmodstoragetypereq_body_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::ClientCos::ObjModStorageTypeReq& CosReqMsg::_internal_objmodstoragetypereq_body() const {
  const ::ClientCos::ObjModStorageTypeReq* p = objmodstoragetypereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjModStorageTypeReq&>(
      ::ClientCos::_ObjModStorageTypeReq_default_instance_);
}
inline const ::ClientCos::ObjModStorageTypeReq& CosReqMsg::objmodstoragetypereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ObjModStorageTypeReq_body)
  return _internal_objmodstoragetypereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_objmodstoragetypereq_body(
    ::ClientCos::ObjModStorageTypeReq* objmodstoragetypereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objmodstoragetypereq_body_);
  }
  objmodstoragetypereq_body_ = objmodstoragetypereq_body;
  if (objmodstoragetypereq_body) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ObjModStorageTypeReq_body)
}
inline ::ClientCos::ObjModStorageTypeReq* CosReqMsg::release_objmodstoragetypereq_body() {
  _has_bits_[0] &= ~0x80000000u;
  ::ClientCos::ObjModStorageTypeReq* temp = objmodstoragetypereq_body_;
  objmodstoragetypereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjModStorageTypeReq* CosReqMsg::unsafe_arena_release_objmodstoragetypereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ObjModStorageTypeReq_body)
  _has_bits_[0] &= ~0x80000000u;
  ::ClientCos::ObjModStorageTypeReq* temp = objmodstoragetypereq_body_;
  objmodstoragetypereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjModStorageTypeReq* CosReqMsg::_internal_mutable_objmodstoragetypereq_body() {
  _has_bits_[0] |= 0x80000000u;
  if (objmodstoragetypereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjModStorageTypeReq>(GetArena());
    objmodstoragetypereq_body_ = p;
  }
  return objmodstoragetypereq_body_;
}
inline ::ClientCos::ObjModStorageTypeReq* CosReqMsg::mutable_objmodstoragetypereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ObjModStorageTypeReq_body)
  return _internal_mutable_objmodstoragetypereq_body();
}
inline void CosReqMsg::set_allocated_objmodstoragetypereq_body(::ClientCos::ObjModStorageTypeReq* objmodstoragetypereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objmodstoragetypereq_body_;
  }
  if (objmodstoragetypereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objmodstoragetypereq_body);
    if (message_arena != submessage_arena) {
      objmodstoragetypereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objmodstoragetypereq_body, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  objmodstoragetypereq_body_ = objmodstoragetypereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ObjModStorageTypeReq_body)
}

// optional .ClientCos.SetBucketWebsiteInfoReq SetBucketWebsiteInfoReq_body = 50;
inline bool CosReqMsg::_internal_has_setbucketwebsiteinforeq_body() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || setbucketwebsiteinforeq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setbucketwebsiteinforeq_body() const {
  return _internal_has_setbucketwebsiteinforeq_body();
}
inline void CosReqMsg::clear_setbucketwebsiteinforeq_body() {
  if (setbucketwebsiteinforeq_body_ != nullptr) setbucketwebsiteinforeq_body_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::ClientCos::SetBucketWebsiteInfoReq& CosReqMsg::_internal_setbucketwebsiteinforeq_body() const {
  const ::ClientCos::SetBucketWebsiteInfoReq* p = setbucketwebsiteinforeq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketWebsiteInfoReq&>(
      ::ClientCos::_SetBucketWebsiteInfoReq_default_instance_);
}
inline const ::ClientCos::SetBucketWebsiteInfoReq& CosReqMsg::setbucketwebsiteinforeq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetBucketWebsiteInfoReq_body)
  return _internal_setbucketwebsiteinforeq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setbucketwebsiteinforeq_body(
    ::ClientCos::SetBucketWebsiteInfoReq* setbucketwebsiteinforeq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketwebsiteinforeq_body_);
  }
  setbucketwebsiteinforeq_body_ = setbucketwebsiteinforeq_body;
  if (setbucketwebsiteinforeq_body) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetBucketWebsiteInfoReq_body)
}
inline ::ClientCos::SetBucketWebsiteInfoReq* CosReqMsg::release_setbucketwebsiteinforeq_body() {
  _has_bits_[1] &= ~0x00000001u;
  ::ClientCos::SetBucketWebsiteInfoReq* temp = setbucketwebsiteinforeq_body_;
  setbucketwebsiteinforeq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketWebsiteInfoReq* CosReqMsg::unsafe_arena_release_setbucketwebsiteinforeq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetBucketWebsiteInfoReq_body)
  _has_bits_[1] &= ~0x00000001u;
  ::ClientCos::SetBucketWebsiteInfoReq* temp = setbucketwebsiteinforeq_body_;
  setbucketwebsiteinforeq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketWebsiteInfoReq* CosReqMsg::_internal_mutable_setbucketwebsiteinforeq_body() {
  _has_bits_[1] |= 0x00000001u;
  if (setbucketwebsiteinforeq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketWebsiteInfoReq>(GetArena());
    setbucketwebsiteinforeq_body_ = p;
  }
  return setbucketwebsiteinforeq_body_;
}
inline ::ClientCos::SetBucketWebsiteInfoReq* CosReqMsg::mutable_setbucketwebsiteinforeq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetBucketWebsiteInfoReq_body)
  return _internal_mutable_setbucketwebsiteinforeq_body();
}
inline void CosReqMsg::set_allocated_setbucketwebsiteinforeq_body(::ClientCos::SetBucketWebsiteInfoReq* setbucketwebsiteinforeq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketwebsiteinforeq_body_;
  }
  if (setbucketwebsiteinforeq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketwebsiteinforeq_body);
    if (message_arena != submessage_arena) {
      setbucketwebsiteinforeq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketwebsiteinforeq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  setbucketwebsiteinforeq_body_ = setbucketwebsiteinforeq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetBucketWebsiteInfoReq_body)
}

// optional .ClientCos.SetCamAttrReq SetCamAttrReq_body = 51;
inline bool CosReqMsg::_internal_has_setcamattrreq_body() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || setcamattrreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setcamattrreq_body() const {
  return _internal_has_setcamattrreq_body();
}
inline void CosReqMsg::clear_setcamattrreq_body() {
  if (setcamattrreq_body_ != nullptr) setcamattrreq_body_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::ClientCos::SetCamAttrReq& CosReqMsg::_internal_setcamattrreq_body() const {
  const ::ClientCos::SetCamAttrReq* p = setcamattrreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetCamAttrReq&>(
      ::ClientCos::_SetCamAttrReq_default_instance_);
}
inline const ::ClientCos::SetCamAttrReq& CosReqMsg::setcamattrreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetCamAttrReq_body)
  return _internal_setcamattrreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setcamattrreq_body(
    ::ClientCos::SetCamAttrReq* setcamattrreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setcamattrreq_body_);
  }
  setcamattrreq_body_ = setcamattrreq_body;
  if (setcamattrreq_body) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetCamAttrReq_body)
}
inline ::ClientCos::SetCamAttrReq* CosReqMsg::release_setcamattrreq_body() {
  _has_bits_[1] &= ~0x00000002u;
  ::ClientCos::SetCamAttrReq* temp = setcamattrreq_body_;
  setcamattrreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetCamAttrReq* CosReqMsg::unsafe_arena_release_setcamattrreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetCamAttrReq_body)
  _has_bits_[1] &= ~0x00000002u;
  ::ClientCos::SetCamAttrReq* temp = setcamattrreq_body_;
  setcamattrreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetCamAttrReq* CosReqMsg::_internal_mutable_setcamattrreq_body() {
  _has_bits_[1] |= 0x00000002u;
  if (setcamattrreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetCamAttrReq>(GetArena());
    setcamattrreq_body_ = p;
  }
  return setcamattrreq_body_;
}
inline ::ClientCos::SetCamAttrReq* CosReqMsg::mutable_setcamattrreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetCamAttrReq_body)
  return _internal_mutable_setcamattrreq_body();
}
inline void CosReqMsg::set_allocated_setcamattrreq_body(::ClientCos::SetCamAttrReq* setcamattrreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setcamattrreq_body_;
  }
  if (setcamattrreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setcamattrreq_body);
    if (message_arena != submessage_arena) {
      setcamattrreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcamattrreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  setcamattrreq_body_ = setcamattrreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetCamAttrReq_body)
}

// optional .ClientCos.BucketCamAuthQueryReq BucketCamAuthQueryReq_body = 52;
inline bool CosReqMsg::_internal_has_bucketcamauthqueryreq_body() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bucketcamauthqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_bucketcamauthqueryreq_body() const {
  return _internal_has_bucketcamauthqueryreq_body();
}
inline void CosReqMsg::clear_bucketcamauthqueryreq_body() {
  if (bucketcamauthqueryreq_body_ != nullptr) bucketcamauthqueryreq_body_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::ClientCos::BucketCamAuthQueryReq& CosReqMsg::_internal_bucketcamauthqueryreq_body() const {
  const ::ClientCos::BucketCamAuthQueryReq* p = bucketcamauthqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketCamAuthQueryReq&>(
      ::ClientCos::_BucketCamAuthQueryReq_default_instance_);
}
inline const ::ClientCos::BucketCamAuthQueryReq& CosReqMsg::bucketcamauthqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.BucketCamAuthQueryReq_body)
  return _internal_bucketcamauthqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_bucketcamauthqueryreq_body(
    ::ClientCos::BucketCamAuthQueryReq* bucketcamauthqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketcamauthqueryreq_body_);
  }
  bucketcamauthqueryreq_body_ = bucketcamauthqueryreq_body;
  if (bucketcamauthqueryreq_body) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.BucketCamAuthQueryReq_body)
}
inline ::ClientCos::BucketCamAuthQueryReq* CosReqMsg::release_bucketcamauthqueryreq_body() {
  _has_bits_[1] &= ~0x00000004u;
  ::ClientCos::BucketCamAuthQueryReq* temp = bucketcamauthqueryreq_body_;
  bucketcamauthqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketCamAuthQueryReq* CosReqMsg::unsafe_arena_release_bucketcamauthqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.BucketCamAuthQueryReq_body)
  _has_bits_[1] &= ~0x00000004u;
  ::ClientCos::BucketCamAuthQueryReq* temp = bucketcamauthqueryreq_body_;
  bucketcamauthqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketCamAuthQueryReq* CosReqMsg::_internal_mutable_bucketcamauthqueryreq_body() {
  _has_bits_[1] |= 0x00000004u;
  if (bucketcamauthqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketCamAuthQueryReq>(GetArena());
    bucketcamauthqueryreq_body_ = p;
  }
  return bucketcamauthqueryreq_body_;
}
inline ::ClientCos::BucketCamAuthQueryReq* CosReqMsg::mutable_bucketcamauthqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.BucketCamAuthQueryReq_body)
  return _internal_mutable_bucketcamauthqueryreq_body();
}
inline void CosReqMsg::set_allocated_bucketcamauthqueryreq_body(::ClientCos::BucketCamAuthQueryReq* bucketcamauthqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketcamauthqueryreq_body_;
  }
  if (bucketcamauthqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketcamauthqueryreq_body);
    if (message_arena != submessage_arena) {
      bucketcamauthqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketcamauthqueryreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  bucketcamauthqueryreq_body_ = bucketcamauthqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.BucketCamAuthQueryReq_body)
}

// optional .ClientCos.AppCamAuthQueryReq AppCamAuthQueryReq_body = 53;
inline bool CosReqMsg::_internal_has_appcamauthqueryreq_body() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || appcamauthqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_appcamauthqueryreq_body() const {
  return _internal_has_appcamauthqueryreq_body();
}
inline void CosReqMsg::clear_appcamauthqueryreq_body() {
  if (appcamauthqueryreq_body_ != nullptr) appcamauthqueryreq_body_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::ClientCos::AppCamAuthQueryReq& CosReqMsg::_internal_appcamauthqueryreq_body() const {
  const ::ClientCos::AppCamAuthQueryReq* p = appcamauthqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AppCamAuthQueryReq&>(
      ::ClientCos::_AppCamAuthQueryReq_default_instance_);
}
inline const ::ClientCos::AppCamAuthQueryReq& CosReqMsg::appcamauthqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.AppCamAuthQueryReq_body)
  return _internal_appcamauthqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_appcamauthqueryreq_body(
    ::ClientCos::AppCamAuthQueryReq* appcamauthqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appcamauthqueryreq_body_);
  }
  appcamauthqueryreq_body_ = appcamauthqueryreq_body;
  if (appcamauthqueryreq_body) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.AppCamAuthQueryReq_body)
}
inline ::ClientCos::AppCamAuthQueryReq* CosReqMsg::release_appcamauthqueryreq_body() {
  _has_bits_[1] &= ~0x00000008u;
  ::ClientCos::AppCamAuthQueryReq* temp = appcamauthqueryreq_body_;
  appcamauthqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AppCamAuthQueryReq* CosReqMsg::unsafe_arena_release_appcamauthqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.AppCamAuthQueryReq_body)
  _has_bits_[1] &= ~0x00000008u;
  ::ClientCos::AppCamAuthQueryReq* temp = appcamauthqueryreq_body_;
  appcamauthqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::AppCamAuthQueryReq* CosReqMsg::_internal_mutable_appcamauthqueryreq_body() {
  _has_bits_[1] |= 0x00000008u;
  if (appcamauthqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AppCamAuthQueryReq>(GetArena());
    appcamauthqueryreq_body_ = p;
  }
  return appcamauthqueryreq_body_;
}
inline ::ClientCos::AppCamAuthQueryReq* CosReqMsg::mutable_appcamauthqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.AppCamAuthQueryReq_body)
  return _internal_mutable_appcamauthqueryreq_body();
}
inline void CosReqMsg::set_allocated_appcamauthqueryreq_body(::ClientCos::AppCamAuthQueryReq* appcamauthqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appcamauthqueryreq_body_;
  }
  if (appcamauthqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appcamauthqueryreq_body);
    if (message_arena != submessage_arena) {
      appcamauthqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appcamauthqueryreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  appcamauthqueryreq_body_ = appcamauthqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.AppCamAuthQueryReq_body)
}

// optional .ClientCos.FileUnfinishAttrQueryReq FileUnfinishAttrQueryReq_body = 54;
inline bool CosReqMsg::_internal_has_fileunfinishattrqueryreq_body() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || fileunfinishattrqueryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_fileunfinishattrqueryreq_body() const {
  return _internal_has_fileunfinishattrqueryreq_body();
}
inline void CosReqMsg::clear_fileunfinishattrqueryreq_body() {
  if (fileunfinishattrqueryreq_body_ != nullptr) fileunfinishattrqueryreq_body_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::ClientCos::FileUnfinishAttrQueryReq& CosReqMsg::_internal_fileunfinishattrqueryreq_body() const {
  const ::ClientCos::FileUnfinishAttrQueryReq* p = fileunfinishattrqueryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileUnfinishAttrQueryReq&>(
      ::ClientCos::_FileUnfinishAttrQueryReq_default_instance_);
}
inline const ::ClientCos::FileUnfinishAttrQueryReq& CosReqMsg::fileunfinishattrqueryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.FileUnfinishAttrQueryReq_body)
  return _internal_fileunfinishattrqueryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_fileunfinishattrqueryreq_body(
    ::ClientCos::FileUnfinishAttrQueryReq* fileunfinishattrqueryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileunfinishattrqueryreq_body_);
  }
  fileunfinishattrqueryreq_body_ = fileunfinishattrqueryreq_body;
  if (fileunfinishattrqueryreq_body) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.FileUnfinishAttrQueryReq_body)
}
inline ::ClientCos::FileUnfinishAttrQueryReq* CosReqMsg::release_fileunfinishattrqueryreq_body() {
  _has_bits_[1] &= ~0x00000010u;
  ::ClientCos::FileUnfinishAttrQueryReq* temp = fileunfinishattrqueryreq_body_;
  fileunfinishattrqueryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileUnfinishAttrQueryReq* CosReqMsg::unsafe_arena_release_fileunfinishattrqueryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.FileUnfinishAttrQueryReq_body)
  _has_bits_[1] &= ~0x00000010u;
  ::ClientCos::FileUnfinishAttrQueryReq* temp = fileunfinishattrqueryreq_body_;
  fileunfinishattrqueryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileUnfinishAttrQueryReq* CosReqMsg::_internal_mutable_fileunfinishattrqueryreq_body() {
  _has_bits_[1] |= 0x00000010u;
  if (fileunfinishattrqueryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileUnfinishAttrQueryReq>(GetArena());
    fileunfinishattrqueryreq_body_ = p;
  }
  return fileunfinishattrqueryreq_body_;
}
inline ::ClientCos::FileUnfinishAttrQueryReq* CosReqMsg::mutable_fileunfinishattrqueryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.FileUnfinishAttrQueryReq_body)
  return _internal_mutable_fileunfinishattrqueryreq_body();
}
inline void CosReqMsg::set_allocated_fileunfinishattrqueryreq_body(::ClientCos::FileUnfinishAttrQueryReq* fileunfinishattrqueryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fileunfinishattrqueryreq_body_;
  }
  if (fileunfinishattrqueryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fileunfinishattrqueryreq_body);
    if (message_arena != submessage_arena) {
      fileunfinishattrqueryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileunfinishattrqueryreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  fileunfinishattrqueryreq_body_ = fileunfinishattrqueryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.FileUnfinishAttrQueryReq_body)
}

// optional .ClientCos.ReduceLifecycleReq ReduceLifecycleReq_body = 55;
inline bool CosReqMsg::_internal_has_reducelifecyclereq_body() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || reducelifecyclereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_reducelifecyclereq_body() const {
  return _internal_has_reducelifecyclereq_body();
}
inline void CosReqMsg::clear_reducelifecyclereq_body() {
  if (reducelifecyclereq_body_ != nullptr) reducelifecyclereq_body_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::ClientCos::ReduceLifecycleReq& CosReqMsg::_internal_reducelifecyclereq_body() const {
  const ::ClientCos::ReduceLifecycleReq* p = reducelifecyclereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ReduceLifecycleReq&>(
      ::ClientCos::_ReduceLifecycleReq_default_instance_);
}
inline const ::ClientCos::ReduceLifecycleReq& CosReqMsg::reducelifecyclereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ReduceLifecycleReq_body)
  return _internal_reducelifecyclereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_reducelifecyclereq_body(
    ::ClientCos::ReduceLifecycleReq* reducelifecyclereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reducelifecyclereq_body_);
  }
  reducelifecyclereq_body_ = reducelifecyclereq_body;
  if (reducelifecyclereq_body) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ReduceLifecycleReq_body)
}
inline ::ClientCos::ReduceLifecycleReq* CosReqMsg::release_reducelifecyclereq_body() {
  _has_bits_[1] &= ~0x00000020u;
  ::ClientCos::ReduceLifecycleReq* temp = reducelifecyclereq_body_;
  reducelifecyclereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ReduceLifecycleReq* CosReqMsg::unsafe_arena_release_reducelifecyclereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ReduceLifecycleReq_body)
  _has_bits_[1] &= ~0x00000020u;
  ::ClientCos::ReduceLifecycleReq* temp = reducelifecyclereq_body_;
  reducelifecyclereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ReduceLifecycleReq* CosReqMsg::_internal_mutable_reducelifecyclereq_body() {
  _has_bits_[1] |= 0x00000020u;
  if (reducelifecyclereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ReduceLifecycleReq>(GetArena());
    reducelifecyclereq_body_ = p;
  }
  return reducelifecyclereq_body_;
}
inline ::ClientCos::ReduceLifecycleReq* CosReqMsg::mutable_reducelifecyclereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ReduceLifecycleReq_body)
  return _internal_mutable_reducelifecyclereq_body();
}
inline void CosReqMsg::set_allocated_reducelifecyclereq_body(::ClientCos::ReduceLifecycleReq* reducelifecyclereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reducelifecyclereq_body_;
  }
  if (reducelifecyclereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reducelifecyclereq_body);
    if (message_arena != submessage_arena) {
      reducelifecyclereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reducelifecyclereq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  reducelifecyclereq_body_ = reducelifecyclereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ReduceLifecycleReq_body)
}

// optional .ClientCos.RetrieveLifecycleReq RetrieveLifecycleReq_body = 56;
inline bool CosReqMsg::_internal_has_retrievelifecyclereq_body() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || retrievelifecyclereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_retrievelifecyclereq_body() const {
  return _internal_has_retrievelifecyclereq_body();
}
inline void CosReqMsg::clear_retrievelifecyclereq_body() {
  if (retrievelifecyclereq_body_ != nullptr) retrievelifecyclereq_body_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::ClientCos::RetrieveLifecycleReq& CosReqMsg::_internal_retrievelifecyclereq_body() const {
  const ::ClientCos::RetrieveLifecycleReq* p = retrievelifecyclereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::RetrieveLifecycleReq&>(
      ::ClientCos::_RetrieveLifecycleReq_default_instance_);
}
inline const ::ClientCos::RetrieveLifecycleReq& CosReqMsg::retrievelifecyclereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.RetrieveLifecycleReq_body)
  return _internal_retrievelifecyclereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_retrievelifecyclereq_body(
    ::ClientCos::RetrieveLifecycleReq* retrievelifecyclereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retrievelifecyclereq_body_);
  }
  retrievelifecyclereq_body_ = retrievelifecyclereq_body;
  if (retrievelifecyclereq_body) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.RetrieveLifecycleReq_body)
}
inline ::ClientCos::RetrieveLifecycleReq* CosReqMsg::release_retrievelifecyclereq_body() {
  _has_bits_[1] &= ~0x00000040u;
  ::ClientCos::RetrieveLifecycleReq* temp = retrievelifecyclereq_body_;
  retrievelifecyclereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::RetrieveLifecycleReq* CosReqMsg::unsafe_arena_release_retrievelifecyclereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.RetrieveLifecycleReq_body)
  _has_bits_[1] &= ~0x00000040u;
  ::ClientCos::RetrieveLifecycleReq* temp = retrievelifecyclereq_body_;
  retrievelifecyclereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::RetrieveLifecycleReq* CosReqMsg::_internal_mutable_retrievelifecyclereq_body() {
  _has_bits_[1] |= 0x00000040u;
  if (retrievelifecyclereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::RetrieveLifecycleReq>(GetArena());
    retrievelifecyclereq_body_ = p;
  }
  return retrievelifecyclereq_body_;
}
inline ::ClientCos::RetrieveLifecycleReq* CosReqMsg::mutable_retrievelifecyclereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.RetrieveLifecycleReq_body)
  return _internal_mutable_retrievelifecyclereq_body();
}
inline void CosReqMsg::set_allocated_retrievelifecyclereq_body(::ClientCos::RetrieveLifecycleReq* retrievelifecyclereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete retrievelifecyclereq_body_;
  }
  if (retrievelifecyclereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(retrievelifecyclereq_body);
    if (message_arena != submessage_arena) {
      retrievelifecyclereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retrievelifecyclereq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  retrievelifecyclereq_body_ = retrievelifecyclereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.RetrieveLifecycleReq_body)
}

// optional .ClientCos.SetObjAclReq SetObjAclReq_body = 57;
inline bool CosReqMsg::_internal_has_setobjaclreq_body() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || setobjaclreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setobjaclreq_body() const {
  return _internal_has_setobjaclreq_body();
}
inline void CosReqMsg::clear_setobjaclreq_body() {
  if (setobjaclreq_body_ != nullptr) setobjaclreq_body_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::ClientCos::SetObjAclReq& CosReqMsg::_internal_setobjaclreq_body() const {
  const ::ClientCos::SetObjAclReq* p = setobjaclreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetObjAclReq&>(
      ::ClientCos::_SetObjAclReq_default_instance_);
}
inline const ::ClientCos::SetObjAclReq& CosReqMsg::setobjaclreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetObjAclReq_body)
  return _internal_setobjaclreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setobjaclreq_body(
    ::ClientCos::SetObjAclReq* setobjaclreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setobjaclreq_body_);
  }
  setobjaclreq_body_ = setobjaclreq_body;
  if (setobjaclreq_body) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetObjAclReq_body)
}
inline ::ClientCos::SetObjAclReq* CosReqMsg::release_setobjaclreq_body() {
  _has_bits_[1] &= ~0x00000080u;
  ::ClientCos::SetObjAclReq* temp = setobjaclreq_body_;
  setobjaclreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetObjAclReq* CosReqMsg::unsafe_arena_release_setobjaclreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetObjAclReq_body)
  _has_bits_[1] &= ~0x00000080u;
  ::ClientCos::SetObjAclReq* temp = setobjaclreq_body_;
  setobjaclreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetObjAclReq* CosReqMsg::_internal_mutable_setobjaclreq_body() {
  _has_bits_[1] |= 0x00000080u;
  if (setobjaclreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetObjAclReq>(GetArena());
    setobjaclreq_body_ = p;
  }
  return setobjaclreq_body_;
}
inline ::ClientCos::SetObjAclReq* CosReqMsg::mutable_setobjaclreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetObjAclReq_body)
  return _internal_mutable_setobjaclreq_body();
}
inline void CosReqMsg::set_allocated_setobjaclreq_body(::ClientCos::SetObjAclReq* setobjaclreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setobjaclreq_body_;
  }
  if (setobjaclreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setobjaclreq_body);
    if (message_arena != submessage_arena) {
      setobjaclreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setobjaclreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  setobjaclreq_body_ = setobjaclreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetObjAclReq_body)
}

// optional .ClientCos.GetObjAclReq GetObjAclReq_body = 58;
inline bool CosReqMsg::_internal_has_getobjaclreq_body() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || getobjaclreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_getobjaclreq_body() const {
  return _internal_has_getobjaclreq_body();
}
inline void CosReqMsg::clear_getobjaclreq_body() {
  if (getobjaclreq_body_ != nullptr) getobjaclreq_body_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::ClientCos::GetObjAclReq& CosReqMsg::_internal_getobjaclreq_body() const {
  const ::ClientCos::GetObjAclReq* p = getobjaclreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetObjAclReq&>(
      ::ClientCos::_GetObjAclReq_default_instance_);
}
inline const ::ClientCos::GetObjAclReq& CosReqMsg::getobjaclreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.GetObjAclReq_body)
  return _internal_getobjaclreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_getobjaclreq_body(
    ::ClientCos::GetObjAclReq* getobjaclreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getobjaclreq_body_);
  }
  getobjaclreq_body_ = getobjaclreq_body;
  if (getobjaclreq_body) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.GetObjAclReq_body)
}
inline ::ClientCos::GetObjAclReq* CosReqMsg::release_getobjaclreq_body() {
  _has_bits_[1] &= ~0x00000100u;
  ::ClientCos::GetObjAclReq* temp = getobjaclreq_body_;
  getobjaclreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetObjAclReq* CosReqMsg::unsafe_arena_release_getobjaclreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.GetObjAclReq_body)
  _has_bits_[1] &= ~0x00000100u;
  ::ClientCos::GetObjAclReq* temp = getobjaclreq_body_;
  getobjaclreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetObjAclReq* CosReqMsg::_internal_mutable_getobjaclreq_body() {
  _has_bits_[1] |= 0x00000100u;
  if (getobjaclreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetObjAclReq>(GetArena());
    getobjaclreq_body_ = p;
  }
  return getobjaclreq_body_;
}
inline ::ClientCos::GetObjAclReq* CosReqMsg::mutable_getobjaclreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.GetObjAclReq_body)
  return _internal_mutable_getobjaclreq_body();
}
inline void CosReqMsg::set_allocated_getobjaclreq_body(::ClientCos::GetObjAclReq* getobjaclreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getobjaclreq_body_;
  }
  if (getobjaclreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getobjaclreq_body);
    if (message_arena != submessage_arena) {
      getobjaclreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getobjaclreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  getobjaclreq_body_ = getobjaclreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.GetObjAclReq_body)
}

// optional .ClientCos.SetBucketUinReq SetBucketUinReq_body = 59;
inline bool CosReqMsg::_internal_has_setbucketuinreq_body() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || setbucketuinreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setbucketuinreq_body() const {
  return _internal_has_setbucketuinreq_body();
}
inline void CosReqMsg::clear_setbucketuinreq_body() {
  if (setbucketuinreq_body_ != nullptr) setbucketuinreq_body_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::ClientCos::SetBucketUinReq& CosReqMsg::_internal_setbucketuinreq_body() const {
  const ::ClientCos::SetBucketUinReq* p = setbucketuinreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketUinReq&>(
      ::ClientCos::_SetBucketUinReq_default_instance_);
}
inline const ::ClientCos::SetBucketUinReq& CosReqMsg::setbucketuinreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetBucketUinReq_body)
  return _internal_setbucketuinreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setbucketuinreq_body(
    ::ClientCos::SetBucketUinReq* setbucketuinreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketuinreq_body_);
  }
  setbucketuinreq_body_ = setbucketuinreq_body;
  if (setbucketuinreq_body) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetBucketUinReq_body)
}
inline ::ClientCos::SetBucketUinReq* CosReqMsg::release_setbucketuinreq_body() {
  _has_bits_[1] &= ~0x00000200u;
  ::ClientCos::SetBucketUinReq* temp = setbucketuinreq_body_;
  setbucketuinreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketUinReq* CosReqMsg::unsafe_arena_release_setbucketuinreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetBucketUinReq_body)
  _has_bits_[1] &= ~0x00000200u;
  ::ClientCos::SetBucketUinReq* temp = setbucketuinreq_body_;
  setbucketuinreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketUinReq* CosReqMsg::_internal_mutable_setbucketuinreq_body() {
  _has_bits_[1] |= 0x00000200u;
  if (setbucketuinreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketUinReq>(GetArena());
    setbucketuinreq_body_ = p;
  }
  return setbucketuinreq_body_;
}
inline ::ClientCos::SetBucketUinReq* CosReqMsg::mutable_setbucketuinreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetBucketUinReq_body)
  return _internal_mutable_setbucketuinreq_body();
}
inline void CosReqMsg::set_allocated_setbucketuinreq_body(::ClientCos::SetBucketUinReq* setbucketuinreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketuinreq_body_;
  }
  if (setbucketuinreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketuinreq_body);
    if (message_arena != submessage_arena) {
      setbucketuinreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketuinreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  setbucketuinreq_body_ = setbucketuinreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetBucketUinReq_body)
}

// optional .ClientCos.GetBucketUinReq GetBucketUinReq_body = 60;
inline bool CosReqMsg::_internal_has_getbucketuinreq_body() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || getbucketuinreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_getbucketuinreq_body() const {
  return _internal_has_getbucketuinreq_body();
}
inline void CosReqMsg::clear_getbucketuinreq_body() {
  if (getbucketuinreq_body_ != nullptr) getbucketuinreq_body_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::ClientCos::GetBucketUinReq& CosReqMsg::_internal_getbucketuinreq_body() const {
  const ::ClientCos::GetBucketUinReq* p = getbucketuinreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetBucketUinReq&>(
      ::ClientCos::_GetBucketUinReq_default_instance_);
}
inline const ::ClientCos::GetBucketUinReq& CosReqMsg::getbucketuinreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.GetBucketUinReq_body)
  return _internal_getbucketuinreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_getbucketuinreq_body(
    ::ClientCos::GetBucketUinReq* getbucketuinreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbucketuinreq_body_);
  }
  getbucketuinreq_body_ = getbucketuinreq_body;
  if (getbucketuinreq_body) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.GetBucketUinReq_body)
}
inline ::ClientCos::GetBucketUinReq* CosReqMsg::release_getbucketuinreq_body() {
  _has_bits_[1] &= ~0x00000400u;
  ::ClientCos::GetBucketUinReq* temp = getbucketuinreq_body_;
  getbucketuinreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetBucketUinReq* CosReqMsg::unsafe_arena_release_getbucketuinreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.GetBucketUinReq_body)
  _has_bits_[1] &= ~0x00000400u;
  ::ClientCos::GetBucketUinReq* temp = getbucketuinreq_body_;
  getbucketuinreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetBucketUinReq* CosReqMsg::_internal_mutable_getbucketuinreq_body() {
  _has_bits_[1] |= 0x00000400u;
  if (getbucketuinreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetBucketUinReq>(GetArena());
    getbucketuinreq_body_ = p;
  }
  return getbucketuinreq_body_;
}
inline ::ClientCos::GetBucketUinReq* CosReqMsg::mutable_getbucketuinreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.GetBucketUinReq_body)
  return _internal_mutable_getbucketuinreq_body();
}
inline void CosReqMsg::set_allocated_getbucketuinreq_body(::ClientCos::GetBucketUinReq* getbucketuinreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getbucketuinreq_body_;
  }
  if (getbucketuinreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbucketuinreq_body);
    if (message_arena != submessage_arena) {
      getbucketuinreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbucketuinreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  getbucketuinreq_body_ = getbucketuinreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.GetBucketUinReq_body)
}

// optional .ClientCos.ListDirectReq ListDirectReq_body = 61;
inline bool CosReqMsg::_internal_has_listdirectreq_body() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || listdirectreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_listdirectreq_body() const {
  return _internal_has_listdirectreq_body();
}
inline void CosReqMsg::clear_listdirectreq_body() {
  if (listdirectreq_body_ != nullptr) listdirectreq_body_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::ClientCos::ListDirectReq& CosReqMsg::_internal_listdirectreq_body() const {
  const ::ClientCos::ListDirectReq* p = listdirectreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListDirectReq&>(
      ::ClientCos::_ListDirectReq_default_instance_);
}
inline const ::ClientCos::ListDirectReq& CosReqMsg::listdirectreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.ListDirectReq_body)
  return _internal_listdirectreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_listdirectreq_body(
    ::ClientCos::ListDirectReq* listdirectreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listdirectreq_body_);
  }
  listdirectreq_body_ = listdirectreq_body;
  if (listdirectreq_body) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.ListDirectReq_body)
}
inline ::ClientCos::ListDirectReq* CosReqMsg::release_listdirectreq_body() {
  _has_bits_[1] &= ~0x00000800u;
  ::ClientCos::ListDirectReq* temp = listdirectreq_body_;
  listdirectreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListDirectReq* CosReqMsg::unsafe_arena_release_listdirectreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.ListDirectReq_body)
  _has_bits_[1] &= ~0x00000800u;
  ::ClientCos::ListDirectReq* temp = listdirectreq_body_;
  listdirectreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListDirectReq* CosReqMsg::_internal_mutable_listdirectreq_body() {
  _has_bits_[1] |= 0x00000800u;
  if (listdirectreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListDirectReq>(GetArena());
    listdirectreq_body_ = p;
  }
  return listdirectreq_body_;
}
inline ::ClientCos::ListDirectReq* CosReqMsg::mutable_listdirectreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.ListDirectReq_body)
  return _internal_mutable_listdirectreq_body();
}
inline void CosReqMsg::set_allocated_listdirectreq_body(::ClientCos::ListDirectReq* listdirectreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listdirectreq_body_;
  }
  if (listdirectreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listdirectreq_body);
    if (message_arena != submessage_arena) {
      listdirectreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listdirectreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  listdirectreq_body_ = listdirectreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.ListDirectReq_body)
}

// optional .ClientCos.CheckObjAclReq CheckObjAclReq_body = 62;
inline bool CosReqMsg::_internal_has_checkobjaclreq_body() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || checkobjaclreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_checkobjaclreq_body() const {
  return _internal_has_checkobjaclreq_body();
}
inline void CosReqMsg::clear_checkobjaclreq_body() {
  if (checkobjaclreq_body_ != nullptr) checkobjaclreq_body_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::ClientCos::CheckObjAclReq& CosReqMsg::_internal_checkobjaclreq_body() const {
  const ::ClientCos::CheckObjAclReq* p = checkobjaclreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CheckObjAclReq&>(
      ::ClientCos::_CheckObjAclReq_default_instance_);
}
inline const ::ClientCos::CheckObjAclReq& CosReqMsg::checkobjaclreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.CheckObjAclReq_body)
  return _internal_checkobjaclreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_checkobjaclreq_body(
    ::ClientCos::CheckObjAclReq* checkobjaclreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkobjaclreq_body_);
  }
  checkobjaclreq_body_ = checkobjaclreq_body;
  if (checkobjaclreq_body) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.CheckObjAclReq_body)
}
inline ::ClientCos::CheckObjAclReq* CosReqMsg::release_checkobjaclreq_body() {
  _has_bits_[1] &= ~0x00001000u;
  ::ClientCos::CheckObjAclReq* temp = checkobjaclreq_body_;
  checkobjaclreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CheckObjAclReq* CosReqMsg::unsafe_arena_release_checkobjaclreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.CheckObjAclReq_body)
  _has_bits_[1] &= ~0x00001000u;
  ::ClientCos::CheckObjAclReq* temp = checkobjaclreq_body_;
  checkobjaclreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CheckObjAclReq* CosReqMsg::_internal_mutable_checkobjaclreq_body() {
  _has_bits_[1] |= 0x00001000u;
  if (checkobjaclreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CheckObjAclReq>(GetArena());
    checkobjaclreq_body_ = p;
  }
  return checkobjaclreq_body_;
}
inline ::ClientCos::CheckObjAclReq* CosReqMsg::mutable_checkobjaclreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.CheckObjAclReq_body)
  return _internal_mutable_checkobjaclreq_body();
}
inline void CosReqMsg::set_allocated_checkobjaclreq_body(::ClientCos::CheckObjAclReq* checkobjaclreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checkobjaclreq_body_;
  }
  if (checkobjaclreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkobjaclreq_body);
    if (message_arena != submessage_arena) {
      checkobjaclreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkobjaclreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  checkobjaclreq_body_ = checkobjaclreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.CheckObjAclReq_body)
}

// optional .ClientCos.CasObjRestoreFinReq CasObjRestoreFinReq_body = 63;
inline bool CosReqMsg::_internal_has_casobjrestorefinreq_body() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || casobjrestorefinreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_casobjrestorefinreq_body() const {
  return _internal_has_casobjrestorefinreq_body();
}
inline void CosReqMsg::clear_casobjrestorefinreq_body() {
  if (casobjrestorefinreq_body_ != nullptr) casobjrestorefinreq_body_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::ClientCos::CasObjRestoreFinReq& CosReqMsg::_internal_casobjrestorefinreq_body() const {
  const ::ClientCos::CasObjRestoreFinReq* p = casobjrestorefinreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasObjRestoreFinReq&>(
      ::ClientCos::_CasObjRestoreFinReq_default_instance_);
}
inline const ::ClientCos::CasObjRestoreFinReq& CosReqMsg::casobjrestorefinreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.CasObjRestoreFinReq_body)
  return _internal_casobjrestorefinreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_casobjrestorefinreq_body(
    ::ClientCos::CasObjRestoreFinReq* casobjrestorefinreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casobjrestorefinreq_body_);
  }
  casobjrestorefinreq_body_ = casobjrestorefinreq_body;
  if (casobjrestorefinreq_body) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.CasObjRestoreFinReq_body)
}
inline ::ClientCos::CasObjRestoreFinReq* CosReqMsg::release_casobjrestorefinreq_body() {
  _has_bits_[1] &= ~0x00002000u;
  ::ClientCos::CasObjRestoreFinReq* temp = casobjrestorefinreq_body_;
  casobjrestorefinreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasObjRestoreFinReq* CosReqMsg::unsafe_arena_release_casobjrestorefinreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.CasObjRestoreFinReq_body)
  _has_bits_[1] &= ~0x00002000u;
  ::ClientCos::CasObjRestoreFinReq* temp = casobjrestorefinreq_body_;
  casobjrestorefinreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasObjRestoreFinReq* CosReqMsg::_internal_mutable_casobjrestorefinreq_body() {
  _has_bits_[1] |= 0x00002000u;
  if (casobjrestorefinreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasObjRestoreFinReq>(GetArena());
    casobjrestorefinreq_body_ = p;
  }
  return casobjrestorefinreq_body_;
}
inline ::ClientCos::CasObjRestoreFinReq* CosReqMsg::mutable_casobjrestorefinreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.CasObjRestoreFinReq_body)
  return _internal_mutable_casobjrestorefinreq_body();
}
inline void CosReqMsg::set_allocated_casobjrestorefinreq_body(::ClientCos::CasObjRestoreFinReq* casobjrestorefinreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casobjrestorefinreq_body_;
  }
  if (casobjrestorefinreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casobjrestorefinreq_body);
    if (message_arena != submessage_arena) {
      casobjrestorefinreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casobjrestorefinreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  casobjrestorefinreq_body_ = casobjrestorefinreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.CasObjRestoreFinReq_body)
}

// optional .ClientCos.SetBucketLockReq SetBucketLockReq_body = 64;
inline bool CosReqMsg::_internal_has_setbucketlockreq_body() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || setbucketlockreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setbucketlockreq_body() const {
  return _internal_has_setbucketlockreq_body();
}
inline void CosReqMsg::clear_setbucketlockreq_body() {
  if (setbucketlockreq_body_ != nullptr) setbucketlockreq_body_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::ClientCos::SetBucketLockReq& CosReqMsg::_internal_setbucketlockreq_body() const {
  const ::ClientCos::SetBucketLockReq* p = setbucketlockreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketLockReq&>(
      ::ClientCos::_SetBucketLockReq_default_instance_);
}
inline const ::ClientCos::SetBucketLockReq& CosReqMsg::setbucketlockreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetBucketLockReq_body)
  return _internal_setbucketlockreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setbucketlockreq_body(
    ::ClientCos::SetBucketLockReq* setbucketlockreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketlockreq_body_);
  }
  setbucketlockreq_body_ = setbucketlockreq_body;
  if (setbucketlockreq_body) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetBucketLockReq_body)
}
inline ::ClientCos::SetBucketLockReq* CosReqMsg::release_setbucketlockreq_body() {
  _has_bits_[1] &= ~0x00004000u;
  ::ClientCos::SetBucketLockReq* temp = setbucketlockreq_body_;
  setbucketlockreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketLockReq* CosReqMsg::unsafe_arena_release_setbucketlockreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetBucketLockReq_body)
  _has_bits_[1] &= ~0x00004000u;
  ::ClientCos::SetBucketLockReq* temp = setbucketlockreq_body_;
  setbucketlockreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketLockReq* CosReqMsg::_internal_mutable_setbucketlockreq_body() {
  _has_bits_[1] |= 0x00004000u;
  if (setbucketlockreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketLockReq>(GetArena());
    setbucketlockreq_body_ = p;
  }
  return setbucketlockreq_body_;
}
inline ::ClientCos::SetBucketLockReq* CosReqMsg::mutable_setbucketlockreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetBucketLockReq_body)
  return _internal_mutable_setbucketlockreq_body();
}
inline void CosReqMsg::set_allocated_setbucketlockreq_body(::ClientCos::SetBucketLockReq* setbucketlockreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketlockreq_body_;
  }
  if (setbucketlockreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketlockreq_body);
    if (message_arena != submessage_arena) {
      setbucketlockreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketlockreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  setbucketlockreq_body_ = setbucketlockreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetBucketLockReq_body)
}

// optional .ClientCos.GetBucketLockReq GetBucketLockReq_body = 65;
inline bool CosReqMsg::_internal_has_getbucketlockreq_body() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || getbucketlockreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_getbucketlockreq_body() const {
  return _internal_has_getbucketlockreq_body();
}
inline void CosReqMsg::clear_getbucketlockreq_body() {
  if (getbucketlockreq_body_ != nullptr) getbucketlockreq_body_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
inline const ::ClientCos::GetBucketLockReq& CosReqMsg::_internal_getbucketlockreq_body() const {
  const ::ClientCos::GetBucketLockReq* p = getbucketlockreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetBucketLockReq&>(
      ::ClientCos::_GetBucketLockReq_default_instance_);
}
inline const ::ClientCos::GetBucketLockReq& CosReqMsg::getbucketlockreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.GetBucketLockReq_body)
  return _internal_getbucketlockreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_getbucketlockreq_body(
    ::ClientCos::GetBucketLockReq* getbucketlockreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbucketlockreq_body_);
  }
  getbucketlockreq_body_ = getbucketlockreq_body;
  if (getbucketlockreq_body) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.GetBucketLockReq_body)
}
inline ::ClientCos::GetBucketLockReq* CosReqMsg::release_getbucketlockreq_body() {
  _has_bits_[1] &= ~0x00008000u;
  ::ClientCos::GetBucketLockReq* temp = getbucketlockreq_body_;
  getbucketlockreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetBucketLockReq* CosReqMsg::unsafe_arena_release_getbucketlockreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.GetBucketLockReq_body)
  _has_bits_[1] &= ~0x00008000u;
  ::ClientCos::GetBucketLockReq* temp = getbucketlockreq_body_;
  getbucketlockreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetBucketLockReq* CosReqMsg::_internal_mutable_getbucketlockreq_body() {
  _has_bits_[1] |= 0x00008000u;
  if (getbucketlockreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetBucketLockReq>(GetArena());
    getbucketlockreq_body_ = p;
  }
  return getbucketlockreq_body_;
}
inline ::ClientCos::GetBucketLockReq* CosReqMsg::mutable_getbucketlockreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.GetBucketLockReq_body)
  return _internal_mutable_getbucketlockreq_body();
}
inline void CosReqMsg::set_allocated_getbucketlockreq_body(::ClientCos::GetBucketLockReq* getbucketlockreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getbucketlockreq_body_;
  }
  if (getbucketlockreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbucketlockreq_body);
    if (message_arena != submessage_arena) {
      getbucketlockreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbucketlockreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  getbucketlockreq_body_ = getbucketlockreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.GetBucketLockReq_body)
}

// optional .ClientCos.SetBucketInventoryReq SetBucketInventoryReq_body = 66;
inline bool CosReqMsg::_internal_has_setbucketinventoryreq_body() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || setbucketinventoryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setbucketinventoryreq_body() const {
  return _internal_has_setbucketinventoryreq_body();
}
inline void CosReqMsg::clear_setbucketinventoryreq_body() {
  if (setbucketinventoryreq_body_ != nullptr) setbucketinventoryreq_body_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
inline const ::ClientCos::SetBucketInventoryReq& CosReqMsg::_internal_setbucketinventoryreq_body() const {
  const ::ClientCos::SetBucketInventoryReq* p = setbucketinventoryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketInventoryReq&>(
      ::ClientCos::_SetBucketInventoryReq_default_instance_);
}
inline const ::ClientCos::SetBucketInventoryReq& CosReqMsg::setbucketinventoryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetBucketInventoryReq_body)
  return _internal_setbucketinventoryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setbucketinventoryreq_body(
    ::ClientCos::SetBucketInventoryReq* setbucketinventoryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketinventoryreq_body_);
  }
  setbucketinventoryreq_body_ = setbucketinventoryreq_body;
  if (setbucketinventoryreq_body) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetBucketInventoryReq_body)
}
inline ::ClientCos::SetBucketInventoryReq* CosReqMsg::release_setbucketinventoryreq_body() {
  _has_bits_[1] &= ~0x00010000u;
  ::ClientCos::SetBucketInventoryReq* temp = setbucketinventoryreq_body_;
  setbucketinventoryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketInventoryReq* CosReqMsg::unsafe_arena_release_setbucketinventoryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetBucketInventoryReq_body)
  _has_bits_[1] &= ~0x00010000u;
  ::ClientCos::SetBucketInventoryReq* temp = setbucketinventoryreq_body_;
  setbucketinventoryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketInventoryReq* CosReqMsg::_internal_mutable_setbucketinventoryreq_body() {
  _has_bits_[1] |= 0x00010000u;
  if (setbucketinventoryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketInventoryReq>(GetArena());
    setbucketinventoryreq_body_ = p;
  }
  return setbucketinventoryreq_body_;
}
inline ::ClientCos::SetBucketInventoryReq* CosReqMsg::mutable_setbucketinventoryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetBucketInventoryReq_body)
  return _internal_mutable_setbucketinventoryreq_body();
}
inline void CosReqMsg::set_allocated_setbucketinventoryreq_body(::ClientCos::SetBucketInventoryReq* setbucketinventoryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketinventoryreq_body_;
  }
  if (setbucketinventoryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketinventoryreq_body);
    if (message_arena != submessage_arena) {
      setbucketinventoryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketinventoryreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  setbucketinventoryreq_body_ = setbucketinventoryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetBucketInventoryReq_body)
}

// optional .ClientCos.GetBucketInventoryReq GetBucketInventoryReq_body = 67;
inline bool CosReqMsg::_internal_has_getbucketinventoryreq_body() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || getbucketinventoryreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_getbucketinventoryreq_body() const {
  return _internal_has_getbucketinventoryreq_body();
}
inline void CosReqMsg::clear_getbucketinventoryreq_body() {
  if (getbucketinventoryreq_body_ != nullptr) getbucketinventoryreq_body_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
inline const ::ClientCos::GetBucketInventoryReq& CosReqMsg::_internal_getbucketinventoryreq_body() const {
  const ::ClientCos::GetBucketInventoryReq* p = getbucketinventoryreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetBucketInventoryReq&>(
      ::ClientCos::_GetBucketInventoryReq_default_instance_);
}
inline const ::ClientCos::GetBucketInventoryReq& CosReqMsg::getbucketinventoryreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.GetBucketInventoryReq_body)
  return _internal_getbucketinventoryreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_getbucketinventoryreq_body(
    ::ClientCos::GetBucketInventoryReq* getbucketinventoryreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbucketinventoryreq_body_);
  }
  getbucketinventoryreq_body_ = getbucketinventoryreq_body;
  if (getbucketinventoryreq_body) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.GetBucketInventoryReq_body)
}
inline ::ClientCos::GetBucketInventoryReq* CosReqMsg::release_getbucketinventoryreq_body() {
  _has_bits_[1] &= ~0x00020000u;
  ::ClientCos::GetBucketInventoryReq* temp = getbucketinventoryreq_body_;
  getbucketinventoryreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetBucketInventoryReq* CosReqMsg::unsafe_arena_release_getbucketinventoryreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.GetBucketInventoryReq_body)
  _has_bits_[1] &= ~0x00020000u;
  ::ClientCos::GetBucketInventoryReq* temp = getbucketinventoryreq_body_;
  getbucketinventoryreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetBucketInventoryReq* CosReqMsg::_internal_mutable_getbucketinventoryreq_body() {
  _has_bits_[1] |= 0x00020000u;
  if (getbucketinventoryreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetBucketInventoryReq>(GetArena());
    getbucketinventoryreq_body_ = p;
  }
  return getbucketinventoryreq_body_;
}
inline ::ClientCos::GetBucketInventoryReq* CosReqMsg::mutable_getbucketinventoryreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.GetBucketInventoryReq_body)
  return _internal_mutable_getbucketinventoryreq_body();
}
inline void CosReqMsg::set_allocated_getbucketinventoryreq_body(::ClientCos::GetBucketInventoryReq* getbucketinventoryreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getbucketinventoryreq_body_;
  }
  if (getbucketinventoryreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbucketinventoryreq_body);
    if (message_arena != submessage_arena) {
      getbucketinventoryreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbucketinventoryreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  getbucketinventoryreq_body_ = getbucketinventoryreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.GetBucketInventoryReq_body)
}

// optional .ClientCos.COSTransToCASReq COSTransToCASReq_body = 68;
inline bool CosReqMsg::_internal_has_costranstocasreq_body() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || costranstocasreq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_costranstocasreq_body() const {
  return _internal_has_costranstocasreq_body();
}
inline void CosReqMsg::clear_costranstocasreq_body() {
  if (costranstocasreq_body_ != nullptr) costranstocasreq_body_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
inline const ::ClientCos::COSTransToCASReq& CosReqMsg::_internal_costranstocasreq_body() const {
  const ::ClientCos::COSTransToCASReq* p = costranstocasreq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::COSTransToCASReq&>(
      ::ClientCos::_COSTransToCASReq_default_instance_);
}
inline const ::ClientCos::COSTransToCASReq& CosReqMsg::costranstocasreq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.COSTransToCASReq_body)
  return _internal_costranstocasreq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_costranstocasreq_body(
    ::ClientCos::COSTransToCASReq* costranstocasreq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(costranstocasreq_body_);
  }
  costranstocasreq_body_ = costranstocasreq_body;
  if (costranstocasreq_body) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.COSTransToCASReq_body)
}
inline ::ClientCos::COSTransToCASReq* CosReqMsg::release_costranstocasreq_body() {
  _has_bits_[1] &= ~0x00040000u;
  ::ClientCos::COSTransToCASReq* temp = costranstocasreq_body_;
  costranstocasreq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::COSTransToCASReq* CosReqMsg::unsafe_arena_release_costranstocasreq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.COSTransToCASReq_body)
  _has_bits_[1] &= ~0x00040000u;
  ::ClientCos::COSTransToCASReq* temp = costranstocasreq_body_;
  costranstocasreq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::COSTransToCASReq* CosReqMsg::_internal_mutable_costranstocasreq_body() {
  _has_bits_[1] |= 0x00040000u;
  if (costranstocasreq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::COSTransToCASReq>(GetArena());
    costranstocasreq_body_ = p;
  }
  return costranstocasreq_body_;
}
inline ::ClientCos::COSTransToCASReq* CosReqMsg::mutable_costranstocasreq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.COSTransToCASReq_body)
  return _internal_mutable_costranstocasreq_body();
}
inline void CosReqMsg::set_allocated_costranstocasreq_body(::ClientCos::COSTransToCASReq* costranstocasreq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete costranstocasreq_body_;
  }
  if (costranstocasreq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(costranstocasreq_body);
    if (message_arena != submessage_arena) {
      costranstocasreq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, costranstocasreq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  costranstocasreq_body_ = costranstocasreq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.COSTransToCASReq_body)
}

// optional .ClientCos.SetMigrateReq SetMigrateReq_body = 90;
inline bool CosReqMsg::_internal_has_setmigratereq_body() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || setmigratereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_setmigratereq_body() const {
  return _internal_has_setmigratereq_body();
}
inline void CosReqMsg::clear_setmigratereq_body() {
  if (setmigratereq_body_ != nullptr) setmigratereq_body_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::ClientCos::SetMigrateReq& CosReqMsg::_internal_setmigratereq_body() const {
  const ::ClientCos::SetMigrateReq* p = setmigratereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetMigrateReq&>(
      ::ClientCos::_SetMigrateReq_default_instance_);
}
inline const ::ClientCos::SetMigrateReq& CosReqMsg::setmigratereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.SetMigrateReq_body)
  return _internal_setmigratereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_setmigratereq_body(
    ::ClientCos::SetMigrateReq* setmigratereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setmigratereq_body_);
  }
  setmigratereq_body_ = setmigratereq_body;
  if (setmigratereq_body) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.SetMigrateReq_body)
}
inline ::ClientCos::SetMigrateReq* CosReqMsg::release_setmigratereq_body() {
  _has_bits_[1] &= ~0x00080000u;
  ::ClientCos::SetMigrateReq* temp = setmigratereq_body_;
  setmigratereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetMigrateReq* CosReqMsg::unsafe_arena_release_setmigratereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.SetMigrateReq_body)
  _has_bits_[1] &= ~0x00080000u;
  ::ClientCos::SetMigrateReq* temp = setmigratereq_body_;
  setmigratereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetMigrateReq* CosReqMsg::_internal_mutable_setmigratereq_body() {
  _has_bits_[1] |= 0x00080000u;
  if (setmigratereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetMigrateReq>(GetArena());
    setmigratereq_body_ = p;
  }
  return setmigratereq_body_;
}
inline ::ClientCos::SetMigrateReq* CosReqMsg::mutable_setmigratereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.SetMigrateReq_body)
  return _internal_mutable_setmigratereq_body();
}
inline void CosReqMsg::set_allocated_setmigratereq_body(::ClientCos::SetMigrateReq* setmigratereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setmigratereq_body_;
  }
  if (setmigratereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setmigratereq_body);
    if (message_arena != submessage_arena) {
      setmigratereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setmigratereq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  setmigratereq_body_ = setmigratereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.SetMigrateReq_body)
}

// optional .ClientCos.DelNoHashFileReq DelNoHashFileReq_body = 91;
inline bool CosReqMsg::_internal_has_delnohashfilereq_body() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || delnohashfilereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_delnohashfilereq_body() const {
  return _internal_has_delnohashfilereq_body();
}
inline void CosReqMsg::clear_delnohashfilereq_body() {
  if (delnohashfilereq_body_ != nullptr) delnohashfilereq_body_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
inline const ::ClientCos::DelNoHashFileReq& CosReqMsg::_internal_delnohashfilereq_body() const {
  const ::ClientCos::DelNoHashFileReq* p = delnohashfilereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelNoHashFileReq&>(
      ::ClientCos::_DelNoHashFileReq_default_instance_);
}
inline const ::ClientCos::DelNoHashFileReq& CosReqMsg::delnohashfilereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.DelNoHashFileReq_body)
  return _internal_delnohashfilereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_delnohashfilereq_body(
    ::ClientCos::DelNoHashFileReq* delnohashfilereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delnohashfilereq_body_);
  }
  delnohashfilereq_body_ = delnohashfilereq_body;
  if (delnohashfilereq_body) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.DelNoHashFileReq_body)
}
inline ::ClientCos::DelNoHashFileReq* CosReqMsg::release_delnohashfilereq_body() {
  _has_bits_[1] &= ~0x00100000u;
  ::ClientCos::DelNoHashFileReq* temp = delnohashfilereq_body_;
  delnohashfilereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelNoHashFileReq* CosReqMsg::unsafe_arena_release_delnohashfilereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.DelNoHashFileReq_body)
  _has_bits_[1] &= ~0x00100000u;
  ::ClientCos::DelNoHashFileReq* temp = delnohashfilereq_body_;
  delnohashfilereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DelNoHashFileReq* CosReqMsg::_internal_mutable_delnohashfilereq_body() {
  _has_bits_[1] |= 0x00100000u;
  if (delnohashfilereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelNoHashFileReq>(GetArena());
    delnohashfilereq_body_ = p;
  }
  return delnohashfilereq_body_;
}
inline ::ClientCos::DelNoHashFileReq* CosReqMsg::mutable_delnohashfilereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.DelNoHashFileReq_body)
  return _internal_mutable_delnohashfilereq_body();
}
inline void CosReqMsg::set_allocated_delnohashfilereq_body(::ClientCos::DelNoHashFileReq* delnohashfilereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delnohashfilereq_body_;
  }
  if (delnohashfilereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delnohashfilereq_body);
    if (message_arena != submessage_arena) {
      delnohashfilereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delnohashfilereq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  delnohashfilereq_body_ = delnohashfilereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.DelNoHashFileReq_body)
}

// optional .ClientCos.MigrateFinFileReq MigrateFinFileReq_body = 92;
inline bool CosReqMsg::_internal_has_migratefinfilereq_body() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || migratefinfilereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_migratefinfilereq_body() const {
  return _internal_has_migratefinfilereq_body();
}
inline void CosReqMsg::clear_migratefinfilereq_body() {
  if (migratefinfilereq_body_ != nullptr) migratefinfilereq_body_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
inline const ::ClientCos::MigrateFinFileReq& CosReqMsg::_internal_migratefinfilereq_body() const {
  const ::ClientCos::MigrateFinFileReq* p = migratefinfilereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::MigrateFinFileReq&>(
      ::ClientCos::_MigrateFinFileReq_default_instance_);
}
inline const ::ClientCos::MigrateFinFileReq& CosReqMsg::migratefinfilereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.MigrateFinFileReq_body)
  return _internal_migratefinfilereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_migratefinfilereq_body(
    ::ClientCos::MigrateFinFileReq* migratefinfilereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migratefinfilereq_body_);
  }
  migratefinfilereq_body_ = migratefinfilereq_body;
  if (migratefinfilereq_body) {
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.MigrateFinFileReq_body)
}
inline ::ClientCos::MigrateFinFileReq* CosReqMsg::release_migratefinfilereq_body() {
  _has_bits_[1] &= ~0x00200000u;
  ::ClientCos::MigrateFinFileReq* temp = migratefinfilereq_body_;
  migratefinfilereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::MigrateFinFileReq* CosReqMsg::unsafe_arena_release_migratefinfilereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.MigrateFinFileReq_body)
  _has_bits_[1] &= ~0x00200000u;
  ::ClientCos::MigrateFinFileReq* temp = migratefinfilereq_body_;
  migratefinfilereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::MigrateFinFileReq* CosReqMsg::_internal_mutable_migratefinfilereq_body() {
  _has_bits_[1] |= 0x00200000u;
  if (migratefinfilereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::MigrateFinFileReq>(GetArena());
    migratefinfilereq_body_ = p;
  }
  return migratefinfilereq_body_;
}
inline ::ClientCos::MigrateFinFileReq* CosReqMsg::mutable_migratefinfilereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.MigrateFinFileReq_body)
  return _internal_mutable_migratefinfilereq_body();
}
inline void CosReqMsg::set_allocated_migratefinfilereq_body(::ClientCos::MigrateFinFileReq* migratefinfilereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete migratefinfilereq_body_;
  }
  if (migratefinfilereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(migratefinfilereq_body);
    if (message_arena != submessage_arena) {
      migratefinfilereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migratefinfilereq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  migratefinfilereq_body_ = migratefinfilereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.MigrateFinFileReq_body)
}

// optional .ClientCos.MigrateUnFinFileReq MigrateUnFinFileReq_body = 93;
inline bool CosReqMsg::_internal_has_migrateunfinfilereq_body() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || migrateunfinfilereq_body_ != nullptr);
  return value;
}
inline bool CosReqMsg::has_migrateunfinfilereq_body() const {
  return _internal_has_migrateunfinfilereq_body();
}
inline void CosReqMsg::clear_migrateunfinfilereq_body() {
  if (migrateunfinfilereq_body_ != nullptr) migrateunfinfilereq_body_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
inline const ::ClientCos::MigrateUnFinFileReq& CosReqMsg::_internal_migrateunfinfilereq_body() const {
  const ::ClientCos::MigrateUnFinFileReq* p = migrateunfinfilereq_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::MigrateUnFinFileReq&>(
      ::ClientCos::_MigrateUnFinFileReq_default_instance_);
}
inline const ::ClientCos::MigrateUnFinFileReq& CosReqMsg::migrateunfinfilereq_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosReqMsg.MigrateUnFinFileReq_body)
  return _internal_migrateunfinfilereq_body();
}
inline void CosReqMsg::unsafe_arena_set_allocated_migrateunfinfilereq_body(
    ::ClientCos::MigrateUnFinFileReq* migrateunfinfilereq_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migrateunfinfilereq_body_);
  }
  migrateunfinfilereq_body_ = migrateunfinfilereq_body;
  if (migrateunfinfilereq_body) {
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosReqMsg.MigrateUnFinFileReq_body)
}
inline ::ClientCos::MigrateUnFinFileReq* CosReqMsg::release_migrateunfinfilereq_body() {
  _has_bits_[1] &= ~0x00400000u;
  ::ClientCos::MigrateUnFinFileReq* temp = migrateunfinfilereq_body_;
  migrateunfinfilereq_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::MigrateUnFinFileReq* CosReqMsg::unsafe_arena_release_migrateunfinfilereq_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosReqMsg.MigrateUnFinFileReq_body)
  _has_bits_[1] &= ~0x00400000u;
  ::ClientCos::MigrateUnFinFileReq* temp = migrateunfinfilereq_body_;
  migrateunfinfilereq_body_ = nullptr;
  return temp;
}
inline ::ClientCos::MigrateUnFinFileReq* CosReqMsg::_internal_mutable_migrateunfinfilereq_body() {
  _has_bits_[1] |= 0x00400000u;
  if (migrateunfinfilereq_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::MigrateUnFinFileReq>(GetArena());
    migrateunfinfilereq_body_ = p;
  }
  return migrateunfinfilereq_body_;
}
inline ::ClientCos::MigrateUnFinFileReq* CosReqMsg::mutable_migrateunfinfilereq_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosReqMsg.MigrateUnFinFileReq_body)
  return _internal_mutable_migrateunfinfilereq_body();
}
inline void CosReqMsg::set_allocated_migrateunfinfilereq_body(::ClientCos::MigrateUnFinFileReq* migrateunfinfilereq_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete migrateunfinfilereq_body_;
  }
  if (migrateunfinfilereq_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(migrateunfinfilereq_body);
    if (message_arena != submessage_arena) {
      migrateunfinfilereq_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrateunfinfilereq_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  migrateunfinfilereq_body_ = migrateunfinfilereq_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosReqMsg.MigrateUnFinFileReq_body)
}

// -------------------------------------------------------------------

// CosRspMsg

// required int32 retcode = 1;
inline bool CosRspMsg::_internal_has_retcode() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CosRspMsg::has_retcode() const {
  return _internal_has_retcode();
}
inline void CosRspMsg::clear_retcode() {
  retcode_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CosRspMsg::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CosRspMsg::retcode() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.retcode)
  return _internal_retcode();
}
inline void CosRspMsg::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00200000u;
  retcode_ = value;
}
inline void CosRspMsg::set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosRspMsg.retcode)
}

// required string retmsg = 2;
inline bool CosRspMsg::_internal_has_retmsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosRspMsg::has_retmsg() const {
  return _internal_has_retmsg();
}
inline void CosRspMsg::clear_retmsg() {
  retmsg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosRspMsg::retmsg() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.retmsg)
  return _internal_retmsg();
}
inline void CosRspMsg::set_retmsg(const std::string& value) {
  _internal_set_retmsg(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosRspMsg.retmsg)
}
inline std::string* CosRspMsg::mutable_retmsg() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.retmsg)
  return _internal_mutable_retmsg();
}
inline const std::string& CosRspMsg::_internal_retmsg() const {
  return retmsg_.Get();
}
inline void CosRspMsg::_internal_set_retmsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosRspMsg::set_retmsg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CosRspMsg.retmsg)
}
inline void CosRspMsg::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CosRspMsg.retmsg)
}
inline void CosRspMsg::set_retmsg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CosRspMsg.retmsg)
}
inline std::string* CosRspMsg::_internal_mutable_retmsg() {
  _has_bits_[0] |= 0x00000001u;
  return retmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosRspMsg::release_retmsg() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.retmsg)
  if (!_internal_has_retmsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return retmsg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosRspMsg::set_allocated_retmsg(std::string* retmsg) {
  if (retmsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  retmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.retmsg)
}

// optional .ClientCos.CosRspMsg.SubType sub_type = 10;
inline bool CosRspMsg::_internal_has_sub_type() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CosRspMsg::has_sub_type() const {
  return _internal_has_sub_type();
}
inline void CosRspMsg::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::ClientCos::CosRspMsg_SubType CosRspMsg::_internal_sub_type() const {
  return static_cast< ::ClientCos::CosRspMsg_SubType >(sub_type_);
}
inline ::ClientCos::CosRspMsg_SubType CosRspMsg::sub_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.sub_type)
  return _internal_sub_type();
}
inline void CosRspMsg::_internal_set_sub_type(::ClientCos::CosRspMsg_SubType value) {
  assert(::ClientCos::CosRspMsg_SubType_IsValid(value));
  _has_bits_[1] |= 0x00400000u;
  sub_type_ = value;
}
inline void CosRspMsg::set_sub_type(::ClientCos::CosRspMsg_SubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.CosRspMsg.sub_type)
}

// optional .ClientCos.BucketCreateRsp BucketCreateRsp_body = 21;
inline bool CosRspMsg::_internal_has_bucketcreatersp_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bucketcreatersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_bucketcreatersp_body() const {
  return _internal_has_bucketcreatersp_body();
}
inline void CosRspMsg::clear_bucketcreatersp_body() {
  if (bucketcreatersp_body_ != nullptr) bucketcreatersp_body_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::BucketCreateRsp& CosRspMsg::_internal_bucketcreatersp_body() const {
  const ::ClientCos::BucketCreateRsp* p = bucketcreatersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketCreateRsp&>(
      ::ClientCos::_BucketCreateRsp_default_instance_);
}
inline const ::ClientCos::BucketCreateRsp& CosRspMsg::bucketcreatersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.BucketCreateRsp_body)
  return _internal_bucketcreatersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_bucketcreatersp_body(
    ::ClientCos::BucketCreateRsp* bucketcreatersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketcreatersp_body_);
  }
  bucketcreatersp_body_ = bucketcreatersp_body;
  if (bucketcreatersp_body) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.BucketCreateRsp_body)
}
inline ::ClientCos::BucketCreateRsp* CosRspMsg::release_bucketcreatersp_body() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::BucketCreateRsp* temp = bucketcreatersp_body_;
  bucketcreatersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketCreateRsp* CosRspMsg::unsafe_arena_release_bucketcreatersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.BucketCreateRsp_body)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::BucketCreateRsp* temp = bucketcreatersp_body_;
  bucketcreatersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketCreateRsp* CosRspMsg::_internal_mutable_bucketcreatersp_body() {
  _has_bits_[0] |= 0x00000002u;
  if (bucketcreatersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketCreateRsp>(GetArena());
    bucketcreatersp_body_ = p;
  }
  return bucketcreatersp_body_;
}
inline ::ClientCos::BucketCreateRsp* CosRspMsg::mutable_bucketcreatersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.BucketCreateRsp_body)
  return _internal_mutable_bucketcreatersp_body();
}
inline void CosRspMsg::set_allocated_bucketcreatersp_body(::ClientCos::BucketCreateRsp* bucketcreatersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketcreatersp_body_;
  }
  if (bucketcreatersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketcreatersp_body);
    if (message_arena != submessage_arena) {
      bucketcreatersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketcreatersp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bucketcreatersp_body_ = bucketcreatersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.BucketCreateRsp_body)
}

// optional .ClientCos.BucketAttrModifyRsp BucketAttrModifyRsp_body = 22;
inline bool CosRspMsg::_internal_has_bucketattrmodifyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bucketattrmodifyrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_bucketattrmodifyrsp_body() const {
  return _internal_has_bucketattrmodifyrsp_body();
}
inline void CosRspMsg::clear_bucketattrmodifyrsp_body() {
  if (bucketattrmodifyrsp_body_ != nullptr) bucketattrmodifyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ClientCos::BucketAttrModifyRsp& CosRspMsg::_internal_bucketattrmodifyrsp_body() const {
  const ::ClientCos::BucketAttrModifyRsp* p = bucketattrmodifyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketAttrModifyRsp&>(
      ::ClientCos::_BucketAttrModifyRsp_default_instance_);
}
inline const ::ClientCos::BucketAttrModifyRsp& CosRspMsg::bucketattrmodifyrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.BucketAttrModifyRsp_body)
  return _internal_bucketattrmodifyrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_bucketattrmodifyrsp_body(
    ::ClientCos::BucketAttrModifyRsp* bucketattrmodifyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketattrmodifyrsp_body_);
  }
  bucketattrmodifyrsp_body_ = bucketattrmodifyrsp_body;
  if (bucketattrmodifyrsp_body) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.BucketAttrModifyRsp_body)
}
inline ::ClientCos::BucketAttrModifyRsp* CosRspMsg::release_bucketattrmodifyrsp_body() {
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::BucketAttrModifyRsp* temp = bucketattrmodifyrsp_body_;
  bucketattrmodifyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketAttrModifyRsp* CosRspMsg::unsafe_arena_release_bucketattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.BucketAttrModifyRsp_body)
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::BucketAttrModifyRsp* temp = bucketattrmodifyrsp_body_;
  bucketattrmodifyrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketAttrModifyRsp* CosRspMsg::_internal_mutable_bucketattrmodifyrsp_body() {
  _has_bits_[0] |= 0x00000004u;
  if (bucketattrmodifyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketAttrModifyRsp>(GetArena());
    bucketattrmodifyrsp_body_ = p;
  }
  return bucketattrmodifyrsp_body_;
}
inline ::ClientCos::BucketAttrModifyRsp* CosRspMsg::mutable_bucketattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.BucketAttrModifyRsp_body)
  return _internal_mutable_bucketattrmodifyrsp_body();
}
inline void CosRspMsg::set_allocated_bucketattrmodifyrsp_body(::ClientCos::BucketAttrModifyRsp* bucketattrmodifyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketattrmodifyrsp_body_;
  }
  if (bucketattrmodifyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketattrmodifyrsp_body);
    if (message_arena != submessage_arena) {
      bucketattrmodifyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketattrmodifyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bucketattrmodifyrsp_body_ = bucketattrmodifyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.BucketAttrModifyRsp_body)
}

// optional .ClientCos.BucketAttrQueryRsp BucketAttrQueryRsp_body = 23;
inline bool CosRspMsg::_internal_has_bucketattrqueryrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || bucketattrqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_bucketattrqueryrsp_body() const {
  return _internal_has_bucketattrqueryrsp_body();
}
inline void CosRspMsg::clear_bucketattrqueryrsp_body() {
  if (bucketattrqueryrsp_body_ != nullptr) bucketattrqueryrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ClientCos::BucketAttrQueryRsp& CosRspMsg::_internal_bucketattrqueryrsp_body() const {
  const ::ClientCos::BucketAttrQueryRsp* p = bucketattrqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketAttrQueryRsp&>(
      ::ClientCos::_BucketAttrQueryRsp_default_instance_);
}
inline const ::ClientCos::BucketAttrQueryRsp& CosRspMsg::bucketattrqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.BucketAttrQueryRsp_body)
  return _internal_bucketattrqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_bucketattrqueryrsp_body(
    ::ClientCos::BucketAttrQueryRsp* bucketattrqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketattrqueryrsp_body_);
  }
  bucketattrqueryrsp_body_ = bucketattrqueryrsp_body;
  if (bucketattrqueryrsp_body) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.BucketAttrQueryRsp_body)
}
inline ::ClientCos::BucketAttrQueryRsp* CosRspMsg::release_bucketattrqueryrsp_body() {
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::BucketAttrQueryRsp* temp = bucketattrqueryrsp_body_;
  bucketattrqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketAttrQueryRsp* CosRspMsg::unsafe_arena_release_bucketattrqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.BucketAttrQueryRsp_body)
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::BucketAttrQueryRsp* temp = bucketattrqueryrsp_body_;
  bucketattrqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketAttrQueryRsp* CosRspMsg::_internal_mutable_bucketattrqueryrsp_body() {
  _has_bits_[0] |= 0x00000008u;
  if (bucketattrqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketAttrQueryRsp>(GetArena());
    bucketattrqueryrsp_body_ = p;
  }
  return bucketattrqueryrsp_body_;
}
inline ::ClientCos::BucketAttrQueryRsp* CosRspMsg::mutable_bucketattrqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.BucketAttrQueryRsp_body)
  return _internal_mutable_bucketattrqueryrsp_body();
}
inline void CosRspMsg::set_allocated_bucketattrqueryrsp_body(::ClientCos::BucketAttrQueryRsp* bucketattrqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketattrqueryrsp_body_;
  }
  if (bucketattrqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketattrqueryrsp_body);
    if (message_arena != submessage_arena) {
      bucketattrqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketattrqueryrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bucketattrqueryrsp_body_ = bucketattrqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.BucketAttrQueryRsp_body)
}

// optional .ClientCos.DirCreateRsp DirCreateRsp_body = 24;
inline bool CosRspMsg::_internal_has_dircreatersp_body() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || dircreatersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_dircreatersp_body() const {
  return _internal_has_dircreatersp_body();
}
inline void CosRspMsg::clear_dircreatersp_body() {
  if (dircreatersp_body_ != nullptr) dircreatersp_body_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ClientCos::DirCreateRsp& CosRspMsg::_internal_dircreatersp_body() const {
  const ::ClientCos::DirCreateRsp* p = dircreatersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DirCreateRsp&>(
      ::ClientCos::_DirCreateRsp_default_instance_);
}
inline const ::ClientCos::DirCreateRsp& CosRspMsg::dircreatersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.DirCreateRsp_body)
  return _internal_dircreatersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_dircreatersp_body(
    ::ClientCos::DirCreateRsp* dircreatersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dircreatersp_body_);
  }
  dircreatersp_body_ = dircreatersp_body;
  if (dircreatersp_body) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.DirCreateRsp_body)
}
inline ::ClientCos::DirCreateRsp* CosRspMsg::release_dircreatersp_body() {
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::DirCreateRsp* temp = dircreatersp_body_;
  dircreatersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DirCreateRsp* CosRspMsg::unsafe_arena_release_dircreatersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.DirCreateRsp_body)
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::DirCreateRsp* temp = dircreatersp_body_;
  dircreatersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DirCreateRsp* CosRspMsg::_internal_mutable_dircreatersp_body() {
  _has_bits_[0] |= 0x00000010u;
  if (dircreatersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DirCreateRsp>(GetArena());
    dircreatersp_body_ = p;
  }
  return dircreatersp_body_;
}
inline ::ClientCos::DirCreateRsp* CosRspMsg::mutable_dircreatersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.DirCreateRsp_body)
  return _internal_mutable_dircreatersp_body();
}
inline void CosRspMsg::set_allocated_dircreatersp_body(::ClientCos::DirCreateRsp* dircreatersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dircreatersp_body_;
  }
  if (dircreatersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dircreatersp_body);
    if (message_arena != submessage_arena) {
      dircreatersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dircreatersp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dircreatersp_body_ = dircreatersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.DirCreateRsp_body)
}

// optional .ClientCos.ObjAttrQueryRsp ObjAttrQueryRsp_body = 25;
inline bool CosRspMsg::_internal_has_objattrqueryrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || objattrqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_objattrqueryrsp_body() const {
  return _internal_has_objattrqueryrsp_body();
}
inline void CosRspMsg::clear_objattrqueryrsp_body() {
  if (objattrqueryrsp_body_ != nullptr) objattrqueryrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ClientCos::ObjAttrQueryRsp& CosRspMsg::_internal_objattrqueryrsp_body() const {
  const ::ClientCos::ObjAttrQueryRsp* p = objattrqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjAttrQueryRsp&>(
      ::ClientCos::_ObjAttrQueryRsp_default_instance_);
}
inline const ::ClientCos::ObjAttrQueryRsp& CosRspMsg::objattrqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ObjAttrQueryRsp_body)
  return _internal_objattrqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_objattrqueryrsp_body(
    ::ClientCos::ObjAttrQueryRsp* objattrqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objattrqueryrsp_body_);
  }
  objattrqueryrsp_body_ = objattrqueryrsp_body;
  if (objattrqueryrsp_body) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ObjAttrQueryRsp_body)
}
inline ::ClientCos::ObjAttrQueryRsp* CosRspMsg::release_objattrqueryrsp_body() {
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::ObjAttrQueryRsp* temp = objattrqueryrsp_body_;
  objattrqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjAttrQueryRsp* CosRspMsg::unsafe_arena_release_objattrqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ObjAttrQueryRsp_body)
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::ObjAttrQueryRsp* temp = objattrqueryrsp_body_;
  objattrqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjAttrQueryRsp* CosRspMsg::_internal_mutable_objattrqueryrsp_body() {
  _has_bits_[0] |= 0x00000020u;
  if (objattrqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjAttrQueryRsp>(GetArena());
    objattrqueryrsp_body_ = p;
  }
  return objattrqueryrsp_body_;
}
inline ::ClientCos::ObjAttrQueryRsp* CosRspMsg::mutable_objattrqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ObjAttrQueryRsp_body)
  return _internal_mutable_objattrqueryrsp_body();
}
inline void CosRspMsg::set_allocated_objattrqueryrsp_body(::ClientCos::ObjAttrQueryRsp* objattrqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objattrqueryrsp_body_;
  }
  if (objattrqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objattrqueryrsp_body);
    if (message_arena != submessage_arena) {
      objattrqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objattrqueryrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  objattrqueryrsp_body_ = objattrqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ObjAttrQueryRsp_body)
}

// optional .ClientCos.ObjAttrModifyRsp ObjAttrModifyRsp_body = 26;
inline bool CosRspMsg::_internal_has_objattrmodifyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || objattrmodifyrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_objattrmodifyrsp_body() const {
  return _internal_has_objattrmodifyrsp_body();
}
inline void CosRspMsg::clear_objattrmodifyrsp_body() {
  if (objattrmodifyrsp_body_ != nullptr) objattrmodifyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ClientCos::ObjAttrModifyRsp& CosRspMsg::_internal_objattrmodifyrsp_body() const {
  const ::ClientCos::ObjAttrModifyRsp* p = objattrmodifyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjAttrModifyRsp&>(
      ::ClientCos::_ObjAttrModifyRsp_default_instance_);
}
inline const ::ClientCos::ObjAttrModifyRsp& CosRspMsg::objattrmodifyrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ObjAttrModifyRsp_body)
  return _internal_objattrmodifyrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_objattrmodifyrsp_body(
    ::ClientCos::ObjAttrModifyRsp* objattrmodifyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objattrmodifyrsp_body_);
  }
  objattrmodifyrsp_body_ = objattrmodifyrsp_body;
  if (objattrmodifyrsp_body) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ObjAttrModifyRsp_body)
}
inline ::ClientCos::ObjAttrModifyRsp* CosRspMsg::release_objattrmodifyrsp_body() {
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::ObjAttrModifyRsp* temp = objattrmodifyrsp_body_;
  objattrmodifyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjAttrModifyRsp* CosRspMsg::unsafe_arena_release_objattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ObjAttrModifyRsp_body)
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::ObjAttrModifyRsp* temp = objattrmodifyrsp_body_;
  objattrmodifyrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjAttrModifyRsp* CosRspMsg::_internal_mutable_objattrmodifyrsp_body() {
  _has_bits_[0] |= 0x00000040u;
  if (objattrmodifyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjAttrModifyRsp>(GetArena());
    objattrmodifyrsp_body_ = p;
  }
  return objattrmodifyrsp_body_;
}
inline ::ClientCos::ObjAttrModifyRsp* CosRspMsg::mutable_objattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ObjAttrModifyRsp_body)
  return _internal_mutable_objattrmodifyrsp_body();
}
inline void CosRspMsg::set_allocated_objattrmodifyrsp_body(::ClientCos::ObjAttrModifyRsp* objattrmodifyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objattrmodifyrsp_body_;
  }
  if (objattrmodifyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objattrmodifyrsp_body);
    if (message_arena != submessage_arena) {
      objattrmodifyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objattrmodifyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  objattrmodifyrsp_body_ = objattrmodifyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ObjAttrModifyRsp_body)
}

// optional .ClientCos.DeleteRsp DeleteRsp_body = 27;
inline bool CosRspMsg::_internal_has_deletersp_body() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || deletersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_deletersp_body() const {
  return _internal_has_deletersp_body();
}
inline void CosRspMsg::clear_deletersp_body() {
  if (deletersp_body_ != nullptr) deletersp_body_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ClientCos::DeleteRsp& CosRspMsg::_internal_deletersp_body() const {
  const ::ClientCos::DeleteRsp* p = deletersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DeleteRsp&>(
      ::ClientCos::_DeleteRsp_default_instance_);
}
inline const ::ClientCos::DeleteRsp& CosRspMsg::deletersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.DeleteRsp_body)
  return _internal_deletersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_deletersp_body(
    ::ClientCos::DeleteRsp* deletersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deletersp_body_);
  }
  deletersp_body_ = deletersp_body;
  if (deletersp_body) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.DeleteRsp_body)
}
inline ::ClientCos::DeleteRsp* CosRspMsg::release_deletersp_body() {
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::DeleteRsp* temp = deletersp_body_;
  deletersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DeleteRsp* CosRspMsg::unsafe_arena_release_deletersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.DeleteRsp_body)
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::DeleteRsp* temp = deletersp_body_;
  deletersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DeleteRsp* CosRspMsg::_internal_mutable_deletersp_body() {
  _has_bits_[0] |= 0x00000080u;
  if (deletersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DeleteRsp>(GetArena());
    deletersp_body_ = p;
  }
  return deletersp_body_;
}
inline ::ClientCos::DeleteRsp* CosRspMsg::mutable_deletersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.DeleteRsp_body)
  return _internal_mutable_deletersp_body();
}
inline void CosRspMsg::set_allocated_deletersp_body(::ClientCos::DeleteRsp* deletersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deletersp_body_;
  }
  if (deletersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deletersp_body);
    if (message_arena != submessage_arena) {
      deletersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deletersp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  deletersp_body_ = deletersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.DeleteRsp_body)
}

// optional .ClientCos.ListRsp ListRsp_body = 28;
inline bool CosRspMsg::_internal_has_listrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || listrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_listrsp_body() const {
  return _internal_has_listrsp_body();
}
inline void CosRspMsg::clear_listrsp_body() {
  if (listrsp_body_ != nullptr) listrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ClientCos::ListRsp& CosRspMsg::_internal_listrsp_body() const {
  const ::ClientCos::ListRsp* p = listrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListRsp&>(
      ::ClientCos::_ListRsp_default_instance_);
}
inline const ::ClientCos::ListRsp& CosRspMsg::listrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ListRsp_body)
  return _internal_listrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_listrsp_body(
    ::ClientCos::ListRsp* listrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listrsp_body_);
  }
  listrsp_body_ = listrsp_body;
  if (listrsp_body) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ListRsp_body)
}
inline ::ClientCos::ListRsp* CosRspMsg::release_listrsp_body() {
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ListRsp* temp = listrsp_body_;
  listrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListRsp* CosRspMsg::unsafe_arena_release_listrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ListRsp_body)
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ListRsp* temp = listrsp_body_;
  listrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListRsp* CosRspMsg::_internal_mutable_listrsp_body() {
  _has_bits_[0] |= 0x00000100u;
  if (listrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListRsp>(GetArena());
    listrsp_body_ = p;
  }
  return listrsp_body_;
}
inline ::ClientCos::ListRsp* CosRspMsg::mutable_listrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ListRsp_body)
  return _internal_mutable_listrsp_body();
}
inline void CosRspMsg::set_allocated_listrsp_body(::ClientCos::ListRsp* listrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listrsp_body_;
  }
  if (listrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listrsp_body);
    if (message_arena != submessage_arena) {
      listrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  listrsp_body_ = listrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ListRsp_body)
}

// optional .ClientCos.AppAttrQueryRsp AppAttrQueryRsp_body = 29;
inline bool CosRspMsg::_internal_has_appattrqueryrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || appattrqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_appattrqueryrsp_body() const {
  return _internal_has_appattrqueryrsp_body();
}
inline void CosRspMsg::clear_appattrqueryrsp_body() {
  if (appattrqueryrsp_body_ != nullptr) appattrqueryrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ClientCos::AppAttrQueryRsp& CosRspMsg::_internal_appattrqueryrsp_body() const {
  const ::ClientCos::AppAttrQueryRsp* p = appattrqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AppAttrQueryRsp&>(
      ::ClientCos::_AppAttrQueryRsp_default_instance_);
}
inline const ::ClientCos::AppAttrQueryRsp& CosRspMsg::appattrqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.AppAttrQueryRsp_body)
  return _internal_appattrqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_appattrqueryrsp_body(
    ::ClientCos::AppAttrQueryRsp* appattrqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appattrqueryrsp_body_);
  }
  appattrqueryrsp_body_ = appattrqueryrsp_body;
  if (appattrqueryrsp_body) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.AppAttrQueryRsp_body)
}
inline ::ClientCos::AppAttrQueryRsp* CosRspMsg::release_appattrqueryrsp_body() {
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::AppAttrQueryRsp* temp = appattrqueryrsp_body_;
  appattrqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AppAttrQueryRsp* CosRspMsg::unsafe_arena_release_appattrqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.AppAttrQueryRsp_body)
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::AppAttrQueryRsp* temp = appattrqueryrsp_body_;
  appattrqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::AppAttrQueryRsp* CosRspMsg::_internal_mutable_appattrqueryrsp_body() {
  _has_bits_[0] |= 0x00000200u;
  if (appattrqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AppAttrQueryRsp>(GetArena());
    appattrqueryrsp_body_ = p;
  }
  return appattrqueryrsp_body_;
}
inline ::ClientCos::AppAttrQueryRsp* CosRspMsg::mutable_appattrqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.AppAttrQueryRsp_body)
  return _internal_mutable_appattrqueryrsp_body();
}
inline void CosRspMsg::set_allocated_appattrqueryrsp_body(::ClientCos::AppAttrQueryRsp* appattrqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appattrqueryrsp_body_;
  }
  if (appattrqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appattrqueryrsp_body);
    if (message_arena != submessage_arena) {
      appattrqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appattrqueryrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  appattrqueryrsp_body_ = appattrqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.AppAttrQueryRsp_body)
}

// optional .ClientCos.AppAttrModifyRsp AppAttrModifyRsp_body = 30;
inline bool CosRspMsg::_internal_has_appattrmodifyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || appattrmodifyrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_appattrmodifyrsp_body() const {
  return _internal_has_appattrmodifyrsp_body();
}
inline void CosRspMsg::clear_appattrmodifyrsp_body() {
  if (appattrmodifyrsp_body_ != nullptr) appattrmodifyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::ClientCos::AppAttrModifyRsp& CosRspMsg::_internal_appattrmodifyrsp_body() const {
  const ::ClientCos::AppAttrModifyRsp* p = appattrmodifyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AppAttrModifyRsp&>(
      ::ClientCos::_AppAttrModifyRsp_default_instance_);
}
inline const ::ClientCos::AppAttrModifyRsp& CosRspMsg::appattrmodifyrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.AppAttrModifyRsp_body)
  return _internal_appattrmodifyrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_appattrmodifyrsp_body(
    ::ClientCos::AppAttrModifyRsp* appattrmodifyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appattrmodifyrsp_body_);
  }
  appattrmodifyrsp_body_ = appattrmodifyrsp_body;
  if (appattrmodifyrsp_body) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.AppAttrModifyRsp_body)
}
inline ::ClientCos::AppAttrModifyRsp* CosRspMsg::release_appattrmodifyrsp_body() {
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::AppAttrModifyRsp* temp = appattrmodifyrsp_body_;
  appattrmodifyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AppAttrModifyRsp* CosRspMsg::unsafe_arena_release_appattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.AppAttrModifyRsp_body)
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::AppAttrModifyRsp* temp = appattrmodifyrsp_body_;
  appattrmodifyrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::AppAttrModifyRsp* CosRspMsg::_internal_mutable_appattrmodifyrsp_body() {
  _has_bits_[0] |= 0x00000400u;
  if (appattrmodifyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AppAttrModifyRsp>(GetArena());
    appattrmodifyrsp_body_ = p;
  }
  return appattrmodifyrsp_body_;
}
inline ::ClientCos::AppAttrModifyRsp* CosRspMsg::mutable_appattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.AppAttrModifyRsp_body)
  return _internal_mutable_appattrmodifyrsp_body();
}
inline void CosRspMsg::set_allocated_appattrmodifyrsp_body(::ClientCos::AppAttrModifyRsp* appattrmodifyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appattrmodifyrsp_body_;
  }
  if (appattrmodifyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appattrmodifyrsp_body);
    if (message_arena != submessage_arena) {
      appattrmodifyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appattrmodifyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  appattrmodifyrsp_body_ = appattrmodifyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.AppAttrModifyRsp_body)
}

// optional .ClientCos.PreviewFileAttrQueryRsp PreviewFileAttrQueryRsp_body = 31;
inline bool CosRspMsg::_internal_has_previewfileattrqueryrsp_body() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || previewfileattrqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_previewfileattrqueryrsp_body() const {
  return _internal_has_previewfileattrqueryrsp_body();
}
inline void CosRspMsg::clear_previewfileattrqueryrsp_body() {
  if (previewfileattrqueryrsp_body_ != nullptr) previewfileattrqueryrsp_body_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::ClientCos::PreviewFileAttrQueryRsp& CosRspMsg::_internal_previewfileattrqueryrsp_body() const {
  const ::ClientCos::PreviewFileAttrQueryRsp* p = previewfileattrqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::PreviewFileAttrQueryRsp&>(
      ::ClientCos::_PreviewFileAttrQueryRsp_default_instance_);
}
inline const ::ClientCos::PreviewFileAttrQueryRsp& CosRspMsg::previewfileattrqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.PreviewFileAttrQueryRsp_body)
  return _internal_previewfileattrqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_previewfileattrqueryrsp_body(
    ::ClientCos::PreviewFileAttrQueryRsp* previewfileattrqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previewfileattrqueryrsp_body_);
  }
  previewfileattrqueryrsp_body_ = previewfileattrqueryrsp_body;
  if (previewfileattrqueryrsp_body) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.PreviewFileAttrQueryRsp_body)
}
inline ::ClientCos::PreviewFileAttrQueryRsp* CosRspMsg::release_previewfileattrqueryrsp_body() {
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::PreviewFileAttrQueryRsp* temp = previewfileattrqueryrsp_body_;
  previewfileattrqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::PreviewFileAttrQueryRsp* CosRspMsg::unsafe_arena_release_previewfileattrqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.PreviewFileAttrQueryRsp_body)
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::PreviewFileAttrQueryRsp* temp = previewfileattrqueryrsp_body_;
  previewfileattrqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::PreviewFileAttrQueryRsp* CosRspMsg::_internal_mutable_previewfileattrqueryrsp_body() {
  _has_bits_[0] |= 0x00000800u;
  if (previewfileattrqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::PreviewFileAttrQueryRsp>(GetArena());
    previewfileattrqueryrsp_body_ = p;
  }
  return previewfileattrqueryrsp_body_;
}
inline ::ClientCos::PreviewFileAttrQueryRsp* CosRspMsg::mutable_previewfileattrqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.PreviewFileAttrQueryRsp_body)
  return _internal_mutable_previewfileattrqueryrsp_body();
}
inline void CosRspMsg::set_allocated_previewfileattrqueryrsp_body(::ClientCos::PreviewFileAttrQueryRsp* previewfileattrqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previewfileattrqueryrsp_body_;
  }
  if (previewfileattrqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previewfileattrqueryrsp_body);
    if (message_arena != submessage_arena) {
      previewfileattrqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previewfileattrqueryrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  previewfileattrqueryrsp_body_ = previewfileattrqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.PreviewFileAttrQueryRsp_body)
}

// optional .ClientCos.ObjModTimeStampRsp ObjModTimeStampRsp_body = 32;
inline bool CosRspMsg::_internal_has_objmodtimestamprsp_body() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || objmodtimestamprsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_objmodtimestamprsp_body() const {
  return _internal_has_objmodtimestamprsp_body();
}
inline void CosRspMsg::clear_objmodtimestamprsp_body() {
  if (objmodtimestamprsp_body_ != nullptr) objmodtimestamprsp_body_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::ClientCos::ObjModTimeStampRsp& CosRspMsg::_internal_objmodtimestamprsp_body() const {
  const ::ClientCos::ObjModTimeStampRsp* p = objmodtimestamprsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjModTimeStampRsp&>(
      ::ClientCos::_ObjModTimeStampRsp_default_instance_);
}
inline const ::ClientCos::ObjModTimeStampRsp& CosRspMsg::objmodtimestamprsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ObjModTimeStampRsp_body)
  return _internal_objmodtimestamprsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_objmodtimestamprsp_body(
    ::ClientCos::ObjModTimeStampRsp* objmodtimestamprsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objmodtimestamprsp_body_);
  }
  objmodtimestamprsp_body_ = objmodtimestamprsp_body;
  if (objmodtimestamprsp_body) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ObjModTimeStampRsp_body)
}
inline ::ClientCos::ObjModTimeStampRsp* CosRspMsg::release_objmodtimestamprsp_body() {
  _has_bits_[0] &= ~0x00001000u;
  ::ClientCos::ObjModTimeStampRsp* temp = objmodtimestamprsp_body_;
  objmodtimestamprsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjModTimeStampRsp* CosRspMsg::unsafe_arena_release_objmodtimestamprsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ObjModTimeStampRsp_body)
  _has_bits_[0] &= ~0x00001000u;
  ::ClientCos::ObjModTimeStampRsp* temp = objmodtimestamprsp_body_;
  objmodtimestamprsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjModTimeStampRsp* CosRspMsg::_internal_mutable_objmodtimestamprsp_body() {
  _has_bits_[0] |= 0x00001000u;
  if (objmodtimestamprsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjModTimeStampRsp>(GetArena());
    objmodtimestamprsp_body_ = p;
  }
  return objmodtimestamprsp_body_;
}
inline ::ClientCos::ObjModTimeStampRsp* CosRspMsg::mutable_objmodtimestamprsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ObjModTimeStampRsp_body)
  return _internal_mutable_objmodtimestamprsp_body();
}
inline void CosRspMsg::set_allocated_objmodtimestamprsp_body(::ClientCos::ObjModTimeStampRsp* objmodtimestamprsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objmodtimestamprsp_body_;
  }
  if (objmodtimestamprsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objmodtimestamprsp_body);
    if (message_arena != submessage_arena) {
      objmodtimestamprsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objmodtimestamprsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  objmodtimestamprsp_body_ = objmodtimestamprsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ObjModTimeStampRsp_body)
}

// optional .ClientCos.ListMutiobjRsp ListMutiobjRsp_body = 33;
inline bool CosRspMsg::_internal_has_listmutiobjrsp_body() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || listmutiobjrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_listmutiobjrsp_body() const {
  return _internal_has_listmutiobjrsp_body();
}
inline void CosRspMsg::clear_listmutiobjrsp_body() {
  if (listmutiobjrsp_body_ != nullptr) listmutiobjrsp_body_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::ClientCos::ListMutiobjRsp& CosRspMsg::_internal_listmutiobjrsp_body() const {
  const ::ClientCos::ListMutiobjRsp* p = listmutiobjrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListMutiobjRsp&>(
      ::ClientCos::_ListMutiobjRsp_default_instance_);
}
inline const ::ClientCos::ListMutiobjRsp& CosRspMsg::listmutiobjrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ListMutiobjRsp_body)
  return _internal_listmutiobjrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_listmutiobjrsp_body(
    ::ClientCos::ListMutiobjRsp* listmutiobjrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listmutiobjrsp_body_);
  }
  listmutiobjrsp_body_ = listmutiobjrsp_body;
  if (listmutiobjrsp_body) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ListMutiobjRsp_body)
}
inline ::ClientCos::ListMutiobjRsp* CosRspMsg::release_listmutiobjrsp_body() {
  _has_bits_[0] &= ~0x00002000u;
  ::ClientCos::ListMutiobjRsp* temp = listmutiobjrsp_body_;
  listmutiobjrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListMutiobjRsp* CosRspMsg::unsafe_arena_release_listmutiobjrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ListMutiobjRsp_body)
  _has_bits_[0] &= ~0x00002000u;
  ::ClientCos::ListMutiobjRsp* temp = listmutiobjrsp_body_;
  listmutiobjrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListMutiobjRsp* CosRspMsg::_internal_mutable_listmutiobjrsp_body() {
  _has_bits_[0] |= 0x00002000u;
  if (listmutiobjrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListMutiobjRsp>(GetArena());
    listmutiobjrsp_body_ = p;
  }
  return listmutiobjrsp_body_;
}
inline ::ClientCos::ListMutiobjRsp* CosRspMsg::mutable_listmutiobjrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ListMutiobjRsp_body)
  return _internal_mutable_listmutiobjrsp_body();
}
inline void CosRspMsg::set_allocated_listmutiobjrsp_body(::ClientCos::ListMutiobjRsp* listmutiobjrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listmutiobjrsp_body_;
  }
  if (listmutiobjrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listmutiobjrsp_body);
    if (message_arena != submessage_arena) {
      listmutiobjrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listmutiobjrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  listmutiobjrsp_body_ = listmutiobjrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ListMutiobjRsp_body)
}

// optional .ClientCos.UnfinObjAttrModifyRsp UnfinObjAttrModifyRsp_body = 34;
inline bool CosRspMsg::_internal_has_unfinobjattrmodifyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || unfinobjattrmodifyrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_unfinobjattrmodifyrsp_body() const {
  return _internal_has_unfinobjattrmodifyrsp_body();
}
inline void CosRspMsg::clear_unfinobjattrmodifyrsp_body() {
  if (unfinobjattrmodifyrsp_body_ != nullptr) unfinobjattrmodifyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::ClientCos::UnfinObjAttrModifyRsp& CosRspMsg::_internal_unfinobjattrmodifyrsp_body() const {
  const ::ClientCos::UnfinObjAttrModifyRsp* p = unfinobjattrmodifyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::UnfinObjAttrModifyRsp&>(
      ::ClientCos::_UnfinObjAttrModifyRsp_default_instance_);
}
inline const ::ClientCos::UnfinObjAttrModifyRsp& CosRspMsg::unfinobjattrmodifyrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.UnfinObjAttrModifyRsp_body)
  return _internal_unfinobjattrmodifyrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_unfinobjattrmodifyrsp_body(
    ::ClientCos::UnfinObjAttrModifyRsp* unfinobjattrmodifyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unfinobjattrmodifyrsp_body_);
  }
  unfinobjattrmodifyrsp_body_ = unfinobjattrmodifyrsp_body;
  if (unfinobjattrmodifyrsp_body) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.UnfinObjAttrModifyRsp_body)
}
inline ::ClientCos::UnfinObjAttrModifyRsp* CosRspMsg::release_unfinobjattrmodifyrsp_body() {
  _has_bits_[0] &= ~0x00004000u;
  ::ClientCos::UnfinObjAttrModifyRsp* temp = unfinobjattrmodifyrsp_body_;
  unfinobjattrmodifyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::UnfinObjAttrModifyRsp* CosRspMsg::unsafe_arena_release_unfinobjattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.UnfinObjAttrModifyRsp_body)
  _has_bits_[0] &= ~0x00004000u;
  ::ClientCos::UnfinObjAttrModifyRsp* temp = unfinobjattrmodifyrsp_body_;
  unfinobjattrmodifyrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::UnfinObjAttrModifyRsp* CosRspMsg::_internal_mutable_unfinobjattrmodifyrsp_body() {
  _has_bits_[0] |= 0x00004000u;
  if (unfinobjattrmodifyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::UnfinObjAttrModifyRsp>(GetArena());
    unfinobjattrmodifyrsp_body_ = p;
  }
  return unfinobjattrmodifyrsp_body_;
}
inline ::ClientCos::UnfinObjAttrModifyRsp* CosRspMsg::mutable_unfinobjattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.UnfinObjAttrModifyRsp_body)
  return _internal_mutable_unfinobjattrmodifyrsp_body();
}
inline void CosRspMsg::set_allocated_unfinobjattrmodifyrsp_body(::ClientCos::UnfinObjAttrModifyRsp* unfinobjattrmodifyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unfinobjattrmodifyrsp_body_;
  }
  if (unfinobjattrmodifyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unfinobjattrmodifyrsp_body);
    if (message_arena != submessage_arena) {
      unfinobjattrmodifyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfinobjattrmodifyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  unfinobjattrmodifyrsp_body_ = unfinobjattrmodifyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.UnfinObjAttrModifyRsp_body)
}

// optional .ClientCos.FileBatchDelRsp FileBatchDelRsp_body = 35;
inline bool CosRspMsg::_internal_has_filebatchdelrsp_body() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || filebatchdelrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_filebatchdelrsp_body() const {
  return _internal_has_filebatchdelrsp_body();
}
inline void CosRspMsg::clear_filebatchdelrsp_body() {
  if (filebatchdelrsp_body_ != nullptr) filebatchdelrsp_body_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::ClientCos::FileBatchDelRsp& CosRspMsg::_internal_filebatchdelrsp_body() const {
  const ::ClientCos::FileBatchDelRsp* p = filebatchdelrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileBatchDelRsp&>(
      ::ClientCos::_FileBatchDelRsp_default_instance_);
}
inline const ::ClientCos::FileBatchDelRsp& CosRspMsg::filebatchdelrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.FileBatchDelRsp_body)
  return _internal_filebatchdelrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_filebatchdelrsp_body(
    ::ClientCos::FileBatchDelRsp* filebatchdelrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filebatchdelrsp_body_);
  }
  filebatchdelrsp_body_ = filebatchdelrsp_body;
  if (filebatchdelrsp_body) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.FileBatchDelRsp_body)
}
inline ::ClientCos::FileBatchDelRsp* CosRspMsg::release_filebatchdelrsp_body() {
  _has_bits_[0] &= ~0x00008000u;
  ::ClientCos::FileBatchDelRsp* temp = filebatchdelrsp_body_;
  filebatchdelrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileBatchDelRsp* CosRspMsg::unsafe_arena_release_filebatchdelrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.FileBatchDelRsp_body)
  _has_bits_[0] &= ~0x00008000u;
  ::ClientCos::FileBatchDelRsp* temp = filebatchdelrsp_body_;
  filebatchdelrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileBatchDelRsp* CosRspMsg::_internal_mutable_filebatchdelrsp_body() {
  _has_bits_[0] |= 0x00008000u;
  if (filebatchdelrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileBatchDelRsp>(GetArena());
    filebatchdelrsp_body_ = p;
  }
  return filebatchdelrsp_body_;
}
inline ::ClientCos::FileBatchDelRsp* CosRspMsg::mutable_filebatchdelrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.FileBatchDelRsp_body)
  return _internal_mutable_filebatchdelrsp_body();
}
inline void CosRspMsg::set_allocated_filebatchdelrsp_body(::ClientCos::FileBatchDelRsp* filebatchdelrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filebatchdelrsp_body_;
  }
  if (filebatchdelrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filebatchdelrsp_body);
    if (message_arena != submessage_arena) {
      filebatchdelrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filebatchdelrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  filebatchdelrsp_body_ = filebatchdelrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.FileBatchDelRsp_body)
}

// optional .ClientCos.ListObjVerRsp ListObjVerRsp_body = 36;
inline bool CosRspMsg::_internal_has_listobjverrsp_body() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || listobjverrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_listobjverrsp_body() const {
  return _internal_has_listobjverrsp_body();
}
inline void CosRspMsg::clear_listobjverrsp_body() {
  if (listobjverrsp_body_ != nullptr) listobjverrsp_body_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::ClientCos::ListObjVerRsp& CosRspMsg::_internal_listobjverrsp_body() const {
  const ::ClientCos::ListObjVerRsp* p = listobjverrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListObjVerRsp&>(
      ::ClientCos::_ListObjVerRsp_default_instance_);
}
inline const ::ClientCos::ListObjVerRsp& CosRspMsg::listobjverrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ListObjVerRsp_body)
  return _internal_listobjverrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_listobjverrsp_body(
    ::ClientCos::ListObjVerRsp* listobjverrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listobjverrsp_body_);
  }
  listobjverrsp_body_ = listobjverrsp_body;
  if (listobjverrsp_body) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ListObjVerRsp_body)
}
inline ::ClientCos::ListObjVerRsp* CosRspMsg::release_listobjverrsp_body() {
  _has_bits_[0] &= ~0x00010000u;
  ::ClientCos::ListObjVerRsp* temp = listobjverrsp_body_;
  listobjverrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListObjVerRsp* CosRspMsg::unsafe_arena_release_listobjverrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ListObjVerRsp_body)
  _has_bits_[0] &= ~0x00010000u;
  ::ClientCos::ListObjVerRsp* temp = listobjverrsp_body_;
  listobjverrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListObjVerRsp* CosRspMsg::_internal_mutable_listobjverrsp_body() {
  _has_bits_[0] |= 0x00010000u;
  if (listobjverrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListObjVerRsp>(GetArena());
    listobjverrsp_body_ = p;
  }
  return listobjverrsp_body_;
}
inline ::ClientCos::ListObjVerRsp* CosRspMsg::mutable_listobjverrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ListObjVerRsp_body)
  return _internal_mutable_listobjverrsp_body();
}
inline void CosRspMsg::set_allocated_listobjverrsp_body(::ClientCos::ListObjVerRsp* listobjverrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listobjverrsp_body_;
  }
  if (listobjverrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listobjverrsp_body);
    if (message_arena != submessage_arena) {
      listobjverrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listobjverrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  listobjverrsp_body_ = listobjverrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ListObjVerRsp_body)
}

// optional .ClientCos.DelExpireFileRsp DelExpireFileRsp_body = 37;
inline bool CosRspMsg::_internal_has_delexpirefilersp_body() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || delexpirefilersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_delexpirefilersp_body() const {
  return _internal_has_delexpirefilersp_body();
}
inline void CosRspMsg::clear_delexpirefilersp_body() {
  if (delexpirefilersp_body_ != nullptr) delexpirefilersp_body_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::ClientCos::DelExpireFileRsp& CosRspMsg::_internal_delexpirefilersp_body() const {
  const ::ClientCos::DelExpireFileRsp* p = delexpirefilersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelExpireFileRsp&>(
      ::ClientCos::_DelExpireFileRsp_default_instance_);
}
inline const ::ClientCos::DelExpireFileRsp& CosRspMsg::delexpirefilersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.DelExpireFileRsp_body)
  return _internal_delexpirefilersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_delexpirefilersp_body(
    ::ClientCos::DelExpireFileRsp* delexpirefilersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delexpirefilersp_body_);
  }
  delexpirefilersp_body_ = delexpirefilersp_body;
  if (delexpirefilersp_body) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.DelExpireFileRsp_body)
}
inline ::ClientCos::DelExpireFileRsp* CosRspMsg::release_delexpirefilersp_body() {
  _has_bits_[0] &= ~0x00020000u;
  ::ClientCos::DelExpireFileRsp* temp = delexpirefilersp_body_;
  delexpirefilersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelExpireFileRsp* CosRspMsg::unsafe_arena_release_delexpirefilersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.DelExpireFileRsp_body)
  _has_bits_[0] &= ~0x00020000u;
  ::ClientCos::DelExpireFileRsp* temp = delexpirefilersp_body_;
  delexpirefilersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DelExpireFileRsp* CosRspMsg::_internal_mutable_delexpirefilersp_body() {
  _has_bits_[0] |= 0x00020000u;
  if (delexpirefilersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelExpireFileRsp>(GetArena());
    delexpirefilersp_body_ = p;
  }
  return delexpirefilersp_body_;
}
inline ::ClientCos::DelExpireFileRsp* CosRspMsg::mutable_delexpirefilersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.DelExpireFileRsp_body)
  return _internal_mutable_delexpirefilersp_body();
}
inline void CosRspMsg::set_allocated_delexpirefilersp_body(::ClientCos::DelExpireFileRsp* delexpirefilersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delexpirefilersp_body_;
  }
  if (delexpirefilersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delexpirefilersp_body);
    if (message_arena != submessage_arena) {
      delexpirefilersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delexpirefilersp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  delexpirefilersp_body_ = delexpirefilersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.DelExpireFileRsp_body)
}

// optional .ClientCos.FileDelRsp FileDelRsp_body = 38;
inline bool CosRspMsg::_internal_has_filedelrsp_body() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || filedelrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_filedelrsp_body() const {
  return _internal_has_filedelrsp_body();
}
inline void CosRspMsg::clear_filedelrsp_body() {
  if (filedelrsp_body_ != nullptr) filedelrsp_body_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::ClientCos::FileDelRsp& CosRspMsg::_internal_filedelrsp_body() const {
  const ::ClientCos::FileDelRsp* p = filedelrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileDelRsp&>(
      ::ClientCos::_FileDelRsp_default_instance_);
}
inline const ::ClientCos::FileDelRsp& CosRspMsg::filedelrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.FileDelRsp_body)
  return _internal_filedelrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_filedelrsp_body(
    ::ClientCos::FileDelRsp* filedelrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedelrsp_body_);
  }
  filedelrsp_body_ = filedelrsp_body;
  if (filedelrsp_body) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.FileDelRsp_body)
}
inline ::ClientCos::FileDelRsp* CosRspMsg::release_filedelrsp_body() {
  _has_bits_[0] &= ~0x00040000u;
  ::ClientCos::FileDelRsp* temp = filedelrsp_body_;
  filedelrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileDelRsp* CosRspMsg::unsafe_arena_release_filedelrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.FileDelRsp_body)
  _has_bits_[0] &= ~0x00040000u;
  ::ClientCos::FileDelRsp* temp = filedelrsp_body_;
  filedelrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileDelRsp* CosRspMsg::_internal_mutable_filedelrsp_body() {
  _has_bits_[0] |= 0x00040000u;
  if (filedelrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileDelRsp>(GetArena());
    filedelrsp_body_ = p;
  }
  return filedelrsp_body_;
}
inline ::ClientCos::FileDelRsp* CosRspMsg::mutable_filedelrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.FileDelRsp_body)
  return _internal_mutable_filedelrsp_body();
}
inline void CosRspMsg::set_allocated_filedelrsp_body(::ClientCos::FileDelRsp* filedelrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filedelrsp_body_;
  }
  if (filedelrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filedelrsp_body);
    if (message_arena != submessage_arena) {
      filedelrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedelrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  filedelrsp_body_ = filedelrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.FileDelRsp_body)
}

// optional .ClientCos.SpObjAttrModifyRsp SpObjAttrModifyRsp_body = 39;
inline bool CosRspMsg::_internal_has_spobjattrmodifyrsp_body() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || spobjattrmodifyrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_spobjattrmodifyrsp_body() const {
  return _internal_has_spobjattrmodifyrsp_body();
}
inline void CosRspMsg::clear_spobjattrmodifyrsp_body() {
  if (spobjattrmodifyrsp_body_ != nullptr) spobjattrmodifyrsp_body_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::ClientCos::SpObjAttrModifyRsp& CosRspMsg::_internal_spobjattrmodifyrsp_body() const {
  const ::ClientCos::SpObjAttrModifyRsp* p = spobjattrmodifyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SpObjAttrModifyRsp&>(
      ::ClientCos::_SpObjAttrModifyRsp_default_instance_);
}
inline const ::ClientCos::SpObjAttrModifyRsp& CosRspMsg::spobjattrmodifyrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SpObjAttrModifyRsp_body)
  return _internal_spobjattrmodifyrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_spobjattrmodifyrsp_body(
    ::ClientCos::SpObjAttrModifyRsp* spobjattrmodifyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spobjattrmodifyrsp_body_);
  }
  spobjattrmodifyrsp_body_ = spobjattrmodifyrsp_body;
  if (spobjattrmodifyrsp_body) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SpObjAttrModifyRsp_body)
}
inline ::ClientCos::SpObjAttrModifyRsp* CosRspMsg::release_spobjattrmodifyrsp_body() {
  _has_bits_[0] &= ~0x00080000u;
  ::ClientCos::SpObjAttrModifyRsp* temp = spobjattrmodifyrsp_body_;
  spobjattrmodifyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SpObjAttrModifyRsp* CosRspMsg::unsafe_arena_release_spobjattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SpObjAttrModifyRsp_body)
  _has_bits_[0] &= ~0x00080000u;
  ::ClientCos::SpObjAttrModifyRsp* temp = spobjattrmodifyrsp_body_;
  spobjattrmodifyrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SpObjAttrModifyRsp* CosRspMsg::_internal_mutable_spobjattrmodifyrsp_body() {
  _has_bits_[0] |= 0x00080000u;
  if (spobjattrmodifyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SpObjAttrModifyRsp>(GetArena());
    spobjattrmodifyrsp_body_ = p;
  }
  return spobjattrmodifyrsp_body_;
}
inline ::ClientCos::SpObjAttrModifyRsp* CosRspMsg::mutable_spobjattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SpObjAttrModifyRsp_body)
  return _internal_mutable_spobjattrmodifyrsp_body();
}
inline void CosRspMsg::set_allocated_spobjattrmodifyrsp_body(::ClientCos::SpObjAttrModifyRsp* spobjattrmodifyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spobjattrmodifyrsp_body_;
  }
  if (spobjattrmodifyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spobjattrmodifyrsp_body);
    if (message_arena != submessage_arena) {
      spobjattrmodifyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spobjattrmodifyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  spobjattrmodifyrsp_body_ = spobjattrmodifyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SpObjAttrModifyRsp_body)
}

// optional .ClientCos.UploadDelmarkerRsp UploadDelmarkerRsp_body = 40;
inline bool CosRspMsg::_internal_has_uploaddelmarkerrsp_body() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || uploaddelmarkerrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_uploaddelmarkerrsp_body() const {
  return _internal_has_uploaddelmarkerrsp_body();
}
inline void CosRspMsg::clear_uploaddelmarkerrsp_body() {
  if (uploaddelmarkerrsp_body_ != nullptr) uploaddelmarkerrsp_body_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::ClientCos::UploadDelmarkerRsp& CosRspMsg::_internal_uploaddelmarkerrsp_body() const {
  const ::ClientCos::UploadDelmarkerRsp* p = uploaddelmarkerrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::UploadDelmarkerRsp&>(
      ::ClientCos::_UploadDelmarkerRsp_default_instance_);
}
inline const ::ClientCos::UploadDelmarkerRsp& CosRspMsg::uploaddelmarkerrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.UploadDelmarkerRsp_body)
  return _internal_uploaddelmarkerrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_uploaddelmarkerrsp_body(
    ::ClientCos::UploadDelmarkerRsp* uploaddelmarkerrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uploaddelmarkerrsp_body_);
  }
  uploaddelmarkerrsp_body_ = uploaddelmarkerrsp_body;
  if (uploaddelmarkerrsp_body) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.UploadDelmarkerRsp_body)
}
inline ::ClientCos::UploadDelmarkerRsp* CosRspMsg::release_uploaddelmarkerrsp_body() {
  _has_bits_[0] &= ~0x00100000u;
  ::ClientCos::UploadDelmarkerRsp* temp = uploaddelmarkerrsp_body_;
  uploaddelmarkerrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::UploadDelmarkerRsp* CosRspMsg::unsafe_arena_release_uploaddelmarkerrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.UploadDelmarkerRsp_body)
  _has_bits_[0] &= ~0x00100000u;
  ::ClientCos::UploadDelmarkerRsp* temp = uploaddelmarkerrsp_body_;
  uploaddelmarkerrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::UploadDelmarkerRsp* CosRspMsg::_internal_mutable_uploaddelmarkerrsp_body() {
  _has_bits_[0] |= 0x00100000u;
  if (uploaddelmarkerrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::UploadDelmarkerRsp>(GetArena());
    uploaddelmarkerrsp_body_ = p;
  }
  return uploaddelmarkerrsp_body_;
}
inline ::ClientCos::UploadDelmarkerRsp* CosRspMsg::mutable_uploaddelmarkerrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.UploadDelmarkerRsp_body)
  return _internal_mutable_uploaddelmarkerrsp_body();
}
inline void CosRspMsg::set_allocated_uploaddelmarkerrsp_body(::ClientCos::UploadDelmarkerRsp* uploaddelmarkerrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uploaddelmarkerrsp_body_;
  }
  if (uploaddelmarkerrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uploaddelmarkerrsp_body);
    if (message_arena != submessage_arena) {
      uploaddelmarkerrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uploaddelmarkerrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  uploaddelmarkerrsp_body_ = uploaddelmarkerrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.UploadDelmarkerRsp_body)
}

// optional .ClientCos.ExpireFileDelVerRsp ExpireFileDelVerRsp_body = 41;
inline bool CosRspMsg::_internal_has_expirefiledelverrsp_body() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || expirefiledelverrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_expirefiledelverrsp_body() const {
  return _internal_has_expirefiledelverrsp_body();
}
inline void CosRspMsg::clear_expirefiledelverrsp_body() {
  if (expirefiledelverrsp_body_ != nullptr) expirefiledelverrsp_body_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::ClientCos::ExpireFileDelVerRsp& CosRspMsg::_internal_expirefiledelverrsp_body() const {
  const ::ClientCos::ExpireFileDelVerRsp* p = expirefiledelverrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExpireFileDelVerRsp&>(
      ::ClientCos::_ExpireFileDelVerRsp_default_instance_);
}
inline const ::ClientCos::ExpireFileDelVerRsp& CosRspMsg::expirefiledelverrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ExpireFileDelVerRsp_body)
  return _internal_expirefiledelverrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_expirefiledelverrsp_body(
    ::ClientCos::ExpireFileDelVerRsp* expirefiledelverrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirefiledelverrsp_body_);
  }
  expirefiledelverrsp_body_ = expirefiledelverrsp_body;
  if (expirefiledelverrsp_body) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ExpireFileDelVerRsp_body)
}
inline ::ClientCos::ExpireFileDelVerRsp* CosRspMsg::release_expirefiledelverrsp_body() {
  _has_bits_[0] &= ~0x00200000u;
  ::ClientCos::ExpireFileDelVerRsp* temp = expirefiledelverrsp_body_;
  expirefiledelverrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExpireFileDelVerRsp* CosRspMsg::unsafe_arena_release_expirefiledelverrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ExpireFileDelVerRsp_body)
  _has_bits_[0] &= ~0x00200000u;
  ::ClientCos::ExpireFileDelVerRsp* temp = expirefiledelverrsp_body_;
  expirefiledelverrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ExpireFileDelVerRsp* CosRspMsg::_internal_mutable_expirefiledelverrsp_body() {
  _has_bits_[0] |= 0x00200000u;
  if (expirefiledelverrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExpireFileDelVerRsp>(GetArena());
    expirefiledelverrsp_body_ = p;
  }
  return expirefiledelverrsp_body_;
}
inline ::ClientCos::ExpireFileDelVerRsp* CosRspMsg::mutable_expirefiledelverrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ExpireFileDelVerRsp_body)
  return _internal_mutable_expirefiledelverrsp_body();
}
inline void CosRspMsg::set_allocated_expirefiledelverrsp_body(::ClientCos::ExpireFileDelVerRsp* expirefiledelverrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expirefiledelverrsp_body_;
  }
  if (expirefiledelverrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expirefiledelverrsp_body);
    if (message_arena != submessage_arena) {
      expirefiledelverrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirefiledelverrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  expirefiledelverrsp_body_ = expirefiledelverrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ExpireFileDelVerRsp_body)
}

// optional .ClientCos.ExpireFileDelNoverRsp ExpireFileDelNoverRsp_body = 42;
inline bool CosRspMsg::_internal_has_expirefiledelnoverrsp_body() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || expirefiledelnoverrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_expirefiledelnoverrsp_body() const {
  return _internal_has_expirefiledelnoverrsp_body();
}
inline void CosRspMsg::clear_expirefiledelnoverrsp_body() {
  if (expirefiledelnoverrsp_body_ != nullptr) expirefiledelnoverrsp_body_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::ClientCos::ExpireFileDelNoverRsp& CosRspMsg::_internal_expirefiledelnoverrsp_body() const {
  const ::ClientCos::ExpireFileDelNoverRsp* p = expirefiledelnoverrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExpireFileDelNoverRsp&>(
      ::ClientCos::_ExpireFileDelNoverRsp_default_instance_);
}
inline const ::ClientCos::ExpireFileDelNoverRsp& CosRspMsg::expirefiledelnoverrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ExpireFileDelNoverRsp_body)
  return _internal_expirefiledelnoverrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_expirefiledelnoverrsp_body(
    ::ClientCos::ExpireFileDelNoverRsp* expirefiledelnoverrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirefiledelnoverrsp_body_);
  }
  expirefiledelnoverrsp_body_ = expirefiledelnoverrsp_body;
  if (expirefiledelnoverrsp_body) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ExpireFileDelNoverRsp_body)
}
inline ::ClientCos::ExpireFileDelNoverRsp* CosRspMsg::release_expirefiledelnoverrsp_body() {
  _has_bits_[0] &= ~0x00400000u;
  ::ClientCos::ExpireFileDelNoverRsp* temp = expirefiledelnoverrsp_body_;
  expirefiledelnoverrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExpireFileDelNoverRsp* CosRspMsg::unsafe_arena_release_expirefiledelnoverrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ExpireFileDelNoverRsp_body)
  _has_bits_[0] &= ~0x00400000u;
  ::ClientCos::ExpireFileDelNoverRsp* temp = expirefiledelnoverrsp_body_;
  expirefiledelnoverrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ExpireFileDelNoverRsp* CosRspMsg::_internal_mutable_expirefiledelnoverrsp_body() {
  _has_bits_[0] |= 0x00400000u;
  if (expirefiledelnoverrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExpireFileDelNoverRsp>(GetArena());
    expirefiledelnoverrsp_body_ = p;
  }
  return expirefiledelnoverrsp_body_;
}
inline ::ClientCos::ExpireFileDelNoverRsp* CosRspMsg::mutable_expirefiledelnoverrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ExpireFileDelNoverRsp_body)
  return _internal_mutable_expirefiledelnoverrsp_body();
}
inline void CosRspMsg::set_allocated_expirefiledelnoverrsp_body(::ClientCos::ExpireFileDelNoverRsp* expirefiledelnoverrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expirefiledelnoverrsp_body_;
  }
  if (expirefiledelnoverrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expirefiledelnoverrsp_body);
    if (message_arena != submessage_arena) {
      expirefiledelnoverrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirefiledelnoverrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  expirefiledelnoverrsp_body_ = expirefiledelnoverrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ExpireFileDelNoverRsp_body)
}

// optional .ClientCos.SetBucketPriAttrRsp SetBucketPriAttrRsp_body = 43;
inline bool CosRspMsg::_internal_has_setbucketpriattrrsp_body() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || setbucketpriattrrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setbucketpriattrrsp_body() const {
  return _internal_has_setbucketpriattrrsp_body();
}
inline void CosRspMsg::clear_setbucketpriattrrsp_body() {
  if (setbucketpriattrrsp_body_ != nullptr) setbucketpriattrrsp_body_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::ClientCos::SetBucketPriAttrRsp& CosRspMsg::_internal_setbucketpriattrrsp_body() const {
  const ::ClientCos::SetBucketPriAttrRsp* p = setbucketpriattrrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketPriAttrRsp&>(
      ::ClientCos::_SetBucketPriAttrRsp_default_instance_);
}
inline const ::ClientCos::SetBucketPriAttrRsp& CosRspMsg::setbucketpriattrrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetBucketPriAttrRsp_body)
  return _internal_setbucketpriattrrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setbucketpriattrrsp_body(
    ::ClientCos::SetBucketPriAttrRsp* setbucketpriattrrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketpriattrrsp_body_);
  }
  setbucketpriattrrsp_body_ = setbucketpriattrrsp_body;
  if (setbucketpriattrrsp_body) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetBucketPriAttrRsp_body)
}
inline ::ClientCos::SetBucketPriAttrRsp* CosRspMsg::release_setbucketpriattrrsp_body() {
  _has_bits_[0] &= ~0x00800000u;
  ::ClientCos::SetBucketPriAttrRsp* temp = setbucketpriattrrsp_body_;
  setbucketpriattrrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketPriAttrRsp* CosRspMsg::unsafe_arena_release_setbucketpriattrrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetBucketPriAttrRsp_body)
  _has_bits_[0] &= ~0x00800000u;
  ::ClientCos::SetBucketPriAttrRsp* temp = setbucketpriattrrsp_body_;
  setbucketpriattrrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketPriAttrRsp* CosRspMsg::_internal_mutable_setbucketpriattrrsp_body() {
  _has_bits_[0] |= 0x00800000u;
  if (setbucketpriattrrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketPriAttrRsp>(GetArena());
    setbucketpriattrrsp_body_ = p;
  }
  return setbucketpriattrrsp_body_;
}
inline ::ClientCos::SetBucketPriAttrRsp* CosRspMsg::mutable_setbucketpriattrrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetBucketPriAttrRsp_body)
  return _internal_mutable_setbucketpriattrrsp_body();
}
inline void CosRspMsg::set_allocated_setbucketpriattrrsp_body(::ClientCos::SetBucketPriAttrRsp* setbucketpriattrrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketpriattrrsp_body_;
  }
  if (setbucketpriattrrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketpriattrrsp_body);
    if (message_arena != submessage_arena) {
      setbucketpriattrrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketpriattrrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  setbucketpriattrrsp_body_ = setbucketpriattrrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetBucketPriAttrRsp_body)
}

// optional .ClientCos.FileDownToCASRsp FileDownToCASRsp_body = 44;
inline bool CosRspMsg::_internal_has_filedowntocasrsp_body() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || filedowntocasrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_filedowntocasrsp_body() const {
  return _internal_has_filedowntocasrsp_body();
}
inline void CosRspMsg::clear_filedowntocasrsp_body() {
  if (filedowntocasrsp_body_ != nullptr) filedowntocasrsp_body_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::ClientCos::FileDownToCASRsp& CosRspMsg::_internal_filedowntocasrsp_body() const {
  const ::ClientCos::FileDownToCASRsp* p = filedowntocasrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileDownToCASRsp&>(
      ::ClientCos::_FileDownToCASRsp_default_instance_);
}
inline const ::ClientCos::FileDownToCASRsp& CosRspMsg::filedowntocasrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.FileDownToCASRsp_body)
  return _internal_filedowntocasrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_filedowntocasrsp_body(
    ::ClientCos::FileDownToCASRsp* filedowntocasrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedowntocasrsp_body_);
  }
  filedowntocasrsp_body_ = filedowntocasrsp_body;
  if (filedowntocasrsp_body) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.FileDownToCASRsp_body)
}
inline ::ClientCos::FileDownToCASRsp* CosRspMsg::release_filedowntocasrsp_body() {
  _has_bits_[0] &= ~0x01000000u;
  ::ClientCos::FileDownToCASRsp* temp = filedowntocasrsp_body_;
  filedowntocasrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileDownToCASRsp* CosRspMsg::unsafe_arena_release_filedowntocasrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.FileDownToCASRsp_body)
  _has_bits_[0] &= ~0x01000000u;
  ::ClientCos::FileDownToCASRsp* temp = filedowntocasrsp_body_;
  filedowntocasrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileDownToCASRsp* CosRspMsg::_internal_mutable_filedowntocasrsp_body() {
  _has_bits_[0] |= 0x01000000u;
  if (filedowntocasrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileDownToCASRsp>(GetArena());
    filedowntocasrsp_body_ = p;
  }
  return filedowntocasrsp_body_;
}
inline ::ClientCos::FileDownToCASRsp* CosRspMsg::mutable_filedowntocasrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.FileDownToCASRsp_body)
  return _internal_mutable_filedowntocasrsp_body();
}
inline void CosRspMsg::set_allocated_filedowntocasrsp_body(::ClientCos::FileDownToCASRsp* filedowntocasrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filedowntocasrsp_body_;
  }
  if (filedowntocasrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filedowntocasrsp_body);
    if (message_arena != submessage_arena) {
      filedowntocasrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedowntocasrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  filedowntocasrsp_body_ = filedowntocasrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.FileDownToCASRsp_body)
}

// optional .ClientCos.CasObjAttrModifyRsp CasObjAttrModifyRsp_body = 45;
inline bool CosRspMsg::_internal_has_casobjattrmodifyrsp_body() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || casobjattrmodifyrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_casobjattrmodifyrsp_body() const {
  return _internal_has_casobjattrmodifyrsp_body();
}
inline void CosRspMsg::clear_casobjattrmodifyrsp_body() {
  if (casobjattrmodifyrsp_body_ != nullptr) casobjattrmodifyrsp_body_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::ClientCos::CasObjAttrModifyRsp& CosRspMsg::_internal_casobjattrmodifyrsp_body() const {
  const ::ClientCos::CasObjAttrModifyRsp* p = casobjattrmodifyrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasObjAttrModifyRsp&>(
      ::ClientCos::_CasObjAttrModifyRsp_default_instance_);
}
inline const ::ClientCos::CasObjAttrModifyRsp& CosRspMsg::casobjattrmodifyrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.CasObjAttrModifyRsp_body)
  return _internal_casobjattrmodifyrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_casobjattrmodifyrsp_body(
    ::ClientCos::CasObjAttrModifyRsp* casobjattrmodifyrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casobjattrmodifyrsp_body_);
  }
  casobjattrmodifyrsp_body_ = casobjattrmodifyrsp_body;
  if (casobjattrmodifyrsp_body) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.CasObjAttrModifyRsp_body)
}
inline ::ClientCos::CasObjAttrModifyRsp* CosRspMsg::release_casobjattrmodifyrsp_body() {
  _has_bits_[0] &= ~0x02000000u;
  ::ClientCos::CasObjAttrModifyRsp* temp = casobjattrmodifyrsp_body_;
  casobjattrmodifyrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasObjAttrModifyRsp* CosRspMsg::unsafe_arena_release_casobjattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.CasObjAttrModifyRsp_body)
  _has_bits_[0] &= ~0x02000000u;
  ::ClientCos::CasObjAttrModifyRsp* temp = casobjattrmodifyrsp_body_;
  casobjattrmodifyrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasObjAttrModifyRsp* CosRspMsg::_internal_mutable_casobjattrmodifyrsp_body() {
  _has_bits_[0] |= 0x02000000u;
  if (casobjattrmodifyrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasObjAttrModifyRsp>(GetArena());
    casobjattrmodifyrsp_body_ = p;
  }
  return casobjattrmodifyrsp_body_;
}
inline ::ClientCos::CasObjAttrModifyRsp* CosRspMsg::mutable_casobjattrmodifyrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.CasObjAttrModifyRsp_body)
  return _internal_mutable_casobjattrmodifyrsp_body();
}
inline void CosRspMsg::set_allocated_casobjattrmodifyrsp_body(::ClientCos::CasObjAttrModifyRsp* casobjattrmodifyrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casobjattrmodifyrsp_body_;
  }
  if (casobjattrmodifyrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casobjattrmodifyrsp_body);
    if (message_arena != submessage_arena) {
      casobjattrmodifyrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casobjattrmodifyrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  casobjattrmodifyrsp_body_ = casobjattrmodifyrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.CasObjAttrModifyRsp_body)
}

// optional .ClientCos.CasFileRecoverDelRsp CasFileRecoverDelRsp_body = 46;
inline bool CosRspMsg::_internal_has_casfilerecoverdelrsp_body() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || casfilerecoverdelrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_casfilerecoverdelrsp_body() const {
  return _internal_has_casfilerecoverdelrsp_body();
}
inline void CosRspMsg::clear_casfilerecoverdelrsp_body() {
  if (casfilerecoverdelrsp_body_ != nullptr) casfilerecoverdelrsp_body_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::ClientCos::CasFileRecoverDelRsp& CosRspMsg::_internal_casfilerecoverdelrsp_body() const {
  const ::ClientCos::CasFileRecoverDelRsp* p = casfilerecoverdelrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasFileRecoverDelRsp&>(
      ::ClientCos::_CasFileRecoverDelRsp_default_instance_);
}
inline const ::ClientCos::CasFileRecoverDelRsp& CosRspMsg::casfilerecoverdelrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.CasFileRecoverDelRsp_body)
  return _internal_casfilerecoverdelrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_casfilerecoverdelrsp_body(
    ::ClientCos::CasFileRecoverDelRsp* casfilerecoverdelrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casfilerecoverdelrsp_body_);
  }
  casfilerecoverdelrsp_body_ = casfilerecoverdelrsp_body;
  if (casfilerecoverdelrsp_body) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.CasFileRecoverDelRsp_body)
}
inline ::ClientCos::CasFileRecoverDelRsp* CosRspMsg::release_casfilerecoverdelrsp_body() {
  _has_bits_[0] &= ~0x04000000u;
  ::ClientCos::CasFileRecoverDelRsp* temp = casfilerecoverdelrsp_body_;
  casfilerecoverdelrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasFileRecoverDelRsp* CosRspMsg::unsafe_arena_release_casfilerecoverdelrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.CasFileRecoverDelRsp_body)
  _has_bits_[0] &= ~0x04000000u;
  ::ClientCos::CasFileRecoverDelRsp* temp = casfilerecoverdelrsp_body_;
  casfilerecoverdelrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasFileRecoverDelRsp* CosRspMsg::_internal_mutable_casfilerecoverdelrsp_body() {
  _has_bits_[0] |= 0x04000000u;
  if (casfilerecoverdelrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasFileRecoverDelRsp>(GetArena());
    casfilerecoverdelrsp_body_ = p;
  }
  return casfilerecoverdelrsp_body_;
}
inline ::ClientCos::CasFileRecoverDelRsp* CosRspMsg::mutable_casfilerecoverdelrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.CasFileRecoverDelRsp_body)
  return _internal_mutable_casfilerecoverdelrsp_body();
}
inline void CosRspMsg::set_allocated_casfilerecoverdelrsp_body(::ClientCos::CasFileRecoverDelRsp* casfilerecoverdelrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casfilerecoverdelrsp_body_;
  }
  if (casfilerecoverdelrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casfilerecoverdelrsp_body);
    if (message_arena != submessage_arena) {
      casfilerecoverdelrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casfilerecoverdelrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  casfilerecoverdelrsp_body_ = casfilerecoverdelrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.CasFileRecoverDelRsp_body)
}

// optional .ClientCos.CasObjRestoreErrRsp CasObjRestoreErrRsp_body = 47;
inline bool CosRspMsg::_internal_has_casobjrestoreerrrsp_body() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || casobjrestoreerrrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_casobjrestoreerrrsp_body() const {
  return _internal_has_casobjrestoreerrrsp_body();
}
inline void CosRspMsg::clear_casobjrestoreerrrsp_body() {
  if (casobjrestoreerrrsp_body_ != nullptr) casobjrestoreerrrsp_body_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::ClientCos::CasObjRestoreErrRsp& CosRspMsg::_internal_casobjrestoreerrrsp_body() const {
  const ::ClientCos::CasObjRestoreErrRsp* p = casobjrestoreerrrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasObjRestoreErrRsp&>(
      ::ClientCos::_CasObjRestoreErrRsp_default_instance_);
}
inline const ::ClientCos::CasObjRestoreErrRsp& CosRspMsg::casobjrestoreerrrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.CasObjRestoreErrRsp_body)
  return _internal_casobjrestoreerrrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_casobjrestoreerrrsp_body(
    ::ClientCos::CasObjRestoreErrRsp* casobjrestoreerrrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casobjrestoreerrrsp_body_);
  }
  casobjrestoreerrrsp_body_ = casobjrestoreerrrsp_body;
  if (casobjrestoreerrrsp_body) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.CasObjRestoreErrRsp_body)
}
inline ::ClientCos::CasObjRestoreErrRsp* CosRspMsg::release_casobjrestoreerrrsp_body() {
  _has_bits_[0] &= ~0x08000000u;
  ::ClientCos::CasObjRestoreErrRsp* temp = casobjrestoreerrrsp_body_;
  casobjrestoreerrrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasObjRestoreErrRsp* CosRspMsg::unsafe_arena_release_casobjrestoreerrrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.CasObjRestoreErrRsp_body)
  _has_bits_[0] &= ~0x08000000u;
  ::ClientCos::CasObjRestoreErrRsp* temp = casobjrestoreerrrsp_body_;
  casobjrestoreerrrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasObjRestoreErrRsp* CosRspMsg::_internal_mutable_casobjrestoreerrrsp_body() {
  _has_bits_[0] |= 0x08000000u;
  if (casobjrestoreerrrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasObjRestoreErrRsp>(GetArena());
    casobjrestoreerrrsp_body_ = p;
  }
  return casobjrestoreerrrsp_body_;
}
inline ::ClientCos::CasObjRestoreErrRsp* CosRspMsg::mutable_casobjrestoreerrrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.CasObjRestoreErrRsp_body)
  return _internal_mutable_casobjrestoreerrrsp_body();
}
inline void CosRspMsg::set_allocated_casobjrestoreerrrsp_body(::ClientCos::CasObjRestoreErrRsp* casobjrestoreerrrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casobjrestoreerrrsp_body_;
  }
  if (casobjrestoreerrrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casobjrestoreerrrsp_body);
    if (message_arena != submessage_arena) {
      casobjrestoreerrrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casobjrestoreerrrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  casobjrestoreerrrsp_body_ = casobjrestoreerrrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.CasObjRestoreErrRsp_body)
}

// optional .ClientCos.SpObjAttrQueryRsp SpObjAttrQueryRsp_body = 48;
inline bool CosRspMsg::_internal_has_spobjattrqueryrsp_body() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || spobjattrqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_spobjattrqueryrsp_body() const {
  return _internal_has_spobjattrqueryrsp_body();
}
inline void CosRspMsg::clear_spobjattrqueryrsp_body() {
  if (spobjattrqueryrsp_body_ != nullptr) spobjattrqueryrsp_body_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::ClientCos::SpObjAttrQueryRsp& CosRspMsg::_internal_spobjattrqueryrsp_body() const {
  const ::ClientCos::SpObjAttrQueryRsp* p = spobjattrqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SpObjAttrQueryRsp&>(
      ::ClientCos::_SpObjAttrQueryRsp_default_instance_);
}
inline const ::ClientCos::SpObjAttrQueryRsp& CosRspMsg::spobjattrqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SpObjAttrQueryRsp_body)
  return _internal_spobjattrqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_spobjattrqueryrsp_body(
    ::ClientCos::SpObjAttrQueryRsp* spobjattrqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spobjattrqueryrsp_body_);
  }
  spobjattrqueryrsp_body_ = spobjattrqueryrsp_body;
  if (spobjattrqueryrsp_body) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SpObjAttrQueryRsp_body)
}
inline ::ClientCos::SpObjAttrQueryRsp* CosRspMsg::release_spobjattrqueryrsp_body() {
  _has_bits_[0] &= ~0x10000000u;
  ::ClientCos::SpObjAttrQueryRsp* temp = spobjattrqueryrsp_body_;
  spobjattrqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SpObjAttrQueryRsp* CosRspMsg::unsafe_arena_release_spobjattrqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SpObjAttrQueryRsp_body)
  _has_bits_[0] &= ~0x10000000u;
  ::ClientCos::SpObjAttrQueryRsp* temp = spobjattrqueryrsp_body_;
  spobjattrqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SpObjAttrQueryRsp* CosRspMsg::_internal_mutable_spobjattrqueryrsp_body() {
  _has_bits_[0] |= 0x10000000u;
  if (spobjattrqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SpObjAttrQueryRsp>(GetArena());
    spobjattrqueryrsp_body_ = p;
  }
  return spobjattrqueryrsp_body_;
}
inline ::ClientCos::SpObjAttrQueryRsp* CosRspMsg::mutable_spobjattrqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SpObjAttrQueryRsp_body)
  return _internal_mutable_spobjattrqueryrsp_body();
}
inline void CosRspMsg::set_allocated_spobjattrqueryrsp_body(::ClientCos::SpObjAttrQueryRsp* spobjattrqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spobjattrqueryrsp_body_;
  }
  if (spobjattrqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spobjattrqueryrsp_body);
    if (message_arena != submessage_arena) {
      spobjattrqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spobjattrqueryrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  spobjattrqueryrsp_body_ = spobjattrqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SpObjAttrQueryRsp_body)
}

// optional .ClientCos.ObjModStorageTypeRsp ObjModStorageTypeRsp_body = 49;
inline bool CosRspMsg::_internal_has_objmodstoragetypersp_body() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || objmodstoragetypersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_objmodstoragetypersp_body() const {
  return _internal_has_objmodstoragetypersp_body();
}
inline void CosRspMsg::clear_objmodstoragetypersp_body() {
  if (objmodstoragetypersp_body_ != nullptr) objmodstoragetypersp_body_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::ClientCos::ObjModStorageTypeRsp& CosRspMsg::_internal_objmodstoragetypersp_body() const {
  const ::ClientCos::ObjModStorageTypeRsp* p = objmodstoragetypersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjModStorageTypeRsp&>(
      ::ClientCos::_ObjModStorageTypeRsp_default_instance_);
}
inline const ::ClientCos::ObjModStorageTypeRsp& CosRspMsg::objmodstoragetypersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ObjModStorageTypeRsp_body)
  return _internal_objmodstoragetypersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_objmodstoragetypersp_body(
    ::ClientCos::ObjModStorageTypeRsp* objmodstoragetypersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objmodstoragetypersp_body_);
  }
  objmodstoragetypersp_body_ = objmodstoragetypersp_body;
  if (objmodstoragetypersp_body) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ObjModStorageTypeRsp_body)
}
inline ::ClientCos::ObjModStorageTypeRsp* CosRspMsg::release_objmodstoragetypersp_body() {
  _has_bits_[0] &= ~0x20000000u;
  ::ClientCos::ObjModStorageTypeRsp* temp = objmodstoragetypersp_body_;
  objmodstoragetypersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjModStorageTypeRsp* CosRspMsg::unsafe_arena_release_objmodstoragetypersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ObjModStorageTypeRsp_body)
  _has_bits_[0] &= ~0x20000000u;
  ::ClientCos::ObjModStorageTypeRsp* temp = objmodstoragetypersp_body_;
  objmodstoragetypersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjModStorageTypeRsp* CosRspMsg::_internal_mutable_objmodstoragetypersp_body() {
  _has_bits_[0] |= 0x20000000u;
  if (objmodstoragetypersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjModStorageTypeRsp>(GetArena());
    objmodstoragetypersp_body_ = p;
  }
  return objmodstoragetypersp_body_;
}
inline ::ClientCos::ObjModStorageTypeRsp* CosRspMsg::mutable_objmodstoragetypersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ObjModStorageTypeRsp_body)
  return _internal_mutable_objmodstoragetypersp_body();
}
inline void CosRspMsg::set_allocated_objmodstoragetypersp_body(::ClientCos::ObjModStorageTypeRsp* objmodstoragetypersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objmodstoragetypersp_body_;
  }
  if (objmodstoragetypersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objmodstoragetypersp_body);
    if (message_arena != submessage_arena) {
      objmodstoragetypersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objmodstoragetypersp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  objmodstoragetypersp_body_ = objmodstoragetypersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ObjModStorageTypeRsp_body)
}

// optional .ClientCos.SetBucketWebsiteInfoRsp SetBucketWebsiteInfoRsp_body = 50;
inline bool CosRspMsg::_internal_has_setbucketwebsiteinforsp_body() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || setbucketwebsiteinforsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setbucketwebsiteinforsp_body() const {
  return _internal_has_setbucketwebsiteinforsp_body();
}
inline void CosRspMsg::clear_setbucketwebsiteinforsp_body() {
  if (setbucketwebsiteinforsp_body_ != nullptr) setbucketwebsiteinforsp_body_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::ClientCos::SetBucketWebsiteInfoRsp& CosRspMsg::_internal_setbucketwebsiteinforsp_body() const {
  const ::ClientCos::SetBucketWebsiteInfoRsp* p = setbucketwebsiteinforsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketWebsiteInfoRsp&>(
      ::ClientCos::_SetBucketWebsiteInfoRsp_default_instance_);
}
inline const ::ClientCos::SetBucketWebsiteInfoRsp& CosRspMsg::setbucketwebsiteinforsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetBucketWebsiteInfoRsp_body)
  return _internal_setbucketwebsiteinforsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setbucketwebsiteinforsp_body(
    ::ClientCos::SetBucketWebsiteInfoRsp* setbucketwebsiteinforsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketwebsiteinforsp_body_);
  }
  setbucketwebsiteinforsp_body_ = setbucketwebsiteinforsp_body;
  if (setbucketwebsiteinforsp_body) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetBucketWebsiteInfoRsp_body)
}
inline ::ClientCos::SetBucketWebsiteInfoRsp* CosRspMsg::release_setbucketwebsiteinforsp_body() {
  _has_bits_[0] &= ~0x40000000u;
  ::ClientCos::SetBucketWebsiteInfoRsp* temp = setbucketwebsiteinforsp_body_;
  setbucketwebsiteinforsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketWebsiteInfoRsp* CosRspMsg::unsafe_arena_release_setbucketwebsiteinforsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetBucketWebsiteInfoRsp_body)
  _has_bits_[0] &= ~0x40000000u;
  ::ClientCos::SetBucketWebsiteInfoRsp* temp = setbucketwebsiteinforsp_body_;
  setbucketwebsiteinforsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketWebsiteInfoRsp* CosRspMsg::_internal_mutable_setbucketwebsiteinforsp_body() {
  _has_bits_[0] |= 0x40000000u;
  if (setbucketwebsiteinforsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketWebsiteInfoRsp>(GetArena());
    setbucketwebsiteinforsp_body_ = p;
  }
  return setbucketwebsiteinforsp_body_;
}
inline ::ClientCos::SetBucketWebsiteInfoRsp* CosRspMsg::mutable_setbucketwebsiteinforsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetBucketWebsiteInfoRsp_body)
  return _internal_mutable_setbucketwebsiteinforsp_body();
}
inline void CosRspMsg::set_allocated_setbucketwebsiteinforsp_body(::ClientCos::SetBucketWebsiteInfoRsp* setbucketwebsiteinforsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketwebsiteinforsp_body_;
  }
  if (setbucketwebsiteinforsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketwebsiteinforsp_body);
    if (message_arena != submessage_arena) {
      setbucketwebsiteinforsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketwebsiteinforsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  setbucketwebsiteinforsp_body_ = setbucketwebsiteinforsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetBucketWebsiteInfoRsp_body)
}

// optional .ClientCos.SetCamAttrRsp SetCamAttrRsp_body = 51;
inline bool CosRspMsg::_internal_has_setcamattrrsp_body() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || setcamattrrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setcamattrrsp_body() const {
  return _internal_has_setcamattrrsp_body();
}
inline void CosRspMsg::clear_setcamattrrsp_body() {
  if (setcamattrrsp_body_ != nullptr) setcamattrrsp_body_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::ClientCos::SetCamAttrRsp& CosRspMsg::_internal_setcamattrrsp_body() const {
  const ::ClientCos::SetCamAttrRsp* p = setcamattrrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetCamAttrRsp&>(
      ::ClientCos::_SetCamAttrRsp_default_instance_);
}
inline const ::ClientCos::SetCamAttrRsp& CosRspMsg::setcamattrrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetCamAttrRsp_body)
  return _internal_setcamattrrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setcamattrrsp_body(
    ::ClientCos::SetCamAttrRsp* setcamattrrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setcamattrrsp_body_);
  }
  setcamattrrsp_body_ = setcamattrrsp_body;
  if (setcamattrrsp_body) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetCamAttrRsp_body)
}
inline ::ClientCos::SetCamAttrRsp* CosRspMsg::release_setcamattrrsp_body() {
  _has_bits_[0] &= ~0x80000000u;
  ::ClientCos::SetCamAttrRsp* temp = setcamattrrsp_body_;
  setcamattrrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetCamAttrRsp* CosRspMsg::unsafe_arena_release_setcamattrrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetCamAttrRsp_body)
  _has_bits_[0] &= ~0x80000000u;
  ::ClientCos::SetCamAttrRsp* temp = setcamattrrsp_body_;
  setcamattrrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetCamAttrRsp* CosRspMsg::_internal_mutable_setcamattrrsp_body() {
  _has_bits_[0] |= 0x80000000u;
  if (setcamattrrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetCamAttrRsp>(GetArena());
    setcamattrrsp_body_ = p;
  }
  return setcamattrrsp_body_;
}
inline ::ClientCos::SetCamAttrRsp* CosRspMsg::mutable_setcamattrrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetCamAttrRsp_body)
  return _internal_mutable_setcamattrrsp_body();
}
inline void CosRspMsg::set_allocated_setcamattrrsp_body(::ClientCos::SetCamAttrRsp* setcamattrrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setcamattrrsp_body_;
  }
  if (setcamattrrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setcamattrrsp_body);
    if (message_arena != submessage_arena) {
      setcamattrrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcamattrrsp_body, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  setcamattrrsp_body_ = setcamattrrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetCamAttrRsp_body)
}

// optional .ClientCos.BucketCamAuthQueryRsp BucketCamAuthQueryRsp_body = 52;
inline bool CosRspMsg::_internal_has_bucketcamauthqueryrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bucketcamauthqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_bucketcamauthqueryrsp_body() const {
  return _internal_has_bucketcamauthqueryrsp_body();
}
inline void CosRspMsg::clear_bucketcamauthqueryrsp_body() {
  if (bucketcamauthqueryrsp_body_ != nullptr) bucketcamauthqueryrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::ClientCos::BucketCamAuthQueryRsp& CosRspMsg::_internal_bucketcamauthqueryrsp_body() const {
  const ::ClientCos::BucketCamAuthQueryRsp* p = bucketcamauthqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::BucketCamAuthQueryRsp&>(
      ::ClientCos::_BucketCamAuthQueryRsp_default_instance_);
}
inline const ::ClientCos::BucketCamAuthQueryRsp& CosRspMsg::bucketcamauthqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.BucketCamAuthQueryRsp_body)
  return _internal_bucketcamauthqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_bucketcamauthqueryrsp_body(
    ::ClientCos::BucketCamAuthQueryRsp* bucketcamauthqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketcamauthqueryrsp_body_);
  }
  bucketcamauthqueryrsp_body_ = bucketcamauthqueryrsp_body;
  if (bucketcamauthqueryrsp_body) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.BucketCamAuthQueryRsp_body)
}
inline ::ClientCos::BucketCamAuthQueryRsp* CosRspMsg::release_bucketcamauthqueryrsp_body() {
  _has_bits_[1] &= ~0x00000001u;
  ::ClientCos::BucketCamAuthQueryRsp* temp = bucketcamauthqueryrsp_body_;
  bucketcamauthqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::BucketCamAuthQueryRsp* CosRspMsg::unsafe_arena_release_bucketcamauthqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.BucketCamAuthQueryRsp_body)
  _has_bits_[1] &= ~0x00000001u;
  ::ClientCos::BucketCamAuthQueryRsp* temp = bucketcamauthqueryrsp_body_;
  bucketcamauthqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::BucketCamAuthQueryRsp* CosRspMsg::_internal_mutable_bucketcamauthqueryrsp_body() {
  _has_bits_[1] |= 0x00000001u;
  if (bucketcamauthqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::BucketCamAuthQueryRsp>(GetArena());
    bucketcamauthqueryrsp_body_ = p;
  }
  return bucketcamauthqueryrsp_body_;
}
inline ::ClientCos::BucketCamAuthQueryRsp* CosRspMsg::mutable_bucketcamauthqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.BucketCamAuthQueryRsp_body)
  return _internal_mutable_bucketcamauthqueryrsp_body();
}
inline void CosRspMsg::set_allocated_bucketcamauthqueryrsp_body(::ClientCos::BucketCamAuthQueryRsp* bucketcamauthqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketcamauthqueryrsp_body_;
  }
  if (bucketcamauthqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketcamauthqueryrsp_body);
    if (message_arena != submessage_arena) {
      bucketcamauthqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketcamauthqueryrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  bucketcamauthqueryrsp_body_ = bucketcamauthqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.BucketCamAuthQueryRsp_body)
}

// optional .ClientCos.AppCamAuthQueryRsp AppCamAuthQueryRsp_body = 53;
inline bool CosRspMsg::_internal_has_appcamauthqueryrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || appcamauthqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_appcamauthqueryrsp_body() const {
  return _internal_has_appcamauthqueryrsp_body();
}
inline void CosRspMsg::clear_appcamauthqueryrsp_body() {
  if (appcamauthqueryrsp_body_ != nullptr) appcamauthqueryrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::ClientCos::AppCamAuthQueryRsp& CosRspMsg::_internal_appcamauthqueryrsp_body() const {
  const ::ClientCos::AppCamAuthQueryRsp* p = appcamauthqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AppCamAuthQueryRsp&>(
      ::ClientCos::_AppCamAuthQueryRsp_default_instance_);
}
inline const ::ClientCos::AppCamAuthQueryRsp& CosRspMsg::appcamauthqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.AppCamAuthQueryRsp_body)
  return _internal_appcamauthqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_appcamauthqueryrsp_body(
    ::ClientCos::AppCamAuthQueryRsp* appcamauthqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appcamauthqueryrsp_body_);
  }
  appcamauthqueryrsp_body_ = appcamauthqueryrsp_body;
  if (appcamauthqueryrsp_body) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.AppCamAuthQueryRsp_body)
}
inline ::ClientCos::AppCamAuthQueryRsp* CosRspMsg::release_appcamauthqueryrsp_body() {
  _has_bits_[1] &= ~0x00000002u;
  ::ClientCos::AppCamAuthQueryRsp* temp = appcamauthqueryrsp_body_;
  appcamauthqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AppCamAuthQueryRsp* CosRspMsg::unsafe_arena_release_appcamauthqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.AppCamAuthQueryRsp_body)
  _has_bits_[1] &= ~0x00000002u;
  ::ClientCos::AppCamAuthQueryRsp* temp = appcamauthqueryrsp_body_;
  appcamauthqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::AppCamAuthQueryRsp* CosRspMsg::_internal_mutable_appcamauthqueryrsp_body() {
  _has_bits_[1] |= 0x00000002u;
  if (appcamauthqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AppCamAuthQueryRsp>(GetArena());
    appcamauthqueryrsp_body_ = p;
  }
  return appcamauthqueryrsp_body_;
}
inline ::ClientCos::AppCamAuthQueryRsp* CosRspMsg::mutable_appcamauthqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.AppCamAuthQueryRsp_body)
  return _internal_mutable_appcamauthqueryrsp_body();
}
inline void CosRspMsg::set_allocated_appcamauthqueryrsp_body(::ClientCos::AppCamAuthQueryRsp* appcamauthqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appcamauthqueryrsp_body_;
  }
  if (appcamauthqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appcamauthqueryrsp_body);
    if (message_arena != submessage_arena) {
      appcamauthqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appcamauthqueryrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  appcamauthqueryrsp_body_ = appcamauthqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.AppCamAuthQueryRsp_body)
}

// optional .ClientCos.FileUnfinishAttrQueryRsp FileUnfinishAttrQueryRsp_body = 54;
inline bool CosRspMsg::_internal_has_fileunfinishattrqueryrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || fileunfinishattrqueryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_fileunfinishattrqueryrsp_body() const {
  return _internal_has_fileunfinishattrqueryrsp_body();
}
inline void CosRspMsg::clear_fileunfinishattrqueryrsp_body() {
  if (fileunfinishattrqueryrsp_body_ != nullptr) fileunfinishattrqueryrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::ClientCos::FileUnfinishAttrQueryRsp& CosRspMsg::_internal_fileunfinishattrqueryrsp_body() const {
  const ::ClientCos::FileUnfinishAttrQueryRsp* p = fileunfinishattrqueryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::FileUnfinishAttrQueryRsp&>(
      ::ClientCos::_FileUnfinishAttrQueryRsp_default_instance_);
}
inline const ::ClientCos::FileUnfinishAttrQueryRsp& CosRspMsg::fileunfinishattrqueryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.FileUnfinishAttrQueryRsp_body)
  return _internal_fileunfinishattrqueryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_fileunfinishattrqueryrsp_body(
    ::ClientCos::FileUnfinishAttrQueryRsp* fileunfinishattrqueryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileunfinishattrqueryrsp_body_);
  }
  fileunfinishattrqueryrsp_body_ = fileunfinishattrqueryrsp_body;
  if (fileunfinishattrqueryrsp_body) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.FileUnfinishAttrQueryRsp_body)
}
inline ::ClientCos::FileUnfinishAttrQueryRsp* CosRspMsg::release_fileunfinishattrqueryrsp_body() {
  _has_bits_[1] &= ~0x00000004u;
  ::ClientCos::FileUnfinishAttrQueryRsp* temp = fileunfinishattrqueryrsp_body_;
  fileunfinishattrqueryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::FileUnfinishAttrQueryRsp* CosRspMsg::unsafe_arena_release_fileunfinishattrqueryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.FileUnfinishAttrQueryRsp_body)
  _has_bits_[1] &= ~0x00000004u;
  ::ClientCos::FileUnfinishAttrQueryRsp* temp = fileunfinishattrqueryrsp_body_;
  fileunfinishattrqueryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::FileUnfinishAttrQueryRsp* CosRspMsg::_internal_mutable_fileunfinishattrqueryrsp_body() {
  _has_bits_[1] |= 0x00000004u;
  if (fileunfinishattrqueryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::FileUnfinishAttrQueryRsp>(GetArena());
    fileunfinishattrqueryrsp_body_ = p;
  }
  return fileunfinishattrqueryrsp_body_;
}
inline ::ClientCos::FileUnfinishAttrQueryRsp* CosRspMsg::mutable_fileunfinishattrqueryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.FileUnfinishAttrQueryRsp_body)
  return _internal_mutable_fileunfinishattrqueryrsp_body();
}
inline void CosRspMsg::set_allocated_fileunfinishattrqueryrsp_body(::ClientCos::FileUnfinishAttrQueryRsp* fileunfinishattrqueryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fileunfinishattrqueryrsp_body_;
  }
  if (fileunfinishattrqueryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fileunfinishattrqueryrsp_body);
    if (message_arena != submessage_arena) {
      fileunfinishattrqueryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileunfinishattrqueryrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  fileunfinishattrqueryrsp_body_ = fileunfinishattrqueryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.FileUnfinishAttrQueryRsp_body)
}

// optional .ClientCos.ReduceLifecycleRsp ReduceLifecycleRsp_body = 55;
inline bool CosRspMsg::_internal_has_reducelifecyclersp_body() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reducelifecyclersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_reducelifecyclersp_body() const {
  return _internal_has_reducelifecyclersp_body();
}
inline void CosRspMsg::clear_reducelifecyclersp_body() {
  if (reducelifecyclersp_body_ != nullptr) reducelifecyclersp_body_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::ClientCos::ReduceLifecycleRsp& CosRspMsg::_internal_reducelifecyclersp_body() const {
  const ::ClientCos::ReduceLifecycleRsp* p = reducelifecyclersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ReduceLifecycleRsp&>(
      ::ClientCos::_ReduceLifecycleRsp_default_instance_);
}
inline const ::ClientCos::ReduceLifecycleRsp& CosRspMsg::reducelifecyclersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ReduceLifecycleRsp_body)
  return _internal_reducelifecyclersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_reducelifecyclersp_body(
    ::ClientCos::ReduceLifecycleRsp* reducelifecyclersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reducelifecyclersp_body_);
  }
  reducelifecyclersp_body_ = reducelifecyclersp_body;
  if (reducelifecyclersp_body) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ReduceLifecycleRsp_body)
}
inline ::ClientCos::ReduceLifecycleRsp* CosRspMsg::release_reducelifecyclersp_body() {
  _has_bits_[1] &= ~0x00000008u;
  ::ClientCos::ReduceLifecycleRsp* temp = reducelifecyclersp_body_;
  reducelifecyclersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ReduceLifecycleRsp* CosRspMsg::unsafe_arena_release_reducelifecyclersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ReduceLifecycleRsp_body)
  _has_bits_[1] &= ~0x00000008u;
  ::ClientCos::ReduceLifecycleRsp* temp = reducelifecyclersp_body_;
  reducelifecyclersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ReduceLifecycleRsp* CosRspMsg::_internal_mutable_reducelifecyclersp_body() {
  _has_bits_[1] |= 0x00000008u;
  if (reducelifecyclersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ReduceLifecycleRsp>(GetArena());
    reducelifecyclersp_body_ = p;
  }
  return reducelifecyclersp_body_;
}
inline ::ClientCos::ReduceLifecycleRsp* CosRspMsg::mutable_reducelifecyclersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ReduceLifecycleRsp_body)
  return _internal_mutable_reducelifecyclersp_body();
}
inline void CosRspMsg::set_allocated_reducelifecyclersp_body(::ClientCos::ReduceLifecycleRsp* reducelifecyclersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reducelifecyclersp_body_;
  }
  if (reducelifecyclersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reducelifecyclersp_body);
    if (message_arena != submessage_arena) {
      reducelifecyclersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reducelifecyclersp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  reducelifecyclersp_body_ = reducelifecyclersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ReduceLifecycleRsp_body)
}

// optional .ClientCos.RetrieveLifecycleRsp RetrieveLifecycleRsp_body = 56;
inline bool CosRspMsg::_internal_has_retrievelifecyclersp_body() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || retrievelifecyclersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_retrievelifecyclersp_body() const {
  return _internal_has_retrievelifecyclersp_body();
}
inline void CosRspMsg::clear_retrievelifecyclersp_body() {
  if (retrievelifecyclersp_body_ != nullptr) retrievelifecyclersp_body_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::ClientCos::RetrieveLifecycleRsp& CosRspMsg::_internal_retrievelifecyclersp_body() const {
  const ::ClientCos::RetrieveLifecycleRsp* p = retrievelifecyclersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::RetrieveLifecycleRsp&>(
      ::ClientCos::_RetrieveLifecycleRsp_default_instance_);
}
inline const ::ClientCos::RetrieveLifecycleRsp& CosRspMsg::retrievelifecyclersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.RetrieveLifecycleRsp_body)
  return _internal_retrievelifecyclersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_retrievelifecyclersp_body(
    ::ClientCos::RetrieveLifecycleRsp* retrievelifecyclersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retrievelifecyclersp_body_);
  }
  retrievelifecyclersp_body_ = retrievelifecyclersp_body;
  if (retrievelifecyclersp_body) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.RetrieveLifecycleRsp_body)
}
inline ::ClientCos::RetrieveLifecycleRsp* CosRspMsg::release_retrievelifecyclersp_body() {
  _has_bits_[1] &= ~0x00000010u;
  ::ClientCos::RetrieveLifecycleRsp* temp = retrievelifecyclersp_body_;
  retrievelifecyclersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::RetrieveLifecycleRsp* CosRspMsg::unsafe_arena_release_retrievelifecyclersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.RetrieveLifecycleRsp_body)
  _has_bits_[1] &= ~0x00000010u;
  ::ClientCos::RetrieveLifecycleRsp* temp = retrievelifecyclersp_body_;
  retrievelifecyclersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::RetrieveLifecycleRsp* CosRspMsg::_internal_mutable_retrievelifecyclersp_body() {
  _has_bits_[1] |= 0x00000010u;
  if (retrievelifecyclersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::RetrieveLifecycleRsp>(GetArena());
    retrievelifecyclersp_body_ = p;
  }
  return retrievelifecyclersp_body_;
}
inline ::ClientCos::RetrieveLifecycleRsp* CosRspMsg::mutable_retrievelifecyclersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.RetrieveLifecycleRsp_body)
  return _internal_mutable_retrievelifecyclersp_body();
}
inline void CosRspMsg::set_allocated_retrievelifecyclersp_body(::ClientCos::RetrieveLifecycleRsp* retrievelifecyclersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete retrievelifecyclersp_body_;
  }
  if (retrievelifecyclersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(retrievelifecyclersp_body);
    if (message_arena != submessage_arena) {
      retrievelifecyclersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retrievelifecyclersp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  retrievelifecyclersp_body_ = retrievelifecyclersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.RetrieveLifecycleRsp_body)
}

// optional .ClientCos.SetObjAclRsp SetObjAclRsp_body = 57;
inline bool CosRspMsg::_internal_has_setobjaclrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || setobjaclrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setobjaclrsp_body() const {
  return _internal_has_setobjaclrsp_body();
}
inline void CosRspMsg::clear_setobjaclrsp_body() {
  if (setobjaclrsp_body_ != nullptr) setobjaclrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::ClientCos::SetObjAclRsp& CosRspMsg::_internal_setobjaclrsp_body() const {
  const ::ClientCos::SetObjAclRsp* p = setobjaclrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetObjAclRsp&>(
      ::ClientCos::_SetObjAclRsp_default_instance_);
}
inline const ::ClientCos::SetObjAclRsp& CosRspMsg::setobjaclrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetObjAclRsp_body)
  return _internal_setobjaclrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setobjaclrsp_body(
    ::ClientCos::SetObjAclRsp* setobjaclrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setobjaclrsp_body_);
  }
  setobjaclrsp_body_ = setobjaclrsp_body;
  if (setobjaclrsp_body) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetObjAclRsp_body)
}
inline ::ClientCos::SetObjAclRsp* CosRspMsg::release_setobjaclrsp_body() {
  _has_bits_[1] &= ~0x00000020u;
  ::ClientCos::SetObjAclRsp* temp = setobjaclrsp_body_;
  setobjaclrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetObjAclRsp* CosRspMsg::unsafe_arena_release_setobjaclrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetObjAclRsp_body)
  _has_bits_[1] &= ~0x00000020u;
  ::ClientCos::SetObjAclRsp* temp = setobjaclrsp_body_;
  setobjaclrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetObjAclRsp* CosRspMsg::_internal_mutable_setobjaclrsp_body() {
  _has_bits_[1] |= 0x00000020u;
  if (setobjaclrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetObjAclRsp>(GetArena());
    setobjaclrsp_body_ = p;
  }
  return setobjaclrsp_body_;
}
inline ::ClientCos::SetObjAclRsp* CosRspMsg::mutable_setobjaclrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetObjAclRsp_body)
  return _internal_mutable_setobjaclrsp_body();
}
inline void CosRspMsg::set_allocated_setobjaclrsp_body(::ClientCos::SetObjAclRsp* setobjaclrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setobjaclrsp_body_;
  }
  if (setobjaclrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setobjaclrsp_body);
    if (message_arena != submessage_arena) {
      setobjaclrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setobjaclrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  setobjaclrsp_body_ = setobjaclrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetObjAclRsp_body)
}

// optional .ClientCos.GetObjAclRsp GetObjAclRsp_body = 58;
inline bool CosRspMsg::_internal_has_getobjaclrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || getobjaclrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_getobjaclrsp_body() const {
  return _internal_has_getobjaclrsp_body();
}
inline void CosRspMsg::clear_getobjaclrsp_body() {
  if (getobjaclrsp_body_ != nullptr) getobjaclrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::ClientCos::GetObjAclRsp& CosRspMsg::_internal_getobjaclrsp_body() const {
  const ::ClientCos::GetObjAclRsp* p = getobjaclrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetObjAclRsp&>(
      ::ClientCos::_GetObjAclRsp_default_instance_);
}
inline const ::ClientCos::GetObjAclRsp& CosRspMsg::getobjaclrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.GetObjAclRsp_body)
  return _internal_getobjaclrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_getobjaclrsp_body(
    ::ClientCos::GetObjAclRsp* getobjaclrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getobjaclrsp_body_);
  }
  getobjaclrsp_body_ = getobjaclrsp_body;
  if (getobjaclrsp_body) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.GetObjAclRsp_body)
}
inline ::ClientCos::GetObjAclRsp* CosRspMsg::release_getobjaclrsp_body() {
  _has_bits_[1] &= ~0x00000040u;
  ::ClientCos::GetObjAclRsp* temp = getobjaclrsp_body_;
  getobjaclrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetObjAclRsp* CosRspMsg::unsafe_arena_release_getobjaclrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.GetObjAclRsp_body)
  _has_bits_[1] &= ~0x00000040u;
  ::ClientCos::GetObjAclRsp* temp = getobjaclrsp_body_;
  getobjaclrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetObjAclRsp* CosRspMsg::_internal_mutable_getobjaclrsp_body() {
  _has_bits_[1] |= 0x00000040u;
  if (getobjaclrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetObjAclRsp>(GetArena());
    getobjaclrsp_body_ = p;
  }
  return getobjaclrsp_body_;
}
inline ::ClientCos::GetObjAclRsp* CosRspMsg::mutable_getobjaclrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.GetObjAclRsp_body)
  return _internal_mutable_getobjaclrsp_body();
}
inline void CosRspMsg::set_allocated_getobjaclrsp_body(::ClientCos::GetObjAclRsp* getobjaclrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getobjaclrsp_body_;
  }
  if (getobjaclrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getobjaclrsp_body);
    if (message_arena != submessage_arena) {
      getobjaclrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getobjaclrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  getobjaclrsp_body_ = getobjaclrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.GetObjAclRsp_body)
}

// optional .ClientCos.SetBucketUinRsp SetBucketUinRsp_body = 59;
inline bool CosRspMsg::_internal_has_setbucketuinrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || setbucketuinrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setbucketuinrsp_body() const {
  return _internal_has_setbucketuinrsp_body();
}
inline void CosRspMsg::clear_setbucketuinrsp_body() {
  if (setbucketuinrsp_body_ != nullptr) setbucketuinrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::ClientCos::SetBucketUinRsp& CosRspMsg::_internal_setbucketuinrsp_body() const {
  const ::ClientCos::SetBucketUinRsp* p = setbucketuinrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketUinRsp&>(
      ::ClientCos::_SetBucketUinRsp_default_instance_);
}
inline const ::ClientCos::SetBucketUinRsp& CosRspMsg::setbucketuinrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetBucketUinRsp_body)
  return _internal_setbucketuinrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setbucketuinrsp_body(
    ::ClientCos::SetBucketUinRsp* setbucketuinrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketuinrsp_body_);
  }
  setbucketuinrsp_body_ = setbucketuinrsp_body;
  if (setbucketuinrsp_body) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetBucketUinRsp_body)
}
inline ::ClientCos::SetBucketUinRsp* CosRspMsg::release_setbucketuinrsp_body() {
  _has_bits_[1] &= ~0x00000080u;
  ::ClientCos::SetBucketUinRsp* temp = setbucketuinrsp_body_;
  setbucketuinrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketUinRsp* CosRspMsg::unsafe_arena_release_setbucketuinrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetBucketUinRsp_body)
  _has_bits_[1] &= ~0x00000080u;
  ::ClientCos::SetBucketUinRsp* temp = setbucketuinrsp_body_;
  setbucketuinrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketUinRsp* CosRspMsg::_internal_mutable_setbucketuinrsp_body() {
  _has_bits_[1] |= 0x00000080u;
  if (setbucketuinrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketUinRsp>(GetArena());
    setbucketuinrsp_body_ = p;
  }
  return setbucketuinrsp_body_;
}
inline ::ClientCos::SetBucketUinRsp* CosRspMsg::mutable_setbucketuinrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetBucketUinRsp_body)
  return _internal_mutable_setbucketuinrsp_body();
}
inline void CosRspMsg::set_allocated_setbucketuinrsp_body(::ClientCos::SetBucketUinRsp* setbucketuinrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketuinrsp_body_;
  }
  if (setbucketuinrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketuinrsp_body);
    if (message_arena != submessage_arena) {
      setbucketuinrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketuinrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  setbucketuinrsp_body_ = setbucketuinrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetBucketUinRsp_body)
}

// optional .ClientCos.GetBucketUinRsp GetBucketUinRsp_body = 60;
inline bool CosRspMsg::_internal_has_getbucketuinrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || getbucketuinrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_getbucketuinrsp_body() const {
  return _internal_has_getbucketuinrsp_body();
}
inline void CosRspMsg::clear_getbucketuinrsp_body() {
  if (getbucketuinrsp_body_ != nullptr) getbucketuinrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::ClientCos::GetBucketUinRsp& CosRspMsg::_internal_getbucketuinrsp_body() const {
  const ::ClientCos::GetBucketUinRsp* p = getbucketuinrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetBucketUinRsp&>(
      ::ClientCos::_GetBucketUinRsp_default_instance_);
}
inline const ::ClientCos::GetBucketUinRsp& CosRspMsg::getbucketuinrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.GetBucketUinRsp_body)
  return _internal_getbucketuinrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_getbucketuinrsp_body(
    ::ClientCos::GetBucketUinRsp* getbucketuinrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbucketuinrsp_body_);
  }
  getbucketuinrsp_body_ = getbucketuinrsp_body;
  if (getbucketuinrsp_body) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.GetBucketUinRsp_body)
}
inline ::ClientCos::GetBucketUinRsp* CosRspMsg::release_getbucketuinrsp_body() {
  _has_bits_[1] &= ~0x00000100u;
  ::ClientCos::GetBucketUinRsp* temp = getbucketuinrsp_body_;
  getbucketuinrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetBucketUinRsp* CosRspMsg::unsafe_arena_release_getbucketuinrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.GetBucketUinRsp_body)
  _has_bits_[1] &= ~0x00000100u;
  ::ClientCos::GetBucketUinRsp* temp = getbucketuinrsp_body_;
  getbucketuinrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetBucketUinRsp* CosRspMsg::_internal_mutable_getbucketuinrsp_body() {
  _has_bits_[1] |= 0x00000100u;
  if (getbucketuinrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetBucketUinRsp>(GetArena());
    getbucketuinrsp_body_ = p;
  }
  return getbucketuinrsp_body_;
}
inline ::ClientCos::GetBucketUinRsp* CosRspMsg::mutable_getbucketuinrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.GetBucketUinRsp_body)
  return _internal_mutable_getbucketuinrsp_body();
}
inline void CosRspMsg::set_allocated_getbucketuinrsp_body(::ClientCos::GetBucketUinRsp* getbucketuinrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getbucketuinrsp_body_;
  }
  if (getbucketuinrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbucketuinrsp_body);
    if (message_arena != submessage_arena) {
      getbucketuinrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbucketuinrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  getbucketuinrsp_body_ = getbucketuinrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.GetBucketUinRsp_body)
}

// optional .ClientCos.ListDirectRsp ListDirectRsp_body = 61;
inline bool CosRspMsg::_internal_has_listdirectrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || listdirectrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_listdirectrsp_body() const {
  return _internal_has_listdirectrsp_body();
}
inline void CosRspMsg::clear_listdirectrsp_body() {
  if (listdirectrsp_body_ != nullptr) listdirectrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::ClientCos::ListDirectRsp& CosRspMsg::_internal_listdirectrsp_body() const {
  const ::ClientCos::ListDirectRsp* p = listdirectrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ListDirectRsp&>(
      ::ClientCos::_ListDirectRsp_default_instance_);
}
inline const ::ClientCos::ListDirectRsp& CosRspMsg::listdirectrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.ListDirectRsp_body)
  return _internal_listdirectrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_listdirectrsp_body(
    ::ClientCos::ListDirectRsp* listdirectrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listdirectrsp_body_);
  }
  listdirectrsp_body_ = listdirectrsp_body;
  if (listdirectrsp_body) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.ListDirectRsp_body)
}
inline ::ClientCos::ListDirectRsp* CosRspMsg::release_listdirectrsp_body() {
  _has_bits_[1] &= ~0x00000200u;
  ::ClientCos::ListDirectRsp* temp = listdirectrsp_body_;
  listdirectrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ListDirectRsp* CosRspMsg::unsafe_arena_release_listdirectrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.ListDirectRsp_body)
  _has_bits_[1] &= ~0x00000200u;
  ::ClientCos::ListDirectRsp* temp = listdirectrsp_body_;
  listdirectrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::ListDirectRsp* CosRspMsg::_internal_mutable_listdirectrsp_body() {
  _has_bits_[1] |= 0x00000200u;
  if (listdirectrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ListDirectRsp>(GetArena());
    listdirectrsp_body_ = p;
  }
  return listdirectrsp_body_;
}
inline ::ClientCos::ListDirectRsp* CosRspMsg::mutable_listdirectrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.ListDirectRsp_body)
  return _internal_mutable_listdirectrsp_body();
}
inline void CosRspMsg::set_allocated_listdirectrsp_body(::ClientCos::ListDirectRsp* listdirectrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete listdirectrsp_body_;
  }
  if (listdirectrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(listdirectrsp_body);
    if (message_arena != submessage_arena) {
      listdirectrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listdirectrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  listdirectrsp_body_ = listdirectrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.ListDirectRsp_body)
}

// optional .ClientCos.CheckObjAclRsp CheckObjAclRsp_body = 62;
inline bool CosRspMsg::_internal_has_checkobjaclrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || checkobjaclrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_checkobjaclrsp_body() const {
  return _internal_has_checkobjaclrsp_body();
}
inline void CosRspMsg::clear_checkobjaclrsp_body() {
  if (checkobjaclrsp_body_ != nullptr) checkobjaclrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::ClientCos::CheckObjAclRsp& CosRspMsg::_internal_checkobjaclrsp_body() const {
  const ::ClientCos::CheckObjAclRsp* p = checkobjaclrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CheckObjAclRsp&>(
      ::ClientCos::_CheckObjAclRsp_default_instance_);
}
inline const ::ClientCos::CheckObjAclRsp& CosRspMsg::checkobjaclrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.CheckObjAclRsp_body)
  return _internal_checkobjaclrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_checkobjaclrsp_body(
    ::ClientCos::CheckObjAclRsp* checkobjaclrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkobjaclrsp_body_);
  }
  checkobjaclrsp_body_ = checkobjaclrsp_body;
  if (checkobjaclrsp_body) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.CheckObjAclRsp_body)
}
inline ::ClientCos::CheckObjAclRsp* CosRspMsg::release_checkobjaclrsp_body() {
  _has_bits_[1] &= ~0x00000400u;
  ::ClientCos::CheckObjAclRsp* temp = checkobjaclrsp_body_;
  checkobjaclrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CheckObjAclRsp* CosRspMsg::unsafe_arena_release_checkobjaclrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.CheckObjAclRsp_body)
  _has_bits_[1] &= ~0x00000400u;
  ::ClientCos::CheckObjAclRsp* temp = checkobjaclrsp_body_;
  checkobjaclrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CheckObjAclRsp* CosRspMsg::_internal_mutable_checkobjaclrsp_body() {
  _has_bits_[1] |= 0x00000400u;
  if (checkobjaclrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CheckObjAclRsp>(GetArena());
    checkobjaclrsp_body_ = p;
  }
  return checkobjaclrsp_body_;
}
inline ::ClientCos::CheckObjAclRsp* CosRspMsg::mutable_checkobjaclrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.CheckObjAclRsp_body)
  return _internal_mutable_checkobjaclrsp_body();
}
inline void CosRspMsg::set_allocated_checkobjaclrsp_body(::ClientCos::CheckObjAclRsp* checkobjaclrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checkobjaclrsp_body_;
  }
  if (checkobjaclrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkobjaclrsp_body);
    if (message_arena != submessage_arena) {
      checkobjaclrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkobjaclrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  checkobjaclrsp_body_ = checkobjaclrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.CheckObjAclRsp_body)
}

// optional .ClientCos.CasObjRestoreFinRsp CasObjRestoreFinRsp_body = 63;
inline bool CosRspMsg::_internal_has_casobjrestorefinrsp_body() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || casobjrestorefinrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_casobjrestorefinrsp_body() const {
  return _internal_has_casobjrestorefinrsp_body();
}
inline void CosRspMsg::clear_casobjrestorefinrsp_body() {
  if (casobjrestorefinrsp_body_ != nullptr) casobjrestorefinrsp_body_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::ClientCos::CasObjRestoreFinRsp& CosRspMsg::_internal_casobjrestorefinrsp_body() const {
  const ::ClientCos::CasObjRestoreFinRsp* p = casobjrestorefinrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasObjRestoreFinRsp&>(
      ::ClientCos::_CasObjRestoreFinRsp_default_instance_);
}
inline const ::ClientCos::CasObjRestoreFinRsp& CosRspMsg::casobjrestorefinrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.CasObjRestoreFinRsp_body)
  return _internal_casobjrestorefinrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_casobjrestorefinrsp_body(
    ::ClientCos::CasObjRestoreFinRsp* casobjrestorefinrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casobjrestorefinrsp_body_);
  }
  casobjrestorefinrsp_body_ = casobjrestorefinrsp_body;
  if (casobjrestorefinrsp_body) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.CasObjRestoreFinRsp_body)
}
inline ::ClientCos::CasObjRestoreFinRsp* CosRspMsg::release_casobjrestorefinrsp_body() {
  _has_bits_[1] &= ~0x00000800u;
  ::ClientCos::CasObjRestoreFinRsp* temp = casobjrestorefinrsp_body_;
  casobjrestorefinrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasObjRestoreFinRsp* CosRspMsg::unsafe_arena_release_casobjrestorefinrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.CasObjRestoreFinRsp_body)
  _has_bits_[1] &= ~0x00000800u;
  ::ClientCos::CasObjRestoreFinRsp* temp = casobjrestorefinrsp_body_;
  casobjrestorefinrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::CasObjRestoreFinRsp* CosRspMsg::_internal_mutable_casobjrestorefinrsp_body() {
  _has_bits_[1] |= 0x00000800u;
  if (casobjrestorefinrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasObjRestoreFinRsp>(GetArena());
    casobjrestorefinrsp_body_ = p;
  }
  return casobjrestorefinrsp_body_;
}
inline ::ClientCos::CasObjRestoreFinRsp* CosRspMsg::mutable_casobjrestorefinrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.CasObjRestoreFinRsp_body)
  return _internal_mutable_casobjrestorefinrsp_body();
}
inline void CosRspMsg::set_allocated_casobjrestorefinrsp_body(::ClientCos::CasObjRestoreFinRsp* casobjrestorefinrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casobjrestorefinrsp_body_;
  }
  if (casobjrestorefinrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casobjrestorefinrsp_body);
    if (message_arena != submessage_arena) {
      casobjrestorefinrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casobjrestorefinrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  casobjrestorefinrsp_body_ = casobjrestorefinrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.CasObjRestoreFinRsp_body)
}

// optional .ClientCos.SetBucketLockRsp SetBucketLockRsp_body = 64;
inline bool CosRspMsg::_internal_has_setbucketlockrsp_body() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || setbucketlockrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setbucketlockrsp_body() const {
  return _internal_has_setbucketlockrsp_body();
}
inline void CosRspMsg::clear_setbucketlockrsp_body() {
  if (setbucketlockrsp_body_ != nullptr) setbucketlockrsp_body_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::ClientCos::SetBucketLockRsp& CosRspMsg::_internal_setbucketlockrsp_body() const {
  const ::ClientCos::SetBucketLockRsp* p = setbucketlockrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketLockRsp&>(
      ::ClientCos::_SetBucketLockRsp_default_instance_);
}
inline const ::ClientCos::SetBucketLockRsp& CosRspMsg::setbucketlockrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetBucketLockRsp_body)
  return _internal_setbucketlockrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setbucketlockrsp_body(
    ::ClientCos::SetBucketLockRsp* setbucketlockrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketlockrsp_body_);
  }
  setbucketlockrsp_body_ = setbucketlockrsp_body;
  if (setbucketlockrsp_body) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetBucketLockRsp_body)
}
inline ::ClientCos::SetBucketLockRsp* CosRspMsg::release_setbucketlockrsp_body() {
  _has_bits_[1] &= ~0x00001000u;
  ::ClientCos::SetBucketLockRsp* temp = setbucketlockrsp_body_;
  setbucketlockrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketLockRsp* CosRspMsg::unsafe_arena_release_setbucketlockrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetBucketLockRsp_body)
  _has_bits_[1] &= ~0x00001000u;
  ::ClientCos::SetBucketLockRsp* temp = setbucketlockrsp_body_;
  setbucketlockrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketLockRsp* CosRspMsg::_internal_mutable_setbucketlockrsp_body() {
  _has_bits_[1] |= 0x00001000u;
  if (setbucketlockrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketLockRsp>(GetArena());
    setbucketlockrsp_body_ = p;
  }
  return setbucketlockrsp_body_;
}
inline ::ClientCos::SetBucketLockRsp* CosRspMsg::mutable_setbucketlockrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetBucketLockRsp_body)
  return _internal_mutable_setbucketlockrsp_body();
}
inline void CosRspMsg::set_allocated_setbucketlockrsp_body(::ClientCos::SetBucketLockRsp* setbucketlockrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketlockrsp_body_;
  }
  if (setbucketlockrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketlockrsp_body);
    if (message_arena != submessage_arena) {
      setbucketlockrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketlockrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  setbucketlockrsp_body_ = setbucketlockrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetBucketLockRsp_body)
}

// optional .ClientCos.GetBucketLockRsp GetBucketLockRsp_body = 65;
inline bool CosRspMsg::_internal_has_getbucketlockrsp_body() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || getbucketlockrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_getbucketlockrsp_body() const {
  return _internal_has_getbucketlockrsp_body();
}
inline void CosRspMsg::clear_getbucketlockrsp_body() {
  if (getbucketlockrsp_body_ != nullptr) getbucketlockrsp_body_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::ClientCos::GetBucketLockRsp& CosRspMsg::_internal_getbucketlockrsp_body() const {
  const ::ClientCos::GetBucketLockRsp* p = getbucketlockrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetBucketLockRsp&>(
      ::ClientCos::_GetBucketLockRsp_default_instance_);
}
inline const ::ClientCos::GetBucketLockRsp& CosRspMsg::getbucketlockrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.GetBucketLockRsp_body)
  return _internal_getbucketlockrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_getbucketlockrsp_body(
    ::ClientCos::GetBucketLockRsp* getbucketlockrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbucketlockrsp_body_);
  }
  getbucketlockrsp_body_ = getbucketlockrsp_body;
  if (getbucketlockrsp_body) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.GetBucketLockRsp_body)
}
inline ::ClientCos::GetBucketLockRsp* CosRspMsg::release_getbucketlockrsp_body() {
  _has_bits_[1] &= ~0x00002000u;
  ::ClientCos::GetBucketLockRsp* temp = getbucketlockrsp_body_;
  getbucketlockrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetBucketLockRsp* CosRspMsg::unsafe_arena_release_getbucketlockrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.GetBucketLockRsp_body)
  _has_bits_[1] &= ~0x00002000u;
  ::ClientCos::GetBucketLockRsp* temp = getbucketlockrsp_body_;
  getbucketlockrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetBucketLockRsp* CosRspMsg::_internal_mutable_getbucketlockrsp_body() {
  _has_bits_[1] |= 0x00002000u;
  if (getbucketlockrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetBucketLockRsp>(GetArena());
    getbucketlockrsp_body_ = p;
  }
  return getbucketlockrsp_body_;
}
inline ::ClientCos::GetBucketLockRsp* CosRspMsg::mutable_getbucketlockrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.GetBucketLockRsp_body)
  return _internal_mutable_getbucketlockrsp_body();
}
inline void CosRspMsg::set_allocated_getbucketlockrsp_body(::ClientCos::GetBucketLockRsp* getbucketlockrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getbucketlockrsp_body_;
  }
  if (getbucketlockrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbucketlockrsp_body);
    if (message_arena != submessage_arena) {
      getbucketlockrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbucketlockrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  getbucketlockrsp_body_ = getbucketlockrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.GetBucketLockRsp_body)
}

// optional .ClientCos.SetBucketInventoryRsp SetBucketInventoryRsp_body = 66;
inline bool CosRspMsg::_internal_has_setbucketinventoryrsp_body() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || setbucketinventoryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setbucketinventoryrsp_body() const {
  return _internal_has_setbucketinventoryrsp_body();
}
inline void CosRspMsg::clear_setbucketinventoryrsp_body() {
  if (setbucketinventoryrsp_body_ != nullptr) setbucketinventoryrsp_body_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::ClientCos::SetBucketInventoryRsp& CosRspMsg::_internal_setbucketinventoryrsp_body() const {
  const ::ClientCos::SetBucketInventoryRsp* p = setbucketinventoryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetBucketInventoryRsp&>(
      ::ClientCos::_SetBucketInventoryRsp_default_instance_);
}
inline const ::ClientCos::SetBucketInventoryRsp& CosRspMsg::setbucketinventoryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetBucketInventoryRsp_body)
  return _internal_setbucketinventoryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setbucketinventoryrsp_body(
    ::ClientCos::SetBucketInventoryRsp* setbucketinventoryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setbucketinventoryrsp_body_);
  }
  setbucketinventoryrsp_body_ = setbucketinventoryrsp_body;
  if (setbucketinventoryrsp_body) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetBucketInventoryRsp_body)
}
inline ::ClientCos::SetBucketInventoryRsp* CosRspMsg::release_setbucketinventoryrsp_body() {
  _has_bits_[1] &= ~0x00004000u;
  ::ClientCos::SetBucketInventoryRsp* temp = setbucketinventoryrsp_body_;
  setbucketinventoryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetBucketInventoryRsp* CosRspMsg::unsafe_arena_release_setbucketinventoryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetBucketInventoryRsp_body)
  _has_bits_[1] &= ~0x00004000u;
  ::ClientCos::SetBucketInventoryRsp* temp = setbucketinventoryrsp_body_;
  setbucketinventoryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetBucketInventoryRsp* CosRspMsg::_internal_mutable_setbucketinventoryrsp_body() {
  _has_bits_[1] |= 0x00004000u;
  if (setbucketinventoryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetBucketInventoryRsp>(GetArena());
    setbucketinventoryrsp_body_ = p;
  }
  return setbucketinventoryrsp_body_;
}
inline ::ClientCos::SetBucketInventoryRsp* CosRspMsg::mutable_setbucketinventoryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetBucketInventoryRsp_body)
  return _internal_mutable_setbucketinventoryrsp_body();
}
inline void CosRspMsg::set_allocated_setbucketinventoryrsp_body(::ClientCos::SetBucketInventoryRsp* setbucketinventoryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setbucketinventoryrsp_body_;
  }
  if (setbucketinventoryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setbucketinventoryrsp_body);
    if (message_arena != submessage_arena) {
      setbucketinventoryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setbucketinventoryrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  setbucketinventoryrsp_body_ = setbucketinventoryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetBucketInventoryRsp_body)
}

// optional .ClientCos.GetBucketInventoryRsp GetBucketInventoryRsp_body = 67;
inline bool CosRspMsg::_internal_has_getbucketinventoryrsp_body() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || getbucketinventoryrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_getbucketinventoryrsp_body() const {
  return _internal_has_getbucketinventoryrsp_body();
}
inline void CosRspMsg::clear_getbucketinventoryrsp_body() {
  if (getbucketinventoryrsp_body_ != nullptr) getbucketinventoryrsp_body_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
inline const ::ClientCos::GetBucketInventoryRsp& CosRspMsg::_internal_getbucketinventoryrsp_body() const {
  const ::ClientCos::GetBucketInventoryRsp* p = getbucketinventoryrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetBucketInventoryRsp&>(
      ::ClientCos::_GetBucketInventoryRsp_default_instance_);
}
inline const ::ClientCos::GetBucketInventoryRsp& CosRspMsg::getbucketinventoryrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.GetBucketInventoryRsp_body)
  return _internal_getbucketinventoryrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_getbucketinventoryrsp_body(
    ::ClientCos::GetBucketInventoryRsp* getbucketinventoryrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbucketinventoryrsp_body_);
  }
  getbucketinventoryrsp_body_ = getbucketinventoryrsp_body;
  if (getbucketinventoryrsp_body) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.GetBucketInventoryRsp_body)
}
inline ::ClientCos::GetBucketInventoryRsp* CosRspMsg::release_getbucketinventoryrsp_body() {
  _has_bits_[1] &= ~0x00008000u;
  ::ClientCos::GetBucketInventoryRsp* temp = getbucketinventoryrsp_body_;
  getbucketinventoryrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetBucketInventoryRsp* CosRspMsg::unsafe_arena_release_getbucketinventoryrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.GetBucketInventoryRsp_body)
  _has_bits_[1] &= ~0x00008000u;
  ::ClientCos::GetBucketInventoryRsp* temp = getbucketinventoryrsp_body_;
  getbucketinventoryrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::GetBucketInventoryRsp* CosRspMsg::_internal_mutable_getbucketinventoryrsp_body() {
  _has_bits_[1] |= 0x00008000u;
  if (getbucketinventoryrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetBucketInventoryRsp>(GetArena());
    getbucketinventoryrsp_body_ = p;
  }
  return getbucketinventoryrsp_body_;
}
inline ::ClientCos::GetBucketInventoryRsp* CosRspMsg::mutable_getbucketinventoryrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.GetBucketInventoryRsp_body)
  return _internal_mutable_getbucketinventoryrsp_body();
}
inline void CosRspMsg::set_allocated_getbucketinventoryrsp_body(::ClientCos::GetBucketInventoryRsp* getbucketinventoryrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete getbucketinventoryrsp_body_;
  }
  if (getbucketinventoryrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbucketinventoryrsp_body);
    if (message_arena != submessage_arena) {
      getbucketinventoryrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbucketinventoryrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  getbucketinventoryrsp_body_ = getbucketinventoryrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.GetBucketInventoryRsp_body)
}

// optional .ClientCos.COSTransToCASRsp COSTransToCASRsp_body = 68;
inline bool CosRspMsg::_internal_has_costranstocasrsp_body() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || costranstocasrsp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_costranstocasrsp_body() const {
  return _internal_has_costranstocasrsp_body();
}
inline void CosRspMsg::clear_costranstocasrsp_body() {
  if (costranstocasrsp_body_ != nullptr) costranstocasrsp_body_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
inline const ::ClientCos::COSTransToCASRsp& CosRspMsg::_internal_costranstocasrsp_body() const {
  const ::ClientCos::COSTransToCASRsp* p = costranstocasrsp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::COSTransToCASRsp&>(
      ::ClientCos::_COSTransToCASRsp_default_instance_);
}
inline const ::ClientCos::COSTransToCASRsp& CosRspMsg::costranstocasrsp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.COSTransToCASRsp_body)
  return _internal_costranstocasrsp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_costranstocasrsp_body(
    ::ClientCos::COSTransToCASRsp* costranstocasrsp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(costranstocasrsp_body_);
  }
  costranstocasrsp_body_ = costranstocasrsp_body;
  if (costranstocasrsp_body) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.COSTransToCASRsp_body)
}
inline ::ClientCos::COSTransToCASRsp* CosRspMsg::release_costranstocasrsp_body() {
  _has_bits_[1] &= ~0x00010000u;
  ::ClientCos::COSTransToCASRsp* temp = costranstocasrsp_body_;
  costranstocasrsp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::COSTransToCASRsp* CosRspMsg::unsafe_arena_release_costranstocasrsp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.COSTransToCASRsp_body)
  _has_bits_[1] &= ~0x00010000u;
  ::ClientCos::COSTransToCASRsp* temp = costranstocasrsp_body_;
  costranstocasrsp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::COSTransToCASRsp* CosRspMsg::_internal_mutable_costranstocasrsp_body() {
  _has_bits_[1] |= 0x00010000u;
  if (costranstocasrsp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::COSTransToCASRsp>(GetArena());
    costranstocasrsp_body_ = p;
  }
  return costranstocasrsp_body_;
}
inline ::ClientCos::COSTransToCASRsp* CosRspMsg::mutable_costranstocasrsp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.COSTransToCASRsp_body)
  return _internal_mutable_costranstocasrsp_body();
}
inline void CosRspMsg::set_allocated_costranstocasrsp_body(::ClientCos::COSTransToCASRsp* costranstocasrsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete costranstocasrsp_body_;
  }
  if (costranstocasrsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(costranstocasrsp_body);
    if (message_arena != submessage_arena) {
      costranstocasrsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, costranstocasrsp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  costranstocasrsp_body_ = costranstocasrsp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.COSTransToCASRsp_body)
}

// optional .ClientCos.SetMigrateRsp SetMigrateRsp_body = 90;
inline bool CosRspMsg::_internal_has_setmigratersp_body() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || setmigratersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_setmigratersp_body() const {
  return _internal_has_setmigratersp_body();
}
inline void CosRspMsg::clear_setmigratersp_body() {
  if (setmigratersp_body_ != nullptr) setmigratersp_body_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
inline const ::ClientCos::SetMigrateRsp& CosRspMsg::_internal_setmigratersp_body() const {
  const ::ClientCos::SetMigrateRsp* p = setmigratersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SetMigrateRsp&>(
      ::ClientCos::_SetMigrateRsp_default_instance_);
}
inline const ::ClientCos::SetMigrateRsp& CosRspMsg::setmigratersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.SetMigrateRsp_body)
  return _internal_setmigratersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_setmigratersp_body(
    ::ClientCos::SetMigrateRsp* setmigratersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setmigratersp_body_);
  }
  setmigratersp_body_ = setmigratersp_body;
  if (setmigratersp_body) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.SetMigrateRsp_body)
}
inline ::ClientCos::SetMigrateRsp* CosRspMsg::release_setmigratersp_body() {
  _has_bits_[1] &= ~0x00020000u;
  ::ClientCos::SetMigrateRsp* temp = setmigratersp_body_;
  setmigratersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SetMigrateRsp* CosRspMsg::unsafe_arena_release_setmigratersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.SetMigrateRsp_body)
  _has_bits_[1] &= ~0x00020000u;
  ::ClientCos::SetMigrateRsp* temp = setmigratersp_body_;
  setmigratersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::SetMigrateRsp* CosRspMsg::_internal_mutable_setmigratersp_body() {
  _has_bits_[1] |= 0x00020000u;
  if (setmigratersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SetMigrateRsp>(GetArena());
    setmigratersp_body_ = p;
  }
  return setmigratersp_body_;
}
inline ::ClientCos::SetMigrateRsp* CosRspMsg::mutable_setmigratersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.SetMigrateRsp_body)
  return _internal_mutable_setmigratersp_body();
}
inline void CosRspMsg::set_allocated_setmigratersp_body(::ClientCos::SetMigrateRsp* setmigratersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setmigratersp_body_;
  }
  if (setmigratersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setmigratersp_body);
    if (message_arena != submessage_arena) {
      setmigratersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setmigratersp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  setmigratersp_body_ = setmigratersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.SetMigrateRsp_body)
}

// optional .ClientCos.DelNoHashFileRsp DelNoHashFileRsp_body = 91;
inline bool CosRspMsg::_internal_has_delnohashfilersp_body() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || delnohashfilersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_delnohashfilersp_body() const {
  return _internal_has_delnohashfilersp_body();
}
inline void CosRspMsg::clear_delnohashfilersp_body() {
  if (delnohashfilersp_body_ != nullptr) delnohashfilersp_body_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
inline const ::ClientCos::DelNoHashFileRsp& CosRspMsg::_internal_delnohashfilersp_body() const {
  const ::ClientCos::DelNoHashFileRsp* p = delnohashfilersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelNoHashFileRsp&>(
      ::ClientCos::_DelNoHashFileRsp_default_instance_);
}
inline const ::ClientCos::DelNoHashFileRsp& CosRspMsg::delnohashfilersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.DelNoHashFileRsp_body)
  return _internal_delnohashfilersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_delnohashfilersp_body(
    ::ClientCos::DelNoHashFileRsp* delnohashfilersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delnohashfilersp_body_);
  }
  delnohashfilersp_body_ = delnohashfilersp_body;
  if (delnohashfilersp_body) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.DelNoHashFileRsp_body)
}
inline ::ClientCos::DelNoHashFileRsp* CosRspMsg::release_delnohashfilersp_body() {
  _has_bits_[1] &= ~0x00040000u;
  ::ClientCos::DelNoHashFileRsp* temp = delnohashfilersp_body_;
  delnohashfilersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelNoHashFileRsp* CosRspMsg::unsafe_arena_release_delnohashfilersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.DelNoHashFileRsp_body)
  _has_bits_[1] &= ~0x00040000u;
  ::ClientCos::DelNoHashFileRsp* temp = delnohashfilersp_body_;
  delnohashfilersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::DelNoHashFileRsp* CosRspMsg::_internal_mutable_delnohashfilersp_body() {
  _has_bits_[1] |= 0x00040000u;
  if (delnohashfilersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelNoHashFileRsp>(GetArena());
    delnohashfilersp_body_ = p;
  }
  return delnohashfilersp_body_;
}
inline ::ClientCos::DelNoHashFileRsp* CosRspMsg::mutable_delnohashfilersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.DelNoHashFileRsp_body)
  return _internal_mutable_delnohashfilersp_body();
}
inline void CosRspMsg::set_allocated_delnohashfilersp_body(::ClientCos::DelNoHashFileRsp* delnohashfilersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delnohashfilersp_body_;
  }
  if (delnohashfilersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delnohashfilersp_body);
    if (message_arena != submessage_arena) {
      delnohashfilersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delnohashfilersp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  delnohashfilersp_body_ = delnohashfilersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.DelNoHashFileRsp_body)
}

// optional .ClientCos.MigrateFinFileRsp MigrateFinFileRsp_body = 92;
inline bool CosRspMsg::_internal_has_migratefinfilersp_body() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || migratefinfilersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_migratefinfilersp_body() const {
  return _internal_has_migratefinfilersp_body();
}
inline void CosRspMsg::clear_migratefinfilersp_body() {
  if (migratefinfilersp_body_ != nullptr) migratefinfilersp_body_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::ClientCos::MigrateFinFileRsp& CosRspMsg::_internal_migratefinfilersp_body() const {
  const ::ClientCos::MigrateFinFileRsp* p = migratefinfilersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::MigrateFinFileRsp&>(
      ::ClientCos::_MigrateFinFileRsp_default_instance_);
}
inline const ::ClientCos::MigrateFinFileRsp& CosRspMsg::migratefinfilersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.MigrateFinFileRsp_body)
  return _internal_migratefinfilersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_migratefinfilersp_body(
    ::ClientCos::MigrateFinFileRsp* migratefinfilersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migratefinfilersp_body_);
  }
  migratefinfilersp_body_ = migratefinfilersp_body;
  if (migratefinfilersp_body) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.MigrateFinFileRsp_body)
}
inline ::ClientCos::MigrateFinFileRsp* CosRspMsg::release_migratefinfilersp_body() {
  _has_bits_[1] &= ~0x00080000u;
  ::ClientCos::MigrateFinFileRsp* temp = migratefinfilersp_body_;
  migratefinfilersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::MigrateFinFileRsp* CosRspMsg::unsafe_arena_release_migratefinfilersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.MigrateFinFileRsp_body)
  _has_bits_[1] &= ~0x00080000u;
  ::ClientCos::MigrateFinFileRsp* temp = migratefinfilersp_body_;
  migratefinfilersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::MigrateFinFileRsp* CosRspMsg::_internal_mutable_migratefinfilersp_body() {
  _has_bits_[1] |= 0x00080000u;
  if (migratefinfilersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::MigrateFinFileRsp>(GetArena());
    migratefinfilersp_body_ = p;
  }
  return migratefinfilersp_body_;
}
inline ::ClientCos::MigrateFinFileRsp* CosRspMsg::mutable_migratefinfilersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.MigrateFinFileRsp_body)
  return _internal_mutable_migratefinfilersp_body();
}
inline void CosRspMsg::set_allocated_migratefinfilersp_body(::ClientCos::MigrateFinFileRsp* migratefinfilersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete migratefinfilersp_body_;
  }
  if (migratefinfilersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(migratefinfilersp_body);
    if (message_arena != submessage_arena) {
      migratefinfilersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migratefinfilersp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  migratefinfilersp_body_ = migratefinfilersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.MigrateFinFileRsp_body)
}

// optional .ClientCos.MigrateUnFinFileRsp MigrateUnFinFileRsp_body = 93;
inline bool CosRspMsg::_internal_has_migrateunfinfilersp_body() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || migrateunfinfilersp_body_ != nullptr);
  return value;
}
inline bool CosRspMsg::has_migrateunfinfilersp_body() const {
  return _internal_has_migrateunfinfilersp_body();
}
inline void CosRspMsg::clear_migrateunfinfilersp_body() {
  if (migrateunfinfilersp_body_ != nullptr) migrateunfinfilersp_body_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
inline const ::ClientCos::MigrateUnFinFileRsp& CosRspMsg::_internal_migrateunfinfilersp_body() const {
  const ::ClientCos::MigrateUnFinFileRsp* p = migrateunfinfilersp_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::MigrateUnFinFileRsp&>(
      ::ClientCos::_MigrateUnFinFileRsp_default_instance_);
}
inline const ::ClientCos::MigrateUnFinFileRsp& CosRspMsg::migrateunfinfilersp_body() const {
  // @@protoc_insertion_point(field_get:ClientCos.CosRspMsg.MigrateUnFinFileRsp_body)
  return _internal_migrateunfinfilersp_body();
}
inline void CosRspMsg::unsafe_arena_set_allocated_migrateunfinfilersp_body(
    ::ClientCos::MigrateUnFinFileRsp* migrateunfinfilersp_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migrateunfinfilersp_body_);
  }
  migrateunfinfilersp_body_ = migrateunfinfilersp_body;
  if (migrateunfinfilersp_body) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CosRspMsg.MigrateUnFinFileRsp_body)
}
inline ::ClientCos::MigrateUnFinFileRsp* CosRspMsg::release_migrateunfinfilersp_body() {
  _has_bits_[1] &= ~0x00100000u;
  ::ClientCos::MigrateUnFinFileRsp* temp = migrateunfinfilersp_body_;
  migrateunfinfilersp_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::MigrateUnFinFileRsp* CosRspMsg::unsafe_arena_release_migrateunfinfilersp_body() {
  // @@protoc_insertion_point(field_release:ClientCos.CosRspMsg.MigrateUnFinFileRsp_body)
  _has_bits_[1] &= ~0x00100000u;
  ::ClientCos::MigrateUnFinFileRsp* temp = migrateunfinfilersp_body_;
  migrateunfinfilersp_body_ = nullptr;
  return temp;
}
inline ::ClientCos::MigrateUnFinFileRsp* CosRspMsg::_internal_mutable_migrateunfinfilersp_body() {
  _has_bits_[1] |= 0x00100000u;
  if (migrateunfinfilersp_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::MigrateUnFinFileRsp>(GetArena());
    migrateunfinfilersp_body_ = p;
  }
  return migrateunfinfilersp_body_;
}
inline ::ClientCos::MigrateUnFinFileRsp* CosRspMsg::mutable_migrateunfinfilersp_body() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CosRspMsg.MigrateUnFinFileRsp_body)
  return _internal_mutable_migrateunfinfilersp_body();
}
inline void CosRspMsg::set_allocated_migrateunfinfilersp_body(::ClientCos::MigrateUnFinFileRsp* migrateunfinfilersp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete migrateunfinfilersp_body_;
  }
  if (migrateunfinfilersp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(migrateunfinfilersp_body);
    if (message_arena != submessage_arena) {
      migrateunfinfilersp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrateunfinfilersp_body, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  migrateunfinfilersp_body_ = migrateunfinfilersp_body;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CosRspMsg.MigrateUnFinFileRsp_body)
}

// -------------------------------------------------------------------

// Migrateinfo

// optional .ClientCos.MigrateStatus status = 1;
inline bool Migrateinfo::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Migrateinfo::has_status() const {
  return _internal_has_status();
}
inline void Migrateinfo::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ClientCos::MigrateStatus Migrateinfo::_internal_status() const {
  return static_cast< ::ClientCos::MigrateStatus >(status_);
}
inline ::ClientCos::MigrateStatus Migrateinfo::status() const {
  // @@protoc_insertion_point(field_get:ClientCos.Migrateinfo.status)
  return _internal_status();
}
inline void Migrateinfo::_internal_set_status(::ClientCos::MigrateStatus value) {
  assert(::ClientCos::MigrateStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void Migrateinfo::set_status(::ClientCos::MigrateStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ClientCos.Migrateinfo.status)
}

// optional uint32 start_time = 2;
inline bool Migrateinfo::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Migrateinfo::has_start_time() const {
  return _internal_has_start_time();
}
inline void Migrateinfo::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Migrateinfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Migrateinfo::start_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.Migrateinfo.start_time)
  return _internal_start_time();
}
inline void Migrateinfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  start_time_ = value;
}
inline void Migrateinfo::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.Migrateinfo.start_time)
}

// optional uint32 fin_time = 3;
inline bool Migrateinfo::_internal_has_fin_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Migrateinfo::has_fin_time() const {
  return _internal_has_fin_time();
}
inline void Migrateinfo::clear_fin_time() {
  fin_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Migrateinfo::_internal_fin_time() const {
  return fin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Migrateinfo::fin_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.Migrateinfo.fin_time)
  return _internal_fin_time();
}
inline void Migrateinfo::_internal_set_fin_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fin_time_ = value;
}
inline void Migrateinfo::set_fin_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fin_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.Migrateinfo.fin_time)
}

// -------------------------------------------------------------------

// ExtraAttr

// optional bytes crossregional = 1;
inline bool ExtraAttr::_internal_has_crossregional() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtraAttr::has_crossregional() const {
  return _internal_has_crossregional();
}
inline void ExtraAttr::clear_crossregional() {
  crossregional_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtraAttr::crossregional() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExtraAttr.crossregional)
  return _internal_crossregional();
}
inline void ExtraAttr::set_crossregional(const std::string& value) {
  _internal_set_crossregional(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExtraAttr.crossregional)
}
inline std::string* ExtraAttr::mutable_crossregional() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExtraAttr.crossregional)
  return _internal_mutable_crossregional();
}
inline const std::string& ExtraAttr::_internal_crossregional() const {
  return crossregional_.Get();
}
inline void ExtraAttr::_internal_set_crossregional(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  crossregional_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExtraAttr::set_crossregional(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  crossregional_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ExtraAttr.crossregional)
}
inline void ExtraAttr::set_crossregional(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  crossregional_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ExtraAttr.crossregional)
}
inline void ExtraAttr::set_crossregional(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  crossregional_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ExtraAttr.crossregional)
}
inline std::string* ExtraAttr::_internal_mutable_crossregional() {
  _has_bits_[0] |= 0x00000001u;
  return crossregional_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExtraAttr::release_crossregional() {
  // @@protoc_insertion_point(field_release:ClientCos.ExtraAttr.crossregional)
  if (!_internal_has_crossregional()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return crossregional_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExtraAttr::set_allocated_crossregional(std::string* crossregional) {
  if (crossregional != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  crossregional_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossregional,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExtraAttr.crossregional)
}

// optional bytes ruleobj = 2;
inline bool ExtraAttr::_internal_has_ruleobj() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtraAttr::has_ruleobj() const {
  return _internal_has_ruleobj();
}
inline void ExtraAttr::clear_ruleobj() {
  ruleobj_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExtraAttr::ruleobj() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExtraAttr.ruleobj)
  return _internal_ruleobj();
}
inline void ExtraAttr::set_ruleobj(const std::string& value) {
  _internal_set_ruleobj(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExtraAttr.ruleobj)
}
inline std::string* ExtraAttr::mutable_ruleobj() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExtraAttr.ruleobj)
  return _internal_mutable_ruleobj();
}
inline const std::string& ExtraAttr::_internal_ruleobj() const {
  return ruleobj_.Get();
}
inline void ExtraAttr::_internal_set_ruleobj(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ruleobj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExtraAttr::set_ruleobj(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ruleobj_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ExtraAttr.ruleobj)
}
inline void ExtraAttr::set_ruleobj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ruleobj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ExtraAttr.ruleobj)
}
inline void ExtraAttr::set_ruleobj(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ruleobj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ExtraAttr.ruleobj)
}
inline std::string* ExtraAttr::_internal_mutable_ruleobj() {
  _has_bits_[0] |= 0x00000002u;
  return ruleobj_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExtraAttr::release_ruleobj() {
  // @@protoc_insertion_point(field_release:ClientCos.ExtraAttr.ruleobj)
  if (!_internal_has_ruleobj()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ruleobj_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExtraAttr::set_allocated_ruleobj(std::string* ruleobj) {
  if (ruleobj != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ruleobj_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ruleobj,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExtraAttr.ruleobj)
}

// optional uint32 rule_mtime = 3;
inline bool ExtraAttr::_internal_has_rule_mtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExtraAttr::has_rule_mtime() const {
  return _internal_has_rule_mtime();
}
inline void ExtraAttr::clear_rule_mtime() {
  rule_mtime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExtraAttr::_internal_rule_mtime() const {
  return rule_mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExtraAttr::rule_mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExtraAttr.rule_mtime)
  return _internal_rule_mtime();
}
inline void ExtraAttr::_internal_set_rule_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rule_mtime_ = value;
}
inline void ExtraAttr::set_rule_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rule_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExtraAttr.rule_mtime)
}

// -------------------------------------------------------------------

// ObjExpireAttr

// optional uint32 expired_time = 1 [default = 0];
inline bool ObjExpireAttr::_internal_has_expired_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjExpireAttr::has_expired_time() const {
  return _internal_has_expired_time();
}
inline void ObjExpireAttr::clear_expired_time() {
  expired_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjExpireAttr::_internal_expired_time() const {
  return expired_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjExpireAttr::expired_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjExpireAttr.expired_time)
  return _internal_expired_time();
}
inline void ObjExpireAttr::_internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  expired_time_ = value;
}
inline void ObjExpireAttr::set_expired_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expired_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjExpireAttr.expired_time)
}

// optional bytes rulename = 2;
inline bool ObjExpireAttr::_internal_has_rulename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjExpireAttr::has_rulename() const {
  return _internal_has_rulename();
}
inline void ObjExpireAttr::clear_rulename() {
  rulename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjExpireAttr::rulename() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjExpireAttr.rulename)
  return _internal_rulename();
}
inline void ObjExpireAttr::set_rulename(const std::string& value) {
  _internal_set_rulename(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjExpireAttr.rulename)
}
inline std::string* ObjExpireAttr::mutable_rulename() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjExpireAttr.rulename)
  return _internal_mutable_rulename();
}
inline const std::string& ObjExpireAttr::_internal_rulename() const {
  return rulename_.Get();
}
inline void ObjExpireAttr::_internal_set_rulename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rulename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjExpireAttr::set_rulename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rulename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjExpireAttr.rulename)
}
inline void ObjExpireAttr::set_rulename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rulename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjExpireAttr.rulename)
}
inline void ObjExpireAttr::set_rulename(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rulename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjExpireAttr.rulename)
}
inline std::string* ObjExpireAttr::_internal_mutable_rulename() {
  _has_bits_[0] |= 0x00000001u;
  return rulename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjExpireAttr::release_rulename() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjExpireAttr.rulename)
  if (!_internal_has_rulename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rulename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjExpireAttr::set_allocated_rulename(std::string* rulename) {
  if (rulename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rulename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rulename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjExpireAttr.rulename)
}

// -------------------------------------------------------------------

// UploadAttr

// repeated .ClientCos.CustomHeader customheader = 1;
inline int UploadAttr::_internal_customheader_size() const {
  return customheader_.size();
}
inline int UploadAttr::customheader_size() const {
  return _internal_customheader_size();
}
inline void UploadAttr::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* UploadAttr::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.UploadAttr.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
UploadAttr::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.UploadAttr.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& UploadAttr::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& UploadAttr::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadAttr.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* UploadAttr::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* UploadAttr::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.UploadAttr.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
UploadAttr::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.UploadAttr.customheader)
  return customheader_;
}

// repeated .ClientCos.ObjTag taglist = 2;
inline int UploadAttr::_internal_taglist_size() const {
  return taglist_.size();
}
inline int UploadAttr::taglist_size() const {
  return _internal_taglist_size();
}
inline void UploadAttr::clear_taglist() {
  taglist_.Clear();
}
inline ::ClientCos::ObjTag* UploadAttr::mutable_taglist(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.UploadAttr.taglist)
  return taglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
UploadAttr::mutable_taglist() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.UploadAttr.taglist)
  return &taglist_;
}
inline const ::ClientCos::ObjTag& UploadAttr::_internal_taglist(int index) const {
  return taglist_.Get(index);
}
inline const ::ClientCos::ObjTag& UploadAttr::taglist(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadAttr.taglist)
  return _internal_taglist(index);
}
inline ::ClientCos::ObjTag* UploadAttr::_internal_add_taglist() {
  return taglist_.Add();
}
inline ::ClientCos::ObjTag* UploadAttr::add_taglist() {
  // @@protoc_insertion_point(field_add:ClientCos.UploadAttr.taglist)
  return _internal_add_taglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
UploadAttr::taglist() const {
  // @@protoc_insertion_point(field_list:ClientCos.UploadAttr.taglist)
  return taglist_;
}

// optional bytes real_sha = 3;
inline bool UploadAttr::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UploadAttr::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void UploadAttr::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadAttr::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadAttr.real_sha)
  return _internal_real_sha();
}
inline void UploadAttr::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.UploadAttr.real_sha)
}
inline std::string* UploadAttr::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UploadAttr.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& UploadAttr::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void UploadAttr::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadAttr::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UploadAttr.real_sha)
}
inline void UploadAttr::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UploadAttr.real_sha)
}
inline void UploadAttr::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UploadAttr.real_sha)
}
inline std::string* UploadAttr::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000001u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadAttr::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.UploadAttr.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadAttr::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UploadAttr.real_sha)
}

// -------------------------------------------------------------------

// CasInfo

// optional uint32 status = 1;
inline bool CasInfo::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CasInfo::has_status() const {
  return _internal_has_status();
}
inline void CasInfo::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasInfo::status() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.status)
  return _internal_status();
}
inline void CasInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void CasInfo::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.status)
}

// optional bytes casfilekey = 2;
inline bool CasInfo::_internal_has_casfilekey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CasInfo::has_casfilekey() const {
  return _internal_has_casfilekey();
}
inline void CasInfo::clear_casfilekey() {
  casfilekey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CasInfo::casfilekey() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.casfilekey)
  return _internal_casfilekey();
}
inline void CasInfo::set_casfilekey(const std::string& value) {
  _internal_set_casfilekey(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.casfilekey)
}
inline std::string* CasInfo::mutable_casfilekey() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasInfo.casfilekey)
  return _internal_mutable_casfilekey();
}
inline const std::string& CasInfo::_internal_casfilekey() const {
  return casfilekey_.Get();
}
inline void CasInfo::_internal_set_casfilekey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasInfo::set_casfilekey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasInfo.casfilekey)
}
inline void CasInfo::set_casfilekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasInfo.casfilekey)
}
inline void CasInfo::set_casfilekey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasInfo.casfilekey)
}
inline std::string* CasInfo::_internal_mutable_casfilekey() {
  _has_bits_[0] |= 0x00000001u;
  return casfilekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasInfo::release_casfilekey() {
  // @@protoc_insertion_point(field_release:ClientCos.CasInfo.casfilekey)
  if (!_internal_has_casfilekey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return casfilekey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasInfo::set_allocated_casfilekey(std::string* casfilekey) {
  if (casfilekey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  casfilekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), casfilekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasInfo.casfilekey)
}

// optional bytes archive_id = 3;
inline bool CasInfo::_internal_has_archive_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CasInfo::has_archive_id() const {
  return _internal_has_archive_id();
}
inline void CasInfo::clear_archive_id() {
  archive_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CasInfo::archive_id() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.archive_id)
  return _internal_archive_id();
}
inline void CasInfo::set_archive_id(const std::string& value) {
  _internal_set_archive_id(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.archive_id)
}
inline std::string* CasInfo::mutable_archive_id() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasInfo.archive_id)
  return _internal_mutable_archive_id();
}
inline const std::string& CasInfo::_internal_archive_id() const {
  return archive_id_.Get();
}
inline void CasInfo::_internal_set_archive_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasInfo::set_archive_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasInfo.archive_id)
}
inline void CasInfo::set_archive_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasInfo.archive_id)
}
inline void CasInfo::set_archive_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasInfo.archive_id)
}
inline std::string* CasInfo::_internal_mutable_archive_id() {
  _has_bits_[0] |= 0x00000002u;
  return archive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasInfo::release_archive_id() {
  // @@protoc_insertion_point(field_release:ClientCos.CasInfo.archive_id)
  if (!_internal_has_archive_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return archive_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasInfo::set_allocated_archive_id(std::string* archive_id) {
  if (archive_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  archive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasInfo.archive_id)
}

// optional uint64 expired_time = 4;
inline bool CasInfo::_internal_has_expired_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CasInfo::has_expired_time() const {
  return _internal_has_expired_time();
}
inline void CasInfo::clear_expired_time() {
  expired_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasInfo::_internal_expired_time() const {
  return expired_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasInfo::expired_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.expired_time)
  return _internal_expired_time();
}
inline void CasInfo::_internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  expired_time_ = value;
}
inline void CasInfo::set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expired_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.expired_time)
}

// optional uint32 cas_status = 5;
inline bool CasInfo::_internal_has_cas_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CasInfo::has_cas_status() const {
  return _internal_has_cas_status();
}
inline void CasInfo::clear_cas_status() {
  cas_status_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasInfo::_internal_cas_status() const {
  return cas_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasInfo::cas_status() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.cas_status)
  return _internal_cas_status();
}
inline void CasInfo::_internal_set_cas_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  cas_status_ = value;
}
inline void CasInfo::set_cas_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cas_status(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.cas_status)
}

// optional uint32 cas_type = 6;
inline bool CasInfo::_internal_has_cas_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CasInfo::has_cas_type() const {
  return _internal_has_cas_type();
}
inline void CasInfo::clear_cas_type() {
  cas_type_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasInfo::_internal_cas_type() const {
  return cas_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasInfo::cas_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.cas_type)
  return _internal_cas_type();
}
inline void CasInfo::_internal_set_cas_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  cas_type_ = value;
}
inline void CasInfo::set_cas_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cas_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.cas_type)
}

// optional uint64 restore_ctime = 7;
inline bool CasInfo::_internal_has_restore_ctime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CasInfo::has_restore_ctime() const {
  return _internal_has_restore_ctime();
}
inline void CasInfo::clear_restore_ctime() {
  restore_ctime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasInfo::_internal_restore_ctime() const {
  return restore_ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasInfo::restore_ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.restore_ctime)
  return _internal_restore_ctime();
}
inline void CasInfo::_internal_set_restore_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  restore_ctime_ = value;
}
inline void CasInfo::set_restore_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_restore_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.restore_ctime)
}

// optional .ClientCos.CASRestoreTier restore_tier = 8;
inline bool CasInfo::_internal_has_restore_tier() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CasInfo::has_restore_tier() const {
  return _internal_has_restore_tier();
}
inline void CasInfo::clear_restore_tier() {
  restore_tier_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::ClientCos::CASRestoreTier CasInfo::_internal_restore_tier() const {
  return static_cast< ::ClientCos::CASRestoreTier >(restore_tier_);
}
inline ::ClientCos::CASRestoreTier CasInfo::restore_tier() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasInfo.restore_tier)
  return _internal_restore_tier();
}
inline void CasInfo::_internal_set_restore_tier(::ClientCos::CASRestoreTier value) {
  assert(::ClientCos::CASRestoreTier_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  restore_tier_ = value;
}
inline void CasInfo::set_restore_tier(::ClientCos::CASRestoreTier value) {
  _internal_set_restore_tier(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasInfo.restore_tier)
}

// -------------------------------------------------------------------

// BucketCreateReq

// optional bytes path = 1;
inline bool BucketCreateReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BucketCreateReq::has_path() const {
  return _internal_has_path();
}
inline void BucketCreateReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BucketCreateReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.path)
  return _internal_path();
}
inline void BucketCreateReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.path)
}
inline std::string* BucketCreateReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.path)
  return _internal_mutable_path();
}
inline const std::string& BucketCreateReq::_internal_path() const {
  return path_.Get();
}
inline void BucketCreateReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketCreateReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketCreateReq.path)
}
inline void BucketCreateReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketCreateReq.path)
}
inline void BucketCreateReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketCreateReq.path)
}
inline std::string* BucketCreateReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketCreateReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketCreateReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketCreateReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketCreateReq.path)
}

// optional bytes biz_attr = 2;
inline bool BucketCreateReq::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BucketCreateReq::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void BucketCreateReq::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BucketCreateReq::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.biz_attr)
  return _internal_biz_attr();
}
inline void BucketCreateReq::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.biz_attr)
}
inline std::string* BucketCreateReq::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& BucketCreateReq::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void BucketCreateReq::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketCreateReq::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketCreateReq.biz_attr)
}
inline void BucketCreateReq::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketCreateReq.biz_attr)
}
inline void BucketCreateReq::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketCreateReq.biz_attr)
}
inline std::string* BucketCreateReq::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000002u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketCreateReq::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketCreateReq.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketCreateReq::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketCreateReq.biz_attr)
}

// optional .ClientCos.Authority auth = 3;
inline bool BucketCreateReq::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BucketCreateReq::has_auth() const {
  return _internal_has_auth();
}
inline void BucketCreateReq::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ClientCos::Authority BucketCreateReq::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority BucketCreateReq::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.auth)
  return _internal_auth();
}
inline void BucketCreateReq::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  auth_ = value;
}
inline void BucketCreateReq::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.auth)
}

// optional .ClientCos.KeyPair key = 4;
inline bool BucketCreateReq::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || key_ != nullptr);
  return value;
}
inline bool BucketCreateReq::has_key() const {
  return _internal_has_key();
}
inline void BucketCreateReq::clear_key() {
  if (key_ != nullptr) key_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ClientCos::KeyPair& BucketCreateReq::_internal_key() const {
  const ::ClientCos::KeyPair* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::KeyPair&>(
      ::ClientCos::_KeyPair_default_instance_);
}
inline const ::ClientCos::KeyPair& BucketCreateReq::key() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.key)
  return _internal_key();
}
inline void BucketCreateReq::unsafe_arena_set_allocated_key(
    ::ClientCos::KeyPair* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.BucketCreateReq.key)
}
inline ::ClientCos::KeyPair* BucketCreateReq::release_key() {
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::KeyPair* temp = key_;
  key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::KeyPair* BucketCreateReq::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketCreateReq.key)
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::KeyPair* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::ClientCos::KeyPair* BucketCreateReq::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000004u;
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::KeyPair>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::ClientCos::KeyPair* BucketCreateReq::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.key)
  return _internal_mutable_key();
}
inline void BucketCreateReq::set_allocated_key(::ClientCos::KeyPair* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketCreateReq.key)
}

// repeated string whiterefer = 5;
inline int BucketCreateReq::_internal_whiterefer_size() const {
  return whiterefer_.size();
}
inline int BucketCreateReq::whiterefer_size() const {
  return _internal_whiterefer_size();
}
inline void BucketCreateReq::clear_whiterefer() {
  whiterefer_.Clear();
}
inline std::string* BucketCreateReq::add_whiterefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketCreateReq.whiterefer)
  return _internal_add_whiterefer();
}
inline const std::string& BucketCreateReq::_internal_whiterefer(int index) const {
  return whiterefer_.Get(index);
}
inline const std::string& BucketCreateReq::whiterefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.whiterefer)
  return _internal_whiterefer(index);
}
inline std::string* BucketCreateReq::mutable_whiterefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.whiterefer)
  return whiterefer_.Mutable(index);
}
inline void BucketCreateReq::set_whiterefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.whiterefer)
  whiterefer_.Mutable(index)->assign(value);
}
inline void BucketCreateReq::set_whiterefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.whiterefer)
  whiterefer_.Mutable(index)->assign(std::move(value));
}
inline void BucketCreateReq::set_whiterefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketCreateReq.whiterefer)
}
inline void BucketCreateReq::set_whiterefer(int index, const char* value, size_t size) {
  whiterefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketCreateReq.whiterefer)
}
inline std::string* BucketCreateReq::_internal_add_whiterefer() {
  return whiterefer_.Add();
}
inline void BucketCreateReq::add_whiterefer(const std::string& value) {
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.whiterefer)
}
inline void BucketCreateReq::add_whiterefer(std::string&& value) {
  whiterefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.whiterefer)
}
inline void BucketCreateReq::add_whiterefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketCreateReq.whiterefer)
}
inline void BucketCreateReq::add_whiterefer(const char* value, size_t size) {
  whiterefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketCreateReq.whiterefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketCreateReq::whiterefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketCreateReq.whiterefer)
  return whiterefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketCreateReq::mutable_whiterefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketCreateReq.whiterefer)
  return &whiterefer_;
}

// repeated string blackrefer = 6;
inline int BucketCreateReq::_internal_blackrefer_size() const {
  return blackrefer_.size();
}
inline int BucketCreateReq::blackrefer_size() const {
  return _internal_blackrefer_size();
}
inline void BucketCreateReq::clear_blackrefer() {
  blackrefer_.Clear();
}
inline std::string* BucketCreateReq::add_blackrefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketCreateReq.blackrefer)
  return _internal_add_blackrefer();
}
inline const std::string& BucketCreateReq::_internal_blackrefer(int index) const {
  return blackrefer_.Get(index);
}
inline const std::string& BucketCreateReq::blackrefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.blackrefer)
  return _internal_blackrefer(index);
}
inline std::string* BucketCreateReq::mutable_blackrefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.blackrefer)
  return blackrefer_.Mutable(index);
}
inline void BucketCreateReq::set_blackrefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.blackrefer)
  blackrefer_.Mutable(index)->assign(value);
}
inline void BucketCreateReq::set_blackrefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.blackrefer)
  blackrefer_.Mutable(index)->assign(std::move(value));
}
inline void BucketCreateReq::set_blackrefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketCreateReq.blackrefer)
}
inline void BucketCreateReq::set_blackrefer(int index, const char* value, size_t size) {
  blackrefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketCreateReq.blackrefer)
}
inline std::string* BucketCreateReq::_internal_add_blackrefer() {
  return blackrefer_.Add();
}
inline void BucketCreateReq::add_blackrefer(const std::string& value) {
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.blackrefer)
}
inline void BucketCreateReq::add_blackrefer(std::string&& value) {
  blackrefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.blackrefer)
}
inline void BucketCreateReq::add_blackrefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketCreateReq.blackrefer)
}
inline void BucketCreateReq::add_blackrefer(const char* value, size_t size) {
  blackrefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketCreateReq.blackrefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketCreateReq::blackrefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketCreateReq.blackrefer)
  return blackrefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketCreateReq::mutable_blackrefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketCreateReq.blackrefer)
  return &blackrefer_;
}

// repeated string cname = 7;
inline int BucketCreateReq::_internal_cname_size() const {
  return cname_.size();
}
inline int BucketCreateReq::cname_size() const {
  return _internal_cname_size();
}
inline void BucketCreateReq::clear_cname() {
  cname_.Clear();
}
inline std::string* BucketCreateReq::add_cname() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketCreateReq.cname)
  return _internal_add_cname();
}
inline const std::string& BucketCreateReq::_internal_cname(int index) const {
  return cname_.Get(index);
}
inline const std::string& BucketCreateReq::cname(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.cname)
  return _internal_cname(index);
}
inline std::string* BucketCreateReq::mutable_cname(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.cname)
  return cname_.Mutable(index);
}
inline void BucketCreateReq::set_cname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.cname)
  cname_.Mutable(index)->assign(value);
}
inline void BucketCreateReq::set_cname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.cname)
  cname_.Mutable(index)->assign(std::move(value));
}
inline void BucketCreateReq::set_cname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketCreateReq.cname)
}
inline void BucketCreateReq::set_cname(int index, const char* value, size_t size) {
  cname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketCreateReq.cname)
}
inline std::string* BucketCreateReq::_internal_add_cname() {
  return cname_.Add();
}
inline void BucketCreateReq::add_cname(const std::string& value) {
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.cname)
}
inline void BucketCreateReq::add_cname(std::string&& value) {
  cname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.cname)
}
inline void BucketCreateReq::add_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketCreateReq.cname)
}
inline void BucketCreateReq::add_cname(const char* value, size_t size) {
  cname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketCreateReq.cname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketCreateReq::cname() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketCreateReq.cname)
  return cname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketCreateReq::mutable_cname() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketCreateReq.cname)
  return &cname_;
}

// repeated .ClientCos.ReservedAttr reservedattr = 8;
inline int BucketCreateReq::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int BucketCreateReq::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void BucketCreateReq::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* BucketCreateReq::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
BucketCreateReq::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketCreateReq.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& BucketCreateReq::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& BucketCreateReq::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* BucketCreateReq::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* BucketCreateReq::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
BucketCreateReq::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketCreateReq.reservedattr)
  return reservedattr_;
}

// repeated .ClientCos.CorsRule corsrule = 9;
inline int BucketCreateReq::_internal_corsrule_size() const {
  return corsrule_.size();
}
inline int BucketCreateReq::corsrule_size() const {
  return _internal_corsrule_size();
}
inline void BucketCreateReq::clear_corsrule() {
  corsrule_.Clear();
}
inline ::ClientCos::CorsRule* BucketCreateReq::mutable_corsrule(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.corsrule)
  return corsrule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
BucketCreateReq::mutable_corsrule() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketCreateReq.corsrule)
  return &corsrule_;
}
inline const ::ClientCos::CorsRule& BucketCreateReq::_internal_corsrule(int index) const {
  return corsrule_.Get(index);
}
inline const ::ClientCos::CorsRule& BucketCreateReq::corsrule(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.corsrule)
  return _internal_corsrule(index);
}
inline ::ClientCos::CorsRule* BucketCreateReq::_internal_add_corsrule() {
  return corsrule_.Add();
}
inline ::ClientCos::CorsRule* BucketCreateReq::add_corsrule() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketCreateReq.corsrule)
  return _internal_add_corsrule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
BucketCreateReq::corsrule() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketCreateReq.corsrule)
  return corsrule_;
}

// optional .ClientCos.OwnerInfo bucketOwner = 10;
inline bool BucketCreateReq::_internal_has_bucketowner() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || bucketowner_ != nullptr);
  return value;
}
inline bool BucketCreateReq::has_bucketowner() const {
  return _internal_has_bucketowner();
}
inline void BucketCreateReq::clear_bucketowner() {
  if (bucketowner_ != nullptr) bucketowner_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ClientCos::OwnerInfo& BucketCreateReq::_internal_bucketowner() const {
  const ::ClientCos::OwnerInfo* p = bucketowner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& BucketCreateReq::bucketowner() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.bucketOwner)
  return _internal_bucketowner();
}
inline void BucketCreateReq::unsafe_arena_set_allocated_bucketowner(
    ::ClientCos::OwnerInfo* bucketowner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketowner_);
  }
  bucketowner_ = bucketowner;
  if (bucketowner) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.BucketCreateReq.bucketOwner)
}
inline ::ClientCos::OwnerInfo* BucketCreateReq::release_bucketowner() {
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* BucketCreateReq::unsafe_arena_release_bucketowner() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketCreateReq.bucketOwner)
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* BucketCreateReq::_internal_mutable_bucketowner() {
  _has_bits_[0] |= 0x00000008u;
  if (bucketowner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    bucketowner_ = p;
  }
  return bucketowner_;
}
inline ::ClientCos::OwnerInfo* BucketCreateReq::mutable_bucketowner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCreateReq.bucketOwner)
  return _internal_mutable_bucketowner();
}
inline void BucketCreateReq::set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketowner_;
  }
  if (bucketowner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketowner);
    if (message_arena != submessage_arena) {
      bucketowner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketowner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bucketowner_ = bucketowner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketCreateReq.bucketOwner)
}

// optional bool is_slot = 11;
inline bool BucketCreateReq::_internal_has_is_slot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BucketCreateReq::has_is_slot() const {
  return _internal_has_is_slot();
}
inline void BucketCreateReq::clear_is_slot() {
  is_slot_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BucketCreateReq::_internal_is_slot() const {
  return is_slot_;
}
inline bool BucketCreateReq::is_slot() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateReq.is_slot)
  return _internal_is_slot();
}
inline void BucketCreateReq::_internal_set_is_slot(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_slot_ = value;
}
inline void BucketCreateReq::set_is_slot(bool value) {
  _internal_set_is_slot(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateReq.is_slot)
}

// -------------------------------------------------------------------

// BucketCreateRsp

// optional uint64 ctime = 1;
inline bool BucketCreateRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BucketCreateRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void BucketCreateRsp::clear_ctime() {
  ctime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BucketCreateRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BucketCreateRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCreateRsp.ctime)
  return _internal_ctime();
}
inline void BucketCreateRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ctime_ = value;
}
inline void BucketCreateRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketCreateRsp.ctime)
}

// -------------------------------------------------------------------

// BucketAttrModifyReq

// optional bytes path = 1;
inline bool BucketAttrModifyReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_path() const {
  return _internal_has_path();
}
inline void BucketAttrModifyReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BucketAttrModifyReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.path)
  return _internal_path();
}
inline void BucketAttrModifyReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.path)
}
inline std::string* BucketAttrModifyReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.path)
  return _internal_mutable_path();
}
inline const std::string& BucketAttrModifyReq::_internal_path() const {
  return path_.Get();
}
inline void BucketAttrModifyReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrModifyReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrModifyReq.path)
}
inline void BucketAttrModifyReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrModifyReq.path)
}
inline void BucketAttrModifyReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrModifyReq.path)
}
inline std::string* BucketAttrModifyReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrModifyReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrModifyReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrModifyReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrModifyReq.path)
}

// optional uint32 modflag = 2;
inline bool BucketAttrModifyReq::_internal_has_modflag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_modflag() const {
  return _internal_has_modflag();
}
inline void BucketAttrModifyReq::clear_modflag() {
  modflag_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrModifyReq::_internal_modflag() const {
  return modflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrModifyReq::modflag() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.modflag)
  return _internal_modflag();
}
inline void BucketAttrModifyReq::_internal_set_modflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  modflag_ = value;
}
inline void BucketAttrModifyReq::set_modflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_modflag(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.modflag)
}

// optional .ClientCos.Authority auth = 3;
inline bool BucketAttrModifyReq::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_auth() const {
  return _internal_has_auth();
}
inline void BucketAttrModifyReq::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ClientCos::Authority BucketAttrModifyReq::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority BucketAttrModifyReq::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.auth)
  return _internal_auth();
}
inline void BucketAttrModifyReq::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  auth_ = value;
}
inline void BucketAttrModifyReq::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.auth)
}

// optional bytes biz_attr = 4;
inline bool BucketAttrModifyReq::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void BucketAttrModifyReq::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BucketAttrModifyReq::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.biz_attr)
  return _internal_biz_attr();
}
inline void BucketAttrModifyReq::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.biz_attr)
}
inline std::string* BucketAttrModifyReq::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& BucketAttrModifyReq::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void BucketAttrModifyReq::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrModifyReq::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrModifyReq.biz_attr)
}
inline void BucketAttrModifyReq::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrModifyReq.biz_attr)
}
inline void BucketAttrModifyReq::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrModifyReq.biz_attr)
}
inline std::string* BucketAttrModifyReq::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000002u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrModifyReq::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrModifyReq.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrModifyReq::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrModifyReq.biz_attr)
}

// optional uint32 forbid = 5;
inline bool BucketAttrModifyReq::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_forbid() const {
  return _internal_has_forbid();
}
inline void BucketAttrModifyReq::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrModifyReq::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrModifyReq::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.forbid)
  return _internal_forbid();
}
inline void BucketAttrModifyReq::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  forbid_ = value;
}
inline void BucketAttrModifyReq::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.forbid)
}

// repeated string whiterefer = 6;
inline int BucketAttrModifyReq::_internal_whiterefer_size() const {
  return whiterefer_.size();
}
inline int BucketAttrModifyReq::whiterefer_size() const {
  return _internal_whiterefer_size();
}
inline void BucketAttrModifyReq::clear_whiterefer() {
  whiterefer_.Clear();
}
inline std::string* BucketAttrModifyReq::add_whiterefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketAttrModifyReq.whiterefer)
  return _internal_add_whiterefer();
}
inline const std::string& BucketAttrModifyReq::_internal_whiterefer(int index) const {
  return whiterefer_.Get(index);
}
inline const std::string& BucketAttrModifyReq::whiterefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.whiterefer)
  return _internal_whiterefer(index);
}
inline std::string* BucketAttrModifyReq::mutable_whiterefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.whiterefer)
  return whiterefer_.Mutable(index);
}
inline void BucketAttrModifyReq::set_whiterefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.whiterefer)
  whiterefer_.Mutable(index)->assign(value);
}
inline void BucketAttrModifyReq::set_whiterefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.whiterefer)
  whiterefer_.Mutable(index)->assign(std::move(value));
}
inline void BucketAttrModifyReq::set_whiterefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrModifyReq.whiterefer)
}
inline void BucketAttrModifyReq::set_whiterefer(int index, const char* value, size_t size) {
  whiterefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrModifyReq.whiterefer)
}
inline std::string* BucketAttrModifyReq::_internal_add_whiterefer() {
  return whiterefer_.Add();
}
inline void BucketAttrModifyReq::add_whiterefer(const std::string& value) {
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.whiterefer)
}
inline void BucketAttrModifyReq::add_whiterefer(std::string&& value) {
  whiterefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.whiterefer)
}
inline void BucketAttrModifyReq::add_whiterefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketAttrModifyReq.whiterefer)
}
inline void BucketAttrModifyReq::add_whiterefer(const char* value, size_t size) {
  whiterefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketAttrModifyReq.whiterefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketAttrModifyReq::whiterefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrModifyReq.whiterefer)
  return whiterefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketAttrModifyReq::mutable_whiterefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrModifyReq.whiterefer)
  return &whiterefer_;
}

// repeated string blackrefer = 7;
inline int BucketAttrModifyReq::_internal_blackrefer_size() const {
  return blackrefer_.size();
}
inline int BucketAttrModifyReq::blackrefer_size() const {
  return _internal_blackrefer_size();
}
inline void BucketAttrModifyReq::clear_blackrefer() {
  blackrefer_.Clear();
}
inline std::string* BucketAttrModifyReq::add_blackrefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketAttrModifyReq.blackrefer)
  return _internal_add_blackrefer();
}
inline const std::string& BucketAttrModifyReq::_internal_blackrefer(int index) const {
  return blackrefer_.Get(index);
}
inline const std::string& BucketAttrModifyReq::blackrefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.blackrefer)
  return _internal_blackrefer(index);
}
inline std::string* BucketAttrModifyReq::mutable_blackrefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.blackrefer)
  return blackrefer_.Mutable(index);
}
inline void BucketAttrModifyReq::set_blackrefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.blackrefer)
  blackrefer_.Mutable(index)->assign(value);
}
inline void BucketAttrModifyReq::set_blackrefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.blackrefer)
  blackrefer_.Mutable(index)->assign(std::move(value));
}
inline void BucketAttrModifyReq::set_blackrefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrModifyReq.blackrefer)
}
inline void BucketAttrModifyReq::set_blackrefer(int index, const char* value, size_t size) {
  blackrefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrModifyReq.blackrefer)
}
inline std::string* BucketAttrModifyReq::_internal_add_blackrefer() {
  return blackrefer_.Add();
}
inline void BucketAttrModifyReq::add_blackrefer(const std::string& value) {
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.blackrefer)
}
inline void BucketAttrModifyReq::add_blackrefer(std::string&& value) {
  blackrefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.blackrefer)
}
inline void BucketAttrModifyReq::add_blackrefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketAttrModifyReq.blackrefer)
}
inline void BucketAttrModifyReq::add_blackrefer(const char* value, size_t size) {
  blackrefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketAttrModifyReq.blackrefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketAttrModifyReq::blackrefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrModifyReq.blackrefer)
  return blackrefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketAttrModifyReq::mutable_blackrefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrModifyReq.blackrefer)
  return &blackrefer_;
}

// repeated string cname = 8;
inline int BucketAttrModifyReq::_internal_cname_size() const {
  return cname_.size();
}
inline int BucketAttrModifyReq::cname_size() const {
  return _internal_cname_size();
}
inline void BucketAttrModifyReq::clear_cname() {
  cname_.Clear();
}
inline std::string* BucketAttrModifyReq::add_cname() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketAttrModifyReq.cname)
  return _internal_add_cname();
}
inline const std::string& BucketAttrModifyReq::_internal_cname(int index) const {
  return cname_.Get(index);
}
inline const std::string& BucketAttrModifyReq::cname(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.cname)
  return _internal_cname(index);
}
inline std::string* BucketAttrModifyReq::mutable_cname(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.cname)
  return cname_.Mutable(index);
}
inline void BucketAttrModifyReq::set_cname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.cname)
  cname_.Mutable(index)->assign(value);
}
inline void BucketAttrModifyReq::set_cname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.cname)
  cname_.Mutable(index)->assign(std::move(value));
}
inline void BucketAttrModifyReq::set_cname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrModifyReq.cname)
}
inline void BucketAttrModifyReq::set_cname(int index, const char* value, size_t size) {
  cname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrModifyReq.cname)
}
inline std::string* BucketAttrModifyReq::_internal_add_cname() {
  return cname_.Add();
}
inline void BucketAttrModifyReq::add_cname(const std::string& value) {
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.cname)
}
inline void BucketAttrModifyReq::add_cname(std::string&& value) {
  cname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.cname)
}
inline void BucketAttrModifyReq::add_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketAttrModifyReq.cname)
}
inline void BucketAttrModifyReq::add_cname(const char* value, size_t size) {
  cname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketAttrModifyReq.cname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketAttrModifyReq::cname() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrModifyReq.cname)
  return cname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketAttrModifyReq::mutable_cname() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrModifyReq.cname)
  return &cname_;
}

// repeated .ClientCos.ReservedAttr reservedattr = 9;
inline int BucketAttrModifyReq::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int BucketAttrModifyReq::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void BucketAttrModifyReq::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* BucketAttrModifyReq::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
BucketAttrModifyReq::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrModifyReq.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& BucketAttrModifyReq::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& BucketAttrModifyReq::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* BucketAttrModifyReq::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* BucketAttrModifyReq::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
BucketAttrModifyReq::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrModifyReq.reservedattr)
  return reservedattr_;
}

// repeated .ClientCos.CorsRule corsrule = 10;
inline int BucketAttrModifyReq::_internal_corsrule_size() const {
  return corsrule_.size();
}
inline int BucketAttrModifyReq::corsrule_size() const {
  return _internal_corsrule_size();
}
inline void BucketAttrModifyReq::clear_corsrule() {
  corsrule_.Clear();
}
inline ::ClientCos::CorsRule* BucketAttrModifyReq::mutable_corsrule(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.corsrule)
  return corsrule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
BucketAttrModifyReq::mutable_corsrule() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrModifyReq.corsrule)
  return &corsrule_;
}
inline const ::ClientCos::CorsRule& BucketAttrModifyReq::_internal_corsrule(int index) const {
  return corsrule_.Get(index);
}
inline const ::ClientCos::CorsRule& BucketAttrModifyReq::corsrule(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.corsrule)
  return _internal_corsrule(index);
}
inline ::ClientCos::CorsRule* BucketAttrModifyReq::_internal_add_corsrule() {
  return corsrule_.Add();
}
inline ::ClientCos::CorsRule* BucketAttrModifyReq::add_corsrule() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.corsrule)
  return _internal_add_corsrule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
BucketAttrModifyReq::corsrule() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrModifyReq.corsrule)
  return corsrule_;
}

// optional bytes crossregional = 11;
inline bool BucketAttrModifyReq::_internal_has_crossregional() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_crossregional() const {
  return _internal_has_crossregional();
}
inline void BucketAttrModifyReq::clear_crossregional() {
  crossregional_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BucketAttrModifyReq::crossregional() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.crossregional)
  return _internal_crossregional();
}
inline void BucketAttrModifyReq::set_crossregional(const std::string& value) {
  _internal_set_crossregional(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.crossregional)
}
inline std::string* BucketAttrModifyReq::mutable_crossregional() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.crossregional)
  return _internal_mutable_crossregional();
}
inline const std::string& BucketAttrModifyReq::_internal_crossregional() const {
  return crossregional_.Get();
}
inline void BucketAttrModifyReq::_internal_set_crossregional(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  crossregional_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrModifyReq::set_crossregional(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  crossregional_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrModifyReq.crossregional)
}
inline void BucketAttrModifyReq::set_crossregional(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  crossregional_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrModifyReq.crossregional)
}
inline void BucketAttrModifyReq::set_crossregional(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  crossregional_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrModifyReq.crossregional)
}
inline std::string* BucketAttrModifyReq::_internal_mutable_crossregional() {
  _has_bits_[0] |= 0x00000004u;
  return crossregional_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrModifyReq::release_crossregional() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrModifyReq.crossregional)
  if (!_internal_has_crossregional()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return crossregional_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrModifyReq::set_allocated_crossregional(std::string* crossregional) {
  if (crossregional != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  crossregional_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossregional,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrModifyReq.crossregional)
}

// optional uint32 multi_version_flag = 12;
inline bool BucketAttrModifyReq::_internal_has_multi_version_flag() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_multi_version_flag() const {
  return _internal_has_multi_version_flag();
}
inline void BucketAttrModifyReq::clear_multi_version_flag() {
  multi_version_flag_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrModifyReq::_internal_multi_version_flag() const {
  return multi_version_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrModifyReq::multi_version_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.multi_version_flag)
  return _internal_multi_version_flag();
}
inline void BucketAttrModifyReq::_internal_set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  multi_version_flag_ = value;
}
inline void BucketAttrModifyReq::set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multi_version_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.multi_version_flag)
}

// repeated .ClientCos.Tag tag = 13;
inline int BucketAttrModifyReq::_internal_tag_size() const {
  return tag_.size();
}
inline int BucketAttrModifyReq::tag_size() const {
  return _internal_tag_size();
}
inline void BucketAttrModifyReq::clear_tag() {
  tag_.Clear();
}
inline ::ClientCos::Tag* BucketAttrModifyReq::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >*
BucketAttrModifyReq::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrModifyReq.tag)
  return &tag_;
}
inline const ::ClientCos::Tag& BucketAttrModifyReq::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const ::ClientCos::Tag& BucketAttrModifyReq::tag(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.tag)
  return _internal_tag(index);
}
inline ::ClientCos::Tag* BucketAttrModifyReq::_internal_add_tag() {
  return tag_.Add();
}
inline ::ClientCos::Tag* BucketAttrModifyReq::add_tag() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.tag)
  return _internal_add_tag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >&
BucketAttrModifyReq::tag() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrModifyReq.tag)
  return tag_;
}

// optional bytes ruleobj = 14;
inline bool BucketAttrModifyReq::_internal_has_ruleobj() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_ruleobj() const {
  return _internal_has_ruleobj();
}
inline void BucketAttrModifyReq::clear_ruleobj() {
  ruleobj_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BucketAttrModifyReq::ruleobj() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.ruleobj)
  return _internal_ruleobj();
}
inline void BucketAttrModifyReq::set_ruleobj(const std::string& value) {
  _internal_set_ruleobj(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.ruleobj)
}
inline std::string* BucketAttrModifyReq::mutable_ruleobj() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.ruleobj)
  return _internal_mutable_ruleobj();
}
inline const std::string& BucketAttrModifyReq::_internal_ruleobj() const {
  return ruleobj_.Get();
}
inline void BucketAttrModifyReq::_internal_set_ruleobj(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ruleobj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrModifyReq::set_ruleobj(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ruleobj_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrModifyReq.ruleobj)
}
inline void BucketAttrModifyReq::set_ruleobj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ruleobj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrModifyReq.ruleobj)
}
inline void BucketAttrModifyReq::set_ruleobj(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ruleobj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrModifyReq.ruleobj)
}
inline std::string* BucketAttrModifyReq::_internal_mutable_ruleobj() {
  _has_bits_[0] |= 0x00000008u;
  return ruleobj_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrModifyReq::release_ruleobj() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrModifyReq.ruleobj)
  if (!_internal_has_ruleobj()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ruleobj_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrModifyReq::set_allocated_ruleobj(std::string* ruleobj) {
  if (ruleobj != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ruleobj_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ruleobj,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrModifyReq.ruleobj)
}

// repeated .ClientCos.LFAttr lfattr = 15;
inline int BucketAttrModifyReq::_internal_lfattr_size() const {
  return lfattr_.size();
}
inline int BucketAttrModifyReq::lfattr_size() const {
  return _internal_lfattr_size();
}
inline void BucketAttrModifyReq::clear_lfattr() {
  lfattr_.Clear();
}
inline ::ClientCos::LFAttr* BucketAttrModifyReq::mutable_lfattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrModifyReq.lfattr)
  return lfattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >*
BucketAttrModifyReq::mutable_lfattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrModifyReq.lfattr)
  return &lfattr_;
}
inline const ::ClientCos::LFAttr& BucketAttrModifyReq::_internal_lfattr(int index) const {
  return lfattr_.Get(index);
}
inline const ::ClientCos::LFAttr& BucketAttrModifyReq::lfattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.lfattr)
  return _internal_lfattr(index);
}
inline ::ClientCos::LFAttr* BucketAttrModifyReq::_internal_add_lfattr() {
  return lfattr_.Add();
}
inline ::ClientCos::LFAttr* BucketAttrModifyReq::add_lfattr() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrModifyReq.lfattr)
  return _internal_add_lfattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >&
BucketAttrModifyReq::lfattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrModifyReq.lfattr)
  return lfattr_;
}

// optional bool refer_able = 16;
inline bool BucketAttrModifyReq::_internal_has_refer_able() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_refer_able() const {
  return _internal_has_refer_able();
}
inline void BucketAttrModifyReq::clear_refer_able() {
  refer_able_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool BucketAttrModifyReq::_internal_refer_able() const {
  return refer_able_;
}
inline bool BucketAttrModifyReq::refer_able() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.refer_able)
  return _internal_refer_able();
}
inline void BucketAttrModifyReq::_internal_set_refer_able(bool value) {
  _has_bits_[0] |= 0x00000100u;
  refer_able_ = value;
}
inline void BucketAttrModifyReq::set_refer_able(bool value) {
  _internal_set_refer_able(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.refer_able)
}

// optional bool emptyreferconfig = 17;
inline bool BucketAttrModifyReq::_internal_has_emptyreferconfig() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_emptyreferconfig() const {
  return _internal_has_emptyreferconfig();
}
inline void BucketAttrModifyReq::clear_emptyreferconfig() {
  emptyreferconfig_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool BucketAttrModifyReq::_internal_emptyreferconfig() const {
  return emptyreferconfig_;
}
inline bool BucketAttrModifyReq::emptyreferconfig() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.emptyreferconfig)
  return _internal_emptyreferconfig();
}
inline void BucketAttrModifyReq::_internal_set_emptyreferconfig(bool value) {
  _has_bits_[0] |= 0x00000200u;
  emptyreferconfig_ = value;
}
inline void BucketAttrModifyReq::set_emptyreferconfig(bool value) {
  _internal_set_emptyreferconfig(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.emptyreferconfig)
}

// optional bool cname_able = 18;
inline bool BucketAttrModifyReq::_internal_has_cname_able() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BucketAttrModifyReq::has_cname_able() const {
  return _internal_has_cname_able();
}
inline void BucketAttrModifyReq::clear_cname_able() {
  cname_able_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool BucketAttrModifyReq::_internal_cname_able() const {
  return cname_able_;
}
inline bool BucketAttrModifyReq::cname_able() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrModifyReq.cname_able)
  return _internal_cname_able();
}
inline void BucketAttrModifyReq::_internal_set_cname_able(bool value) {
  _has_bits_[0] |= 0x00000400u;
  cname_able_ = value;
}
inline void BucketAttrModifyReq::set_cname_able(bool value) {
  _internal_set_cname_able(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrModifyReq.cname_able)
}

// -------------------------------------------------------------------

// BucketAttrModifyRsp

// -------------------------------------------------------------------

// BucketAttrQueryReq

// optional bytes path = 1;
inline bool BucketAttrQueryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BucketAttrQueryReq::has_path() const {
  return _internal_has_path();
}
inline void BucketAttrQueryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BucketAttrQueryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryReq.path)
  return _internal_path();
}
inline void BucketAttrQueryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryReq.path)
}
inline std::string* BucketAttrQueryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryReq.path)
  return _internal_mutable_path();
}
inline const std::string& BucketAttrQueryReq::_internal_path() const {
  return path_.Get();
}
inline void BucketAttrQueryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrQueryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrQueryReq.path)
}
inline void BucketAttrQueryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrQueryReq.path)
}
inline void BucketAttrQueryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrQueryReq.path)
}
inline std::string* BucketAttrQueryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrQueryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrQueryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryReq.path)
}

// optional uint32 flag = 2;
inline bool BucketAttrQueryReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BucketAttrQueryReq::has_flag() const {
  return _internal_has_flag();
}
inline void BucketAttrQueryReq::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryReq::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryReq.flag)
  return _internal_flag();
}
inline void BucketAttrQueryReq::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
}
inline void BucketAttrQueryReq::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryReq.flag)
}

// -------------------------------------------------------------------

// BucketAttrQueryRsp

// optional .ClientCos.Authority auth = 1;
inline bool BucketAttrQueryRsp::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_auth() const {
  return _internal_has_auth();
}
inline void BucketAttrQueryRsp::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::ClientCos::Authority BucketAttrQueryRsp::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority BucketAttrQueryRsp::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.auth)
  return _internal_auth();
}
inline void BucketAttrQueryRsp::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  auth_ = value;
}
inline void BucketAttrQueryRsp::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.auth)
}

// optional bytes biz_attr = 2;
inline bool BucketAttrQueryRsp::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void BucketAttrQueryRsp::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BucketAttrQueryRsp::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.biz_attr)
  return _internal_biz_attr();
}
inline void BucketAttrQueryRsp::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.biz_attr)
}
inline std::string* BucketAttrQueryRsp::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& BucketAttrQueryRsp::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void BucketAttrQueryRsp::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrQueryRsp::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrQueryRsp.biz_attr)
}
inline void BucketAttrQueryRsp::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrQueryRsp.biz_attr)
}
inline void BucketAttrQueryRsp::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrQueryRsp.biz_attr)
}
inline std::string* BucketAttrQueryRsp::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000001u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrQueryRsp::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryRsp.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrQueryRsp::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryRsp.biz_attr)
}

// optional uint32 ctime = 3;
inline bool BucketAttrQueryRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void BucketAttrQueryRsp::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.ctime)
  return _internal_ctime();
}
inline void BucketAttrQueryRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ctime_ = value;
}
inline void BucketAttrQueryRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.ctime)
}

// optional uint32 mtime = 4;
inline bool BucketAttrQueryRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void BucketAttrQueryRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.mtime)
  return _internal_mtime();
}
inline void BucketAttrQueryRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  mtime_ = value;
}
inline void BucketAttrQueryRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.mtime)
}

// repeated string cname = 5;
inline int BucketAttrQueryRsp::_internal_cname_size() const {
  return cname_.size();
}
inline int BucketAttrQueryRsp::cname_size() const {
  return _internal_cname_size();
}
inline void BucketAttrQueryRsp::clear_cname() {
  cname_.Clear();
}
inline std::string* BucketAttrQueryRsp::add_cname() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketAttrQueryRsp.cname)
  return _internal_add_cname();
}
inline const std::string& BucketAttrQueryRsp::_internal_cname(int index) const {
  return cname_.Get(index);
}
inline const std::string& BucketAttrQueryRsp::cname(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.cname)
  return _internal_cname(index);
}
inline std::string* BucketAttrQueryRsp::mutable_cname(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.cname)
  return cname_.Mutable(index);
}
inline void BucketAttrQueryRsp::set_cname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.cname)
  cname_.Mutable(index)->assign(value);
}
inline void BucketAttrQueryRsp::set_cname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.cname)
  cname_.Mutable(index)->assign(std::move(value));
}
inline void BucketAttrQueryRsp::set_cname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrQueryRsp.cname)
}
inline void BucketAttrQueryRsp::set_cname(int index, const char* value, size_t size) {
  cname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrQueryRsp.cname)
}
inline std::string* BucketAttrQueryRsp::_internal_add_cname() {
  return cname_.Add();
}
inline void BucketAttrQueryRsp::add_cname(const std::string& value) {
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.cname)
}
inline void BucketAttrQueryRsp::add_cname(std::string&& value) {
  cname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.cname)
}
inline void BucketAttrQueryRsp::add_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketAttrQueryRsp.cname)
}
inline void BucketAttrQueryRsp::add_cname(const char* value, size_t size) {
  cname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketAttrQueryRsp.cname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketAttrQueryRsp::cname() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrQueryRsp.cname)
  return cname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketAttrQueryRsp::mutable_cname() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrQueryRsp.cname)
  return &cname_;
}

// repeated string whiterefer = 6;
inline int BucketAttrQueryRsp::_internal_whiterefer_size() const {
  return whiterefer_.size();
}
inline int BucketAttrQueryRsp::whiterefer_size() const {
  return _internal_whiterefer_size();
}
inline void BucketAttrQueryRsp::clear_whiterefer() {
  whiterefer_.Clear();
}
inline std::string* BucketAttrQueryRsp::add_whiterefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketAttrQueryRsp.whiterefer)
  return _internal_add_whiterefer();
}
inline const std::string& BucketAttrQueryRsp::_internal_whiterefer(int index) const {
  return whiterefer_.Get(index);
}
inline const std::string& BucketAttrQueryRsp::whiterefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.whiterefer)
  return _internal_whiterefer(index);
}
inline std::string* BucketAttrQueryRsp::mutable_whiterefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.whiterefer)
  return whiterefer_.Mutable(index);
}
inline void BucketAttrQueryRsp::set_whiterefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.whiterefer)
  whiterefer_.Mutable(index)->assign(value);
}
inline void BucketAttrQueryRsp::set_whiterefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.whiterefer)
  whiterefer_.Mutable(index)->assign(std::move(value));
}
inline void BucketAttrQueryRsp::set_whiterefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrQueryRsp.whiterefer)
}
inline void BucketAttrQueryRsp::set_whiterefer(int index, const char* value, size_t size) {
  whiterefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrQueryRsp.whiterefer)
}
inline std::string* BucketAttrQueryRsp::_internal_add_whiterefer() {
  return whiterefer_.Add();
}
inline void BucketAttrQueryRsp::add_whiterefer(const std::string& value) {
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.whiterefer)
}
inline void BucketAttrQueryRsp::add_whiterefer(std::string&& value) {
  whiterefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.whiterefer)
}
inline void BucketAttrQueryRsp::add_whiterefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketAttrQueryRsp.whiterefer)
}
inline void BucketAttrQueryRsp::add_whiterefer(const char* value, size_t size) {
  whiterefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketAttrQueryRsp.whiterefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketAttrQueryRsp::whiterefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrQueryRsp.whiterefer)
  return whiterefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketAttrQueryRsp::mutable_whiterefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrQueryRsp.whiterefer)
  return &whiterefer_;
}

// repeated string blackrefer = 7;
inline int BucketAttrQueryRsp::_internal_blackrefer_size() const {
  return blackrefer_.size();
}
inline int BucketAttrQueryRsp::blackrefer_size() const {
  return _internal_blackrefer_size();
}
inline void BucketAttrQueryRsp::clear_blackrefer() {
  blackrefer_.Clear();
}
inline std::string* BucketAttrQueryRsp::add_blackrefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.BucketAttrQueryRsp.blackrefer)
  return _internal_add_blackrefer();
}
inline const std::string& BucketAttrQueryRsp::_internal_blackrefer(int index) const {
  return blackrefer_.Get(index);
}
inline const std::string& BucketAttrQueryRsp::blackrefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.blackrefer)
  return _internal_blackrefer(index);
}
inline std::string* BucketAttrQueryRsp::mutable_blackrefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.blackrefer)
  return blackrefer_.Mutable(index);
}
inline void BucketAttrQueryRsp::set_blackrefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.blackrefer)
  blackrefer_.Mutable(index)->assign(value);
}
inline void BucketAttrQueryRsp::set_blackrefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.blackrefer)
  blackrefer_.Mutable(index)->assign(std::move(value));
}
inline void BucketAttrQueryRsp::set_blackrefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrQueryRsp.blackrefer)
}
inline void BucketAttrQueryRsp::set_blackrefer(int index, const char* value, size_t size) {
  blackrefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrQueryRsp.blackrefer)
}
inline std::string* BucketAttrQueryRsp::_internal_add_blackrefer() {
  return blackrefer_.Add();
}
inline void BucketAttrQueryRsp::add_blackrefer(const std::string& value) {
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.blackrefer)
}
inline void BucketAttrQueryRsp::add_blackrefer(std::string&& value) {
  blackrefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.blackrefer)
}
inline void BucketAttrQueryRsp::add_blackrefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.BucketAttrQueryRsp.blackrefer)
}
inline void BucketAttrQueryRsp::add_blackrefer(const char* value, size_t size) {
  blackrefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.BucketAttrQueryRsp.blackrefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketAttrQueryRsp::blackrefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrQueryRsp.blackrefer)
  return blackrefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketAttrQueryRsp::mutable_blackrefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrQueryRsp.blackrefer)
  return &blackrefer_;
}

// repeated .ClientCos.ReservedAttr reservedattr = 8;
inline int BucketAttrQueryRsp::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int BucketAttrQueryRsp::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void BucketAttrQueryRsp::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* BucketAttrQueryRsp::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
BucketAttrQueryRsp::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrQueryRsp.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& BucketAttrQueryRsp::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& BucketAttrQueryRsp::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* BucketAttrQueryRsp::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* BucketAttrQueryRsp::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
BucketAttrQueryRsp::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrQueryRsp.reservedattr)
  return reservedattr_;
}

// optional uint32 forbid = 9;
inline bool BucketAttrQueryRsp::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_forbid() const {
  return _internal_has_forbid();
}
inline void BucketAttrQueryRsp::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.forbid)
  return _internal_forbid();
}
inline void BucketAttrQueryRsp::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  forbid_ = value;
}
inline void BucketAttrQueryRsp::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.forbid)
}

// repeated .ClientCos.CorsRule corsrule = 10;
inline int BucketAttrQueryRsp::_internal_corsrule_size() const {
  return corsrule_.size();
}
inline int BucketAttrQueryRsp::corsrule_size() const {
  return _internal_corsrule_size();
}
inline void BucketAttrQueryRsp::clear_corsrule() {
  corsrule_.Clear();
}
inline ::ClientCos::CorsRule* BucketAttrQueryRsp::mutable_corsrule(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.corsrule)
  return corsrule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
BucketAttrQueryRsp::mutable_corsrule() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrQueryRsp.corsrule)
  return &corsrule_;
}
inline const ::ClientCos::CorsRule& BucketAttrQueryRsp::_internal_corsrule(int index) const {
  return corsrule_.Get(index);
}
inline const ::ClientCos::CorsRule& BucketAttrQueryRsp::corsrule(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.corsrule)
  return _internal_corsrule(index);
}
inline ::ClientCos::CorsRule* BucketAttrQueryRsp::_internal_add_corsrule() {
  return corsrule_.Add();
}
inline ::ClientCos::CorsRule* BucketAttrQueryRsp::add_corsrule() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.corsrule)
  return _internal_add_corsrule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
BucketAttrQueryRsp::corsrule() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrQueryRsp.corsrule)
  return corsrule_;
}

// optional .ClientCos.ExtraAttr extraattr = 11;
inline bool BucketAttrQueryRsp::_internal_has_extraattr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || extraattr_ != nullptr);
  return value;
}
inline bool BucketAttrQueryRsp::has_extraattr() const {
  return _internal_has_extraattr();
}
inline void BucketAttrQueryRsp::clear_extraattr() {
  if (extraattr_ != nullptr) extraattr_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ClientCos::ExtraAttr& BucketAttrQueryRsp::_internal_extraattr() const {
  const ::ClientCos::ExtraAttr* p = extraattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExtraAttr&>(
      ::ClientCos::_ExtraAttr_default_instance_);
}
inline const ::ClientCos::ExtraAttr& BucketAttrQueryRsp::extraattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.extraattr)
  return _internal_extraattr();
}
inline void BucketAttrQueryRsp::unsafe_arena_set_allocated_extraattr(
    ::ClientCos::ExtraAttr* extraattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extraattr_);
  }
  extraattr_ = extraattr;
  if (extraattr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.BucketAttrQueryRsp.extraattr)
}
inline ::ClientCos::ExtraAttr* BucketAttrQueryRsp::release_extraattr() {
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExtraAttr* BucketAttrQueryRsp::unsafe_arena_release_extraattr() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryRsp.extraattr)
  _has_bits_[0] &= ~0x00000008u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ExtraAttr* BucketAttrQueryRsp::_internal_mutable_extraattr() {
  _has_bits_[0] |= 0x00000008u;
  if (extraattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExtraAttr>(GetArena());
    extraattr_ = p;
  }
  return extraattr_;
}
inline ::ClientCos::ExtraAttr* BucketAttrQueryRsp::mutable_extraattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.extraattr)
  return _internal_mutable_extraattr();
}
inline void BucketAttrQueryRsp::set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extraattr_;
  }
  if (extraattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extraattr);
    if (message_arena != submessage_arena) {
      extraattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extraattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  extraattr_ = extraattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryRsp.extraattr)
}

// optional uint32 multi_version_flag = 12;
inline bool BucketAttrQueryRsp::_internal_has_multi_version_flag() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_multi_version_flag() const {
  return _internal_has_multi_version_flag();
}
inline void BucketAttrQueryRsp::clear_multi_version_flag() {
  multi_version_flag_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::_internal_multi_version_flag() const {
  return multi_version_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BucketAttrQueryRsp::multi_version_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.multi_version_flag)
  return _internal_multi_version_flag();
}
inline void BucketAttrQueryRsp::_internal_set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  multi_version_flag_ = value;
}
inline void BucketAttrQueryRsp::set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multi_version_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.multi_version_flag)
}

// repeated .ClientCos.Tag tag = 13;
inline int BucketAttrQueryRsp::_internal_tag_size() const {
  return tag_.size();
}
inline int BucketAttrQueryRsp::tag_size() const {
  return _internal_tag_size();
}
inline void BucketAttrQueryRsp::clear_tag() {
  tag_.Clear();
}
inline ::ClientCos::Tag* BucketAttrQueryRsp::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >*
BucketAttrQueryRsp::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrQueryRsp.tag)
  return &tag_;
}
inline const ::ClientCos::Tag& BucketAttrQueryRsp::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const ::ClientCos::Tag& BucketAttrQueryRsp::tag(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.tag)
  return _internal_tag(index);
}
inline ::ClientCos::Tag* BucketAttrQueryRsp::_internal_add_tag() {
  return tag_.Add();
}
inline ::ClientCos::Tag* BucketAttrQueryRsp::add_tag() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.tag)
  return _internal_add_tag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >&
BucketAttrQueryRsp::tag() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrQueryRsp.tag)
  return tag_;
}

// repeated .ClientCos.LFAttr lfattr = 14;
inline int BucketAttrQueryRsp::_internal_lfattr_size() const {
  return lfattr_.size();
}
inline int BucketAttrQueryRsp::lfattr_size() const {
  return _internal_lfattr_size();
}
inline void BucketAttrQueryRsp::clear_lfattr() {
  lfattr_.Clear();
}
inline ::ClientCos::LFAttr* BucketAttrQueryRsp::mutable_lfattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.lfattr)
  return lfattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >*
BucketAttrQueryRsp::mutable_lfattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.BucketAttrQueryRsp.lfattr)
  return &lfattr_;
}
inline const ::ClientCos::LFAttr& BucketAttrQueryRsp::_internal_lfattr(int index) const {
  return lfattr_.Get(index);
}
inline const ::ClientCos::LFAttr& BucketAttrQueryRsp::lfattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.lfattr)
  return _internal_lfattr(index);
}
inline ::ClientCos::LFAttr* BucketAttrQueryRsp::_internal_add_lfattr() {
  return lfattr_.Add();
}
inline ::ClientCos::LFAttr* BucketAttrQueryRsp::add_lfattr() {
  // @@protoc_insertion_point(field_add:ClientCos.BucketAttrQueryRsp.lfattr)
  return _internal_add_lfattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >&
BucketAttrQueryRsp::lfattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.BucketAttrQueryRsp.lfattr)
  return lfattr_;
}

// optional bool refer_able = 15;
inline bool BucketAttrQueryRsp::_internal_has_refer_able() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_refer_able() const {
  return _internal_has_refer_able();
}
inline void BucketAttrQueryRsp::clear_refer_able() {
  refer_able_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool BucketAttrQueryRsp::_internal_refer_able() const {
  return refer_able_;
}
inline bool BucketAttrQueryRsp::refer_able() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.refer_able)
  return _internal_refer_able();
}
inline void BucketAttrQueryRsp::_internal_set_refer_able(bool value) {
  _has_bits_[0] |= 0x00001000u;
  refer_able_ = value;
}
inline void BucketAttrQueryRsp::set_refer_able(bool value) {
  _internal_set_refer_able(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.refer_able)
}

// optional bool emptyreferconfig = 16;
inline bool BucketAttrQueryRsp::_internal_has_emptyreferconfig() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_emptyreferconfig() const {
  return _internal_has_emptyreferconfig();
}
inline void BucketAttrQueryRsp::clear_emptyreferconfig() {
  emptyreferconfig_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool BucketAttrQueryRsp::_internal_emptyreferconfig() const {
  return emptyreferconfig_;
}
inline bool BucketAttrQueryRsp::emptyreferconfig() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.emptyreferconfig)
  return _internal_emptyreferconfig();
}
inline void BucketAttrQueryRsp::_internal_set_emptyreferconfig(bool value) {
  _has_bits_[0] |= 0x00002000u;
  emptyreferconfig_ = value;
}
inline void BucketAttrQueryRsp::set_emptyreferconfig(bool value) {
  _internal_set_emptyreferconfig(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.emptyreferconfig)
}

// optional bool cname_able = 17;
inline bool BucketAttrQueryRsp::_internal_has_cname_able() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_cname_able() const {
  return _internal_has_cname_able();
}
inline void BucketAttrQueryRsp::clear_cname_able() {
  cname_able_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool BucketAttrQueryRsp::_internal_cname_able() const {
  return cname_able_;
}
inline bool BucketAttrQueryRsp::cname_able() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.cname_able)
  return _internal_cname_able();
}
inline void BucketAttrQueryRsp::_internal_set_cname_able(bool value) {
  _has_bits_[0] |= 0x00004000u;
  cname_able_ = value;
}
inline void BucketAttrQueryRsp::set_cname_able(bool value) {
  _internal_set_cname_able(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.cname_able)
}

// optional bool nofile = 18;
inline bool BucketAttrQueryRsp::_internal_has_nofile() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_nofile() const {
  return _internal_has_nofile();
}
inline void BucketAttrQueryRsp::clear_nofile() {
  nofile_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool BucketAttrQueryRsp::_internal_nofile() const {
  return nofile_;
}
inline bool BucketAttrQueryRsp::nofile() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.nofile)
  return _internal_nofile();
}
inline void BucketAttrQueryRsp::_internal_set_nofile(bool value) {
  _has_bits_[0] |= 0x00008000u;
  nofile_ = value;
}
inline void BucketAttrQueryRsp::set_nofile(bool value) {
  _internal_set_nofile(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.nofile)
}

// optional .ClientCos.WebsiteInfo websiteinfo = 19;
inline bool BucketAttrQueryRsp::_internal_has_websiteinfo() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || websiteinfo_ != nullptr);
  return value;
}
inline bool BucketAttrQueryRsp::has_websiteinfo() const {
  return _internal_has_websiteinfo();
}
inline void BucketAttrQueryRsp::clear_websiteinfo() {
  if (websiteinfo_ != nullptr) websiteinfo_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ClientCos::WebsiteInfo& BucketAttrQueryRsp::_internal_websiteinfo() const {
  const ::ClientCos::WebsiteInfo* p = websiteinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::WebsiteInfo&>(
      ::ClientCos::_WebsiteInfo_default_instance_);
}
inline const ::ClientCos::WebsiteInfo& BucketAttrQueryRsp::websiteinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.websiteinfo)
  return _internal_websiteinfo();
}
inline void BucketAttrQueryRsp::unsafe_arena_set_allocated_websiteinfo(
    ::ClientCos::WebsiteInfo* websiteinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(websiteinfo_);
  }
  websiteinfo_ = websiteinfo;
  if (websiteinfo) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.BucketAttrQueryRsp.websiteinfo)
}
inline ::ClientCos::WebsiteInfo* BucketAttrQueryRsp::release_websiteinfo() {
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::WebsiteInfo* temp = websiteinfo_;
  websiteinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::WebsiteInfo* BucketAttrQueryRsp::unsafe_arena_release_websiteinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryRsp.websiteinfo)
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::WebsiteInfo* temp = websiteinfo_;
  websiteinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::WebsiteInfo* BucketAttrQueryRsp::_internal_mutable_websiteinfo() {
  _has_bits_[0] |= 0x00000010u;
  if (websiteinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::WebsiteInfo>(GetArena());
    websiteinfo_ = p;
  }
  return websiteinfo_;
}
inline ::ClientCos::WebsiteInfo* BucketAttrQueryRsp::mutable_websiteinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.websiteinfo)
  return _internal_mutable_websiteinfo();
}
inline void BucketAttrQueryRsp::set_allocated_websiteinfo(::ClientCos::WebsiteInfo* websiteinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete websiteinfo_;
  }
  if (websiteinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(websiteinfo);
    if (message_arena != submessage_arena) {
      websiteinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, websiteinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  websiteinfo_ = websiteinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryRsp.websiteinfo)
}

// optional bool visit_v4 = 20;
inline bool BucketAttrQueryRsp::_internal_has_visit_v4() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_visit_v4() const {
  return _internal_has_visit_v4();
}
inline void BucketAttrQueryRsp::clear_visit_v4() {
  visit_v4_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool BucketAttrQueryRsp::_internal_visit_v4() const {
  return visit_v4_;
}
inline bool BucketAttrQueryRsp::visit_v4() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.visit_v4)
  return _internal_visit_v4();
}
inline void BucketAttrQueryRsp::_internal_set_visit_v4(bool value) {
  _has_bits_[0] |= 0x00010000u;
  visit_v4_ = value;
}
inline void BucketAttrQueryRsp::set_visit_v4(bool value) {
  _internal_set_visit_v4(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.visit_v4)
}

// optional bytes bucketUin = 21;
inline bool BucketAttrQueryRsp::_internal_has_bucketuin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_bucketuin() const {
  return _internal_has_bucketuin();
}
inline void BucketAttrQueryRsp::clear_bucketuin() {
  bucketuin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BucketAttrQueryRsp::bucketuin() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.bucketUin)
  return _internal_bucketuin();
}
inline void BucketAttrQueryRsp::set_bucketuin(const std::string& value) {
  _internal_set_bucketuin(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.bucketUin)
}
inline std::string* BucketAttrQueryRsp::mutable_bucketuin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.bucketUin)
  return _internal_mutable_bucketuin();
}
inline const std::string& BucketAttrQueryRsp::_internal_bucketuin() const {
  return bucketuin_.Get();
}
inline void BucketAttrQueryRsp::_internal_set_bucketuin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bucketuin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrQueryRsp::set_bucketuin(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bucketuin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrQueryRsp.bucketUin)
}
inline void BucketAttrQueryRsp::set_bucketuin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bucketuin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrQueryRsp.bucketUin)
}
inline void BucketAttrQueryRsp::set_bucketuin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bucketuin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrQueryRsp.bucketUin)
}
inline std::string* BucketAttrQueryRsp::_internal_mutable_bucketuin() {
  _has_bits_[0] |= 0x00000002u;
  return bucketuin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrQueryRsp::release_bucketuin() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryRsp.bucketUin)
  if (!_internal_has_bucketuin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bucketuin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrQueryRsp::set_allocated_bucketuin(std::string* bucketuin) {
  if (bucketuin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bucketuin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucketuin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryRsp.bucketUin)
}

// optional .ClientCos.NSlot nslot = 22;
inline bool BucketAttrQueryRsp::_internal_has_nslot() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_nslot() const {
  return _internal_has_nslot();
}
inline void BucketAttrQueryRsp::clear_nslot() {
  nslot_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::ClientCos::NSlot BucketAttrQueryRsp::_internal_nslot() const {
  return static_cast< ::ClientCos::NSlot >(nslot_);
}
inline ::ClientCos::NSlot BucketAttrQueryRsp::nslot() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.nslot)
  return _internal_nslot();
}
inline void BucketAttrQueryRsp::_internal_set_nslot(::ClientCos::NSlot value) {
  assert(::ClientCos::NSlot_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  nslot_ = value;
}
inline void BucketAttrQueryRsp::set_nslot(::ClientCos::NSlot value) {
  _internal_set_nslot(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.nslot)
}

// optional .ClientCos.LockInfo lockinfo = 23;
inline bool BucketAttrQueryRsp::_internal_has_lockinfo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || lockinfo_ != nullptr);
  return value;
}
inline bool BucketAttrQueryRsp::has_lockinfo() const {
  return _internal_has_lockinfo();
}
inline void BucketAttrQueryRsp::clear_lockinfo() {
  if (lockinfo_ != nullptr) lockinfo_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ClientCos::LockInfo& BucketAttrQueryRsp::_internal_lockinfo() const {
  const ::ClientCos::LockInfo* p = lockinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::LockInfo&>(
      ::ClientCos::_LockInfo_default_instance_);
}
inline const ::ClientCos::LockInfo& BucketAttrQueryRsp::lockinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.lockinfo)
  return _internal_lockinfo();
}
inline void BucketAttrQueryRsp::unsafe_arena_set_allocated_lockinfo(
    ::ClientCos::LockInfo* lockinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockinfo_);
  }
  lockinfo_ = lockinfo;
  if (lockinfo) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.BucketAttrQueryRsp.lockinfo)
}
inline ::ClientCos::LockInfo* BucketAttrQueryRsp::release_lockinfo() {
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::LockInfo* BucketAttrQueryRsp::unsafe_arena_release_lockinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryRsp.lockinfo)
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::LockInfo* BucketAttrQueryRsp::_internal_mutable_lockinfo() {
  _has_bits_[0] |= 0x00000020u;
  if (lockinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::LockInfo>(GetArena());
    lockinfo_ = p;
  }
  return lockinfo_;
}
inline ::ClientCos::LockInfo* BucketAttrQueryRsp::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.lockinfo)
  return _internal_mutable_lockinfo();
}
inline void BucketAttrQueryRsp::set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lockinfo_;
  }
  if (lockinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lockinfo);
    if (message_arena != submessage_arena) {
      lockinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  lockinfo_ = lockinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryRsp.lockinfo)
}

// optional bytes inventory = 24;
inline bool BucketAttrQueryRsp::_internal_has_inventory() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BucketAttrQueryRsp::has_inventory() const {
  return _internal_has_inventory();
}
inline void BucketAttrQueryRsp::clear_inventory() {
  inventory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BucketAttrQueryRsp::inventory() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.inventory)
  return _internal_inventory();
}
inline void BucketAttrQueryRsp::set_inventory(const std::string& value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketAttrQueryRsp.inventory)
}
inline std::string* BucketAttrQueryRsp::mutable_inventory() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.inventory)
  return _internal_mutable_inventory();
}
inline const std::string& BucketAttrQueryRsp::_internal_inventory() const {
  return inventory_.Get();
}
inline void BucketAttrQueryRsp::_internal_set_inventory(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAttrQueryRsp::set_inventory(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  inventory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketAttrQueryRsp.inventory)
}
inline void BucketAttrQueryRsp::set_inventory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketAttrQueryRsp.inventory)
}
inline void BucketAttrQueryRsp::set_inventory(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketAttrQueryRsp.inventory)
}
inline std::string* BucketAttrQueryRsp::_internal_mutable_inventory() {
  _has_bits_[0] |= 0x00000004u;
  return inventory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAttrQueryRsp::release_inventory() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryRsp.inventory)
  if (!_internal_has_inventory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return inventory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAttrQueryRsp::set_allocated_inventory(std::string* inventory) {
  if (inventory != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inventory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryRsp.inventory)
}

// optional .ClientCos.Migrateinfo migrateinfo = 25;
inline bool BucketAttrQueryRsp::_internal_has_migrateinfo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || migrateinfo_ != nullptr);
  return value;
}
inline bool BucketAttrQueryRsp::has_migrateinfo() const {
  return _internal_has_migrateinfo();
}
inline void BucketAttrQueryRsp::clear_migrateinfo() {
  if (migrateinfo_ != nullptr) migrateinfo_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ClientCos::Migrateinfo& BucketAttrQueryRsp::_internal_migrateinfo() const {
  const ::ClientCos::Migrateinfo* p = migrateinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::Migrateinfo&>(
      ::ClientCos::_Migrateinfo_default_instance_);
}
inline const ::ClientCos::Migrateinfo& BucketAttrQueryRsp::migrateinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketAttrQueryRsp.migrateinfo)
  return _internal_migrateinfo();
}
inline void BucketAttrQueryRsp::unsafe_arena_set_allocated_migrateinfo(
    ::ClientCos::Migrateinfo* migrateinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migrateinfo_);
  }
  migrateinfo_ = migrateinfo;
  if (migrateinfo) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.BucketAttrQueryRsp.migrateinfo)
}
inline ::ClientCos::Migrateinfo* BucketAttrQueryRsp::release_migrateinfo() {
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::Migrateinfo* temp = migrateinfo_;
  migrateinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::Migrateinfo* BucketAttrQueryRsp::unsafe_arena_release_migrateinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketAttrQueryRsp.migrateinfo)
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::Migrateinfo* temp = migrateinfo_;
  migrateinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::Migrateinfo* BucketAttrQueryRsp::_internal_mutable_migrateinfo() {
  _has_bits_[0] |= 0x00000040u;
  if (migrateinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::Migrateinfo>(GetArena());
    migrateinfo_ = p;
  }
  return migrateinfo_;
}
inline ::ClientCos::Migrateinfo* BucketAttrQueryRsp::mutable_migrateinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketAttrQueryRsp.migrateinfo)
  return _internal_mutable_migrateinfo();
}
inline void BucketAttrQueryRsp::set_allocated_migrateinfo(::ClientCos::Migrateinfo* migrateinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete migrateinfo_;
  }
  if (migrateinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(migrateinfo);
    if (message_arena != submessage_arena) {
      migrateinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrateinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  migrateinfo_ = migrateinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketAttrQueryRsp.migrateinfo)
}

// -------------------------------------------------------------------

// DirCreateReq

// required bytes path = 1;
inline bool DirCreateReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DirCreateReq::has_path() const {
  return _internal_has_path();
}
inline void DirCreateReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DirCreateReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.DirCreateReq.path)
  return _internal_path();
}
inline void DirCreateReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.DirCreateReq.path)
}
inline std::string* DirCreateReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DirCreateReq.path)
  return _internal_mutable_path();
}
inline const std::string& DirCreateReq::_internal_path() const {
  return path_.Get();
}
inline void DirCreateReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DirCreateReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.DirCreateReq.path)
}
inline void DirCreateReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.DirCreateReq.path)
}
inline void DirCreateReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.DirCreateReq.path)
}
inline std::string* DirCreateReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DirCreateReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.DirCreateReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirCreateReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DirCreateReq.path)
}

// optional bytes biz_attr = 2;
inline bool DirCreateReq::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DirCreateReq::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void DirCreateReq::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DirCreateReq::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.DirCreateReq.biz_attr)
  return _internal_biz_attr();
}
inline void DirCreateReq::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.DirCreateReq.biz_attr)
}
inline std::string* DirCreateReq::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DirCreateReq.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& DirCreateReq::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void DirCreateReq::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DirCreateReq::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.DirCreateReq.biz_attr)
}
inline void DirCreateReq::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.DirCreateReq.biz_attr)
}
inline void DirCreateReq::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.DirCreateReq.biz_attr)
}
inline std::string* DirCreateReq::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000002u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DirCreateReq::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.DirCreateReq.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirCreateReq::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DirCreateReq.biz_attr)
}

// -------------------------------------------------------------------

// DirCreateRsp

// required uint64 ctime = 1;
inline bool DirCreateRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DirCreateRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void DirCreateRsp::clear_ctime() {
  ctime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DirCreateRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DirCreateRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.DirCreateRsp.ctime)
  return _internal_ctime();
}
inline void DirCreateRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ctime_ = value;
}
inline void DirCreateRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.DirCreateRsp.ctime)
}

// optional .ClientCos.ExtraAttr extraattr = 2;
inline bool DirCreateRsp::_internal_has_extraattr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || extraattr_ != nullptr);
  return value;
}
inline bool DirCreateRsp::has_extraattr() const {
  return _internal_has_extraattr();
}
inline void DirCreateRsp::clear_extraattr() {
  if (extraattr_ != nullptr) extraattr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::ExtraAttr& DirCreateRsp::_internal_extraattr() const {
  const ::ClientCos::ExtraAttr* p = extraattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExtraAttr&>(
      ::ClientCos::_ExtraAttr_default_instance_);
}
inline const ::ClientCos::ExtraAttr& DirCreateRsp::extraattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.DirCreateRsp.extraattr)
  return _internal_extraattr();
}
inline void DirCreateRsp::unsafe_arena_set_allocated_extraattr(
    ::ClientCos::ExtraAttr* extraattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extraattr_);
  }
  extraattr_ = extraattr;
  if (extraattr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.DirCreateRsp.extraattr)
}
inline ::ClientCos::ExtraAttr* DirCreateRsp::release_extraattr() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExtraAttr* DirCreateRsp::unsafe_arena_release_extraattr() {
  // @@protoc_insertion_point(field_release:ClientCos.DirCreateRsp.extraattr)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ExtraAttr* DirCreateRsp::_internal_mutable_extraattr() {
  _has_bits_[0] |= 0x00000001u;
  if (extraattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExtraAttr>(GetArena());
    extraattr_ = p;
  }
  return extraattr_;
}
inline ::ClientCos::ExtraAttr* DirCreateRsp::mutable_extraattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DirCreateRsp.extraattr)
  return _internal_mutable_extraattr();
}
inline void DirCreateRsp::set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extraattr_;
  }
  if (extraattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extraattr);
    if (message_arena != submessage_arena) {
      extraattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extraattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extraattr_ = extraattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DirCreateRsp.extraattr)
}

// -------------------------------------------------------------------

// ObjAttrModifyReq

// required bytes path = 1;
inline bool ObjAttrModifyReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_path() const {
  return _internal_has_path();
}
inline void ObjAttrModifyReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjAttrModifyReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.path)
  return _internal_path();
}
inline void ObjAttrModifyReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.path)
}
inline std::string* ObjAttrModifyReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.path)
  return _internal_mutable_path();
}
inline const std::string& ObjAttrModifyReq::_internal_path() const {
  return path_.Get();
}
inline void ObjAttrModifyReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrModifyReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrModifyReq.path)
}
inline void ObjAttrModifyReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrModifyReq.path)
}
inline void ObjAttrModifyReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrModifyReq.path)
}
inline std::string* ObjAttrModifyReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrModifyReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrModifyReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrModifyReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrModifyReq.path)
}

// required uint32 flag = 2;
inline bool ObjAttrModifyReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_flag() const {
  return _internal_has_flag();
}
inline void ObjAttrModifyReq::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrModifyReq::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrModifyReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.flag)
  return _internal_flag();
}
inline void ObjAttrModifyReq::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  flag_ = value;
}
inline void ObjAttrModifyReq::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.flag)
}

// optional bytes biz_attr = 3;
inline bool ObjAttrModifyReq::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void ObjAttrModifyReq::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObjAttrModifyReq::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.biz_attr)
  return _internal_biz_attr();
}
inline void ObjAttrModifyReq::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.biz_attr)
}
inline std::string* ObjAttrModifyReq::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& ObjAttrModifyReq::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void ObjAttrModifyReq::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrModifyReq::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrModifyReq.biz_attr)
}
inline void ObjAttrModifyReq::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrModifyReq.biz_attr)
}
inline void ObjAttrModifyReq::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrModifyReq.biz_attr)
}
inline std::string* ObjAttrModifyReq::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000002u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrModifyReq::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrModifyReq.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrModifyReq::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrModifyReq.biz_attr)
}

// optional uint32 forbid = 4;
inline bool ObjAttrModifyReq::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_forbid() const {
  return _internal_has_forbid();
}
inline void ObjAttrModifyReq::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrModifyReq::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrModifyReq::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.forbid)
  return _internal_forbid();
}
inline void ObjAttrModifyReq::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  forbid_ = value;
}
inline void ObjAttrModifyReq::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.forbid)
}

// repeated .ClientCos.ReservedAttr reservedattr = 5;
inline int ObjAttrModifyReq::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int ObjAttrModifyReq::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void ObjAttrModifyReq::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* ObjAttrModifyReq::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
ObjAttrModifyReq::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjAttrModifyReq.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& ObjAttrModifyReq::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& ObjAttrModifyReq::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* ObjAttrModifyReq::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* ObjAttrModifyReq::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjAttrModifyReq.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
ObjAttrModifyReq::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjAttrModifyReq.reservedattr)
  return reservedattr_;
}

// repeated .ClientCos.CustomHeader customheader = 6;
inline int ObjAttrModifyReq::_internal_customheader_size() const {
  return customheader_.size();
}
inline int ObjAttrModifyReq::customheader_size() const {
  return _internal_customheader_size();
}
inline void ObjAttrModifyReq::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* ObjAttrModifyReq::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
ObjAttrModifyReq::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjAttrModifyReq.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& ObjAttrModifyReq::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& ObjAttrModifyReq::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* ObjAttrModifyReq::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* ObjAttrModifyReq::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjAttrModifyReq.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
ObjAttrModifyReq::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjAttrModifyReq.customheader)
  return customheader_;
}

// optional .ClientCos.Authority auth = 7;
inline bool ObjAttrModifyReq::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_auth() const {
  return _internal_has_auth();
}
inline void ObjAttrModifyReq::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::ClientCos::Authority ObjAttrModifyReq::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority ObjAttrModifyReq::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.auth)
  return _internal_auth();
}
inline void ObjAttrModifyReq::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  auth_ = value;
}
inline void ObjAttrModifyReq::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.auth)
}

// optional bytes real_sha = 8;
inline bool ObjAttrModifyReq::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void ObjAttrModifyReq::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ObjAttrModifyReq::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.real_sha)
  return _internal_real_sha();
}
inline void ObjAttrModifyReq::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.real_sha)
}
inline std::string* ObjAttrModifyReq::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& ObjAttrModifyReq::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void ObjAttrModifyReq::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrModifyReq::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrModifyReq.real_sha)
}
inline void ObjAttrModifyReq::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrModifyReq.real_sha)
}
inline void ObjAttrModifyReq::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrModifyReq.real_sha)
}
inline std::string* ObjAttrModifyReq::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000004u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrModifyReq::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrModifyReq.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrModifyReq::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrModifyReq.real_sha)
}

// optional bytes version = 9;
inline bool ObjAttrModifyReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_version() const {
  return _internal_has_version();
}
inline void ObjAttrModifyReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ObjAttrModifyReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.version)
  return _internal_version();
}
inline void ObjAttrModifyReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.version)
}
inline std::string* ObjAttrModifyReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.version)
  return _internal_mutable_version();
}
inline const std::string& ObjAttrModifyReq::_internal_version() const {
  return version_.Get();
}
inline void ObjAttrModifyReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrModifyReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrModifyReq.version)
}
inline void ObjAttrModifyReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrModifyReq.version)
}
inline void ObjAttrModifyReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrModifyReq.version)
}
inline std::string* ObjAttrModifyReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000008u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrModifyReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrModifyReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrModifyReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrModifyReq.version)
}

// optional bytes storagetype = 10;
inline bool ObjAttrModifyReq::_internal_has_storagetype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_storagetype() const {
  return _internal_has_storagetype();
}
inline void ObjAttrModifyReq::clear_storagetype() {
  storagetype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ObjAttrModifyReq::storagetype() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.storagetype)
  return _internal_storagetype();
}
inline void ObjAttrModifyReq::set_storagetype(const std::string& value) {
  _internal_set_storagetype(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.storagetype)
}
inline std::string* ObjAttrModifyReq::mutable_storagetype() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.storagetype)
  return _internal_mutable_storagetype();
}
inline const std::string& ObjAttrModifyReq::_internal_storagetype() const {
  return storagetype_.Get();
}
inline void ObjAttrModifyReq::_internal_set_storagetype(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrModifyReq::set_storagetype(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  storagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrModifyReq.storagetype)
}
inline void ObjAttrModifyReq::set_storagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrModifyReq.storagetype)
}
inline void ObjAttrModifyReq::set_storagetype(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrModifyReq.storagetype)
}
inline std::string* ObjAttrModifyReq::_internal_mutable_storagetype() {
  _has_bits_[0] |= 0x00000010u;
  return storagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrModifyReq::release_storagetype() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrModifyReq.storagetype)
  if (!_internal_has_storagetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return storagetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrModifyReq::set_allocated_storagetype(std::string* storagetype) {
  if (storagetype != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  storagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrModifyReq.storagetype)
}

// optional uint32 mtime = 11;
inline bool ObjAttrModifyReq::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_mtime() const {
  return _internal_has_mtime();
}
inline void ObjAttrModifyReq::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrModifyReq::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrModifyReq::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.mtime)
  return _internal_mtime();
}
inline void ObjAttrModifyReq::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  mtime_ = value;
}
inline void ObjAttrModifyReq::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.mtime)
}

// optional bytes sk = 12;
inline bool ObjAttrModifyReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObjAttrModifyReq::has_sk() const {
  return _internal_has_sk();
}
inline void ObjAttrModifyReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ObjAttrModifyReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyReq.sk)
  return _internal_sk();
}
inline void ObjAttrModifyReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrModifyReq.sk)
}
inline std::string* ObjAttrModifyReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& ObjAttrModifyReq::_internal_sk() const {
  return sk_.Get();
}
inline void ObjAttrModifyReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrModifyReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrModifyReq.sk)
}
inline void ObjAttrModifyReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrModifyReq.sk)
}
inline void ObjAttrModifyReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrModifyReq.sk)
}
inline std::string* ObjAttrModifyReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000020u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrModifyReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrModifyReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrModifyReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrModifyReq.sk)
}

// -------------------------------------------------------------------

// ObjAttrModifyRsp

// optional .ClientCos.ExtraAttr extraattr = 1;
inline bool ObjAttrModifyRsp::_internal_has_extraattr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || extraattr_ != nullptr);
  return value;
}
inline bool ObjAttrModifyRsp::has_extraattr() const {
  return _internal_has_extraattr();
}
inline void ObjAttrModifyRsp::clear_extraattr() {
  if (extraattr_ != nullptr) extraattr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::ExtraAttr& ObjAttrModifyRsp::_internal_extraattr() const {
  const ::ClientCos::ExtraAttr* p = extraattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExtraAttr&>(
      ::ClientCos::_ExtraAttr_default_instance_);
}
inline const ::ClientCos::ExtraAttr& ObjAttrModifyRsp::extraattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrModifyRsp.extraattr)
  return _internal_extraattr();
}
inline void ObjAttrModifyRsp::unsafe_arena_set_allocated_extraattr(
    ::ClientCos::ExtraAttr* extraattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extraattr_);
  }
  extraattr_ = extraattr;
  if (extraattr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjAttrModifyRsp.extraattr)
}
inline ::ClientCos::ExtraAttr* ObjAttrModifyRsp::release_extraattr() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExtraAttr* ObjAttrModifyRsp::unsafe_arena_release_extraattr() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrModifyRsp.extraattr)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ExtraAttr* ObjAttrModifyRsp::_internal_mutable_extraattr() {
  _has_bits_[0] |= 0x00000001u;
  if (extraattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExtraAttr>(GetArena());
    extraattr_ = p;
  }
  return extraattr_;
}
inline ::ClientCos::ExtraAttr* ObjAttrModifyRsp::mutable_extraattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrModifyRsp.extraattr)
  return _internal_mutable_extraattr();
}
inline void ObjAttrModifyRsp::set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extraattr_;
  }
  if (extraattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extraattr);
    if (message_arena != submessage_arena) {
      extraattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extraattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extraattr_ = extraattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrModifyRsp.extraattr)
}

// -------------------------------------------------------------------

// SpObjAttrModifyReq

// required bytes path = 1;
inline bool SpObjAttrModifyReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_path() const {
  return _internal_has_path();
}
inline void SpObjAttrModifyReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpObjAttrModifyReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.path)
  return _internal_path();
}
inline void SpObjAttrModifyReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.path)
}
inline std::string* SpObjAttrModifyReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.path)
  return _internal_mutable_path();
}
inline const std::string& SpObjAttrModifyReq::_internal_path() const {
  return path_.Get();
}
inline void SpObjAttrModifyReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrModifyReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrModifyReq.path)
}
inline void SpObjAttrModifyReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrModifyReq.path)
}
inline void SpObjAttrModifyReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrModifyReq.path)
}
inline std::string* SpObjAttrModifyReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrModifyReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrModifyReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrModifyReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrModifyReq.path)
}

// required uint32 flag = 2;
inline bool SpObjAttrModifyReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_flag() const {
  return _internal_has_flag();
}
inline void SpObjAttrModifyReq::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.flag)
  return _internal_flag();
}
inline void SpObjAttrModifyReq::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  flag_ = value;
}
inline void SpObjAttrModifyReq::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.flag)
}

// required bytes sk = 3;
inline bool SpObjAttrModifyReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_sk() const {
  return _internal_has_sk();
}
inline void SpObjAttrModifyReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpObjAttrModifyReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.sk)
  return _internal_sk();
}
inline void SpObjAttrModifyReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.sk)
}
inline std::string* SpObjAttrModifyReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& SpObjAttrModifyReq::_internal_sk() const {
  return sk_.Get();
}
inline void SpObjAttrModifyReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrModifyReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrModifyReq.sk)
}
inline void SpObjAttrModifyReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrModifyReq.sk)
}
inline void SpObjAttrModifyReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrModifyReq.sk)
}
inline std::string* SpObjAttrModifyReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000002u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrModifyReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrModifyReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrModifyReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrModifyReq.sk)
}

// optional bytes version = 4;
inline bool SpObjAttrModifyReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_version() const {
  return _internal_has_version();
}
inline void SpObjAttrModifyReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SpObjAttrModifyReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.version)
  return _internal_version();
}
inline void SpObjAttrModifyReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.version)
}
inline std::string* SpObjAttrModifyReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.version)
  return _internal_mutable_version();
}
inline const std::string& SpObjAttrModifyReq::_internal_version() const {
  return version_.Get();
}
inline void SpObjAttrModifyReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrModifyReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrModifyReq.version)
}
inline void SpObjAttrModifyReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrModifyReq.version)
}
inline void SpObjAttrModifyReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrModifyReq.version)
}
inline std::string* SpObjAttrModifyReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrModifyReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrModifyReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrModifyReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrModifyReq.version)
}

// optional bytes biz_attr = 5;
inline bool SpObjAttrModifyReq::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void SpObjAttrModifyReq::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SpObjAttrModifyReq::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.biz_attr)
  return _internal_biz_attr();
}
inline void SpObjAttrModifyReq::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.biz_attr)
}
inline std::string* SpObjAttrModifyReq::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& SpObjAttrModifyReq::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void SpObjAttrModifyReq::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrModifyReq::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrModifyReq.biz_attr)
}
inline void SpObjAttrModifyReq::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrModifyReq.biz_attr)
}
inline void SpObjAttrModifyReq::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrModifyReq.biz_attr)
}
inline std::string* SpObjAttrModifyReq::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000008u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrModifyReq::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrModifyReq.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrModifyReq::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrModifyReq.biz_attr)
}

// optional uint32 ctime = 6 [default = 0];
inline bool SpObjAttrModifyReq::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_ctime() const {
  return _internal_has_ctime();
}
inline void SpObjAttrModifyReq::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.ctime)
  return _internal_ctime();
}
inline void SpObjAttrModifyReq::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ctime_ = value;
}
inline void SpObjAttrModifyReq::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.ctime)
}

// optional uint32 mtime = 7 [default = 0];
inline bool SpObjAttrModifyReq::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_mtime() const {
  return _internal_has_mtime();
}
inline void SpObjAttrModifyReq::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.mtime)
  return _internal_mtime();
}
inline void SpObjAttrModifyReq::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  mtime_ = value;
}
inline void SpObjAttrModifyReq::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.mtime)
}

// optional uint32 forbid = 8;
inline bool SpObjAttrModifyReq::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_forbid() const {
  return _internal_has_forbid();
}
inline void SpObjAttrModifyReq::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrModifyReq::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.forbid)
  return _internal_forbid();
}
inline void SpObjAttrModifyReq::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  forbid_ = value;
}
inline void SpObjAttrModifyReq::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.forbid)
}

// repeated .ClientCos.ReservedAttr reservedattr = 9;
inline int SpObjAttrModifyReq::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int SpObjAttrModifyReq::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void SpObjAttrModifyReq::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* SpObjAttrModifyReq::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
SpObjAttrModifyReq::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrModifyReq.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& SpObjAttrModifyReq::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& SpObjAttrModifyReq::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* SpObjAttrModifyReq::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* SpObjAttrModifyReq::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrModifyReq.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
SpObjAttrModifyReq::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrModifyReq.reservedattr)
  return reservedattr_;
}

// optional .ClientCos.Authority auth = 10;
inline bool SpObjAttrModifyReq::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_auth() const {
  return _internal_has_auth();
}
inline void SpObjAttrModifyReq::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::ClientCos::Authority SpObjAttrModifyReq::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority SpObjAttrModifyReq::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.auth)
  return _internal_auth();
}
inline void SpObjAttrModifyReq::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  auth_ = value;
}
inline void SpObjAttrModifyReq::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.auth)
}

// repeated .ClientCos.CustomHeader customheader = 11;
inline int SpObjAttrModifyReq::_internal_customheader_size() const {
  return customheader_.size();
}
inline int SpObjAttrModifyReq::customheader_size() const {
  return _internal_customheader_size();
}
inline void SpObjAttrModifyReq::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* SpObjAttrModifyReq::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
SpObjAttrModifyReq::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrModifyReq.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& SpObjAttrModifyReq::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& SpObjAttrModifyReq::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* SpObjAttrModifyReq::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* SpObjAttrModifyReq::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrModifyReq.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
SpObjAttrModifyReq::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrModifyReq.customheader)
  return customheader_;
}

// repeated .ClientCos.CustomHeader customheader_plat = 12;
inline int SpObjAttrModifyReq::_internal_customheader_plat_size() const {
  return customheader_plat_.size();
}
inline int SpObjAttrModifyReq::customheader_plat_size() const {
  return _internal_customheader_plat_size();
}
inline void SpObjAttrModifyReq::clear_customheader_plat() {
  customheader_plat_.Clear();
}
inline ::ClientCos::CustomHeader* SpObjAttrModifyReq::mutable_customheader_plat(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.customheader_plat)
  return customheader_plat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
SpObjAttrModifyReq::mutable_customheader_plat() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrModifyReq.customheader_plat)
  return &customheader_plat_;
}
inline const ::ClientCos::CustomHeader& SpObjAttrModifyReq::_internal_customheader_plat(int index) const {
  return customheader_plat_.Get(index);
}
inline const ::ClientCos::CustomHeader& SpObjAttrModifyReq::customheader_plat(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.customheader_plat)
  return _internal_customheader_plat(index);
}
inline ::ClientCos::CustomHeader* SpObjAttrModifyReq::_internal_add_customheader_plat() {
  return customheader_plat_.Add();
}
inline ::ClientCos::CustomHeader* SpObjAttrModifyReq::add_customheader_plat() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrModifyReq.customheader_plat)
  return _internal_add_customheader_plat();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
SpObjAttrModifyReq::customheader_plat() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrModifyReq.customheader_plat)
  return customheader_plat_;
}

// optional bytes real_sha = 13;
inline bool SpObjAttrModifyReq::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void SpObjAttrModifyReq::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SpObjAttrModifyReq::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.real_sha)
  return _internal_real_sha();
}
inline void SpObjAttrModifyReq::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.real_sha)
}
inline std::string* SpObjAttrModifyReq::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& SpObjAttrModifyReq::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void SpObjAttrModifyReq::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrModifyReq::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrModifyReq.real_sha)
}
inline void SpObjAttrModifyReq::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrModifyReq.real_sha)
}
inline void SpObjAttrModifyReq::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrModifyReq.real_sha)
}
inline std::string* SpObjAttrModifyReq::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000010u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrModifyReq::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrModifyReq.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrModifyReq::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrModifyReq.real_sha)
}

// optional bytes storage_type = 14;
inline bool SpObjAttrModifyReq::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpObjAttrModifyReq::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void SpObjAttrModifyReq::clear_storage_type() {
  storage_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SpObjAttrModifyReq::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.storage_type)
  return _internal_storage_type();
}
inline void SpObjAttrModifyReq::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrModifyReq.storage_type)
}
inline std::string* SpObjAttrModifyReq::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& SpObjAttrModifyReq::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void SpObjAttrModifyReq::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrModifyReq::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrModifyReq.storage_type)
}
inline void SpObjAttrModifyReq::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrModifyReq.storage_type)
}
inline void SpObjAttrModifyReq::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrModifyReq.storage_type)
}
inline std::string* SpObjAttrModifyReq::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000020u;
  return storage_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrModifyReq::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrModifyReq.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return storage_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrModifyReq::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  storage_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrModifyReq.storage_type)
}

// repeated .ClientCos.ObjTag taglist = 15;
inline int SpObjAttrModifyReq::_internal_taglist_size() const {
  return taglist_.size();
}
inline int SpObjAttrModifyReq::taglist_size() const {
  return _internal_taglist_size();
}
inline void SpObjAttrModifyReq::clear_taglist() {
  taglist_.Clear();
}
inline ::ClientCos::ObjTag* SpObjAttrModifyReq::mutable_taglist(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.taglist)
  return taglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
SpObjAttrModifyReq::mutable_taglist() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrModifyReq.taglist)
  return &taglist_;
}
inline const ::ClientCos::ObjTag& SpObjAttrModifyReq::_internal_taglist(int index) const {
  return taglist_.Get(index);
}
inline const ::ClientCos::ObjTag& SpObjAttrModifyReq::taglist(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.taglist)
  return _internal_taglist(index);
}
inline ::ClientCos::ObjTag* SpObjAttrModifyReq::_internal_add_taglist() {
  return taglist_.Add();
}
inline ::ClientCos::ObjTag* SpObjAttrModifyReq::add_taglist() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrModifyReq.taglist)
  return _internal_add_taglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
SpObjAttrModifyReq::taglist() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrModifyReq.taglist)
  return taglist_;
}

// optional .ClientCos.ObjExpireAttr objexpireattr = 16;
inline bool SpObjAttrModifyReq::_internal_has_objexpireattr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || objexpireattr_ != nullptr);
  return value;
}
inline bool SpObjAttrModifyReq::has_objexpireattr() const {
  return _internal_has_objexpireattr();
}
inline void SpObjAttrModifyReq::clear_objexpireattr() {
  if (objexpireattr_ != nullptr) objexpireattr_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ClientCos::ObjExpireAttr& SpObjAttrModifyReq::_internal_objexpireattr() const {
  const ::ClientCos::ObjExpireAttr* p = objexpireattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjExpireAttr&>(
      ::ClientCos::_ObjExpireAttr_default_instance_);
}
inline const ::ClientCos::ObjExpireAttr& SpObjAttrModifyReq::objexpireattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrModifyReq.objexpireattr)
  return _internal_objexpireattr();
}
inline void SpObjAttrModifyReq::unsafe_arena_set_allocated_objexpireattr(
    ::ClientCos::ObjExpireAttr* objexpireattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objexpireattr_);
  }
  objexpireattr_ = objexpireattr;
  if (objexpireattr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SpObjAttrModifyReq.objexpireattr)
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrModifyReq::release_objexpireattr() {
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrModifyReq::unsafe_arena_release_objexpireattr() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrModifyReq.objexpireattr)
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrModifyReq::_internal_mutable_objexpireattr() {
  _has_bits_[0] |= 0x00000040u;
  if (objexpireattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjExpireAttr>(GetArena());
    objexpireattr_ = p;
  }
  return objexpireattr_;
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrModifyReq::mutable_objexpireattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrModifyReq.objexpireattr)
  return _internal_mutable_objexpireattr();
}
inline void SpObjAttrModifyReq::set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objexpireattr_;
  }
  if (objexpireattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objexpireattr);
    if (message_arena != submessage_arena) {
      objexpireattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objexpireattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  objexpireattr_ = objexpireattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrModifyReq.objexpireattr)
}

// -------------------------------------------------------------------

// SpObjAttrModifyRsp

// -------------------------------------------------------------------

// ObjAttrQueryReq

// optional bytes path = 1;
inline bool ObjAttrQueryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjAttrQueryReq::has_path() const {
  return _internal_has_path();
}
inline void ObjAttrQueryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjAttrQueryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryReq.path)
  return _internal_path();
}
inline void ObjAttrQueryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryReq.path)
}
inline std::string* ObjAttrQueryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryReq.path)
  return _internal_mutable_path();
}
inline const std::string& ObjAttrQueryReq::_internal_path() const {
  return path_.Get();
}
inline void ObjAttrQueryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryReq.path)
}
inline void ObjAttrQueryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryReq.path)
}
inline void ObjAttrQueryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryReq.path)
}
inline std::string* ObjAttrQueryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryReq.path)
}

// optional bytes version = 2;
inline bool ObjAttrQueryReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjAttrQueryReq::has_version() const {
  return _internal_has_version();
}
inline void ObjAttrQueryReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObjAttrQueryReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryReq.version)
  return _internal_version();
}
inline void ObjAttrQueryReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryReq.version)
}
inline std::string* ObjAttrQueryReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryReq.version)
  return _internal_mutable_version();
}
inline const std::string& ObjAttrQueryReq::_internal_version() const {
  return version_.Get();
}
inline void ObjAttrQueryReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryReq.version)
}
inline void ObjAttrQueryReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryReq.version)
}
inline void ObjAttrQueryReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryReq.version)
}
inline std::string* ObjAttrQueryReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryReq.version)
}

// -------------------------------------------------------------------

// ObjAttrQueryRsp

// required bytes biz_attr = 1 [default = ""];
inline bool ObjAttrQueryRsp::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void ObjAttrQueryRsp::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjAttrQueryRsp::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.biz_attr)
  return _internal_biz_attr();
}
inline void ObjAttrQueryRsp::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.biz_attr)
}
inline std::string* ObjAttrQueryRsp::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& ObjAttrQueryRsp::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void ObjAttrQueryRsp::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryRsp::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryRsp.biz_attr)
}
inline void ObjAttrQueryRsp::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryRsp.biz_attr)
}
inline void ObjAttrQueryRsp::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryRsp.biz_attr)
}
inline std::string* ObjAttrQueryRsp::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000001u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryRsp::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryRsp::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.biz_attr)
}

// required uint32 ctime = 2 [default = 0];
inline bool ObjAttrQueryRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void ObjAttrQueryRsp::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.ctime)
  return _internal_ctime();
}
inline void ObjAttrQueryRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  ctime_ = value;
}
inline void ObjAttrQueryRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.ctime)
}

// required uint32 mtime = 3 [default = 0];
inline bool ObjAttrQueryRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void ObjAttrQueryRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.mtime)
  return _internal_mtime();
}
inline void ObjAttrQueryRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  mtime_ = value;
}
inline void ObjAttrQueryRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.mtime)
}

// optional uint64 file_size = 4;
inline bool ObjAttrQueryRsp::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_file_size() const {
  return _internal_has_file_size();
}
inline void ObjAttrQueryRsp::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjAttrQueryRsp::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjAttrQueryRsp::file_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.file_size)
  return _internal_file_size();
}
inline void ObjAttrQueryRsp::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  file_size_ = value;
}
inline void ObjAttrQueryRsp::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.file_size)
}

// optional uint64 file_length = 5;
inline bool ObjAttrQueryRsp::_internal_has_file_length() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_file_length() const {
  return _internal_has_file_length();
}
inline void ObjAttrQueryRsp::clear_file_length() {
  file_length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjAttrQueryRsp::_internal_file_length() const {
  return file_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjAttrQueryRsp::file_length() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.file_length)
  return _internal_file_length();
}
inline void ObjAttrQueryRsp::_internal_set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  file_length_ = value;
}
inline void ObjAttrQueryRsp::set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_length(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.file_length)
}

// optional bytes sha = 6;
inline bool ObjAttrQueryRsp::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_sha() const {
  return _internal_has_sha();
}
inline void ObjAttrQueryRsp::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObjAttrQueryRsp::sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.sha)
  return _internal_sha();
}
inline void ObjAttrQueryRsp::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.sha)
}
inline std::string* ObjAttrQueryRsp::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.sha)
  return _internal_mutable_sha();
}
inline const std::string& ObjAttrQueryRsp::_internal_sha() const {
  return sha_.Get();
}
inline void ObjAttrQueryRsp::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryRsp::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryRsp.sha)
}
inline void ObjAttrQueryRsp::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryRsp.sha)
}
inline void ObjAttrQueryRsp::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryRsp.sha)
}
inline std::string* ObjAttrQueryRsp::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000002u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryRsp::release_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryRsp::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.sha)
}

// optional uint32 forbid = 7;
inline bool ObjAttrQueryRsp::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_forbid() const {
  return _internal_has_forbid();
}
inline void ObjAttrQueryRsp::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.forbid)
  return _internal_forbid();
}
inline void ObjAttrQueryRsp::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  forbid_ = value;
}
inline void ObjAttrQueryRsp::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.forbid)
}

// repeated .ClientCos.ReservedAttr reservedattr = 8;
inline int ObjAttrQueryRsp::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int ObjAttrQueryRsp::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void ObjAttrQueryRsp::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* ObjAttrQueryRsp::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
ObjAttrQueryRsp::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjAttrQueryRsp.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& ObjAttrQueryRsp::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& ObjAttrQueryRsp::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* ObjAttrQueryRsp::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* ObjAttrQueryRsp::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjAttrQueryRsp.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
ObjAttrQueryRsp::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjAttrQueryRsp.reservedattr)
  return reservedattr_;
}

// optional .ClientCos.Authority auth = 9;
inline bool ObjAttrQueryRsp::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_auth() const {
  return _internal_has_auth();
}
inline void ObjAttrQueryRsp::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::ClientCos::Authority ObjAttrQueryRsp::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority ObjAttrQueryRsp::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.auth)
  return _internal_auth();
}
inline void ObjAttrQueryRsp::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  auth_ = value;
}
inline void ObjAttrQueryRsp::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.auth)
}

// repeated .ClientCos.CustomHeader customheader = 10;
inline int ObjAttrQueryRsp::_internal_customheader_size() const {
  return customheader_.size();
}
inline int ObjAttrQueryRsp::customheader_size() const {
  return _internal_customheader_size();
}
inline void ObjAttrQueryRsp::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* ObjAttrQueryRsp::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
ObjAttrQueryRsp::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjAttrQueryRsp.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& ObjAttrQueryRsp::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& ObjAttrQueryRsp::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* ObjAttrQueryRsp::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* ObjAttrQueryRsp::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjAttrQueryRsp.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
ObjAttrQueryRsp::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjAttrQueryRsp.customheader)
  return customheader_;
}

// optional bytes real_sha = 11;
inline bool ObjAttrQueryRsp::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void ObjAttrQueryRsp::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ObjAttrQueryRsp::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.real_sha)
  return _internal_real_sha();
}
inline void ObjAttrQueryRsp::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.real_sha)
}
inline std::string* ObjAttrQueryRsp::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& ObjAttrQueryRsp::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void ObjAttrQueryRsp::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryRsp::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryRsp.real_sha)
}
inline void ObjAttrQueryRsp::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryRsp.real_sha)
}
inline void ObjAttrQueryRsp::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryRsp.real_sha)
}
inline std::string* ObjAttrQueryRsp::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000004u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryRsp::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryRsp::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.real_sha)
}

// optional uint32 slicesize = 12;
inline bool ObjAttrQueryRsp::_internal_has_slicesize() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_slicesize() const {
  return _internal_has_slicesize();
}
inline void ObjAttrQueryRsp::clear_slicesize() {
  slicesize_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::_internal_slicesize() const {
  return slicesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::slicesize() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.slicesize)
  return _internal_slicesize();
}
inline void ObjAttrQueryRsp::_internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  slicesize_ = value;
}
inline void ObjAttrQueryRsp::set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slicesize(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.slicesize)
}

// optional uint32 type = 13;
inline bool ObjAttrQueryRsp::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_type() const {
  return _internal_has_type();
}
inline void ObjAttrQueryRsp::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::type() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.type)
  return _internal_type();
}
inline void ObjAttrQueryRsp::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  type_ = value;
}
inline void ObjAttrQueryRsp::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.type)
}

// optional bytes storage_type = 14;
inline bool ObjAttrQueryRsp::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void ObjAttrQueryRsp::clear_storage_type() {
  storage_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ObjAttrQueryRsp::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.storage_type)
  return _internal_storage_type();
}
inline void ObjAttrQueryRsp::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.storage_type)
}
inline std::string* ObjAttrQueryRsp::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& ObjAttrQueryRsp::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void ObjAttrQueryRsp::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryRsp::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryRsp.storage_type)
}
inline void ObjAttrQueryRsp::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryRsp.storage_type)
}
inline void ObjAttrQueryRsp::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryRsp.storage_type)
}
inline std::string* ObjAttrQueryRsp::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000008u;
  return storage_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryRsp::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return storage_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryRsp::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  storage_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.storage_type)
}

// optional bytes version = 15;
inline bool ObjAttrQueryRsp::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_version() const {
  return _internal_has_version();
}
inline void ObjAttrQueryRsp::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ObjAttrQueryRsp::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.version)
  return _internal_version();
}
inline void ObjAttrQueryRsp::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.version)
}
inline std::string* ObjAttrQueryRsp::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.version)
  return _internal_mutable_version();
}
inline const std::string& ObjAttrQueryRsp::_internal_version() const {
  return version_.Get();
}
inline void ObjAttrQueryRsp::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryRsp::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryRsp.version)
}
inline void ObjAttrQueryRsp::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryRsp.version)
}
inline void ObjAttrQueryRsp::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryRsp.version)
}
inline std::string* ObjAttrQueryRsp::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000010u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryRsp::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryRsp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.version)
}

// optional bool delete_marker = 16;
inline bool ObjAttrQueryRsp::_internal_has_delete_marker() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_delete_marker() const {
  return _internal_has_delete_marker();
}
inline void ObjAttrQueryRsp::clear_delete_marker() {
  delete_marker_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ObjAttrQueryRsp::_internal_delete_marker() const {
  return delete_marker_;
}
inline bool ObjAttrQueryRsp::delete_marker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.delete_marker)
  return _internal_delete_marker();
}
inline void ObjAttrQueryRsp::_internal_set_delete_marker(bool value) {
  _has_bits_[0] |= 0x00100000u;
  delete_marker_ = value;
}
inline void ObjAttrQueryRsp::set_delete_marker(bool value) {
  _internal_set_delete_marker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.delete_marker)
}

// optional bool islatest = 17;
inline bool ObjAttrQueryRsp::_internal_has_islatest() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_islatest() const {
  return _internal_has_islatest();
}
inline void ObjAttrQueryRsp::clear_islatest() {
  islatest_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ObjAttrQueryRsp::_internal_islatest() const {
  return islatest_;
}
inline bool ObjAttrQueryRsp::islatest() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.islatest)
  return _internal_islatest();
}
inline void ObjAttrQueryRsp::_internal_set_islatest(bool value) {
  _has_bits_[0] |= 0x00200000u;
  islatest_ = value;
}
inline void ObjAttrQueryRsp::set_islatest(bool value) {
  _internal_set_islatest(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.islatest)
}

// optional bytes upload_source = 18;
inline bool ObjAttrQueryRsp::_internal_has_upload_source() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_upload_source() const {
  return _internal_has_upload_source();
}
inline void ObjAttrQueryRsp::clear_upload_source() {
  upload_source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ObjAttrQueryRsp::upload_source() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.upload_source)
  return _internal_upload_source();
}
inline void ObjAttrQueryRsp::set_upload_source(const std::string& value) {
  _internal_set_upload_source(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.upload_source)
}
inline std::string* ObjAttrQueryRsp::mutable_upload_source() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.upload_source)
  return _internal_mutable_upload_source();
}
inline const std::string& ObjAttrQueryRsp::_internal_upload_source() const {
  return upload_source_.Get();
}
inline void ObjAttrQueryRsp::_internal_set_upload_source(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryRsp::set_upload_source(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryRsp.upload_source)
}
inline void ObjAttrQueryRsp::set_upload_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryRsp.upload_source)
}
inline void ObjAttrQueryRsp::set_upload_source(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryRsp.upload_source)
}
inline std::string* ObjAttrQueryRsp::_internal_mutable_upload_source() {
  _has_bits_[0] |= 0x00000020u;
  return upload_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryRsp::release_upload_source() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.upload_source)
  if (!_internal_has_upload_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return upload_source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryRsp::set_allocated_upload_source(std::string* upload_source) {
  if (upload_source != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  upload_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.upload_source)
}

// optional .ClientCos.CasInfo casinfo = 19;
inline bool ObjAttrQueryRsp::_internal_has_casinfo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || casinfo_ != nullptr);
  return value;
}
inline bool ObjAttrQueryRsp::has_casinfo() const {
  return _internal_has_casinfo();
}
inline void ObjAttrQueryRsp::clear_casinfo() {
  if (casinfo_ != nullptr) casinfo_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ClientCos::CasInfo& ObjAttrQueryRsp::_internal_casinfo() const {
  const ::ClientCos::CasInfo* p = casinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasInfo&>(
      ::ClientCos::_CasInfo_default_instance_);
}
inline const ::ClientCos::CasInfo& ObjAttrQueryRsp::casinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.casinfo)
  return _internal_casinfo();
}
inline void ObjAttrQueryRsp::unsafe_arena_set_allocated_casinfo(
    ::ClientCos::CasInfo* casinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casinfo_);
  }
  casinfo_ = casinfo;
  if (casinfo) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjAttrQueryRsp.casinfo)
}
inline ::ClientCos::CasInfo* ObjAttrQueryRsp::release_casinfo() {
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasInfo* ObjAttrQueryRsp::unsafe_arena_release_casinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.casinfo)
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::CasInfo* ObjAttrQueryRsp::_internal_mutable_casinfo() {
  _has_bits_[0] |= 0x00000080u;
  if (casinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasInfo>(GetArena());
    casinfo_ = p;
  }
  return casinfo_;
}
inline ::ClientCos::CasInfo* ObjAttrQueryRsp::mutable_casinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.casinfo)
  return _internal_mutable_casinfo();
}
inline void ObjAttrQueryRsp::set_allocated_casinfo(::ClientCos::CasInfo* casinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casinfo_;
  }
  if (casinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casinfo);
    if (message_arena != submessage_arena) {
      casinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  casinfo_ = casinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.casinfo)
}

// optional .ClientCos.SseInfo sseinfo = 20;
inline bool ObjAttrQueryRsp::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool ObjAttrQueryRsp::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void ObjAttrQueryRsp::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ClientCos::SseInfo& ObjAttrQueryRsp::_internal_sseinfo() const {
  const ::ClientCos::SseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SseInfo&>(
      ::ClientCos::_SseInfo_default_instance_);
}
inline const ::ClientCos::SseInfo& ObjAttrQueryRsp::sseinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.sseinfo)
  return _internal_sseinfo();
}
inline void ObjAttrQueryRsp::unsafe_arena_set_allocated_sseinfo(
    ::ClientCos::SseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjAttrQueryRsp.sseinfo)
}
inline ::ClientCos::SseInfo* ObjAttrQueryRsp::release_sseinfo() {
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SseInfo* ObjAttrQueryRsp::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.sseinfo)
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::SseInfo* ObjAttrQueryRsp::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000100u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::ClientCos::SseInfo* ObjAttrQueryRsp::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void ObjAttrQueryRsp::set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.sseinfo)
}

// optional uint32 tagnum = 21;
inline bool ObjAttrQueryRsp::_internal_has_tagnum() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_tagnum() const {
  return _internal_has_tagnum();
}
inline void ObjAttrQueryRsp::clear_tagnum() {
  tagnum_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::_internal_tagnum() const {
  return tagnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjAttrQueryRsp::tagnum() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.tagnum)
  return _internal_tagnum();
}
inline void ObjAttrQueryRsp::_internal_set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  tagnum_ = value;
}
inline void ObjAttrQueryRsp::set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tagnum(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.tagnum)
}

// optional .ClientCos.ObjExpireAttr objexpireattr = 22;
inline bool ObjAttrQueryRsp::_internal_has_objexpireattr() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || objexpireattr_ != nullptr);
  return value;
}
inline bool ObjAttrQueryRsp::has_objexpireattr() const {
  return _internal_has_objexpireattr();
}
inline void ObjAttrQueryRsp::clear_objexpireattr() {
  if (objexpireattr_ != nullptr) objexpireattr_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ClientCos::ObjExpireAttr& ObjAttrQueryRsp::_internal_objexpireattr() const {
  const ::ClientCos::ObjExpireAttr* p = objexpireattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjExpireAttr&>(
      ::ClientCos::_ObjExpireAttr_default_instance_);
}
inline const ::ClientCos::ObjExpireAttr& ObjAttrQueryRsp::objexpireattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.objexpireattr)
  return _internal_objexpireattr();
}
inline void ObjAttrQueryRsp::unsafe_arena_set_allocated_objexpireattr(
    ::ClientCos::ObjExpireAttr* objexpireattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objexpireattr_);
  }
  objexpireattr_ = objexpireattr;
  if (objexpireattr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjAttrQueryRsp.objexpireattr)
}
inline ::ClientCos::ObjExpireAttr* ObjAttrQueryRsp::release_objexpireattr() {
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjExpireAttr* ObjAttrQueryRsp::unsafe_arena_release_objexpireattr() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.objexpireattr)
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjExpireAttr* ObjAttrQueryRsp::_internal_mutable_objexpireattr() {
  _has_bits_[0] |= 0x00000200u;
  if (objexpireattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjExpireAttr>(GetArena());
    objexpireattr_ = p;
  }
  return objexpireattr_;
}
inline ::ClientCos::ObjExpireAttr* ObjAttrQueryRsp::mutable_objexpireattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.objexpireattr)
  return _internal_mutable_objexpireattr();
}
inline void ObjAttrQueryRsp::set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objexpireattr_;
  }
  if (objexpireattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objexpireattr);
    if (message_arena != submessage_arena) {
      objexpireattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objexpireattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  objexpireattr_ = objexpireattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.objexpireattr)
}

// repeated .ClientCos.ObjTag taglist = 23;
inline int ObjAttrQueryRsp::_internal_taglist_size() const {
  return taglist_.size();
}
inline int ObjAttrQueryRsp::taglist_size() const {
  return _internal_taglist_size();
}
inline void ObjAttrQueryRsp::clear_taglist() {
  taglist_.Clear();
}
inline ::ClientCos::ObjTag* ObjAttrQueryRsp::mutable_taglist(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.taglist)
  return taglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
ObjAttrQueryRsp::mutable_taglist() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjAttrQueryRsp.taglist)
  return &taglist_;
}
inline const ::ClientCos::ObjTag& ObjAttrQueryRsp::_internal_taglist(int index) const {
  return taglist_.Get(index);
}
inline const ::ClientCos::ObjTag& ObjAttrQueryRsp::taglist(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.taglist)
  return _internal_taglist(index);
}
inline ::ClientCos::ObjTag* ObjAttrQueryRsp::_internal_add_taglist() {
  return taglist_.Add();
}
inline ::ClientCos::ObjTag* ObjAttrQueryRsp::add_taglist() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjAttrQueryRsp.taglist)
  return _internal_add_taglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
ObjAttrQueryRsp::taglist() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjAttrQueryRsp.taglist)
  return taglist_;
}

// optional string fast_upload_key = 24;
inline bool ObjAttrQueryRsp::_internal_has_fast_upload_key() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_fast_upload_key() const {
  return _internal_has_fast_upload_key();
}
inline void ObjAttrQueryRsp::clear_fast_upload_key() {
  fast_upload_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ObjAttrQueryRsp::fast_upload_key() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.fast_upload_key)
  return _internal_fast_upload_key();
}
inline void ObjAttrQueryRsp::set_fast_upload_key(const std::string& value) {
  _internal_set_fast_upload_key(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.fast_upload_key)
}
inline std::string* ObjAttrQueryRsp::mutable_fast_upload_key() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.fast_upload_key)
  return _internal_mutable_fast_upload_key();
}
inline const std::string& ObjAttrQueryRsp::_internal_fast_upload_key() const {
  return fast_upload_key_.Get();
}
inline void ObjAttrQueryRsp::_internal_set_fast_upload_key(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  fast_upload_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjAttrQueryRsp::set_fast_upload_key(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  fast_upload_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjAttrQueryRsp.fast_upload_key)
}
inline void ObjAttrQueryRsp::set_fast_upload_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  fast_upload_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjAttrQueryRsp.fast_upload_key)
}
inline void ObjAttrQueryRsp::set_fast_upload_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  fast_upload_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjAttrQueryRsp.fast_upload_key)
}
inline std::string* ObjAttrQueryRsp::_internal_mutable_fast_upload_key() {
  _has_bits_[0] |= 0x00000040u;
  return fast_upload_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjAttrQueryRsp::release_fast_upload_key() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.fast_upload_key)
  if (!_internal_has_fast_upload_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return fast_upload_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjAttrQueryRsp::set_allocated_fast_upload_key(std::string* fast_upload_key) {
  if (fast_upload_key != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  fast_upload_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fast_upload_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.fast_upload_key)
}

// optional .ClientCos.OwnerInfo owner = 25;
inline bool ObjAttrQueryRsp::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || owner_ != nullptr);
  return value;
}
inline bool ObjAttrQueryRsp::has_owner() const {
  return _internal_has_owner();
}
inline void ObjAttrQueryRsp::clear_owner() {
  if (owner_ != nullptr) owner_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::ClientCos::OwnerInfo& ObjAttrQueryRsp::_internal_owner() const {
  const ::ClientCos::OwnerInfo* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& ObjAttrQueryRsp::owner() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.owner)
  return _internal_owner();
}
inline void ObjAttrQueryRsp::unsafe_arena_set_allocated_owner(
    ::ClientCos::OwnerInfo* owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjAttrQueryRsp.owner)
}
inline ::ClientCos::OwnerInfo* ObjAttrQueryRsp::release_owner() {
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* ObjAttrQueryRsp::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.owner)
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* ObjAttrQueryRsp::_internal_mutable_owner() {
  _has_bits_[0] |= 0x00000400u;
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    owner_ = p;
  }
  return owner_;
}
inline ::ClientCos::OwnerInfo* ObjAttrQueryRsp::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.owner)
  return _internal_mutable_owner();
}
inline void ObjAttrQueryRsp::set_allocated_owner(::ClientCos::OwnerInfo* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.owner)
}

// optional uint64 lock_expired_time = 26;
inline bool ObjAttrQueryRsp::_internal_has_lock_expired_time() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_lock_expired_time() const {
  return _internal_has_lock_expired_time();
}
inline void ObjAttrQueryRsp::clear_lock_expired_time() {
  lock_expired_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjAttrQueryRsp::_internal_lock_expired_time() const {
  return lock_expired_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjAttrQueryRsp::lock_expired_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.lock_expired_time)
  return _internal_lock_expired_time();
}
inline void ObjAttrQueryRsp::_internal_set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x01000000u;
  lock_expired_time_ = value;
}
inline void ObjAttrQueryRsp::set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_expired_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.lock_expired_time)
}

// optional .ClientCos.LockInfo lockinfo = 27;
inline bool ObjAttrQueryRsp::_internal_has_lockinfo() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || lockinfo_ != nullptr);
  return value;
}
inline bool ObjAttrQueryRsp::has_lockinfo() const {
  return _internal_has_lockinfo();
}
inline void ObjAttrQueryRsp::clear_lockinfo() {
  if (lockinfo_ != nullptr) lockinfo_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::ClientCos::LockInfo& ObjAttrQueryRsp::_internal_lockinfo() const {
  const ::ClientCos::LockInfo* p = lockinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::LockInfo&>(
      ::ClientCos::_LockInfo_default_instance_);
}
inline const ::ClientCos::LockInfo& ObjAttrQueryRsp::lockinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.lockinfo)
  return _internal_lockinfo();
}
inline void ObjAttrQueryRsp::unsafe_arena_set_allocated_lockinfo(
    ::ClientCos::LockInfo* lockinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockinfo_);
  }
  lockinfo_ = lockinfo;
  if (lockinfo) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjAttrQueryRsp.lockinfo)
}
inline ::ClientCos::LockInfo* ObjAttrQueryRsp::release_lockinfo() {
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::LockInfo* ObjAttrQueryRsp::unsafe_arena_release_lockinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjAttrQueryRsp.lockinfo)
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::LockInfo* ObjAttrQueryRsp::_internal_mutable_lockinfo() {
  _has_bits_[0] |= 0x00000800u;
  if (lockinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::LockInfo>(GetArena());
    lockinfo_ = p;
  }
  return lockinfo_;
}
inline ::ClientCos::LockInfo* ObjAttrQueryRsp::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjAttrQueryRsp.lockinfo)
  return _internal_mutable_lockinfo();
}
inline void ObjAttrQueryRsp::set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lockinfo_;
  }
  if (lockinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lockinfo);
    if (message_arena != submessage_arena) {
      lockinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  lockinfo_ = lockinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjAttrQueryRsp.lockinfo)
}

// optional bool is_v4 = 28;
inline bool ObjAttrQueryRsp::_internal_has_is_v4() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ObjAttrQueryRsp::has_is_v4() const {
  return _internal_has_is_v4();
}
inline void ObjAttrQueryRsp::clear_is_v4() {
  is_v4_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ObjAttrQueryRsp::_internal_is_v4() const {
  return is_v4_;
}
inline bool ObjAttrQueryRsp::is_v4() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjAttrQueryRsp.is_v4)
  return _internal_is_v4();
}
inline void ObjAttrQueryRsp::_internal_set_is_v4(bool value) {
  _has_bits_[0] |= 0x00400000u;
  is_v4_ = value;
}
inline void ObjAttrQueryRsp::set_is_v4(bool value) {
  _internal_set_is_v4(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjAttrQueryRsp.is_v4)
}

// -------------------------------------------------------------------

// DeleteReq

// required bytes path = 1;
inline bool DeleteReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteReq::has_path() const {
  return _internal_has_path();
}
inline void DeleteReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.DeleteReq.path)
  return _internal_path();
}
inline void DeleteReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.DeleteReq.path)
}
inline std::string* DeleteReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DeleteReq.path)
  return _internal_mutable_path();
}
inline const std::string& DeleteReq::_internal_path() const {
  return path_.Get();
}
inline void DeleteReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.DeleteReq.path)
}
inline void DeleteReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.DeleteReq.path)
}
inline void DeleteReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.DeleteReq.path)
}
inline std::string* DeleteReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.DeleteReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DeleteReq.path)
}

// -------------------------------------------------------------------

// DeleteRsp

// -------------------------------------------------------------------

// ListReq

// required bytes prefix = 1;
inline bool ListReq::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListReq::has_prefix() const {
  return _internal_has_prefix();
}
inline void ListReq::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListReq::prefix() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListReq.prefix)
  return _internal_prefix();
}
inline void ListReq::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListReq.prefix)
}
inline std::string* ListReq::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListReq.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& ListReq::_internal_prefix() const {
  return prefix_.Get();
}
inline void ListReq::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListReq::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListReq.prefix)
}
inline void ListReq::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListReq.prefix)
}
inline void ListReq::set_prefix(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListReq.prefix)
}
inline std::string* ListReq::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListReq::release_prefix() {
  // @@protoc_insertion_point(field_release:ClientCos.ListReq.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListReq::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListReq.prefix)
}

// required bytes offset = 2 [default = ""];
inline bool ListReq::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListReq::has_offset() const {
  return _internal_has_offset();
}
inline void ListReq::clear_offset() {
  offset_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListReq::offset() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListReq.offset)
  return _internal_offset();
}
inline void ListReq::set_offset(const std::string& value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListReq.offset)
}
inline std::string* ListReq::mutable_offset() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListReq.offset)
  return _internal_mutable_offset();
}
inline const std::string& ListReq::_internal_offset() const {
  return offset_.Get();
}
inline void ListReq::_internal_set_offset(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListReq::set_offset(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  offset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListReq.offset)
}
inline void ListReq::set_offset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListReq.offset)
}
inline void ListReq::set_offset(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListReq.offset)
}
inline std::string* ListReq::_internal_mutable_offset() {
  _has_bits_[0] |= 0x00000002u;
  return offset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListReq::release_offset() {
  // @@protoc_insertion_point(field_release:ClientCos.ListReq.offset)
  if (!_internal_has_offset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return offset_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListReq::set_allocated_offset(std::string* offset) {
  if (offset != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  offset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListReq.offset)
}

// required bytes delimiter = 3 [default = "/"];
inline bool ListReq::_internal_has_delimiter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListReq::has_delimiter() const {
  return _internal_has_delimiter();
}
inline void ListReq::clear_delimiter() {
  delimiter_.ClearToDefault(::ClientCos::ListReq::_i_give_permission_to_break_this_code_default_delimiter_, GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ListReq::delimiter() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListReq.delimiter)
  if (delimiter_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_delimiter_.get();
  return _internal_delimiter();
}
inline void ListReq::set_delimiter(const std::string& value) {
  _internal_set_delimiter(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListReq.delimiter)
}
inline std::string* ListReq::mutable_delimiter() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListReq.delimiter)
  return _internal_mutable_delimiter();
}
inline const std::string& ListReq::_internal_delimiter() const {
  return delimiter_.Get();
}
inline void ListReq::_internal_set_delimiter(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void ListReq::set_delimiter(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  delimiter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListReq.delimiter)
}
inline void ListReq::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListReq.delimiter)
}
inline void ListReq::set_delimiter(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListReq.delimiter)
}
inline std::string* ListReq::_internal_mutable_delimiter() {
  _has_bits_[0] |= 0x00000004u;
  return delimiter_.Mutable(::ClientCos::ListReq::_i_give_permission_to_break_this_code_default_delimiter_, GetArena());
}
inline std::string* ListReq::release_delimiter() {
  // @@protoc_insertion_point(field_release:ClientCos.ListReq.delimiter)
  if (!_internal_has_delimiter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return delimiter_.ReleaseNonDefault(nullptr, GetArena());
}
inline void ListReq::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  delimiter_.SetAllocated(nullptr, delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListReq.delimiter)
}

// required uint32 count = 4 [default = 200];
inline bool ListReq::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ListReq::has_count() const {
  return _internal_has_count();
}
inline void ListReq::clear_count() {
  count_ = 200u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListReq::count() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListReq.count)
  return _internal_count();
}
inline void ListReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  count_ = value;
}
inline void ListReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListReq.count)
}

// required bool flag = 5 [default = false];
inline bool ListReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ListReq::has_flag() const {
  return _internal_has_flag();
}
inline void ListReq::clear_flag() {
  flag_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ListReq::_internal_flag() const {
  return flag_;
}
inline bool ListReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListReq.flag)
  return _internal_flag();
}
inline void ListReq::_internal_set_flag(bool value) {
  _has_bits_[0] |= 0x00000008u;
  flag_ = value;
}
inline void ListReq::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListReq.flag)
}

// optional bool need_x_cos = 6 [default = false];
inline bool ListReq::_internal_has_need_x_cos() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ListReq::has_need_x_cos() const {
  return _internal_has_need_x_cos();
}
inline void ListReq::clear_need_x_cos() {
  need_x_cos_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ListReq::_internal_need_x_cos() const {
  return need_x_cos_;
}
inline bool ListReq::need_x_cos() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListReq.need_x_cos)
  return _internal_need_x_cos();
}
inline void ListReq::_internal_set_need_x_cos(bool value) {
  _has_bits_[0] |= 0x00000010u;
  need_x_cos_ = value;
}
inline void ListReq::set_need_x_cos(bool value) {
  _internal_set_need_x_cos(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListReq.need_x_cos)
}

// optional bool need_tag = 7 [default = false];
inline bool ListReq::_internal_has_need_tag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ListReq::has_need_tag() const {
  return _internal_has_need_tag();
}
inline void ListReq::clear_need_tag() {
  need_tag_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ListReq::_internal_need_tag() const {
  return need_tag_;
}
inline bool ListReq::need_tag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListReq.need_tag)
  return _internal_need_tag();
}
inline void ListReq::_internal_set_need_tag(bool value) {
  _has_bits_[0] |= 0x00000020u;
  need_tag_ = value;
}
inline void ListReq::set_need_tag(bool value) {
  _internal_set_need_tag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListReq.need_tag)
}

// -------------------------------------------------------------------

// ListRsp

// repeated .ClientCos.ObjItem objs = 1;
inline int ListRsp::_internal_objs_size() const {
  return objs_.size();
}
inline int ListRsp::objs_size() const {
  return _internal_objs_size();
}
inline void ListRsp::clear_objs() {
  objs_.Clear();
}
inline ::ClientCos::ObjItem* ListRsp::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListRsp.objs)
  return objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >*
ListRsp::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ListRsp.objs)
  return &objs_;
}
inline const ::ClientCos::ObjItem& ListRsp::_internal_objs(int index) const {
  return objs_.Get(index);
}
inline const ::ClientCos::ObjItem& ListRsp::objs(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ListRsp.objs)
  return _internal_objs(index);
}
inline ::ClientCos::ObjItem* ListRsp::_internal_add_objs() {
  return objs_.Add();
}
inline ::ClientCos::ObjItem* ListRsp::add_objs() {
  // @@protoc_insertion_point(field_add:ClientCos.ListRsp.objs)
  return _internal_add_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >&
ListRsp::objs() const {
  // @@protoc_insertion_point(field_list:ClientCos.ListRsp.objs)
  return objs_;
}

// optional bytes next_offset = 2 [default = ""];
inline bool ListRsp::_internal_has_next_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListRsp::has_next_offset() const {
  return _internal_has_next_offset();
}
inline void ListRsp::clear_next_offset() {
  next_offset_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListRsp::next_offset() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListRsp.next_offset)
  return _internal_next_offset();
}
inline void ListRsp::set_next_offset(const std::string& value) {
  _internal_set_next_offset(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListRsp.next_offset)
}
inline std::string* ListRsp::mutable_next_offset() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListRsp.next_offset)
  return _internal_mutable_next_offset();
}
inline const std::string& ListRsp::_internal_next_offset() const {
  return next_offset_.Get();
}
inline void ListRsp::_internal_set_next_offset(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListRsp::set_next_offset(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  next_offset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListRsp.next_offset)
}
inline void ListRsp::set_next_offset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  next_offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListRsp.next_offset)
}
inline void ListRsp::set_next_offset(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  next_offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListRsp.next_offset)
}
inline std::string* ListRsp::_internal_mutable_next_offset() {
  _has_bits_[0] |= 0x00000001u;
  return next_offset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListRsp::release_next_offset() {
  // @@protoc_insertion_point(field_release:ClientCos.ListRsp.next_offset)
  if (!_internal_has_next_offset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return next_offset_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListRsp::set_allocated_next_offset(std::string* next_offset) {
  if (next_offset != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_offset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_offset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListRsp.next_offset)
}

// optional bool listover = 3 [default = false];
inline bool ListRsp::_internal_has_listover() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListRsp::has_listover() const {
  return _internal_has_listover();
}
inline void ListRsp::clear_listover() {
  listover_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ListRsp::_internal_listover() const {
  return listover_;
}
inline bool ListRsp::listover() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListRsp.listover)
  return _internal_listover();
}
inline void ListRsp::_internal_set_listover(bool value) {
  _has_bits_[0] |= 0x00000002u;
  listover_ = value;
}
inline void ListRsp::set_listover(bool value) {
  _internal_set_listover(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListRsp.listover)
}

// -------------------------------------------------------------------

// ListMutiobjReq

// required bytes prefix = 1;
inline bool ListMutiobjReq::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListMutiobjReq::has_prefix() const {
  return _internal_has_prefix();
}
inline void ListMutiobjReq::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListMutiobjReq::prefix() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjReq.prefix)
  return _internal_prefix();
}
inline void ListMutiobjReq::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjReq.prefix)
}
inline std::string* ListMutiobjReq::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListMutiobjReq.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& ListMutiobjReq::_internal_prefix() const {
  return prefix_.Get();
}
inline void ListMutiobjReq::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMutiobjReq::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListMutiobjReq.prefix)
}
inline void ListMutiobjReq::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListMutiobjReq.prefix)
}
inline void ListMutiobjReq::set_prefix(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListMutiobjReq.prefix)
}
inline std::string* ListMutiobjReq::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMutiobjReq::release_prefix() {
  // @@protoc_insertion_point(field_release:ClientCos.ListMutiobjReq.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMutiobjReq::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListMutiobjReq.prefix)
}

// required bytes objnamemarker = 2 [default = ""];
inline bool ListMutiobjReq::_internal_has_objnamemarker() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListMutiobjReq::has_objnamemarker() const {
  return _internal_has_objnamemarker();
}
inline void ListMutiobjReq::clear_objnamemarker() {
  objnamemarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListMutiobjReq::objnamemarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjReq.objnamemarker)
  return _internal_objnamemarker();
}
inline void ListMutiobjReq::set_objnamemarker(const std::string& value) {
  _internal_set_objnamemarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjReq.objnamemarker)
}
inline std::string* ListMutiobjReq::mutable_objnamemarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListMutiobjReq.objnamemarker)
  return _internal_mutable_objnamemarker();
}
inline const std::string& ListMutiobjReq::_internal_objnamemarker() const {
  return objnamemarker_.Get();
}
inline void ListMutiobjReq::_internal_set_objnamemarker(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMutiobjReq::set_objnamemarker(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListMutiobjReq.objnamemarker)
}
inline void ListMutiobjReq::set_objnamemarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListMutiobjReq.objnamemarker)
}
inline void ListMutiobjReq::set_objnamemarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListMutiobjReq.objnamemarker)
}
inline std::string* ListMutiobjReq::_internal_mutable_objnamemarker() {
  _has_bits_[0] |= 0x00000002u;
  return objnamemarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMutiobjReq::release_objnamemarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListMutiobjReq.objnamemarker)
  if (!_internal_has_objnamemarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return objnamemarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMutiobjReq::set_allocated_objnamemarker(std::string* objnamemarker) {
  if (objnamemarker != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objnamemarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objnamemarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListMutiobjReq.objnamemarker)
}

// required bytes uploadkeymarker = 3 [default = ""];
inline bool ListMutiobjReq::_internal_has_uploadkeymarker() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListMutiobjReq::has_uploadkeymarker() const {
  return _internal_has_uploadkeymarker();
}
inline void ListMutiobjReq::clear_uploadkeymarker() {
  uploadkeymarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ListMutiobjReq::uploadkeymarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjReq.uploadkeymarker)
  return _internal_uploadkeymarker();
}
inline void ListMutiobjReq::set_uploadkeymarker(const std::string& value) {
  _internal_set_uploadkeymarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjReq.uploadkeymarker)
}
inline std::string* ListMutiobjReq::mutable_uploadkeymarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListMutiobjReq.uploadkeymarker)
  return _internal_mutable_uploadkeymarker();
}
inline const std::string& ListMutiobjReq::_internal_uploadkeymarker() const {
  return uploadkeymarker_.Get();
}
inline void ListMutiobjReq::_internal_set_uploadkeymarker(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  uploadkeymarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMutiobjReq::set_uploadkeymarker(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  uploadkeymarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListMutiobjReq.uploadkeymarker)
}
inline void ListMutiobjReq::set_uploadkeymarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  uploadkeymarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListMutiobjReq.uploadkeymarker)
}
inline void ListMutiobjReq::set_uploadkeymarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  uploadkeymarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListMutiobjReq.uploadkeymarker)
}
inline std::string* ListMutiobjReq::_internal_mutable_uploadkeymarker() {
  _has_bits_[0] |= 0x00000004u;
  return uploadkeymarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMutiobjReq::release_uploadkeymarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListMutiobjReq.uploadkeymarker)
  if (!_internal_has_uploadkeymarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return uploadkeymarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMutiobjReq::set_allocated_uploadkeymarker(std::string* uploadkeymarker) {
  if (uploadkeymarker != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uploadkeymarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadkeymarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListMutiobjReq.uploadkeymarker)
}

// required bytes delimiter = 4 [default = ""];
inline bool ListMutiobjReq::_internal_has_delimiter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ListMutiobjReq::has_delimiter() const {
  return _internal_has_delimiter();
}
inline void ListMutiobjReq::clear_delimiter() {
  delimiter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ListMutiobjReq::delimiter() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjReq.delimiter)
  return _internal_delimiter();
}
inline void ListMutiobjReq::set_delimiter(const std::string& value) {
  _internal_set_delimiter(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjReq.delimiter)
}
inline std::string* ListMutiobjReq::mutable_delimiter() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListMutiobjReq.delimiter)
  return _internal_mutable_delimiter();
}
inline const std::string& ListMutiobjReq::_internal_delimiter() const {
  return delimiter_.Get();
}
inline void ListMutiobjReq::_internal_set_delimiter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMutiobjReq::set_delimiter(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListMutiobjReq.delimiter)
}
inline void ListMutiobjReq::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListMutiobjReq.delimiter)
}
inline void ListMutiobjReq::set_delimiter(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListMutiobjReq.delimiter)
}
inline std::string* ListMutiobjReq::_internal_mutable_delimiter() {
  _has_bits_[0] |= 0x00000008u;
  return delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMutiobjReq::release_delimiter() {
  // @@protoc_insertion_point(field_release:ClientCos.ListMutiobjReq.delimiter)
  if (!_internal_has_delimiter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return delimiter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMutiobjReq::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListMutiobjReq.delimiter)
}

// required uint32 count = 5 [default = 200];
inline bool ListMutiobjReq::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ListMutiobjReq::has_count() const {
  return _internal_has_count();
}
inline void ListMutiobjReq::clear_count() {
  count_ = 200u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListMutiobjReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListMutiobjReq::count() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjReq.count)
  return _internal_count();
}
inline void ListMutiobjReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  count_ = value;
}
inline void ListMutiobjReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjReq.count)
}

// optional bool flag = 6;
inline bool ListMutiobjReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ListMutiobjReq::has_flag() const {
  return _internal_has_flag();
}
inline void ListMutiobjReq::clear_flag() {
  flag_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ListMutiobjReq::_internal_flag() const {
  return flag_;
}
inline bool ListMutiobjReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjReq.flag)
  return _internal_flag();
}
inline void ListMutiobjReq::_internal_set_flag(bool value) {
  _has_bits_[0] |= 0x00000010u;
  flag_ = value;
}
inline void ListMutiobjReq::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjReq.flag)
}

// -------------------------------------------------------------------

// ListMutiobjRsp

// repeated .ClientCos.MutiObjItem objs = 1;
inline int ListMutiobjRsp::_internal_objs_size() const {
  return objs_.size();
}
inline int ListMutiobjRsp::objs_size() const {
  return _internal_objs_size();
}
inline void ListMutiobjRsp::clear_objs() {
  objs_.Clear();
}
inline ::ClientCos::MutiObjItem* ListMutiobjRsp::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListMutiobjRsp.objs)
  return objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::MutiObjItem >*
ListMutiobjRsp::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ListMutiobjRsp.objs)
  return &objs_;
}
inline const ::ClientCos::MutiObjItem& ListMutiobjRsp::_internal_objs(int index) const {
  return objs_.Get(index);
}
inline const ::ClientCos::MutiObjItem& ListMutiobjRsp::objs(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjRsp.objs)
  return _internal_objs(index);
}
inline ::ClientCos::MutiObjItem* ListMutiobjRsp::_internal_add_objs() {
  return objs_.Add();
}
inline ::ClientCos::MutiObjItem* ListMutiobjRsp::add_objs() {
  // @@protoc_insertion_point(field_add:ClientCos.ListMutiobjRsp.objs)
  return _internal_add_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::MutiObjItem >&
ListMutiobjRsp::objs() const {
  // @@protoc_insertion_point(field_list:ClientCos.ListMutiobjRsp.objs)
  return objs_;
}

// optional bytes next_objnamemarker = 2 [default = ""];
inline bool ListMutiobjRsp::_internal_has_next_objnamemarker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListMutiobjRsp::has_next_objnamemarker() const {
  return _internal_has_next_objnamemarker();
}
inline void ListMutiobjRsp::clear_next_objnamemarker() {
  next_objnamemarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListMutiobjRsp::next_objnamemarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjRsp.next_objnamemarker)
  return _internal_next_objnamemarker();
}
inline void ListMutiobjRsp::set_next_objnamemarker(const std::string& value) {
  _internal_set_next_objnamemarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjRsp.next_objnamemarker)
}
inline std::string* ListMutiobjRsp::mutable_next_objnamemarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListMutiobjRsp.next_objnamemarker)
  return _internal_mutable_next_objnamemarker();
}
inline const std::string& ListMutiobjRsp::_internal_next_objnamemarker() const {
  return next_objnamemarker_.Get();
}
inline void ListMutiobjRsp::_internal_set_next_objnamemarker(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMutiobjRsp::set_next_objnamemarker(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListMutiobjRsp.next_objnamemarker)
}
inline void ListMutiobjRsp::set_next_objnamemarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListMutiobjRsp.next_objnamemarker)
}
inline void ListMutiobjRsp::set_next_objnamemarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListMutiobjRsp.next_objnamemarker)
}
inline std::string* ListMutiobjRsp::_internal_mutable_next_objnamemarker() {
  _has_bits_[0] |= 0x00000001u;
  return next_objnamemarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMutiobjRsp::release_next_objnamemarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListMutiobjRsp.next_objnamemarker)
  if (!_internal_has_next_objnamemarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return next_objnamemarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMutiobjRsp::set_allocated_next_objnamemarker(std::string* next_objnamemarker) {
  if (next_objnamemarker != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_objnamemarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_objnamemarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListMutiobjRsp.next_objnamemarker)
}

// optional bytes next_uploadkeymarker = 3 [default = ""];
inline bool ListMutiobjRsp::_internal_has_next_uploadkeymarker() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListMutiobjRsp::has_next_uploadkeymarker() const {
  return _internal_has_next_uploadkeymarker();
}
inline void ListMutiobjRsp::clear_next_uploadkeymarker() {
  next_uploadkeymarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListMutiobjRsp::next_uploadkeymarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
  return _internal_next_uploadkeymarker();
}
inline void ListMutiobjRsp::set_next_uploadkeymarker(const std::string& value) {
  _internal_set_next_uploadkeymarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
}
inline std::string* ListMutiobjRsp::mutable_next_uploadkeymarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
  return _internal_mutable_next_uploadkeymarker();
}
inline const std::string& ListMutiobjRsp::_internal_next_uploadkeymarker() const {
  return next_uploadkeymarker_.Get();
}
inline void ListMutiobjRsp::_internal_set_next_uploadkeymarker(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  next_uploadkeymarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListMutiobjRsp::set_next_uploadkeymarker(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  next_uploadkeymarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
}
inline void ListMutiobjRsp::set_next_uploadkeymarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  next_uploadkeymarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
}
inline void ListMutiobjRsp::set_next_uploadkeymarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  next_uploadkeymarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
}
inline std::string* ListMutiobjRsp::_internal_mutable_next_uploadkeymarker() {
  _has_bits_[0] |= 0x00000002u;
  return next_uploadkeymarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListMutiobjRsp::release_next_uploadkeymarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
  if (!_internal_has_next_uploadkeymarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return next_uploadkeymarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListMutiobjRsp::set_allocated_next_uploadkeymarker(std::string* next_uploadkeymarker) {
  if (next_uploadkeymarker != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_uploadkeymarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_uploadkeymarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListMutiobjRsp.next_uploadkeymarker)
}

// optional bool listover = 4 [default = false];
inline bool ListMutiobjRsp::_internal_has_listover() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListMutiobjRsp::has_listover() const {
  return _internal_has_listover();
}
inline void ListMutiobjRsp::clear_listover() {
  listover_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ListMutiobjRsp::_internal_listover() const {
  return listover_;
}
inline bool ListMutiobjRsp::listover() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListMutiobjRsp.listover)
  return _internal_listover();
}
inline void ListMutiobjRsp::_internal_set_listover(bool value) {
  _has_bits_[0] |= 0x00000004u;
  listover_ = value;
}
inline void ListMutiobjRsp::set_listover(bool value) {
  _internal_set_listover(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListMutiobjRsp.listover)
}

// -------------------------------------------------------------------

// ListObjVerReq

// required bytes prefix = 1;
inline bool ListObjVerReq::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListObjVerReq::has_prefix() const {
  return _internal_has_prefix();
}
inline void ListObjVerReq::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListObjVerReq::prefix() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.prefix)
  return _internal_prefix();
}
inline void ListObjVerReq::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.prefix)
}
inline std::string* ListObjVerReq::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListObjVerReq.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& ListObjVerReq::_internal_prefix() const {
  return prefix_.Get();
}
inline void ListObjVerReq::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListObjVerReq::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListObjVerReq.prefix)
}
inline void ListObjVerReq::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListObjVerReq.prefix)
}
inline void ListObjVerReq::set_prefix(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListObjVerReq.prefix)
}
inline std::string* ListObjVerReq::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListObjVerReq::release_prefix() {
  // @@protoc_insertion_point(field_release:ClientCos.ListObjVerReq.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListObjVerReq::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListObjVerReq.prefix)
}

// required bytes objnamemarker = 2 [default = ""];
inline bool ListObjVerReq::_internal_has_objnamemarker() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListObjVerReq::has_objnamemarker() const {
  return _internal_has_objnamemarker();
}
inline void ListObjVerReq::clear_objnamemarker() {
  objnamemarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListObjVerReq::objnamemarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.objnamemarker)
  return _internal_objnamemarker();
}
inline void ListObjVerReq::set_objnamemarker(const std::string& value) {
  _internal_set_objnamemarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.objnamemarker)
}
inline std::string* ListObjVerReq::mutable_objnamemarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListObjVerReq.objnamemarker)
  return _internal_mutable_objnamemarker();
}
inline const std::string& ListObjVerReq::_internal_objnamemarker() const {
  return objnamemarker_.Get();
}
inline void ListObjVerReq::_internal_set_objnamemarker(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListObjVerReq::set_objnamemarker(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListObjVerReq.objnamemarker)
}
inline void ListObjVerReq::set_objnamemarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListObjVerReq.objnamemarker)
}
inline void ListObjVerReq::set_objnamemarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListObjVerReq.objnamemarker)
}
inline std::string* ListObjVerReq::_internal_mutable_objnamemarker() {
  _has_bits_[0] |= 0x00000002u;
  return objnamemarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListObjVerReq::release_objnamemarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListObjVerReq.objnamemarker)
  if (!_internal_has_objnamemarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return objnamemarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListObjVerReq::set_allocated_objnamemarker(std::string* objnamemarker) {
  if (objnamemarker != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objnamemarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objnamemarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListObjVerReq.objnamemarker)
}

// required bytes versionmarker = 3 [default = ""];
inline bool ListObjVerReq::_internal_has_versionmarker() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListObjVerReq::has_versionmarker() const {
  return _internal_has_versionmarker();
}
inline void ListObjVerReq::clear_versionmarker() {
  versionmarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ListObjVerReq::versionmarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.versionmarker)
  return _internal_versionmarker();
}
inline void ListObjVerReq::set_versionmarker(const std::string& value) {
  _internal_set_versionmarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.versionmarker)
}
inline std::string* ListObjVerReq::mutable_versionmarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListObjVerReq.versionmarker)
  return _internal_mutable_versionmarker();
}
inline const std::string& ListObjVerReq::_internal_versionmarker() const {
  return versionmarker_.Get();
}
inline void ListObjVerReq::_internal_set_versionmarker(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  versionmarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListObjVerReq::set_versionmarker(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  versionmarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListObjVerReq.versionmarker)
}
inline void ListObjVerReq::set_versionmarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  versionmarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListObjVerReq.versionmarker)
}
inline void ListObjVerReq::set_versionmarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  versionmarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListObjVerReq.versionmarker)
}
inline std::string* ListObjVerReq::_internal_mutable_versionmarker() {
  _has_bits_[0] |= 0x00000004u;
  return versionmarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListObjVerReq::release_versionmarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListObjVerReq.versionmarker)
  if (!_internal_has_versionmarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return versionmarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListObjVerReq::set_allocated_versionmarker(std::string* versionmarker) {
  if (versionmarker != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  versionmarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), versionmarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListObjVerReq.versionmarker)
}

// required bytes delimiter = 4 [default = ""];
inline bool ListObjVerReq::_internal_has_delimiter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ListObjVerReq::has_delimiter() const {
  return _internal_has_delimiter();
}
inline void ListObjVerReq::clear_delimiter() {
  delimiter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ListObjVerReq::delimiter() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.delimiter)
  return _internal_delimiter();
}
inline void ListObjVerReq::set_delimiter(const std::string& value) {
  _internal_set_delimiter(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.delimiter)
}
inline std::string* ListObjVerReq::mutable_delimiter() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListObjVerReq.delimiter)
  return _internal_mutable_delimiter();
}
inline const std::string& ListObjVerReq::_internal_delimiter() const {
  return delimiter_.Get();
}
inline void ListObjVerReq::_internal_set_delimiter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListObjVerReq::set_delimiter(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListObjVerReq.delimiter)
}
inline void ListObjVerReq::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListObjVerReq.delimiter)
}
inline void ListObjVerReq::set_delimiter(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListObjVerReq.delimiter)
}
inline std::string* ListObjVerReq::_internal_mutable_delimiter() {
  _has_bits_[0] |= 0x00000008u;
  return delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListObjVerReq::release_delimiter() {
  // @@protoc_insertion_point(field_release:ClientCos.ListObjVerReq.delimiter)
  if (!_internal_has_delimiter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return delimiter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListObjVerReq::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListObjVerReq.delimiter)
}

// required uint32 count = 5 [default = 200];
inline bool ListObjVerReq::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ListObjVerReq::has_count() const {
  return _internal_has_count();
}
inline void ListObjVerReq::clear_count() {
  count_ = 200u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListObjVerReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListObjVerReq::count() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.count)
  return _internal_count();
}
inline void ListObjVerReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  count_ = value;
}
inline void ListObjVerReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.count)
}

// required bool flag = 6 [default = false];
inline bool ListObjVerReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ListObjVerReq::has_flag() const {
  return _internal_has_flag();
}
inline void ListObjVerReq::clear_flag() {
  flag_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ListObjVerReq::_internal_flag() const {
  return flag_;
}
inline bool ListObjVerReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.flag)
  return _internal_flag();
}
inline void ListObjVerReq::_internal_set_flag(bool value) {
  _has_bits_[0] |= 0x00000010u;
  flag_ = value;
}
inline void ListObjVerReq::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.flag)
}

// optional bool need_x_cos = 7 [default = false];
inline bool ListObjVerReq::_internal_has_need_x_cos() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ListObjVerReq::has_need_x_cos() const {
  return _internal_has_need_x_cos();
}
inline void ListObjVerReq::clear_need_x_cos() {
  need_x_cos_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ListObjVerReq::_internal_need_x_cos() const {
  return need_x_cos_;
}
inline bool ListObjVerReq::need_x_cos() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.need_x_cos)
  return _internal_need_x_cos();
}
inline void ListObjVerReq::_internal_set_need_x_cos(bool value) {
  _has_bits_[0] |= 0x00000020u;
  need_x_cos_ = value;
}
inline void ListObjVerReq::set_need_x_cos(bool value) {
  _internal_set_need_x_cos(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.need_x_cos)
}

// optional bool need_tag = 8 [default = false];
inline bool ListObjVerReq::_internal_has_need_tag() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ListObjVerReq::has_need_tag() const {
  return _internal_has_need_tag();
}
inline void ListObjVerReq::clear_need_tag() {
  need_tag_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ListObjVerReq::_internal_need_tag() const {
  return need_tag_;
}
inline bool ListObjVerReq::need_tag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerReq.need_tag)
  return _internal_need_tag();
}
inline void ListObjVerReq::_internal_set_need_tag(bool value) {
  _has_bits_[0] |= 0x00000040u;
  need_tag_ = value;
}
inline void ListObjVerReq::set_need_tag(bool value) {
  _internal_set_need_tag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerReq.need_tag)
}

// -------------------------------------------------------------------

// ListObjVerRsp

// repeated .ClientCos.ObjItem objs = 1;
inline int ListObjVerRsp::_internal_objs_size() const {
  return objs_.size();
}
inline int ListObjVerRsp::objs_size() const {
  return _internal_objs_size();
}
inline void ListObjVerRsp::clear_objs() {
  objs_.Clear();
}
inline ::ClientCos::ObjItem* ListObjVerRsp::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListObjVerRsp.objs)
  return objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >*
ListObjVerRsp::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ListObjVerRsp.objs)
  return &objs_;
}
inline const ::ClientCos::ObjItem& ListObjVerRsp::_internal_objs(int index) const {
  return objs_.Get(index);
}
inline const ::ClientCos::ObjItem& ListObjVerRsp::objs(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerRsp.objs)
  return _internal_objs(index);
}
inline ::ClientCos::ObjItem* ListObjVerRsp::_internal_add_objs() {
  return objs_.Add();
}
inline ::ClientCos::ObjItem* ListObjVerRsp::add_objs() {
  // @@protoc_insertion_point(field_add:ClientCos.ListObjVerRsp.objs)
  return _internal_add_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjItem >&
ListObjVerRsp::objs() const {
  // @@protoc_insertion_point(field_list:ClientCos.ListObjVerRsp.objs)
  return objs_;
}

// optional bytes next_objnamemarker = 2 [default = ""];
inline bool ListObjVerRsp::_internal_has_next_objnamemarker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListObjVerRsp::has_next_objnamemarker() const {
  return _internal_has_next_objnamemarker();
}
inline void ListObjVerRsp::clear_next_objnamemarker() {
  next_objnamemarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListObjVerRsp::next_objnamemarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerRsp.next_objnamemarker)
  return _internal_next_objnamemarker();
}
inline void ListObjVerRsp::set_next_objnamemarker(const std::string& value) {
  _internal_set_next_objnamemarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerRsp.next_objnamemarker)
}
inline std::string* ListObjVerRsp::mutable_next_objnamemarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListObjVerRsp.next_objnamemarker)
  return _internal_mutable_next_objnamemarker();
}
inline const std::string& ListObjVerRsp::_internal_next_objnamemarker() const {
  return next_objnamemarker_.Get();
}
inline void ListObjVerRsp::_internal_set_next_objnamemarker(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListObjVerRsp::set_next_objnamemarker(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListObjVerRsp.next_objnamemarker)
}
inline void ListObjVerRsp::set_next_objnamemarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListObjVerRsp.next_objnamemarker)
}
inline void ListObjVerRsp::set_next_objnamemarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  next_objnamemarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListObjVerRsp.next_objnamemarker)
}
inline std::string* ListObjVerRsp::_internal_mutable_next_objnamemarker() {
  _has_bits_[0] |= 0x00000001u;
  return next_objnamemarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListObjVerRsp::release_next_objnamemarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListObjVerRsp.next_objnamemarker)
  if (!_internal_has_next_objnamemarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return next_objnamemarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListObjVerRsp::set_allocated_next_objnamemarker(std::string* next_objnamemarker) {
  if (next_objnamemarker != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_objnamemarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_objnamemarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListObjVerRsp.next_objnamemarker)
}

// optional bytes next_versionmarker = 3 [default = ""];
inline bool ListObjVerRsp::_internal_has_next_versionmarker() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListObjVerRsp::has_next_versionmarker() const {
  return _internal_has_next_versionmarker();
}
inline void ListObjVerRsp::clear_next_versionmarker() {
  next_versionmarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListObjVerRsp::next_versionmarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerRsp.next_versionmarker)
  return _internal_next_versionmarker();
}
inline void ListObjVerRsp::set_next_versionmarker(const std::string& value) {
  _internal_set_next_versionmarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerRsp.next_versionmarker)
}
inline std::string* ListObjVerRsp::mutable_next_versionmarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListObjVerRsp.next_versionmarker)
  return _internal_mutable_next_versionmarker();
}
inline const std::string& ListObjVerRsp::_internal_next_versionmarker() const {
  return next_versionmarker_.Get();
}
inline void ListObjVerRsp::_internal_set_next_versionmarker(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  next_versionmarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListObjVerRsp::set_next_versionmarker(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  next_versionmarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListObjVerRsp.next_versionmarker)
}
inline void ListObjVerRsp::set_next_versionmarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  next_versionmarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListObjVerRsp.next_versionmarker)
}
inline void ListObjVerRsp::set_next_versionmarker(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  next_versionmarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListObjVerRsp.next_versionmarker)
}
inline std::string* ListObjVerRsp::_internal_mutable_next_versionmarker() {
  _has_bits_[0] |= 0x00000002u;
  return next_versionmarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListObjVerRsp::release_next_versionmarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListObjVerRsp.next_versionmarker)
  if (!_internal_has_next_versionmarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return next_versionmarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListObjVerRsp::set_allocated_next_versionmarker(std::string* next_versionmarker) {
  if (next_versionmarker != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_versionmarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_versionmarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListObjVerRsp.next_versionmarker)
}

// optional bool listover = 4 [default = false];
inline bool ListObjVerRsp::_internal_has_listover() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListObjVerRsp::has_listover() const {
  return _internal_has_listover();
}
inline void ListObjVerRsp::clear_listover() {
  listover_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ListObjVerRsp::_internal_listover() const {
  return listover_;
}
inline bool ListObjVerRsp::listover() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListObjVerRsp.listover)
  return _internal_listover();
}
inline void ListObjVerRsp::_internal_set_listover(bool value) {
  _has_bits_[0] |= 0x00000004u;
  listover_ = value;
}
inline void ListObjVerRsp::set_listover(bool value) {
  _internal_set_listover(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListObjVerRsp.listover)
}

// -------------------------------------------------------------------

// UnfinObjAttrModifyReq

// required bytes path = 1;
inline bool UnfinObjAttrModifyReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnfinObjAttrModifyReq::has_path() const {
  return _internal_has_path();
}
inline void UnfinObjAttrModifyReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnfinObjAttrModifyReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.path)
  return _internal_path();
}
inline void UnfinObjAttrModifyReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.UnfinObjAttrModifyReq.path)
}
inline std::string* UnfinObjAttrModifyReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UnfinObjAttrModifyReq.path)
  return _internal_mutable_path();
}
inline const std::string& UnfinObjAttrModifyReq::_internal_path() const {
  return path_.Get();
}
inline void UnfinObjAttrModifyReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnfinObjAttrModifyReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UnfinObjAttrModifyReq.path)
}
inline void UnfinObjAttrModifyReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UnfinObjAttrModifyReq.path)
}
inline void UnfinObjAttrModifyReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UnfinObjAttrModifyReq.path)
}
inline std::string* UnfinObjAttrModifyReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnfinObjAttrModifyReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.UnfinObjAttrModifyReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnfinObjAttrModifyReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UnfinObjAttrModifyReq.path)
}

// required bytes uploadid = 2;
inline bool UnfinObjAttrModifyReq::_internal_has_uploadid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnfinObjAttrModifyReq::has_uploadid() const {
  return _internal_has_uploadid();
}
inline void UnfinObjAttrModifyReq::clear_uploadid() {
  uploadid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UnfinObjAttrModifyReq::uploadid() const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.uploadid)
  return _internal_uploadid();
}
inline void UnfinObjAttrModifyReq::set_uploadid(const std::string& value) {
  _internal_set_uploadid(value);
  // @@protoc_insertion_point(field_set:ClientCos.UnfinObjAttrModifyReq.uploadid)
}
inline std::string* UnfinObjAttrModifyReq::mutable_uploadid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UnfinObjAttrModifyReq.uploadid)
  return _internal_mutable_uploadid();
}
inline const std::string& UnfinObjAttrModifyReq::_internal_uploadid() const {
  return uploadid_.Get();
}
inline void UnfinObjAttrModifyReq::_internal_set_uploadid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnfinObjAttrModifyReq::set_uploadid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UnfinObjAttrModifyReq.uploadid)
}
inline void UnfinObjAttrModifyReq::set_uploadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UnfinObjAttrModifyReq.uploadid)
}
inline void UnfinObjAttrModifyReq::set_uploadid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UnfinObjAttrModifyReq.uploadid)
}
inline std::string* UnfinObjAttrModifyReq::_internal_mutable_uploadid() {
  _has_bits_[0] |= 0x00000002u;
  return uploadid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnfinObjAttrModifyReq::release_uploadid() {
  // @@protoc_insertion_point(field_release:ClientCos.UnfinObjAttrModifyReq.uploadid)
  if (!_internal_has_uploadid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uploadid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnfinObjAttrModifyReq::set_allocated_uploadid(std::string* uploadid) {
  if (uploadid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uploadid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UnfinObjAttrModifyReq.uploadid)
}

// required uint32 flag = 3;
inline bool UnfinObjAttrModifyReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UnfinObjAttrModifyReq::has_flag() const {
  return _internal_has_flag();
}
inline void UnfinObjAttrModifyReq::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnfinObjAttrModifyReq::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnfinObjAttrModifyReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.flag)
  return _internal_flag();
}
inline void UnfinObjAttrModifyReq::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flag_ = value;
}
inline void UnfinObjAttrModifyReq::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.UnfinObjAttrModifyReq.flag)
}

// optional bytes biz_attr = 4;
inline bool UnfinObjAttrModifyReq::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnfinObjAttrModifyReq::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void UnfinObjAttrModifyReq::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UnfinObjAttrModifyReq::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.biz_attr)
  return _internal_biz_attr();
}
inline void UnfinObjAttrModifyReq::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.UnfinObjAttrModifyReq.biz_attr)
}
inline std::string* UnfinObjAttrModifyReq::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UnfinObjAttrModifyReq.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& UnfinObjAttrModifyReq::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void UnfinObjAttrModifyReq::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnfinObjAttrModifyReq::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UnfinObjAttrModifyReq.biz_attr)
}
inline void UnfinObjAttrModifyReq::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UnfinObjAttrModifyReq.biz_attr)
}
inline void UnfinObjAttrModifyReq::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UnfinObjAttrModifyReq.biz_attr)
}
inline std::string* UnfinObjAttrModifyReq::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000004u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnfinObjAttrModifyReq::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.UnfinObjAttrModifyReq.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnfinObjAttrModifyReq::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UnfinObjAttrModifyReq.biz_attr)
}

// optional uint32 forbid = 5;
inline bool UnfinObjAttrModifyReq::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UnfinObjAttrModifyReq::has_forbid() const {
  return _internal_has_forbid();
}
inline void UnfinObjAttrModifyReq::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnfinObjAttrModifyReq::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnfinObjAttrModifyReq::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.forbid)
  return _internal_forbid();
}
inline void UnfinObjAttrModifyReq::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  forbid_ = value;
}
inline void UnfinObjAttrModifyReq::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.UnfinObjAttrModifyReq.forbid)
}

// repeated .ClientCos.ReservedAttr reservedattr = 6;
inline int UnfinObjAttrModifyReq::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int UnfinObjAttrModifyReq::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void UnfinObjAttrModifyReq::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* UnfinObjAttrModifyReq::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.UnfinObjAttrModifyReq.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
UnfinObjAttrModifyReq::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.UnfinObjAttrModifyReq.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& UnfinObjAttrModifyReq::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& UnfinObjAttrModifyReq::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* UnfinObjAttrModifyReq::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* UnfinObjAttrModifyReq::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.UnfinObjAttrModifyReq.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
UnfinObjAttrModifyReq::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.UnfinObjAttrModifyReq.reservedattr)
  return reservedattr_;
}

// repeated .ClientCos.CustomHeader customheader = 7;
inline int UnfinObjAttrModifyReq::_internal_customheader_size() const {
  return customheader_.size();
}
inline int UnfinObjAttrModifyReq::customheader_size() const {
  return _internal_customheader_size();
}
inline void UnfinObjAttrModifyReq::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* UnfinObjAttrModifyReq::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.UnfinObjAttrModifyReq.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
UnfinObjAttrModifyReq::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.UnfinObjAttrModifyReq.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& UnfinObjAttrModifyReq::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& UnfinObjAttrModifyReq::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* UnfinObjAttrModifyReq::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* UnfinObjAttrModifyReq::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.UnfinObjAttrModifyReq.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
UnfinObjAttrModifyReq::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.UnfinObjAttrModifyReq.customheader)
  return customheader_;
}

// optional .ClientCos.Authority auth = 8;
inline bool UnfinObjAttrModifyReq::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UnfinObjAttrModifyReq::has_auth() const {
  return _internal_has_auth();
}
inline void UnfinObjAttrModifyReq::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ClientCos::Authority UnfinObjAttrModifyReq::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority UnfinObjAttrModifyReq::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.UnfinObjAttrModifyReq.auth)
  return _internal_auth();
}
inline void UnfinObjAttrModifyReq::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  auth_ = value;
}
inline void UnfinObjAttrModifyReq::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.UnfinObjAttrModifyReq.auth)
}

// -------------------------------------------------------------------

// UnfinObjAttrModifyRsp

// -------------------------------------------------------------------

// AppAttrQueryReq

// required bytes appid = 1;
inline bool AppAttrQueryReq::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppAttrQueryReq::has_appid() const {
  return _internal_has_appid();
}
inline void AppAttrQueryReq::clear_appid() {
  appid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppAttrQueryReq::appid() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttrQueryReq.appid)
  return _internal_appid();
}
inline void AppAttrQueryReq::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttrQueryReq.appid)
}
inline std::string* AppAttrQueryReq::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttrQueryReq.appid)
  return _internal_mutable_appid();
}
inline const std::string& AppAttrQueryReq::_internal_appid() const {
  return appid_.Get();
}
inline void AppAttrQueryReq::_internal_set_appid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttrQueryReq::set_appid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttrQueryReq.appid)
}
inline void AppAttrQueryReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttrQueryReq.appid)
}
inline void AppAttrQueryReq::set_appid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttrQueryReq.appid)
}
inline std::string* AppAttrQueryReq::_internal_mutable_appid() {
  _has_bits_[0] |= 0x00000001u;
  return appid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttrQueryReq::release_appid() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttrQueryReq.appid)
  if (!_internal_has_appid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttrQueryReq::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttrQueryReq.appid)
}

// -------------------------------------------------------------------

// AppAttrQueryRsp

// repeated .ClientCos.KeyPair keys = 1;
inline int AppAttrQueryRsp::_internal_keys_size() const {
  return keys_.size();
}
inline int AppAttrQueryRsp::keys_size() const {
  return _internal_keys_size();
}
inline void AppAttrQueryRsp::clear_keys() {
  keys_.Clear();
}
inline ::ClientCos::KeyPair* AppAttrQueryRsp::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttrQueryRsp.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >*
AppAttrQueryRsp::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttrQueryRsp.keys)
  return &keys_;
}
inline const ::ClientCos::KeyPair& AppAttrQueryRsp::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::ClientCos::KeyPair& AppAttrQueryRsp::keys(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttrQueryRsp.keys)
  return _internal_keys(index);
}
inline ::ClientCos::KeyPair* AppAttrQueryRsp::_internal_add_keys() {
  return keys_.Add();
}
inline ::ClientCos::KeyPair* AppAttrQueryRsp::add_keys() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttrQueryRsp.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >&
AppAttrQueryRsp::keys() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttrQueryRsp.keys)
  return keys_;
}

// optional uint32 ctime = 2;
inline bool AppAttrQueryRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppAttrQueryRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void AppAttrQueryRsp::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttrQueryRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttrQueryRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttrQueryRsp.ctime)
  return _internal_ctime();
}
inline void AppAttrQueryRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ctime_ = value;
}
inline void AppAttrQueryRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttrQueryRsp.ctime)
}

// optional uint32 mtime = 3;
inline bool AppAttrQueryRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppAttrQueryRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void AppAttrQueryRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttrQueryRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttrQueryRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttrQueryRsp.mtime)
  return _internal_mtime();
}
inline void AppAttrQueryRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtime_ = value;
}
inline void AppAttrQueryRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttrQueryRsp.mtime)
}

// -------------------------------------------------------------------

// AppAttrModifyReq

// required bytes appid = 1;
inline bool AppAttrModifyReq::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppAttrModifyReq::has_appid() const {
  return _internal_has_appid();
}
inline void AppAttrModifyReq::clear_appid() {
  appid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppAttrModifyReq::appid() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttrModifyReq.appid)
  return _internal_appid();
}
inline void AppAttrModifyReq::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttrModifyReq.appid)
}
inline std::string* AppAttrModifyReq::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttrModifyReq.appid)
  return _internal_mutable_appid();
}
inline const std::string& AppAttrModifyReq::_internal_appid() const {
  return appid_.Get();
}
inline void AppAttrModifyReq::_internal_set_appid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttrModifyReq::set_appid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttrModifyReq.appid)
}
inline void AppAttrModifyReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttrModifyReq.appid)
}
inline void AppAttrModifyReq::set_appid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttrModifyReq.appid)
}
inline std::string* AppAttrModifyReq::_internal_mutable_appid() {
  _has_bits_[0] |= 0x00000001u;
  return appid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttrModifyReq::release_appid() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttrModifyReq.appid)
  if (!_internal_has_appid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttrModifyReq::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttrModifyReq.appid)
}

// repeated .ClientCos.KeyPair keys = 2;
inline int AppAttrModifyReq::_internal_keys_size() const {
  return keys_.size();
}
inline int AppAttrModifyReq::keys_size() const {
  return _internal_keys_size();
}
inline void AppAttrModifyReq::clear_keys() {
  keys_.Clear();
}
inline ::ClientCos::KeyPair* AppAttrModifyReq::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttrModifyReq.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >*
AppAttrModifyReq::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttrModifyReq.keys)
  return &keys_;
}
inline const ::ClientCos::KeyPair& AppAttrModifyReq::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::ClientCos::KeyPair& AppAttrModifyReq::keys(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttrModifyReq.keys)
  return _internal_keys(index);
}
inline ::ClientCos::KeyPair* AppAttrModifyReq::_internal_add_keys() {
  return keys_.Add();
}
inline ::ClientCos::KeyPair* AppAttrModifyReq::add_keys() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttrModifyReq.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >&
AppAttrModifyReq::keys() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttrModifyReq.keys)
  return keys_;
}

// -------------------------------------------------------------------

// AppAttrModifyRsp

// -------------------------------------------------------------------

// PreviewFileAttrQueryReq

// required bytes path = 1;
inline bool PreviewFileAttrQueryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryReq::has_path() const {
  return _internal_has_path();
}
inline void PreviewFileAttrQueryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreviewFileAttrQueryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryReq.path)
  return _internal_path();
}
inline void PreviewFileAttrQueryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryReq.path)
}
inline std::string* PreviewFileAttrQueryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PreviewFileAttrQueryReq.path)
  return _internal_mutable_path();
}
inline const std::string& PreviewFileAttrQueryReq::_internal_path() const {
  return path_.Get();
}
inline void PreviewFileAttrQueryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewFileAttrQueryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PreviewFileAttrQueryReq.path)
}
inline void PreviewFileAttrQueryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PreviewFileAttrQueryReq.path)
}
inline void PreviewFileAttrQueryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PreviewFileAttrQueryReq.path)
}
inline std::string* PreviewFileAttrQueryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewFileAttrQueryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.PreviewFileAttrQueryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewFileAttrQueryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PreviewFileAttrQueryReq.path)
}

// optional string sign = 2 [default = ""];
inline bool PreviewFileAttrQueryReq::_internal_has_sign() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryReq::has_sign() const {
  return _internal_has_sign();
}
inline void PreviewFileAttrQueryReq::clear_sign() {
  sign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PreviewFileAttrQueryReq::sign() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryReq.sign)
  return _internal_sign();
}
inline void PreviewFileAttrQueryReq::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryReq.sign)
}
inline std::string* PreviewFileAttrQueryReq::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PreviewFileAttrQueryReq.sign)
  return _internal_mutable_sign();
}
inline const std::string& PreviewFileAttrQueryReq::_internal_sign() const {
  return sign_.Get();
}
inline void PreviewFileAttrQueryReq::_internal_set_sign(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewFileAttrQueryReq::set_sign(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sign_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PreviewFileAttrQueryReq.sign)
}
inline void PreviewFileAttrQueryReq::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PreviewFileAttrQueryReq.sign)
}
inline void PreviewFileAttrQueryReq::set_sign(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PreviewFileAttrQueryReq.sign)
}
inline std::string* PreviewFileAttrQueryReq::_internal_mutable_sign() {
  _has_bits_[0] |= 0x00000002u;
  return sign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewFileAttrQueryReq::release_sign() {
  // @@protoc_insertion_point(field_release:ClientCos.PreviewFileAttrQueryReq.sign)
  if (!_internal_has_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewFileAttrQueryReq::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PreviewFileAttrQueryReq.sign)
}

// optional string refer = 3 [default = ""];
inline bool PreviewFileAttrQueryReq::_internal_has_refer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryReq::has_refer() const {
  return _internal_has_refer();
}
inline void PreviewFileAttrQueryReq::clear_refer() {
  refer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PreviewFileAttrQueryReq::refer() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryReq.refer)
  return _internal_refer();
}
inline void PreviewFileAttrQueryReq::set_refer(const std::string& value) {
  _internal_set_refer(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryReq.refer)
}
inline std::string* PreviewFileAttrQueryReq::mutable_refer() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PreviewFileAttrQueryReq.refer)
  return _internal_mutable_refer();
}
inline const std::string& PreviewFileAttrQueryReq::_internal_refer() const {
  return refer_.Get();
}
inline void PreviewFileAttrQueryReq::_internal_set_refer(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  refer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewFileAttrQueryReq::set_refer(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  refer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PreviewFileAttrQueryReq.refer)
}
inline void PreviewFileAttrQueryReq::set_refer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  refer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PreviewFileAttrQueryReq.refer)
}
inline void PreviewFileAttrQueryReq::set_refer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  refer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PreviewFileAttrQueryReq.refer)
}
inline std::string* PreviewFileAttrQueryReq::_internal_mutable_refer() {
  _has_bits_[0] |= 0x00000004u;
  return refer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewFileAttrQueryReq::release_refer() {
  // @@protoc_insertion_point(field_release:ClientCos.PreviewFileAttrQueryReq.refer)
  if (!_internal_has_refer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return refer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewFileAttrQueryReq::set_allocated_refer(std::string* refer) {
  if (refer != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  refer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PreviewFileAttrQueryReq.refer)
}

// -------------------------------------------------------------------

// PreviewFileAttrQueryRsp

// optional bytes biz_attr = 1;
inline bool PreviewFileAttrQueryRsp::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void PreviewFileAttrQueryRsp::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreviewFileAttrQueryRsp::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
  return _internal_biz_attr();
}
inline void PreviewFileAttrQueryRsp::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
}
inline std::string* PreviewFileAttrQueryRsp::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& PreviewFileAttrQueryRsp::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void PreviewFileAttrQueryRsp::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewFileAttrQueryRsp::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
}
inline void PreviewFileAttrQueryRsp::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
}
inline void PreviewFileAttrQueryRsp::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
}
inline std::string* PreviewFileAttrQueryRsp::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000001u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewFileAttrQueryRsp::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewFileAttrQueryRsp::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PreviewFileAttrQueryRsp.biz_attr)
}

// optional uint64 file_size = 2;
inline bool PreviewFileAttrQueryRsp::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_file_size() const {
  return _internal_has_file_size();
}
inline void PreviewFileAttrQueryRsp::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PreviewFileAttrQueryRsp::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PreviewFileAttrQueryRsp::file_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.file_size)
  return _internal_file_size();
}
inline void PreviewFileAttrQueryRsp::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  file_size_ = value;
}
inline void PreviewFileAttrQueryRsp::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.file_size)
}

// optional uint64 file_length = 3;
inline bool PreviewFileAttrQueryRsp::_internal_has_file_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_file_length() const {
  return _internal_has_file_length();
}
inline void PreviewFileAttrQueryRsp::clear_file_length() {
  file_length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PreviewFileAttrQueryRsp::_internal_file_length() const {
  return file_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PreviewFileAttrQueryRsp::file_length() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.file_length)
  return _internal_file_length();
}
inline void PreviewFileAttrQueryRsp::_internal_set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  file_length_ = value;
}
inline void PreviewFileAttrQueryRsp::set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_length(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.file_length)
}

// optional bytes sha = 4;
inline bool PreviewFileAttrQueryRsp::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_sha() const {
  return _internal_has_sha();
}
inline void PreviewFileAttrQueryRsp::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PreviewFileAttrQueryRsp::sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.sha)
  return _internal_sha();
}
inline void PreviewFileAttrQueryRsp::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.sha)
}
inline std::string* PreviewFileAttrQueryRsp::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PreviewFileAttrQueryRsp.sha)
  return _internal_mutable_sha();
}
inline const std::string& PreviewFileAttrQueryRsp::_internal_sha() const {
  return sha_.Get();
}
inline void PreviewFileAttrQueryRsp::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewFileAttrQueryRsp::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PreviewFileAttrQueryRsp.sha)
}
inline void PreviewFileAttrQueryRsp::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PreviewFileAttrQueryRsp.sha)
}
inline void PreviewFileAttrQueryRsp::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PreviewFileAttrQueryRsp.sha)
}
inline std::string* PreviewFileAttrQueryRsp::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000002u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewFileAttrQueryRsp::release_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.PreviewFileAttrQueryRsp.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewFileAttrQueryRsp::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PreviewFileAttrQueryRsp.sha)
}

// optional uint32 ctime = 5;
inline bool PreviewFileAttrQueryRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void PreviewFileAttrQueryRsp::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PreviewFileAttrQueryRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PreviewFileAttrQueryRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.ctime)
  return _internal_ctime();
}
inline void PreviewFileAttrQueryRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ctime_ = value;
}
inline void PreviewFileAttrQueryRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.ctime)
}

// optional uint32 mtime = 6;
inline bool PreviewFileAttrQueryRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void PreviewFileAttrQueryRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PreviewFileAttrQueryRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PreviewFileAttrQueryRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.mtime)
  return _internal_mtime();
}
inline void PreviewFileAttrQueryRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mtime_ = value;
}
inline void PreviewFileAttrQueryRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.mtime)
}

// optional .ClientCos.Authority auth = 7;
inline bool PreviewFileAttrQueryRsp::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_auth() const {
  return _internal_has_auth();
}
inline void PreviewFileAttrQueryRsp::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ClientCos::Authority PreviewFileAttrQueryRsp::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority PreviewFileAttrQueryRsp::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.auth)
  return _internal_auth();
}
inline void PreviewFileAttrQueryRsp::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  auth_ = value;
}
inline void PreviewFileAttrQueryRsp::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.auth)
}

// optional bool preview = 8;
inline bool PreviewFileAttrQueryRsp::_internal_has_preview() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PreviewFileAttrQueryRsp::has_preview() const {
  return _internal_has_preview();
}
inline void PreviewFileAttrQueryRsp::clear_preview() {
  preview_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PreviewFileAttrQueryRsp::_internal_preview() const {
  return preview_;
}
inline bool PreviewFileAttrQueryRsp::preview() const {
  // @@protoc_insertion_point(field_get:ClientCos.PreviewFileAttrQueryRsp.preview)
  return _internal_preview();
}
inline void PreviewFileAttrQueryRsp::_internal_set_preview(bool value) {
  _has_bits_[0] |= 0x00000080u;
  preview_ = value;
}
inline void PreviewFileAttrQueryRsp::set_preview(bool value) {
  _internal_set_preview(value);
  // @@protoc_insertion_point(field_set:ClientCos.PreviewFileAttrQueryRsp.preview)
}

// -------------------------------------------------------------------

// ObjModTimeStampReq

// required bytes path = 1;
inline bool ObjModTimeStampReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjModTimeStampReq::has_path() const {
  return _internal_has_path();
}
inline void ObjModTimeStampReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjModTimeStampReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModTimeStampReq.path)
  return _internal_path();
}
inline void ObjModTimeStampReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModTimeStampReq.path)
}
inline std::string* ObjModTimeStampReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjModTimeStampReq.path)
  return _internal_mutable_path();
}
inline const std::string& ObjModTimeStampReq::_internal_path() const {
  return path_.Get();
}
inline void ObjModTimeStampReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjModTimeStampReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjModTimeStampReq.path)
}
inline void ObjModTimeStampReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjModTimeStampReq.path)
}
inline void ObjModTimeStampReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjModTimeStampReq.path)
}
inline std::string* ObjModTimeStampReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjModTimeStampReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjModTimeStampReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjModTimeStampReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjModTimeStampReq.path)
}

// optional uint32 ctime = 2;
inline bool ObjModTimeStampReq::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjModTimeStampReq::has_ctime() const {
  return _internal_has_ctime();
}
inline void ObjModTimeStampReq::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjModTimeStampReq::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjModTimeStampReq::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModTimeStampReq.ctime)
  return _internal_ctime();
}
inline void ObjModTimeStampReq::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ctime_ = value;
}
inline void ObjModTimeStampReq::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModTimeStampReq.ctime)
}

// optional uint32 mtime = 3;
inline bool ObjModTimeStampReq::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjModTimeStampReq::has_mtime() const {
  return _internal_has_mtime();
}
inline void ObjModTimeStampReq::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjModTimeStampReq::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjModTimeStampReq::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModTimeStampReq.mtime)
  return _internal_mtime();
}
inline void ObjModTimeStampReq::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mtime_ = value;
}
inline void ObjModTimeStampReq::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModTimeStampReq.mtime)
}

// -------------------------------------------------------------------

// ObjModTimeStampRsp

// -------------------------------------------------------------------

// delObj

// required bytes path = 1;
inline bool delObj::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool delObj::has_path() const {
  return _internal_has_path();
}
inline void delObj::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& delObj::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.delObj.path)
  return _internal_path();
}
inline void delObj::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.delObj.path)
}
inline std::string* delObj::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.delObj.path)
  return _internal_mutable_path();
}
inline const std::string& delObj::_internal_path() const {
  return path_.Get();
}
inline void delObj::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void delObj::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.delObj.path)
}
inline void delObj::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.delObj.path)
}
inline void delObj::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.delObj.path)
}
inline std::string* delObj::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* delObj::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.delObj.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void delObj::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.delObj.path)
}

// optional bytes version = 2;
inline bool delObj::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool delObj::has_version() const {
  return _internal_has_version();
}
inline void delObj::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& delObj::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.delObj.version)
  return _internal_version();
}
inline void delObj::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.delObj.version)
}
inline std::string* delObj::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.delObj.version)
  return _internal_mutable_version();
}
inline const std::string& delObj::_internal_version() const {
  return version_.Get();
}
inline void delObj::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void delObj::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.delObj.version)
}
inline void delObj::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.delObj.version)
}
inline void delObj::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.delObj.version)
}
inline std::string* delObj::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* delObj::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.delObj.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void delObj::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.delObj.version)
}

// -------------------------------------------------------------------

// FileBatchDelReq

// repeated .ClientCos.delObj obj = 1;
inline int FileBatchDelReq::_internal_obj_size() const {
  return obj_.size();
}
inline int FileBatchDelReq::obj_size() const {
  return _internal_obj_size();
}
inline void FileBatchDelReq::clear_obj() {
  obj_.Clear();
}
inline ::ClientCos::delObj* FileBatchDelReq::mutable_obj(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileBatchDelReq.obj)
  return obj_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::delObj >*
FileBatchDelReq::mutable_obj() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.FileBatchDelReq.obj)
  return &obj_;
}
inline const ::ClientCos::delObj& FileBatchDelReq::_internal_obj(int index) const {
  return obj_.Get(index);
}
inline const ::ClientCos::delObj& FileBatchDelReq::obj(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.FileBatchDelReq.obj)
  return _internal_obj(index);
}
inline ::ClientCos::delObj* FileBatchDelReq::_internal_add_obj() {
  return obj_.Add();
}
inline ::ClientCos::delObj* FileBatchDelReq::add_obj() {
  // @@protoc_insertion_point(field_add:ClientCos.FileBatchDelReq.obj)
  return _internal_add_obj();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::delObj >&
FileBatchDelReq::obj() const {
  // @@protoc_insertion_point(field_list:ClientCos.FileBatchDelReq.obj)
  return obj_;
}

// -------------------------------------------------------------------

// FileDelState

// required bytes path = 1;
inline bool FileDelState::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileDelState::has_path() const {
  return _internal_has_path();
}
inline void FileDelState::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileDelState::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelState.path)
  return _internal_path();
}
inline void FileDelState::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelState.path)
}
inline std::string* FileDelState::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDelState.path)
  return _internal_mutable_path();
}
inline const std::string& FileDelState::_internal_path() const {
  return path_.Get();
}
inline void FileDelState::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDelState::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDelState.path)
}
inline void FileDelState::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDelState.path)
}
inline void FileDelState::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDelState.path)
}
inline std::string* FileDelState::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDelState::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDelState.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDelState::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDelState.path)
}

// required int32 retcode = 2;
inline bool FileDelState::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileDelState::has_retcode() const {
  return _internal_has_retcode();
}
inline void FileDelState::clear_retcode() {
  retcode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileDelState::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileDelState::retcode() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelState.retcode)
  return _internal_retcode();
}
inline void FileDelState::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  retcode_ = value;
}
inline void FileDelState::set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelState.retcode)
}

// required string retmsg = 3;
inline bool FileDelState::_internal_has_retmsg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileDelState::has_retmsg() const {
  return _internal_has_retmsg();
}
inline void FileDelState::clear_retmsg() {
  retmsg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileDelState::retmsg() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelState.retmsg)
  return _internal_retmsg();
}
inline void FileDelState::set_retmsg(const std::string& value) {
  _internal_set_retmsg(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelState.retmsg)
}
inline std::string* FileDelState::mutable_retmsg() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDelState.retmsg)
  return _internal_mutable_retmsg();
}
inline const std::string& FileDelState::_internal_retmsg() const {
  return retmsg_.Get();
}
inline void FileDelState::_internal_set_retmsg(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDelState::set_retmsg(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  retmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDelState.retmsg)
}
inline void FileDelState::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDelState.retmsg)
}
inline void FileDelState::set_retmsg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  retmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDelState.retmsg)
}
inline std::string* FileDelState::_internal_mutable_retmsg() {
  _has_bits_[0] |= 0x00000002u;
  return retmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDelState::release_retmsg() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDelState.retmsg)
  if (!_internal_has_retmsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return retmsg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDelState::set_allocated_retmsg(std::string* retmsg) {
  if (retmsg != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  retmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDelState.retmsg)
}

// optional bytes version = 4;
inline bool FileDelState::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileDelState::has_version() const {
  return _internal_has_version();
}
inline void FileDelState::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileDelState::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelState.version)
  return _internal_version();
}
inline void FileDelState::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelState.version)
}
inline std::string* FileDelState::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDelState.version)
  return _internal_mutable_version();
}
inline const std::string& FileDelState::_internal_version() const {
  return version_.Get();
}
inline void FileDelState::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDelState::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDelState.version)
}
inline void FileDelState::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDelState.version)
}
inline void FileDelState::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDelState.version)
}
inline std::string* FileDelState::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDelState::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDelState.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDelState::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDelState.version)
}

// optional bool delete_marker = 5;
inline bool FileDelState::_internal_has_delete_marker() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileDelState::has_delete_marker() const {
  return _internal_has_delete_marker();
}
inline void FileDelState::clear_delete_marker() {
  delete_marker_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FileDelState::_internal_delete_marker() const {
  return delete_marker_;
}
inline bool FileDelState::delete_marker() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelState.delete_marker)
  return _internal_delete_marker();
}
inline void FileDelState::_internal_set_delete_marker(bool value) {
  _has_bits_[0] |= 0x00000010u;
  delete_marker_ = value;
}
inline void FileDelState::set_delete_marker(bool value) {
  _internal_set_delete_marker(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelState.delete_marker)
}

// optional bool add_delmarker = 6 [default = false];
inline bool FileDelState::_internal_has_add_delmarker() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FileDelState::has_add_delmarker() const {
  return _internal_has_add_delmarker();
}
inline void FileDelState::clear_add_delmarker() {
  add_delmarker_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FileDelState::_internal_add_delmarker() const {
  return add_delmarker_;
}
inline bool FileDelState::add_delmarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelState.add_delmarker)
  return _internal_add_delmarker();
}
inline void FileDelState::_internal_set_add_delmarker(bool value) {
  _has_bits_[0] |= 0x00000020u;
  add_delmarker_ = value;
}
inline void FileDelState::set_add_delmarker(bool value) {
  _internal_set_add_delmarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelState.add_delmarker)
}

// -------------------------------------------------------------------

// FileBatchDelRsp

// repeated .ClientCos.FileDelState delstate = 1;
inline int FileBatchDelRsp::_internal_delstate_size() const {
  return delstate_.size();
}
inline int FileBatchDelRsp::delstate_size() const {
  return _internal_delstate_size();
}
inline void FileBatchDelRsp::clear_delstate() {
  delstate_.Clear();
}
inline ::ClientCos::FileDelState* FileBatchDelRsp::mutable_delstate(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileBatchDelRsp.delstate)
  return delstate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::FileDelState >*
FileBatchDelRsp::mutable_delstate() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.FileBatchDelRsp.delstate)
  return &delstate_;
}
inline const ::ClientCos::FileDelState& FileBatchDelRsp::_internal_delstate(int index) const {
  return delstate_.Get(index);
}
inline const ::ClientCos::FileDelState& FileBatchDelRsp::delstate(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.FileBatchDelRsp.delstate)
  return _internal_delstate(index);
}
inline ::ClientCos::FileDelState* FileBatchDelRsp::_internal_add_delstate() {
  return delstate_.Add();
}
inline ::ClientCos::FileDelState* FileBatchDelRsp::add_delstate() {
  // @@protoc_insertion_point(field_add:ClientCos.FileBatchDelRsp.delstate)
  return _internal_add_delstate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::FileDelState >&
FileBatchDelRsp::delstate() const {
  // @@protoc_insertion_point(field_list:ClientCos.FileBatchDelRsp.delstate)
  return delstate_;
}

// optional bytes extraattr = 2;
inline bool FileBatchDelRsp::_internal_has_extraattr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileBatchDelRsp::has_extraattr() const {
  return _internal_has_extraattr();
}
inline void FileBatchDelRsp::clear_extraattr() {
  extraattr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileBatchDelRsp::extraattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileBatchDelRsp.extraattr)
  return _internal_extraattr();
}
inline void FileBatchDelRsp::set_extraattr(const std::string& value) {
  _internal_set_extraattr(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileBatchDelRsp.extraattr)
}
inline std::string* FileBatchDelRsp::mutable_extraattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileBatchDelRsp.extraattr)
  return _internal_mutable_extraattr();
}
inline const std::string& FileBatchDelRsp::_internal_extraattr() const {
  return extraattr_.Get();
}
inline void FileBatchDelRsp::_internal_set_extraattr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extraattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileBatchDelRsp::set_extraattr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  extraattr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileBatchDelRsp.extraattr)
}
inline void FileBatchDelRsp::set_extraattr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  extraattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileBatchDelRsp.extraattr)
}
inline void FileBatchDelRsp::set_extraattr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  extraattr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileBatchDelRsp.extraattr)
}
inline std::string* FileBatchDelRsp::_internal_mutable_extraattr() {
  _has_bits_[0] |= 0x00000001u;
  return extraattr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileBatchDelRsp::release_extraattr() {
  // @@protoc_insertion_point(field_release:ClientCos.FileBatchDelRsp.extraattr)
  if (!_internal_has_extraattr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extraattr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileBatchDelRsp::set_allocated_extraattr(std::string* extraattr) {
  if (extraattr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extraattr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extraattr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileBatchDelRsp.extraattr)
}

// -------------------------------------------------------------------

// UploadDelmarkerReq

// required bytes path = 1;
inline bool UploadDelmarkerReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UploadDelmarkerReq::has_path() const {
  return _internal_has_path();
}
inline void UploadDelmarkerReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadDelmarkerReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadDelmarkerReq.path)
  return _internal_path();
}
inline void UploadDelmarkerReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.UploadDelmarkerReq.path)
}
inline std::string* UploadDelmarkerReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UploadDelmarkerReq.path)
  return _internal_mutable_path();
}
inline const std::string& UploadDelmarkerReq::_internal_path() const {
  return path_.Get();
}
inline void UploadDelmarkerReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadDelmarkerReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UploadDelmarkerReq.path)
}
inline void UploadDelmarkerReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UploadDelmarkerReq.path)
}
inline void UploadDelmarkerReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UploadDelmarkerReq.path)
}
inline std::string* UploadDelmarkerReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadDelmarkerReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.UploadDelmarkerReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadDelmarkerReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UploadDelmarkerReq.path)
}

// required bytes version = 2;
inline bool UploadDelmarkerReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UploadDelmarkerReq::has_version() const {
  return _internal_has_version();
}
inline void UploadDelmarkerReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UploadDelmarkerReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadDelmarkerReq.version)
  return _internal_version();
}
inline void UploadDelmarkerReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.UploadDelmarkerReq.version)
}
inline std::string* UploadDelmarkerReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UploadDelmarkerReq.version)
  return _internal_mutable_version();
}
inline const std::string& UploadDelmarkerReq::_internal_version() const {
  return version_.Get();
}
inline void UploadDelmarkerReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadDelmarkerReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UploadDelmarkerReq.version)
}
inline void UploadDelmarkerReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UploadDelmarkerReq.version)
}
inline void UploadDelmarkerReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UploadDelmarkerReq.version)
}
inline std::string* UploadDelmarkerReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadDelmarkerReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.UploadDelmarkerReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadDelmarkerReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UploadDelmarkerReq.version)
}

// optional bytes storage_type = 3 [default = "Standard"];
inline bool UploadDelmarkerReq::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UploadDelmarkerReq::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void UploadDelmarkerReq::clear_storage_type() {
  storage_type_.ClearToDefault(::ClientCos::UploadDelmarkerReq::_i_give_permission_to_break_this_code_default_storage_type_, GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UploadDelmarkerReq::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadDelmarkerReq.storage_type)
  if (storage_type_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_storage_type_.get();
  return _internal_storage_type();
}
inline void UploadDelmarkerReq::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.UploadDelmarkerReq.storage_type)
}
inline std::string* UploadDelmarkerReq::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UploadDelmarkerReq.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& UploadDelmarkerReq::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void UploadDelmarkerReq::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void UploadDelmarkerReq::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UploadDelmarkerReq.storage_type)
}
inline void UploadDelmarkerReq::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UploadDelmarkerReq.storage_type)
}
inline void UploadDelmarkerReq::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UploadDelmarkerReq.storage_type)
}
inline std::string* UploadDelmarkerReq::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000004u;
  return storage_type_.Mutable(::ClientCos::UploadDelmarkerReq::_i_give_permission_to_break_this_code_default_storage_type_, GetArena());
}
inline std::string* UploadDelmarkerReq::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.UploadDelmarkerReq.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return storage_type_.ReleaseNonDefault(nullptr, GetArena());
}
inline void UploadDelmarkerReq::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_type_.SetAllocated(nullptr, storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UploadDelmarkerReq.storage_type)
}

// optional bool is_ugc = 4;
inline bool UploadDelmarkerReq::_internal_has_is_ugc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UploadDelmarkerReq::has_is_ugc() const {
  return _internal_has_is_ugc();
}
inline void UploadDelmarkerReq::clear_is_ugc() {
  is_ugc_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool UploadDelmarkerReq::_internal_is_ugc() const {
  return is_ugc_;
}
inline bool UploadDelmarkerReq::is_ugc() const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadDelmarkerReq.is_ugc)
  return _internal_is_ugc();
}
inline void UploadDelmarkerReq::_internal_set_is_ugc(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_ugc_ = value;
}
inline void UploadDelmarkerReq::set_is_ugc(bool value) {
  _internal_set_is_ugc(value);
  // @@protoc_insertion_point(field_set:ClientCos.UploadDelmarkerReq.is_ugc)
}

// optional bytes trsf_args = 5;
inline bool UploadDelmarkerReq::_internal_has_trsf_args() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UploadDelmarkerReq::has_trsf_args() const {
  return _internal_has_trsf_args();
}
inline void UploadDelmarkerReq::clear_trsf_args() {
  trsf_args_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UploadDelmarkerReq::trsf_args() const {
  // @@protoc_insertion_point(field_get:ClientCos.UploadDelmarkerReq.trsf_args)
  return _internal_trsf_args();
}
inline void UploadDelmarkerReq::set_trsf_args(const std::string& value) {
  _internal_set_trsf_args(value);
  // @@protoc_insertion_point(field_set:ClientCos.UploadDelmarkerReq.trsf_args)
}
inline std::string* UploadDelmarkerReq::mutable_trsf_args() {
  // @@protoc_insertion_point(field_mutable:ClientCos.UploadDelmarkerReq.trsf_args)
  return _internal_mutable_trsf_args();
}
inline const std::string& UploadDelmarkerReq::_internal_trsf_args() const {
  return trsf_args_.Get();
}
inline void UploadDelmarkerReq::_internal_set_trsf_args(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  trsf_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadDelmarkerReq::set_trsf_args(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  trsf_args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.UploadDelmarkerReq.trsf_args)
}
inline void UploadDelmarkerReq::set_trsf_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  trsf_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.UploadDelmarkerReq.trsf_args)
}
inline void UploadDelmarkerReq::set_trsf_args(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  trsf_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.UploadDelmarkerReq.trsf_args)
}
inline std::string* UploadDelmarkerReq::_internal_mutable_trsf_args() {
  _has_bits_[0] |= 0x00000008u;
  return trsf_args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadDelmarkerReq::release_trsf_args() {
  // @@protoc_insertion_point(field_release:ClientCos.UploadDelmarkerReq.trsf_args)
  if (!_internal_has_trsf_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return trsf_args_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadDelmarkerReq::set_allocated_trsf_args(std::string* trsf_args) {
  if (trsf_args != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  trsf_args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trsf_args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.UploadDelmarkerReq.trsf_args)
}

// -------------------------------------------------------------------

// UploadDelmarkerRsp

// -------------------------------------------------------------------

// FileUnfinishAttrQueryReq

// required bytes path = 1;
inline bool FileUnfinishAttrQueryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryReq::has_path() const {
  return _internal_has_path();
}
inline void FileUnfinishAttrQueryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileUnfinishAttrQueryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryReq.path)
  return _internal_path();
}
inline void FileUnfinishAttrQueryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryReq.path)
}
inline std::string* FileUnfinishAttrQueryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryReq.path)
  return _internal_mutable_path();
}
inline const std::string& FileUnfinishAttrQueryReq::_internal_path() const {
  return path_.Get();
}
inline void FileUnfinishAttrQueryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileUnfinishAttrQueryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileUnfinishAttrQueryReq.path)
}
inline void FileUnfinishAttrQueryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileUnfinishAttrQueryReq.path)
}
inline void FileUnfinishAttrQueryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileUnfinishAttrQueryReq.path)
}
inline std::string* FileUnfinishAttrQueryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileUnfinishAttrQueryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUnfinishAttrQueryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryReq.path)
}

// optional bytes uploadid = 2;
inline bool FileUnfinishAttrQueryReq::_internal_has_uploadid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryReq::has_uploadid() const {
  return _internal_has_uploadid();
}
inline void FileUnfinishAttrQueryReq::clear_uploadid() {
  uploadid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileUnfinishAttrQueryReq::uploadid() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryReq.uploadid)
  return _internal_uploadid();
}
inline void FileUnfinishAttrQueryReq::set_uploadid(const std::string& value) {
  _internal_set_uploadid(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryReq.uploadid)
}
inline std::string* FileUnfinishAttrQueryReq::mutable_uploadid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryReq.uploadid)
  return _internal_mutable_uploadid();
}
inline const std::string& FileUnfinishAttrQueryReq::_internal_uploadid() const {
  return uploadid_.Get();
}
inline void FileUnfinishAttrQueryReq::_internal_set_uploadid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileUnfinishAttrQueryReq::set_uploadid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileUnfinishAttrQueryReq.uploadid)
}
inline void FileUnfinishAttrQueryReq::set_uploadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileUnfinishAttrQueryReq.uploadid)
}
inline void FileUnfinishAttrQueryReq::set_uploadid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileUnfinishAttrQueryReq.uploadid)
}
inline std::string* FileUnfinishAttrQueryReq::_internal_mutable_uploadid() {
  _has_bits_[0] |= 0x00000002u;
  return uploadid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileUnfinishAttrQueryReq::release_uploadid() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryReq.uploadid)
  if (!_internal_has_uploadid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uploadid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUnfinishAttrQueryReq::set_allocated_uploadid(std::string* uploadid) {
  if (uploadid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uploadid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryReq.uploadid)
}

// -------------------------------------------------------------------

// FileUnfinishAttrQueryRsp

// required bytes sha = 1;
inline bool FileUnfinishAttrQueryRsp::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_sha() const {
  return _internal_has_sha();
}
inline void FileUnfinishAttrQueryRsp::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileUnfinishAttrQueryRsp::sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.sha)
  return _internal_sha();
}
inline void FileUnfinishAttrQueryRsp::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.sha)
}
inline std::string* FileUnfinishAttrQueryRsp::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryRsp.sha)
  return _internal_mutable_sha();
}
inline const std::string& FileUnfinishAttrQueryRsp::_internal_sha() const {
  return sha_.Get();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileUnfinishAttrQueryRsp.sha)
}
inline void FileUnfinishAttrQueryRsp::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileUnfinishAttrQueryRsp.sha)
}
inline void FileUnfinishAttrQueryRsp::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileUnfinishAttrQueryRsp.sha)
}
inline std::string* FileUnfinishAttrQueryRsp::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileUnfinishAttrQueryRsp::release_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryRsp.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.sha)
}

// required uint32 mtime = 2;
inline bool FileUnfinishAttrQueryRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void FileUnfinishAttrQueryRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.mtime)
  return _internal_mtime();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  mtime_ = value;
}
inline void FileUnfinishAttrQueryRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.mtime)
}

// optional bytes storage_type = 3;
inline bool FileUnfinishAttrQueryRsp::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void FileUnfinishAttrQueryRsp::clear_storage_type() {
  storage_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileUnfinishAttrQueryRsp::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
  return _internal_storage_type();
}
inline void FileUnfinishAttrQueryRsp::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
}
inline std::string* FileUnfinishAttrQueryRsp::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& FileUnfinishAttrQueryRsp::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
}
inline void FileUnfinishAttrQueryRsp::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
}
inline void FileUnfinishAttrQueryRsp::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
}
inline std::string* FileUnfinishAttrQueryRsp::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000002u;
  return storage_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileUnfinishAttrQueryRsp::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return storage_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.storage_type)
}

// optional bytes uin = 4;
inline bool FileUnfinishAttrQueryRsp::_internal_has_uin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_uin() const {
  return _internal_has_uin();
}
inline void FileUnfinishAttrQueryRsp::clear_uin() {
  uin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileUnfinishAttrQueryRsp::uin() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.uin)
  return _internal_uin();
}
inline void FileUnfinishAttrQueryRsp::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.uin)
}
inline std::string* FileUnfinishAttrQueryRsp::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryRsp.uin)
  return _internal_mutable_uin();
}
inline const std::string& FileUnfinishAttrQueryRsp::_internal_uin() const {
  return uin_.Get();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_uin(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_uin(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  uin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileUnfinishAttrQueryRsp.uin)
}
inline void FileUnfinishAttrQueryRsp::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileUnfinishAttrQueryRsp.uin)
}
inline void FileUnfinishAttrQueryRsp::set_uin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileUnfinishAttrQueryRsp.uin)
}
inline std::string* FileUnfinishAttrQueryRsp::_internal_mutable_uin() {
  _has_bits_[0] |= 0x00000004u;
  return uin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileUnfinishAttrQueryRsp::release_uin() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryRsp.uin)
  if (!_internal_has_uin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return uin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.uin)
}

// optional uint32 ctime = 5;
inline bool FileUnfinishAttrQueryRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void FileUnfinishAttrQueryRsp::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.ctime)
  return _internal_ctime();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ctime_ = value;
}
inline void FileUnfinishAttrQueryRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.ctime)
}

// optional uint32 usr_slice_size = 6;
inline bool FileUnfinishAttrQueryRsp::_internal_has_usr_slice_size() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_usr_slice_size() const {
  return _internal_has_usr_slice_size();
}
inline void FileUnfinishAttrQueryRsp::clear_usr_slice_size() {
  usr_slice_size_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::_internal_usr_slice_size() const {
  return usr_slice_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::usr_slice_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.usr_slice_size)
  return _internal_usr_slice_size();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  usr_slice_size_ = value;
}
inline void FileUnfinishAttrQueryRsp::set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usr_slice_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.usr_slice_size)
}

// optional uint32 real_slice_size = 7;
inline bool FileUnfinishAttrQueryRsp::_internal_has_real_slice_size() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_real_slice_size() const {
  return _internal_has_real_slice_size();
}
inline void FileUnfinishAttrQueryRsp::clear_real_slice_size() {
  real_slice_size_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::_internal_real_slice_size() const {
  return real_slice_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileUnfinishAttrQueryRsp::real_slice_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.real_slice_size)
  return _internal_real_slice_size();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  real_slice_size_ = value;
}
inline void FileUnfinishAttrQueryRsp::set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_real_slice_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.real_slice_size)
}

// optional uint64 file_size = 8;
inline bool FileUnfinishAttrQueryRsp::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_file_size() const {
  return _internal_has_file_size();
}
inline void FileUnfinishAttrQueryRsp::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileUnfinishAttrQueryRsp::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileUnfinishAttrQueryRsp::file_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.file_size)
  return _internal_file_size();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  file_size_ = value;
}
inline void FileUnfinishAttrQueryRsp::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.file_size)
}

// optional bytes real_sha = 9;
inline bool FileUnfinishAttrQueryRsp::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void FileUnfinishAttrQueryRsp::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FileUnfinishAttrQueryRsp::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
  return _internal_real_sha();
}
inline void FileUnfinishAttrQueryRsp::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
}
inline std::string* FileUnfinishAttrQueryRsp::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& FileUnfinishAttrQueryRsp::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void FileUnfinishAttrQueryRsp::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
}
inline void FileUnfinishAttrQueryRsp::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
}
inline void FileUnfinishAttrQueryRsp::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
}
inline std::string* FileUnfinishAttrQueryRsp::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000008u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileUnfinishAttrQueryRsp::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUnfinishAttrQueryRsp::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.real_sha)
}

// optional .storeinfo info = 10;
inline bool FileUnfinishAttrQueryRsp::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_info() const {
  return _internal_has_info();
}
inline const ::storeinfo& FileUnfinishAttrQueryRsp::_internal_info() const {
  const ::storeinfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::storeinfo&>(
      ::_storeinfo_default_instance_);
}
inline const ::storeinfo& FileUnfinishAttrQueryRsp::info() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.info)
  return _internal_info();
}
inline void FileUnfinishAttrQueryRsp::unsafe_arena_set_allocated_info(
    ::storeinfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.info)
}
inline ::storeinfo* FileUnfinishAttrQueryRsp::release_info() {
  _has_bits_[0] &= ~0x00000010u;
  ::storeinfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::storeinfo* FileUnfinishAttrQueryRsp::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryRsp.info)
  _has_bits_[0] &= ~0x00000010u;
  ::storeinfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::storeinfo* FileUnfinishAttrQueryRsp::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000010u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::storeinfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::storeinfo* FileUnfinishAttrQueryRsp::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryRsp.info)
  return _internal_mutable_info();
}
inline void FileUnfinishAttrQueryRsp::set_allocated_info(::storeinfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.info)
}

// optional .ClientCos.SseInfo sseinfo = 11;
inline bool FileUnfinishAttrQueryRsp::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void FileUnfinishAttrQueryRsp::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ClientCos::SseInfo& FileUnfinishAttrQueryRsp::_internal_sseinfo() const {
  const ::ClientCos::SseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SseInfo&>(
      ::ClientCos::_SseInfo_default_instance_);
}
inline const ::ClientCos::SseInfo& FileUnfinishAttrQueryRsp::sseinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.sseinfo)
  return _internal_sseinfo();
}
inline void FileUnfinishAttrQueryRsp::unsafe_arena_set_allocated_sseinfo(
    ::ClientCos::SseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.sseinfo)
}
inline ::ClientCos::SseInfo* FileUnfinishAttrQueryRsp::release_sseinfo() {
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SseInfo* FileUnfinishAttrQueryRsp::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryRsp.sseinfo)
  _has_bits_[0] &= ~0x00000020u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::SseInfo* FileUnfinishAttrQueryRsp::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000020u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::ClientCos::SseInfo* FileUnfinishAttrQueryRsp::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryRsp.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void FileUnfinishAttrQueryRsp::set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.sseinfo)
}

// optional .ClientCos.CasInfo casinfo = 12;
inline bool FileUnfinishAttrQueryRsp::_internal_has_casinfo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || casinfo_ != nullptr);
  return value;
}
inline bool FileUnfinishAttrQueryRsp::has_casinfo() const {
  return _internal_has_casinfo();
}
inline void FileUnfinishAttrQueryRsp::clear_casinfo() {
  if (casinfo_ != nullptr) casinfo_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ClientCos::CasInfo& FileUnfinishAttrQueryRsp::_internal_casinfo() const {
  const ::ClientCos::CasInfo* p = casinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasInfo&>(
      ::ClientCos::_CasInfo_default_instance_);
}
inline const ::ClientCos::CasInfo& FileUnfinishAttrQueryRsp::casinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileUnfinishAttrQueryRsp.casinfo)
  return _internal_casinfo();
}
inline void FileUnfinishAttrQueryRsp::unsafe_arena_set_allocated_casinfo(
    ::ClientCos::CasInfo* casinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casinfo_);
  }
  casinfo_ = casinfo;
  if (casinfo) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.casinfo)
}
inline ::ClientCos::CasInfo* FileUnfinishAttrQueryRsp::release_casinfo() {
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasInfo* FileUnfinishAttrQueryRsp::unsafe_arena_release_casinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.FileUnfinishAttrQueryRsp.casinfo)
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::CasInfo* FileUnfinishAttrQueryRsp::_internal_mutable_casinfo() {
  _has_bits_[0] |= 0x00000040u;
  if (casinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasInfo>(GetArena());
    casinfo_ = p;
  }
  return casinfo_;
}
inline ::ClientCos::CasInfo* FileUnfinishAttrQueryRsp::mutable_casinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileUnfinishAttrQueryRsp.casinfo)
  return _internal_mutable_casinfo();
}
inline void FileUnfinishAttrQueryRsp::set_allocated_casinfo(::ClientCos::CasInfo* casinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casinfo_;
  }
  if (casinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casinfo);
    if (message_arena != submessage_arena) {
      casinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  casinfo_ = casinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileUnfinishAttrQueryRsp.casinfo)
}

// -------------------------------------------------------------------

// ReduceLifecycleReq

// required bytes path = 1;
inline bool ReduceLifecycleReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReduceLifecycleReq::has_path() const {
  return _internal_has_path();
}
inline void ReduceLifecycleReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReduceLifecycleReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.ReduceLifecycleReq.path)
  return _internal_path();
}
inline void ReduceLifecycleReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.ReduceLifecycleReq.path)
}
inline std::string* ReduceLifecycleReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ReduceLifecycleReq.path)
  return _internal_mutable_path();
}
inline const std::string& ReduceLifecycleReq::_internal_path() const {
  return path_.Get();
}
inline void ReduceLifecycleReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReduceLifecycleReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ReduceLifecycleReq.path)
}
inline void ReduceLifecycleReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ReduceLifecycleReq.path)
}
inline void ReduceLifecycleReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ReduceLifecycleReq.path)
}
inline std::string* ReduceLifecycleReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReduceLifecycleReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.ReduceLifecycleReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReduceLifecycleReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ReduceLifecycleReq.path)
}

// repeated .ClientCos.Opinfo ops = 2;
inline int ReduceLifecycleReq::_internal_ops_size() const {
  return ops_.size();
}
inline int ReduceLifecycleReq::ops_size() const {
  return _internal_ops_size();
}
inline void ReduceLifecycleReq::clear_ops() {
  ops_.Clear();
}
inline ::ClientCos::Opinfo* ReduceLifecycleReq::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ReduceLifecycleReq.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Opinfo >*
ReduceLifecycleReq::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ReduceLifecycleReq.ops)
  return &ops_;
}
inline const ::ClientCos::Opinfo& ReduceLifecycleReq::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::ClientCos::Opinfo& ReduceLifecycleReq::ops(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ReduceLifecycleReq.ops)
  return _internal_ops(index);
}
inline ::ClientCos::Opinfo* ReduceLifecycleReq::_internal_add_ops() {
  return ops_.Add();
}
inline ::ClientCos::Opinfo* ReduceLifecycleReq::add_ops() {
  // @@protoc_insertion_point(field_add:ClientCos.ReduceLifecycleReq.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Opinfo >&
ReduceLifecycleReq::ops() const {
  // @@protoc_insertion_point(field_list:ClientCos.ReduceLifecycleReq.ops)
  return ops_;
}

// required bytes sk = 3;
inline bool ReduceLifecycleReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReduceLifecycleReq::has_sk() const {
  return _internal_has_sk();
}
inline void ReduceLifecycleReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReduceLifecycleReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.ReduceLifecycleReq.sk)
  return _internal_sk();
}
inline void ReduceLifecycleReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.ReduceLifecycleReq.sk)
}
inline std::string* ReduceLifecycleReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ReduceLifecycleReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& ReduceLifecycleReq::_internal_sk() const {
  return sk_.Get();
}
inline void ReduceLifecycleReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReduceLifecycleReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ReduceLifecycleReq.sk)
}
inline void ReduceLifecycleReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ReduceLifecycleReq.sk)
}
inline void ReduceLifecycleReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ReduceLifecycleReq.sk)
}
inline std::string* ReduceLifecycleReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000002u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReduceLifecycleReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.ReduceLifecycleReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReduceLifecycleReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ReduceLifecycleReq.sk)
}

// -------------------------------------------------------------------

// ReduceLifecycleRsp

// -------------------------------------------------------------------

// RetrieveLifecycleReq

// required bytes path = 1;
inline bool RetrieveLifecycleReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RetrieveLifecycleReq::has_path() const {
  return _internal_has_path();
}
inline void RetrieveLifecycleReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RetrieveLifecycleReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.RetrieveLifecycleReq.path)
  return _internal_path();
}
inline void RetrieveLifecycleReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.RetrieveLifecycleReq.path)
}
inline std::string* RetrieveLifecycleReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.RetrieveLifecycleReq.path)
  return _internal_mutable_path();
}
inline const std::string& RetrieveLifecycleReq::_internal_path() const {
  return path_.Get();
}
inline void RetrieveLifecycleReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RetrieveLifecycleReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.RetrieveLifecycleReq.path)
}
inline void RetrieveLifecycleReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.RetrieveLifecycleReq.path)
}
inline void RetrieveLifecycleReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.RetrieveLifecycleReq.path)
}
inline std::string* RetrieveLifecycleReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RetrieveLifecycleReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.RetrieveLifecycleReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RetrieveLifecycleReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.RetrieveLifecycleReq.path)
}

// required uint64 fsize = 2;
inline bool RetrieveLifecycleReq::_internal_has_fsize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RetrieveLifecycleReq::has_fsize() const {
  return _internal_has_fsize();
}
inline void RetrieveLifecycleReq::clear_fsize() {
  fsize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetrieveLifecycleReq::_internal_fsize() const {
  return fsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetrieveLifecycleReq::fsize() const {
  // @@protoc_insertion_point(field_get:ClientCos.RetrieveLifecycleReq.fsize)
  return _internal_fsize();
}
inline void RetrieveLifecycleReq::_internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  fsize_ = value;
}
inline void RetrieveLifecycleReq::set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fsize(value);
  // @@protoc_insertion_point(field_set:ClientCos.RetrieveLifecycleReq.fsize)
}

// required bytes sk = 3;
inline bool RetrieveLifecycleReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RetrieveLifecycleReq::has_sk() const {
  return _internal_has_sk();
}
inline void RetrieveLifecycleReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RetrieveLifecycleReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.RetrieveLifecycleReq.sk)
  return _internal_sk();
}
inline void RetrieveLifecycleReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.RetrieveLifecycleReq.sk)
}
inline std::string* RetrieveLifecycleReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.RetrieveLifecycleReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& RetrieveLifecycleReq::_internal_sk() const {
  return sk_.Get();
}
inline void RetrieveLifecycleReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RetrieveLifecycleReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.RetrieveLifecycleReq.sk)
}
inline void RetrieveLifecycleReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.RetrieveLifecycleReq.sk)
}
inline void RetrieveLifecycleReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.RetrieveLifecycleReq.sk)
}
inline std::string* RetrieveLifecycleReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000002u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RetrieveLifecycleReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.RetrieveLifecycleReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RetrieveLifecycleReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.RetrieveLifecycleReq.sk)
}

// required bytes src_type = 4;
inline bool RetrieveLifecycleReq::_internal_has_src_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RetrieveLifecycleReq::has_src_type() const {
  return _internal_has_src_type();
}
inline void RetrieveLifecycleReq::clear_src_type() {
  src_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RetrieveLifecycleReq::src_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.RetrieveLifecycleReq.src_type)
  return _internal_src_type();
}
inline void RetrieveLifecycleReq::set_src_type(const std::string& value) {
  _internal_set_src_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.RetrieveLifecycleReq.src_type)
}
inline std::string* RetrieveLifecycleReq::mutable_src_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.RetrieveLifecycleReq.src_type)
  return _internal_mutable_src_type();
}
inline const std::string& RetrieveLifecycleReq::_internal_src_type() const {
  return src_type_.Get();
}
inline void RetrieveLifecycleReq::_internal_set_src_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  src_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RetrieveLifecycleReq::set_src_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  src_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.RetrieveLifecycleReq.src_type)
}
inline void RetrieveLifecycleReq::set_src_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  src_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.RetrieveLifecycleReq.src_type)
}
inline void RetrieveLifecycleReq::set_src_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  src_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.RetrieveLifecycleReq.src_type)
}
inline std::string* RetrieveLifecycleReq::_internal_mutable_src_type() {
  _has_bits_[0] |= 0x00000004u;
  return src_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RetrieveLifecycleReq::release_src_type() {
  // @@protoc_insertion_point(field_release:ClientCos.RetrieveLifecycleReq.src_type)
  if (!_internal_has_src_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return src_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RetrieveLifecycleReq::set_allocated_src_type(std::string* src_type) {
  if (src_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  src_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.RetrieveLifecycleReq.src_type)
}

// optional bytes dst_type = 5;
inline bool RetrieveLifecycleReq::_internal_has_dst_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RetrieveLifecycleReq::has_dst_type() const {
  return _internal_has_dst_type();
}
inline void RetrieveLifecycleReq::clear_dst_type() {
  dst_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RetrieveLifecycleReq::dst_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.RetrieveLifecycleReq.dst_type)
  return _internal_dst_type();
}
inline void RetrieveLifecycleReq::set_dst_type(const std::string& value) {
  _internal_set_dst_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.RetrieveLifecycleReq.dst_type)
}
inline std::string* RetrieveLifecycleReq::mutable_dst_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.RetrieveLifecycleReq.dst_type)
  return _internal_mutable_dst_type();
}
inline const std::string& RetrieveLifecycleReq::_internal_dst_type() const {
  return dst_type_.Get();
}
inline void RetrieveLifecycleReq::_internal_set_dst_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dst_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RetrieveLifecycleReq::set_dst_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dst_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.RetrieveLifecycleReq.dst_type)
}
inline void RetrieveLifecycleReq::set_dst_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dst_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.RetrieveLifecycleReq.dst_type)
}
inline void RetrieveLifecycleReq::set_dst_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dst_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.RetrieveLifecycleReq.dst_type)
}
inline std::string* RetrieveLifecycleReq::_internal_mutable_dst_type() {
  _has_bits_[0] |= 0x00000008u;
  return dst_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RetrieveLifecycleReq::release_dst_type() {
  // @@protoc_insertion_point(field_release:ClientCos.RetrieveLifecycleReq.dst_type)
  if (!_internal_has_dst_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dst_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RetrieveLifecycleReq::set_allocated_dst_type(std::string* dst_type) {
  if (dst_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dst_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.RetrieveLifecycleReq.dst_type)
}

// required .ClientCos.Action op = 6;
inline bool RetrieveLifecycleReq::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RetrieveLifecycleReq::has_op() const {
  return _internal_has_op();
}
inline void RetrieveLifecycleReq::clear_op() {
  op_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ClientCos::Action RetrieveLifecycleReq::_internal_op() const {
  return static_cast< ::ClientCos::Action >(op_);
}
inline ::ClientCos::Action RetrieveLifecycleReq::op() const {
  // @@protoc_insertion_point(field_get:ClientCos.RetrieveLifecycleReq.op)
  return _internal_op();
}
inline void RetrieveLifecycleReq::_internal_set_op(::ClientCos::Action value) {
  assert(::ClientCos::Action_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  op_ = value;
}
inline void RetrieveLifecycleReq::set_op(::ClientCos::Action value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:ClientCos.RetrieveLifecycleReq.op)
}

// -------------------------------------------------------------------

// RetrieveLifecycleRsp

// -------------------------------------------------------------------

// Opinfo

// required .ClientCos.Action op = 1;
inline bool Opinfo::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Opinfo::has_op() const {
  return _internal_has_op();
}
inline void Opinfo::clear_op() {
  op_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ClientCos::Action Opinfo::_internal_op() const {
  return static_cast< ::ClientCos::Action >(op_);
}
inline ::ClientCos::Action Opinfo::op() const {
  // @@protoc_insertion_point(field_get:ClientCos.Opinfo.op)
  return _internal_op();
}
inline void Opinfo::_internal_set_op(::ClientCos::Action value) {
  assert(::ClientCos::Action_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  op_ = value;
}
inline void Opinfo::set_op(::ClientCos::Action value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:ClientCos.Opinfo.op)
}

// optional uint64 file_count = 2;
inline bool Opinfo::_internal_has_file_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Opinfo::has_file_count() const {
  return _internal_has_file_count();
}
inline void Opinfo::clear_file_count() {
  file_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Opinfo::_internal_file_count() const {
  return file_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Opinfo::file_count() const {
  // @@protoc_insertion_point(field_get:ClientCos.Opinfo.file_count)
  return _internal_file_count();
}
inline void Opinfo::_internal_set_file_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  file_count_ = value;
}
inline void Opinfo::set_file_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_count(value);
  // @@protoc_insertion_point(field_set:ClientCos.Opinfo.file_count)
}

// optional uint64 storage = 3;
inline bool Opinfo::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Opinfo::has_storage() const {
  return _internal_has_storage();
}
inline void Opinfo::clear_storage() {
  storage_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Opinfo::_internal_storage() const {
  return storage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Opinfo::storage() const {
  // @@protoc_insertion_point(field_get:ClientCos.Opinfo.storage)
  return _internal_storage();
}
inline void Opinfo::_internal_set_storage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  storage_ = value;
}
inline void Opinfo::set_storage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_storage(value);
  // @@protoc_insertion_point(field_set:ClientCos.Opinfo.storage)
}

// optional bytes src_type = 4;
inline bool Opinfo::_internal_has_src_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Opinfo::has_src_type() const {
  return _internal_has_src_type();
}
inline void Opinfo::clear_src_type() {
  src_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Opinfo::src_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.Opinfo.src_type)
  return _internal_src_type();
}
inline void Opinfo::set_src_type(const std::string& value) {
  _internal_set_src_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.Opinfo.src_type)
}
inline std::string* Opinfo::mutable_src_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.Opinfo.src_type)
  return _internal_mutable_src_type();
}
inline const std::string& Opinfo::_internal_src_type() const {
  return src_type_.Get();
}
inline void Opinfo::_internal_set_src_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Opinfo::set_src_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.Opinfo.src_type)
}
inline void Opinfo::set_src_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.Opinfo.src_type)
}
inline void Opinfo::set_src_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.Opinfo.src_type)
}
inline std::string* Opinfo::_internal_mutable_src_type() {
  _has_bits_[0] |= 0x00000001u;
  return src_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Opinfo::release_src_type() {
  // @@protoc_insertion_point(field_release:ClientCos.Opinfo.src_type)
  if (!_internal_has_src_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Opinfo::set_allocated_src_type(std::string* src_type) {
  if (src_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.Opinfo.src_type)
}

// optional bytes dst_type = 5;
inline bool Opinfo::_internal_has_dst_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Opinfo::has_dst_type() const {
  return _internal_has_dst_type();
}
inline void Opinfo::clear_dst_type() {
  dst_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Opinfo::dst_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.Opinfo.dst_type)
  return _internal_dst_type();
}
inline void Opinfo::set_dst_type(const std::string& value) {
  _internal_set_dst_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.Opinfo.dst_type)
}
inline std::string* Opinfo::mutable_dst_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.Opinfo.dst_type)
  return _internal_mutable_dst_type();
}
inline const std::string& Opinfo::_internal_dst_type() const {
  return dst_type_.Get();
}
inline void Opinfo::_internal_set_dst_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Opinfo::set_dst_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.Opinfo.dst_type)
}
inline void Opinfo::set_dst_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dst_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.Opinfo.dst_type)
}
inline void Opinfo::set_dst_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dst_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.Opinfo.dst_type)
}
inline std::string* Opinfo::_internal_mutable_dst_type() {
  _has_bits_[0] |= 0x00000002u;
  return dst_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Opinfo::release_dst_type() {
  // @@protoc_insertion_point(field_release:ClientCos.Opinfo.dst_type)
  if (!_internal_has_dst_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dst_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Opinfo::set_allocated_dst_type(std::string* dst_type) {
  if (dst_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.Opinfo.dst_type)
}

// -------------------------------------------------------------------

// ReservedAttr

// required .ClientCos.ReservedAttrKey key = 1;
inline bool ReservedAttr::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReservedAttr::has_key() const {
  return _internal_has_key();
}
inline void ReservedAttr::clear_key() {
  key_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ClientCos::ReservedAttrKey ReservedAttr::_internal_key() const {
  return static_cast< ::ClientCos::ReservedAttrKey >(key_);
}
inline ::ClientCos::ReservedAttrKey ReservedAttr::key() const {
  // @@protoc_insertion_point(field_get:ClientCos.ReservedAttr.key)
  return _internal_key();
}
inline void ReservedAttr::_internal_set_key(::ClientCos::ReservedAttrKey value) {
  assert(::ClientCos::ReservedAttrKey_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  key_ = value;
}
inline void ReservedAttr::set_key(::ClientCos::ReservedAttrKey value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ClientCos.ReservedAttr.key)
}

// required bytes value = 2 [default = ""];
inline bool ReservedAttr::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReservedAttr::has_value() const {
  return _internal_has_value();
}
inline void ReservedAttr::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReservedAttr::value() const {
  // @@protoc_insertion_point(field_get:ClientCos.ReservedAttr.value)
  return _internal_value();
}
inline void ReservedAttr::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ClientCos.ReservedAttr.value)
}
inline std::string* ReservedAttr::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ReservedAttr.value)
  return _internal_mutable_value();
}
inline const std::string& ReservedAttr::_internal_value() const {
  return value_.Get();
}
inline void ReservedAttr::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReservedAttr::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ReservedAttr.value)
}
inline void ReservedAttr::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ReservedAttr.value)
}
inline void ReservedAttr::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ReservedAttr.value)
}
inline std::string* ReservedAttr::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReservedAttr::release_value() {
  // @@protoc_insertion_point(field_release:ClientCos.ReservedAttr.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReservedAttr::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ReservedAttr.value)
}

// -------------------------------------------------------------------

// CustomHeader

// required bytes key = 1;
inline bool CustomHeader::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomHeader::has_key() const {
  return _internal_has_key();
}
inline void CustomHeader::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomHeader::key() const {
  // @@protoc_insertion_point(field_get:ClientCos.CustomHeader.key)
  return _internal_key();
}
inline void CustomHeader::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ClientCos.CustomHeader.key)
}
inline std::string* CustomHeader::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CustomHeader.key)
  return _internal_mutable_key();
}
inline const std::string& CustomHeader::_internal_key() const {
  return key_.Get();
}
inline void CustomHeader::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomHeader::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CustomHeader.key)
}
inline void CustomHeader::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CustomHeader.key)
}
inline void CustomHeader::set_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CustomHeader.key)
}
inline std::string* CustomHeader::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomHeader::release_key() {
  // @@protoc_insertion_point(field_release:ClientCos.CustomHeader.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomHeader::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CustomHeader.key)
}

// required bytes value = 2;
inline bool CustomHeader::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomHeader::has_value() const {
  return _internal_has_value();
}
inline void CustomHeader::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomHeader::value() const {
  // @@protoc_insertion_point(field_get:ClientCos.CustomHeader.value)
  return _internal_value();
}
inline void CustomHeader::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ClientCos.CustomHeader.value)
}
inline std::string* CustomHeader::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CustomHeader.value)
  return _internal_mutable_value();
}
inline const std::string& CustomHeader::_internal_value() const {
  return value_.Get();
}
inline void CustomHeader::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomHeader::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CustomHeader.value)
}
inline void CustomHeader::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CustomHeader.value)
}
inline void CustomHeader::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CustomHeader.value)
}
inline std::string* CustomHeader::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomHeader::release_value() {
  // @@protoc_insertion_point(field_release:ClientCos.CustomHeader.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomHeader::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CustomHeader.value)
}

// -------------------------------------------------------------------

// CorsRule

// required bytes origin = 1;
inline bool CorsRule::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CorsRule::has_origin() const {
  return _internal_has_origin();
}
inline void CorsRule::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CorsRule::origin() const {
  // @@protoc_insertion_point(field_get:ClientCos.CorsRule.origin)
  return _internal_origin();
}
inline void CorsRule::set_origin(const std::string& value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:ClientCos.CorsRule.origin)
}
inline std::string* CorsRule::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CorsRule.origin)
  return _internal_mutable_origin();
}
inline const std::string& CorsRule::_internal_origin() const {
  return origin_.Get();
}
inline void CorsRule::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CorsRule::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CorsRule.origin)
}
inline void CorsRule::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CorsRule.origin)
}
inline void CorsRule::set_origin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CorsRule.origin)
}
inline std::string* CorsRule::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  return origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CorsRule::release_origin() {
  // @@protoc_insertion_point(field_release:ClientCos.CorsRule.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return origin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CorsRule::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CorsRule.origin)
}

// required bytes methods = 2;
inline bool CorsRule::_internal_has_methods() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CorsRule::has_methods() const {
  return _internal_has_methods();
}
inline void CorsRule::clear_methods() {
  methods_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CorsRule::methods() const {
  // @@protoc_insertion_point(field_get:ClientCos.CorsRule.methods)
  return _internal_methods();
}
inline void CorsRule::set_methods(const std::string& value) {
  _internal_set_methods(value);
  // @@protoc_insertion_point(field_set:ClientCos.CorsRule.methods)
}
inline std::string* CorsRule::mutable_methods() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CorsRule.methods)
  return _internal_mutable_methods();
}
inline const std::string& CorsRule::_internal_methods() const {
  return methods_.Get();
}
inline void CorsRule::_internal_set_methods(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  methods_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CorsRule::set_methods(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  methods_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CorsRule.methods)
}
inline void CorsRule::set_methods(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  methods_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CorsRule.methods)
}
inline void CorsRule::set_methods(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  methods_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CorsRule.methods)
}
inline std::string* CorsRule::_internal_mutable_methods() {
  _has_bits_[0] |= 0x00000002u;
  return methods_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CorsRule::release_methods() {
  // @@protoc_insertion_point(field_release:ClientCos.CorsRule.methods)
  if (!_internal_has_methods()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return methods_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CorsRule::set_allocated_methods(std::string* methods) {
  if (methods != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  methods_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), methods,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CorsRule.methods)
}

// optional bool credentials = 3;
inline bool CorsRule::_internal_has_credentials() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CorsRule::has_credentials() const {
  return _internal_has_credentials();
}
inline void CorsRule::clear_credentials() {
  credentials_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CorsRule::_internal_credentials() const {
  return credentials_;
}
inline bool CorsRule::credentials() const {
  // @@protoc_insertion_point(field_get:ClientCos.CorsRule.credentials)
  return _internal_credentials();
}
inline void CorsRule::_internal_set_credentials(bool value) {
  _has_bits_[0] |= 0x00000020u;
  credentials_ = value;
}
inline void CorsRule::set_credentials(bool value) {
  _internal_set_credentials(value);
  // @@protoc_insertion_point(field_set:ClientCos.CorsRule.credentials)
}

// optional bytes allow_headers = 4;
inline bool CorsRule::_internal_has_allow_headers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CorsRule::has_allow_headers() const {
  return _internal_has_allow_headers();
}
inline void CorsRule::clear_allow_headers() {
  allow_headers_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CorsRule::allow_headers() const {
  // @@protoc_insertion_point(field_get:ClientCos.CorsRule.allow_headers)
  return _internal_allow_headers();
}
inline void CorsRule::set_allow_headers(const std::string& value) {
  _internal_set_allow_headers(value);
  // @@protoc_insertion_point(field_set:ClientCos.CorsRule.allow_headers)
}
inline std::string* CorsRule::mutable_allow_headers() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CorsRule.allow_headers)
  return _internal_mutable_allow_headers();
}
inline const std::string& CorsRule::_internal_allow_headers() const {
  return allow_headers_.Get();
}
inline void CorsRule::_internal_set_allow_headers(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  allow_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CorsRule::set_allow_headers(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  allow_headers_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CorsRule.allow_headers)
}
inline void CorsRule::set_allow_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  allow_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CorsRule.allow_headers)
}
inline void CorsRule::set_allow_headers(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  allow_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CorsRule.allow_headers)
}
inline std::string* CorsRule::_internal_mutable_allow_headers() {
  _has_bits_[0] |= 0x00000004u;
  return allow_headers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CorsRule::release_allow_headers() {
  // @@protoc_insertion_point(field_release:ClientCos.CorsRule.allow_headers)
  if (!_internal_has_allow_headers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return allow_headers_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CorsRule::set_allocated_allow_headers(std::string* allow_headers) {
  if (allow_headers != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  allow_headers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allow_headers,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CorsRule.allow_headers)
}

// optional bytes expose_headers = 5;
inline bool CorsRule::_internal_has_expose_headers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CorsRule::has_expose_headers() const {
  return _internal_has_expose_headers();
}
inline void CorsRule::clear_expose_headers() {
  expose_headers_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CorsRule::expose_headers() const {
  // @@protoc_insertion_point(field_get:ClientCos.CorsRule.expose_headers)
  return _internal_expose_headers();
}
inline void CorsRule::set_expose_headers(const std::string& value) {
  _internal_set_expose_headers(value);
  // @@protoc_insertion_point(field_set:ClientCos.CorsRule.expose_headers)
}
inline std::string* CorsRule::mutable_expose_headers() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CorsRule.expose_headers)
  return _internal_mutable_expose_headers();
}
inline const std::string& CorsRule::_internal_expose_headers() const {
  return expose_headers_.Get();
}
inline void CorsRule::_internal_set_expose_headers(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  expose_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CorsRule::set_expose_headers(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  expose_headers_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CorsRule.expose_headers)
}
inline void CorsRule::set_expose_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  expose_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CorsRule.expose_headers)
}
inline void CorsRule::set_expose_headers(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  expose_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CorsRule.expose_headers)
}
inline std::string* CorsRule::_internal_mutable_expose_headers() {
  _has_bits_[0] |= 0x00000008u;
  return expose_headers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CorsRule::release_expose_headers() {
  // @@protoc_insertion_point(field_release:ClientCos.CorsRule.expose_headers)
  if (!_internal_has_expose_headers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return expose_headers_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CorsRule::set_allocated_expose_headers(std::string* expose_headers) {
  if (expose_headers != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  expose_headers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expose_headers,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CorsRule.expose_headers)
}

// optional int32 max_age = 6;
inline bool CorsRule::_internal_has_max_age() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CorsRule::has_max_age() const {
  return _internal_has_max_age();
}
inline void CorsRule::clear_max_age() {
  max_age_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CorsRule::_internal_max_age() const {
  return max_age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CorsRule::max_age() const {
  // @@protoc_insertion_point(field_get:ClientCos.CorsRule.max_age)
  return _internal_max_age();
}
inline void CorsRule::_internal_set_max_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_age_ = value;
}
inline void CorsRule::set_max_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_age(value);
  // @@protoc_insertion_point(field_set:ClientCos.CorsRule.max_age)
}

// optional bytes id = 7;
inline bool CorsRule::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CorsRule::has_id() const {
  return _internal_has_id();
}
inline void CorsRule::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CorsRule::id() const {
  // @@protoc_insertion_point(field_get:ClientCos.CorsRule.id)
  return _internal_id();
}
inline void CorsRule::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ClientCos.CorsRule.id)
}
inline std::string* CorsRule::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CorsRule.id)
  return _internal_mutable_id();
}
inline const std::string& CorsRule::_internal_id() const {
  return id_.Get();
}
inline void CorsRule::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CorsRule::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CorsRule.id)
}
inline void CorsRule::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CorsRule.id)
}
inline void CorsRule::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CorsRule.id)
}
inline std::string* CorsRule::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000010u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CorsRule::release_id() {
  // @@protoc_insertion_point(field_release:ClientCos.CorsRule.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CorsRule::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CorsRule.id)
}

// -------------------------------------------------------------------

// Tag

// required bytes key = 1;
inline bool Tag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Tag::has_key() const {
  return _internal_has_key();
}
inline void Tag::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tag::key() const {
  // @@protoc_insertion_point(field_get:ClientCos.Tag.key)
  return _internal_key();
}
inline void Tag::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ClientCos.Tag.key)
}
inline std::string* Tag::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ClientCos.Tag.key)
  return _internal_mutable_key();
}
inline const std::string& Tag::_internal_key() const {
  return key_.Get();
}
inline void Tag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Tag::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.Tag.key)
}
inline void Tag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.Tag.key)
}
inline void Tag::set_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.Tag.key)
}
inline std::string* Tag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Tag::release_key() {
  // @@protoc_insertion_point(field_release:ClientCos.Tag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.Tag.key)
}

// required bytes value = 2;
inline bool Tag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Tag::has_value() const {
  return _internal_has_value();
}
inline void Tag::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Tag::value() const {
  // @@protoc_insertion_point(field_get:ClientCos.Tag.value)
  return _internal_value();
}
inline void Tag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ClientCos.Tag.value)
}
inline std::string* Tag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ClientCos.Tag.value)
  return _internal_mutable_value();
}
inline const std::string& Tag::_internal_value() const {
  return value_.Get();
}
inline void Tag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Tag::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.Tag.value)
}
inline void Tag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.Tag.value)
}
inline void Tag::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.Tag.value)
}
inline std::string* Tag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Tag::release_value() {
  // @@protoc_insertion_point(field_release:ClientCos.Tag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.Tag.value)
}

// -------------------------------------------------------------------

// ObjTag

// required bytes key = 1;
inline bool ObjTag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjTag::has_key() const {
  return _internal_has_key();
}
inline void ObjTag::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjTag::key() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjTag.key)
  return _internal_key();
}
inline void ObjTag::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjTag.key)
}
inline std::string* ObjTag::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjTag.key)
  return _internal_mutable_key();
}
inline const std::string& ObjTag::_internal_key() const {
  return key_.Get();
}
inline void ObjTag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjTag::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjTag.key)
}
inline void ObjTag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjTag.key)
}
inline void ObjTag::set_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjTag.key)
}
inline std::string* ObjTag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjTag::release_key() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjTag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjTag.key)
}

// optional bytes value = 2;
inline bool ObjTag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjTag::has_value() const {
  return _internal_has_value();
}
inline void ObjTag::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObjTag::value() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjTag.value)
  return _internal_value();
}
inline void ObjTag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjTag.value)
}
inline std::string* ObjTag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjTag.value)
  return _internal_mutable_value();
}
inline const std::string& ObjTag::_internal_value() const {
  return value_.Get();
}
inline void ObjTag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjTag::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjTag.value)
}
inline void ObjTag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjTag.value)
}
inline void ObjTag::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjTag.value)
}
inline std::string* ObjTag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjTag::release_value() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjTag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjTag.value)
}

// -------------------------------------------------------------------

// LockInfo

// optional uint32 days = 1;
inline bool LockInfo::_internal_has_days() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LockInfo::has_days() const {
  return _internal_has_days();
}
inline void LockInfo::clear_days() {
  days_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LockInfo::_internal_days() const {
  return days_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LockInfo::days() const {
  // @@protoc_insertion_point(field_get:ClientCos.LockInfo.days)
  return _internal_days();
}
inline void LockInfo::_internal_set_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  days_ = value;
}
inline void LockInfo::set_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:ClientCos.LockInfo.days)
}

// -------------------------------------------------------------------

// AppAttr

// optional bytes biz_attr = 1;
inline bool AppAttr::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppAttr::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void AppAttr::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppAttr::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.biz_attr)
  return _internal_biz_attr();
}
inline void AppAttr::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.biz_attr)
}
inline std::string* AppAttr::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& AppAttr::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void AppAttr::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.biz_attr)
}
inline void AppAttr::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.biz_attr)
}
inline void AppAttr::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.biz_attr)
}
inline std::string* AppAttr::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000001u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.biz_attr)
}

// optional uint32 type = 2;
inline bool AppAttr::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AppAttr::has_type() const {
  return _internal_has_type();
}
inline void AppAttr::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::type() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.type)
  return _internal_type();
}
inline void AppAttr::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  type_ = value;
}
inline void AppAttr::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.type)
}

// optional bytes sha = 3;
inline bool AppAttr::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppAttr::has_sha() const {
  return _internal_has_sha();
}
inline void AppAttr::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppAttr::sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.sha)
  return _internal_sha();
}
inline void AppAttr::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.sha)
}
inline std::string* AppAttr::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.sha)
  return _internal_mutable_sha();
}
inline const std::string& AppAttr::_internal_sha() const {
  return sha_.Get();
}
inline void AppAttr::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.sha)
}
inline void AppAttr::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.sha)
}
inline void AppAttr::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.sha)
}
inline std::string* AppAttr::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000002u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.sha)
}

// optional .ClientCos.Authority auth = 4;
inline bool AppAttr::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AppAttr::has_auth() const {
  return _internal_has_auth();
}
inline void AppAttr::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::ClientCos::Authority AppAttr::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority AppAttr::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.auth)
  return _internal_auth();
}
inline void AppAttr::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  auth_ = value;
}
inline void AppAttr::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.auth)
}

// optional bytes path = 5;
inline bool AppAttr::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppAttr::has_path() const {
  return _internal_has_path();
}
inline void AppAttr::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppAttr::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.path)
  return _internal_path();
}
inline void AppAttr::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.path)
}
inline std::string* AppAttr::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.path)
  return _internal_mutable_path();
}
inline const std::string& AppAttr::_internal_path() const {
  return path_.Get();
}
inline void AppAttr::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.path)
}
inline void AppAttr::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.path)
}
inline void AppAttr::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.path)
}
inline std::string* AppAttr::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000004u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.path)
}

// repeated .ClientCos.KeyPair keys = 6;
inline int AppAttr::_internal_keys_size() const {
  return keys_.size();
}
inline int AppAttr::keys_size() const {
  return _internal_keys_size();
}
inline void AppAttr::clear_keys() {
  keys_.Clear();
}
inline ::ClientCos::KeyPair* AppAttr::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >*
AppAttr::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.keys)
  return &keys_;
}
inline const ::ClientCos::KeyPair& AppAttr::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::ClientCos::KeyPair& AppAttr::keys(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.keys)
  return _internal_keys(index);
}
inline ::ClientCos::KeyPair* AppAttr::_internal_add_keys() {
  return keys_.Add();
}
inline ::ClientCos::KeyPair* AppAttr::add_keys() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::KeyPair >&
AppAttr::keys() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.keys)
  return keys_;
}

// repeated string cname = 7;
inline int AppAttr::_internal_cname_size() const {
  return cname_.size();
}
inline int AppAttr::cname_size() const {
  return _internal_cname_size();
}
inline void AppAttr::clear_cname() {
  cname_.Clear();
}
inline std::string* AppAttr::add_cname() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.AppAttr.cname)
  return _internal_add_cname();
}
inline const std::string& AppAttr::_internal_cname(int index) const {
  return cname_.Get(index);
}
inline const std::string& AppAttr::cname(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.cname)
  return _internal_cname(index);
}
inline std::string* AppAttr::mutable_cname(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.cname)
  return cname_.Mutable(index);
}
inline void AppAttr::set_cname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.cname)
  cname_.Mutable(index)->assign(value);
}
inline void AppAttr::set_cname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.cname)
  cname_.Mutable(index)->assign(std::move(value));
}
inline void AppAttr::set_cname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.cname)
}
inline void AppAttr::set_cname(int index, const char* value, size_t size) {
  cname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.cname)
}
inline std::string* AppAttr::_internal_add_cname() {
  return cname_.Add();
}
inline void AppAttr::add_cname(const std::string& value) {
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.cname)
}
inline void AppAttr::add_cname(std::string&& value) {
  cname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.cname)
}
inline void AppAttr::add_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.AppAttr.cname)
}
inline void AppAttr::add_cname(const char* value, size_t size) {
  cname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.AppAttr.cname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppAttr::cname() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.cname)
  return cname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppAttr::mutable_cname() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.cname)
  return &cname_;
}

// repeated string whiterefer = 8;
inline int AppAttr::_internal_whiterefer_size() const {
  return whiterefer_.size();
}
inline int AppAttr::whiterefer_size() const {
  return _internal_whiterefer_size();
}
inline void AppAttr::clear_whiterefer() {
  whiterefer_.Clear();
}
inline std::string* AppAttr::add_whiterefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.AppAttr.whiterefer)
  return _internal_add_whiterefer();
}
inline const std::string& AppAttr::_internal_whiterefer(int index) const {
  return whiterefer_.Get(index);
}
inline const std::string& AppAttr::whiterefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.whiterefer)
  return _internal_whiterefer(index);
}
inline std::string* AppAttr::mutable_whiterefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.whiterefer)
  return whiterefer_.Mutable(index);
}
inline void AppAttr::set_whiterefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.whiterefer)
  whiterefer_.Mutable(index)->assign(value);
}
inline void AppAttr::set_whiterefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.whiterefer)
  whiterefer_.Mutable(index)->assign(std::move(value));
}
inline void AppAttr::set_whiterefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.whiterefer)
}
inline void AppAttr::set_whiterefer(int index, const char* value, size_t size) {
  whiterefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.whiterefer)
}
inline std::string* AppAttr::_internal_add_whiterefer() {
  return whiterefer_.Add();
}
inline void AppAttr::add_whiterefer(const std::string& value) {
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.whiterefer)
}
inline void AppAttr::add_whiterefer(std::string&& value) {
  whiterefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.whiterefer)
}
inline void AppAttr::add_whiterefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whiterefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.AppAttr.whiterefer)
}
inline void AppAttr::add_whiterefer(const char* value, size_t size) {
  whiterefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.AppAttr.whiterefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppAttr::whiterefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.whiterefer)
  return whiterefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppAttr::mutable_whiterefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.whiterefer)
  return &whiterefer_;
}

// repeated string blackrefer = 9;
inline int AppAttr::_internal_blackrefer_size() const {
  return blackrefer_.size();
}
inline int AppAttr::blackrefer_size() const {
  return _internal_blackrefer_size();
}
inline void AppAttr::clear_blackrefer() {
  blackrefer_.Clear();
}
inline std::string* AppAttr::add_blackrefer() {
  // @@protoc_insertion_point(field_add_mutable:ClientCos.AppAttr.blackrefer)
  return _internal_add_blackrefer();
}
inline const std::string& AppAttr::_internal_blackrefer(int index) const {
  return blackrefer_.Get(index);
}
inline const std::string& AppAttr::blackrefer(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.blackrefer)
  return _internal_blackrefer(index);
}
inline std::string* AppAttr::mutable_blackrefer(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.blackrefer)
  return blackrefer_.Mutable(index);
}
inline void AppAttr::set_blackrefer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.blackrefer)
  blackrefer_.Mutable(index)->assign(value);
}
inline void AppAttr::set_blackrefer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.blackrefer)
  blackrefer_.Mutable(index)->assign(std::move(value));
}
inline void AppAttr::set_blackrefer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.blackrefer)
}
inline void AppAttr::set_blackrefer(int index, const char* value, size_t size) {
  blackrefer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.blackrefer)
}
inline std::string* AppAttr::_internal_add_blackrefer() {
  return blackrefer_.Add();
}
inline void AppAttr::add_blackrefer(const std::string& value) {
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.blackrefer)
}
inline void AppAttr::add_blackrefer(std::string&& value) {
  blackrefer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.blackrefer)
}
inline void AppAttr::add_blackrefer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blackrefer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClientCos.AppAttr.blackrefer)
}
inline void AppAttr::add_blackrefer(const char* value, size_t size) {
  blackrefer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClientCos.AppAttr.blackrefer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppAttr::blackrefer() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.blackrefer)
  return blackrefer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppAttr::mutable_blackrefer() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.blackrefer)
  return &blackrefer_;
}

// optional uint32 usr_slice_size = 10 [default = 0];
inline bool AppAttr::_internal_has_usr_slice_size() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AppAttr::has_usr_slice_size() const {
  return _internal_has_usr_slice_size();
}
inline void AppAttr::clear_usr_slice_size() {
  usr_slice_size_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_usr_slice_size() const {
  return usr_slice_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::usr_slice_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.usr_slice_size)
  return _internal_usr_slice_size();
}
inline void AppAttr::_internal_set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  usr_slice_size_ = value;
}
inline void AppAttr::set_usr_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usr_slice_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.usr_slice_size)
}

// optional uint32 forbid = 11 [default = 0];
inline bool AppAttr::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AppAttr::has_forbid() const {
  return _internal_has_forbid();
}
inline void AppAttr::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.forbid)
  return _internal_forbid();
}
inline void AppAttr::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  forbid_ = value;
}
inline void AppAttr::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.forbid)
}

// repeated .ClientCos.ReservedAttr reservedattr = 12;
inline int AppAttr::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int AppAttr::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void AppAttr::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* AppAttr::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
AppAttr::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& AppAttr::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& AppAttr::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* AppAttr::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* AppAttr::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
AppAttr::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.reservedattr)
  return reservedattr_;
}

// optional uint32 real_slice_size = 13 [default = 0];
inline bool AppAttr::_internal_has_real_slice_size() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool AppAttr::has_real_slice_size() const {
  return _internal_has_real_slice_size();
}
inline void AppAttr::clear_real_slice_size() {
  real_slice_size_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_real_slice_size() const {
  return real_slice_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::real_slice_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.real_slice_size)
  return _internal_real_slice_size();
}
inline void AppAttr::_internal_set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  real_slice_size_ = value;
}
inline void AppAttr::set_real_slice_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_real_slice_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.real_slice_size)
}

// repeated .ClientCos.CustomHeader customheader = 14;
inline int AppAttr::_internal_customheader_size() const {
  return customheader_.size();
}
inline int AppAttr::customheader_size() const {
  return _internal_customheader_size();
}
inline void AppAttr::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* AppAttr::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
AppAttr::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& AppAttr::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& AppAttr::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* AppAttr::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* AppAttr::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
AppAttr::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.customheader)
  return customheader_;
}

// repeated .ClientCos.CorsRule corsrule = 15;
inline int AppAttr::_internal_corsrule_size() const {
  return corsrule_.size();
}
inline int AppAttr::corsrule_size() const {
  return _internal_corsrule_size();
}
inline void AppAttr::clear_corsrule() {
  corsrule_.Clear();
}
inline ::ClientCos::CorsRule* AppAttr::mutable_corsrule(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.corsrule)
  return corsrule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >*
AppAttr::mutable_corsrule() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.corsrule)
  return &corsrule_;
}
inline const ::ClientCos::CorsRule& AppAttr::_internal_corsrule(int index) const {
  return corsrule_.Get(index);
}
inline const ::ClientCos::CorsRule& AppAttr::corsrule(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.corsrule)
  return _internal_corsrule(index);
}
inline ::ClientCos::CorsRule* AppAttr::_internal_add_corsrule() {
  return corsrule_.Add();
}
inline ::ClientCos::CorsRule* AppAttr::add_corsrule() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.corsrule)
  return _internal_add_corsrule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CorsRule >&
AppAttr::corsrule() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.corsrule)
  return corsrule_;
}

// optional bytes real_sha = 16;
inline bool AppAttr::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppAttr::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void AppAttr::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppAttr::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.real_sha)
  return _internal_real_sha();
}
inline void AppAttr::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.real_sha)
}
inline std::string* AppAttr::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& AppAttr::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void AppAttr::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.real_sha)
}
inline void AppAttr::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.real_sha)
}
inline void AppAttr::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.real_sha)
}
inline std::string* AppAttr::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000008u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.real_sha)
}

// optional .ClientCos.ExtraAttr extraattr = 17;
inline bool AppAttr::_internal_has_extraattr() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || extraattr_ != nullptr);
  return value;
}
inline bool AppAttr::has_extraattr() const {
  return _internal_has_extraattr();
}
inline void AppAttr::clear_extraattr() {
  if (extraattr_ != nullptr) extraattr_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ClientCos::ExtraAttr& AppAttr::_internal_extraattr() const {
  const ::ClientCos::ExtraAttr* p = extraattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ExtraAttr&>(
      ::ClientCos::_ExtraAttr_default_instance_);
}
inline const ::ClientCos::ExtraAttr& AppAttr::extraattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.extraattr)
  return _internal_extraattr();
}
inline void AppAttr::unsafe_arena_set_allocated_extraattr(
    ::ClientCos::ExtraAttr* extraattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extraattr_);
  }
  extraattr_ = extraattr;
  if (extraattr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.extraattr)
}
inline ::ClientCos::ExtraAttr* AppAttr::release_extraattr() {
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ExtraAttr* AppAttr::unsafe_arena_release_extraattr() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.extraattr)
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ExtraAttr* temp = extraattr_;
  extraattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ExtraAttr* AppAttr::_internal_mutable_extraattr() {
  _has_bits_[0] |= 0x00000100u;
  if (extraattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ExtraAttr>(GetArena());
    extraattr_ = p;
  }
  return extraattr_;
}
inline ::ClientCos::ExtraAttr* AppAttr::mutable_extraattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.extraattr)
  return _internal_mutable_extraattr();
}
inline void AppAttr::set_allocated_extraattr(::ClientCos::ExtraAttr* extraattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extraattr_;
  }
  if (extraattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extraattr);
    if (message_arena != submessage_arena) {
      extraattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extraattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  extraattr_ = extraattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.extraattr)
}

// optional uint64 ctime_ms = 18;
inline bool AppAttr::_internal_has_ctime_ms() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool AppAttr::has_ctime_ms() const {
  return _internal_has_ctime_ms();
}
inline void AppAttr::clear_ctime_ms() {
  ctime_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppAttr::_internal_ctime_ms() const {
  return ctime_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppAttr::ctime_ms() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.ctime_ms)
  return _internal_ctime_ms();
}
inline void AppAttr::_internal_set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00800000u;
  ctime_ms_ = value;
}
inline void AppAttr::set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ctime_ms(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.ctime_ms)
}

// optional bytes version = 19;
inline bool AppAttr::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppAttr::has_version() const {
  return _internal_has_version();
}
inline void AppAttr::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppAttr::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.version)
  return _internal_version();
}
inline void AppAttr::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.version)
}
inline std::string* AppAttr::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.version)
  return _internal_mutable_version();
}
inline const std::string& AppAttr::_internal_version() const {
  return version_.Get();
}
inline void AppAttr::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.version)
}
inline void AppAttr::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.version)
}
inline void AppAttr::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.version)
}
inline std::string* AppAttr::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000010u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.version)
}

// optional uint32 multi_version_flag = 20;
inline bool AppAttr::_internal_has_multi_version_flag() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool AppAttr::has_multi_version_flag() const {
  return _internal_has_multi_version_flag();
}
inline void AppAttr::clear_multi_version_flag() {
  multi_version_flag_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_multi_version_flag() const {
  return multi_version_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::multi_version_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.multi_version_flag)
  return _internal_multi_version_flag();
}
inline void AppAttr::_internal_set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  multi_version_flag_ = value;
}
inline void AppAttr::set_multi_version_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multi_version_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.multi_version_flag)
}

// optional uint32 multi_version_hisflag = 21;
inline bool AppAttr::_internal_has_multi_version_hisflag() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool AppAttr::has_multi_version_hisflag() const {
  return _internal_has_multi_version_hisflag();
}
inline void AppAttr::clear_multi_version_hisflag() {
  multi_version_hisflag_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_multi_version_hisflag() const {
  return multi_version_hisflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::multi_version_hisflag() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.multi_version_hisflag)
  return _internal_multi_version_hisflag();
}
inline void AppAttr::_internal_set_multi_version_hisflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  multi_version_hisflag_ = value;
}
inline void AppAttr::set_multi_version_hisflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multi_version_hisflag(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.multi_version_hisflag)
}

// repeated .ClientCos.Tag tag = 22;
inline int AppAttr::_internal_tag_size() const {
  return tag_.size();
}
inline int AppAttr::tag_size() const {
  return _internal_tag_size();
}
inline void AppAttr::clear_tag() {
  tag_.Clear();
}
inline ::ClientCos::Tag* AppAttr::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >*
AppAttr::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.tag)
  return &tag_;
}
inline const ::ClientCos::Tag& AppAttr::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const ::ClientCos::Tag& AppAttr::tag(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.tag)
  return _internal_tag(index);
}
inline ::ClientCos::Tag* AppAttr::_internal_add_tag() {
  return tag_.Add();
}
inline ::ClientCos::Tag* AppAttr::add_tag() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.tag)
  return _internal_add_tag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::Tag >&
AppAttr::tag() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.tag)
  return tag_;
}

// optional uint32 bucketnum = 23;
inline bool AppAttr::_internal_has_bucketnum() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool AppAttr::has_bucketnum() const {
  return _internal_has_bucketnum();
}
inline void AppAttr::clear_bucketnum() {
  bucketnum_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_bucketnum() const {
  return bucketnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::bucketnum() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.bucketnum)
  return _internal_bucketnum();
}
inline void AppAttr::_internal_set_bucketnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  bucketnum_ = value;
}
inline void AppAttr::set_bucketnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bucketnum(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.bucketnum)
}

// optional uint32 idcnum = 24;
inline bool AppAttr::_internal_has_idcnum() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool AppAttr::has_idcnum() const {
  return _internal_has_idcnum();
}
inline void AppAttr::clear_idcnum() {
  idcnum_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_idcnum() const {
  return idcnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::idcnum() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.idcnum)
  return _internal_idcnum();
}
inline void AppAttr::_internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  idcnum_ = value;
}
inline void AppAttr::set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idcnum(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.idcnum)
}

// repeated .ClientCos.LFAttr lfattr = 25;
inline int AppAttr::_internal_lfattr_size() const {
  return lfattr_.size();
}
inline int AppAttr::lfattr_size() const {
  return _internal_lfattr_size();
}
inline void AppAttr::clear_lfattr() {
  lfattr_.Clear();
}
inline ::ClientCos::LFAttr* AppAttr::mutable_lfattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.lfattr)
  return lfattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >*
AppAttr::mutable_lfattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.lfattr)
  return &lfattr_;
}
inline const ::ClientCos::LFAttr& AppAttr::_internal_lfattr(int index) const {
  return lfattr_.Get(index);
}
inline const ::ClientCos::LFAttr& AppAttr::lfattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.lfattr)
  return _internal_lfattr(index);
}
inline ::ClientCos::LFAttr* AppAttr::_internal_add_lfattr() {
  return lfattr_.Add();
}
inline ::ClientCos::LFAttr* AppAttr::add_lfattr() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.lfattr)
  return _internal_add_lfattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::LFAttr >&
AppAttr::lfattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.lfattr)
  return lfattr_;
}

// optional bool refer_able = 26;
inline bool AppAttr::_internal_has_refer_able() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool AppAttr::has_refer_able() const {
  return _internal_has_refer_able();
}
inline void AppAttr::clear_refer_able() {
  refer_able_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool AppAttr::_internal_refer_able() const {
  return refer_able_;
}
inline bool AppAttr::refer_able() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.refer_able)
  return _internal_refer_able();
}
inline void AppAttr::_internal_set_refer_able(bool value) {
  _has_bits_[0] |= 0x08000000u;
  refer_able_ = value;
}
inline void AppAttr::set_refer_able(bool value) {
  _internal_set_refer_able(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.refer_able)
}

// optional bool emptyreferconfig = 27;
inline bool AppAttr::_internal_has_emptyreferconfig() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool AppAttr::has_emptyreferconfig() const {
  return _internal_has_emptyreferconfig();
}
inline void AppAttr::clear_emptyreferconfig() {
  emptyreferconfig_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool AppAttr::_internal_emptyreferconfig() const {
  return emptyreferconfig_;
}
inline bool AppAttr::emptyreferconfig() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.emptyreferconfig)
  return _internal_emptyreferconfig();
}
inline void AppAttr::_internal_set_emptyreferconfig(bool value) {
  _has_bits_[0] |= 0x10000000u;
  emptyreferconfig_ = value;
}
inline void AppAttr::set_emptyreferconfig(bool value) {
  _internal_set_emptyreferconfig(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.emptyreferconfig)
}

// optional bool cname_able = 28;
inline bool AppAttr::_internal_has_cname_able() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool AppAttr::has_cname_able() const {
  return _internal_has_cname_able();
}
inline void AppAttr::clear_cname_able() {
  cname_able_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool AppAttr::_internal_cname_able() const {
  return cname_able_;
}
inline bool AppAttr::cname_able() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.cname_able)
  return _internal_cname_able();
}
inline void AppAttr::_internal_set_cname_able(bool value) {
  _has_bits_[0] |= 0x20000000u;
  cname_able_ = value;
}
inline void AppAttr::set_cname_able(bool value) {
  _internal_set_cname_able(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.cname_able)
}

// optional bytes upload_source = 29;
inline bool AppAttr::_internal_has_upload_source() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppAttr::has_upload_source() const {
  return _internal_has_upload_source();
}
inline void AppAttr::clear_upload_source() {
  upload_source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppAttr::upload_source() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.upload_source)
  return _internal_upload_source();
}
inline void AppAttr::set_upload_source(const std::string& value) {
  _internal_set_upload_source(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.upload_source)
}
inline std::string* AppAttr::mutable_upload_source() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.upload_source)
  return _internal_mutable_upload_source();
}
inline const std::string& AppAttr::_internal_upload_source() const {
  return upload_source_.Get();
}
inline void AppAttr::_internal_set_upload_source(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_upload_source(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.upload_source)
}
inline void AppAttr::set_upload_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.upload_source)
}
inline void AppAttr::set_upload_source(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.upload_source)
}
inline std::string* AppAttr::_internal_mutable_upload_source() {
  _has_bits_[0] |= 0x00000020u;
  return upload_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_upload_source() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.upload_source)
  if (!_internal_has_upload_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return upload_source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_upload_source(std::string* upload_source) {
  if (upload_source != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  upload_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.upload_source)
}

// optional uint64 ctime_ms_temp = 30;
inline bool AppAttr::_internal_has_ctime_ms_temp() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool AppAttr::has_ctime_ms_temp() const {
  return _internal_has_ctime_ms_temp();
}
inline void AppAttr::clear_ctime_ms_temp() {
  ctime_ms_temp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppAttr::_internal_ctime_ms_temp() const {
  return ctime_ms_temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppAttr::ctime_ms_temp() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.ctime_ms_temp)
  return _internal_ctime_ms_temp();
}
inline void AppAttr::_internal_set_ctime_ms_temp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x80000000u;
  ctime_ms_temp_ = value;
}
inline void AppAttr::set_ctime_ms_temp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ctime_ms_temp(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.ctime_ms_temp)
}

// repeated .ClientCos.CustomHeader customheader_plat = 31;
inline int AppAttr::_internal_customheader_plat_size() const {
  return customheader_plat_.size();
}
inline int AppAttr::customheader_plat_size() const {
  return _internal_customheader_plat_size();
}
inline void AppAttr::clear_customheader_plat() {
  customheader_plat_.Clear();
}
inline ::ClientCos::CustomHeader* AppAttr::mutable_customheader_plat(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.customheader_plat)
  return customheader_plat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
AppAttr::mutable_customheader_plat() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.customheader_plat)
  return &customheader_plat_;
}
inline const ::ClientCos::CustomHeader& AppAttr::_internal_customheader_plat(int index) const {
  return customheader_plat_.Get(index);
}
inline const ::ClientCos::CustomHeader& AppAttr::customheader_plat(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.customheader_plat)
  return _internal_customheader_plat(index);
}
inline ::ClientCos::CustomHeader* AppAttr::_internal_add_customheader_plat() {
  return customheader_plat_.Add();
}
inline ::ClientCos::CustomHeader* AppAttr::add_customheader_plat() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.customheader_plat)
  return _internal_add_customheader_plat();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
AppAttr::customheader_plat() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.customheader_plat)
  return customheader_plat_;
}

// optional bytes uin = 32;
inline bool AppAttr::_internal_has_uin() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppAttr::has_uin() const {
  return _internal_has_uin();
}
inline void AppAttr::clear_uin() {
  uin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AppAttr::uin() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.uin)
  return _internal_uin();
}
inline void AppAttr::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.uin)
}
inline std::string* AppAttr::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.uin)
  return _internal_mutable_uin();
}
inline const std::string& AppAttr::_internal_uin() const {
  return uin_.Get();
}
inline void AppAttr::_internal_set_uin(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_uin(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  uin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.uin)
}
inline void AppAttr::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.uin)
}
inline void AppAttr::set_uin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.uin)
}
inline std::string* AppAttr::_internal_mutable_uin() {
  _has_bits_[0] |= 0x00000040u;
  return uin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_uin() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.uin)
  if (!_internal_has_uin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return uin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.uin)
}

// optional bool nofile = 33;
inline bool AppAttr::_internal_has_nofile() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool AppAttr::has_nofile() const {
  return _internal_has_nofile();
}
inline void AppAttr::clear_nofile() {
  nofile_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool AppAttr::_internal_nofile() const {
  return nofile_;
}
inline bool AppAttr::nofile() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.nofile)
  return _internal_nofile();
}
inline void AppAttr::_internal_set_nofile(bool value) {
  _has_bits_[0] |= 0x40000000u;
  nofile_ = value;
}
inline void AppAttr::set_nofile(bool value) {
  _internal_set_nofile(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.nofile)
}

// optional .ClientCos.CasInfo casinfo = 34;
inline bool AppAttr::_internal_has_casinfo() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || casinfo_ != nullptr);
  return value;
}
inline bool AppAttr::has_casinfo() const {
  return _internal_has_casinfo();
}
inline void AppAttr::clear_casinfo() {
  if (casinfo_ != nullptr) casinfo_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ClientCos::CasInfo& AppAttr::_internal_casinfo() const {
  const ::ClientCos::CasInfo* p = casinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasInfo&>(
      ::ClientCos::_CasInfo_default_instance_);
}
inline const ::ClientCos::CasInfo& AppAttr::casinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.casinfo)
  return _internal_casinfo();
}
inline void AppAttr::unsafe_arena_set_allocated_casinfo(
    ::ClientCos::CasInfo* casinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casinfo_);
  }
  casinfo_ = casinfo;
  if (casinfo) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.casinfo)
}
inline ::ClientCos::CasInfo* AppAttr::release_casinfo() {
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasInfo* AppAttr::unsafe_arena_release_casinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.casinfo)
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::CasInfo* AppAttr::_internal_mutable_casinfo() {
  _has_bits_[0] |= 0x00000200u;
  if (casinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasInfo>(GetArena());
    casinfo_ = p;
  }
  return casinfo_;
}
inline ::ClientCos::CasInfo* AppAttr::mutable_casinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.casinfo)
  return _internal_mutable_casinfo();
}
inline void AppAttr::set_allocated_casinfo(::ClientCos::CasInfo* casinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casinfo_;
  }
  if (casinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casinfo);
    if (message_arena != submessage_arena) {
      casinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  casinfo_ = casinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.casinfo)
}

// optional .ClientCos.SseInfo sseinfo = 35;
inline bool AppAttr::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool AppAttr::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void AppAttr::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::ClientCos::SseInfo& AppAttr::_internal_sseinfo() const {
  const ::ClientCos::SseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SseInfo&>(
      ::ClientCos::_SseInfo_default_instance_);
}
inline const ::ClientCos::SseInfo& AppAttr::sseinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.sseinfo)
  return _internal_sseinfo();
}
inline void AppAttr::unsafe_arena_set_allocated_sseinfo(
    ::ClientCos::SseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.sseinfo)
}
inline ::ClientCos::SseInfo* AppAttr::release_sseinfo() {
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SseInfo* AppAttr::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.sseinfo)
  _has_bits_[0] &= ~0x00000400u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::SseInfo* AppAttr::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000400u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::ClientCos::SseInfo* AppAttr::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void AppAttr::set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.sseinfo)
}

// optional .ClientCos.WebsiteInfo websiteinfo = 36;
inline bool AppAttr::_internal_has_websiteinfo() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || websiteinfo_ != nullptr);
  return value;
}
inline bool AppAttr::has_websiteinfo() const {
  return _internal_has_websiteinfo();
}
inline void AppAttr::clear_websiteinfo() {
  if (websiteinfo_ != nullptr) websiteinfo_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::ClientCos::WebsiteInfo& AppAttr::_internal_websiteinfo() const {
  const ::ClientCos::WebsiteInfo* p = websiteinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::WebsiteInfo&>(
      ::ClientCos::_WebsiteInfo_default_instance_);
}
inline const ::ClientCos::WebsiteInfo& AppAttr::websiteinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.websiteinfo)
  return _internal_websiteinfo();
}
inline void AppAttr::unsafe_arena_set_allocated_websiteinfo(
    ::ClientCos::WebsiteInfo* websiteinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(websiteinfo_);
  }
  websiteinfo_ = websiteinfo;
  if (websiteinfo) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.websiteinfo)
}
inline ::ClientCos::WebsiteInfo* AppAttr::release_websiteinfo() {
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::WebsiteInfo* temp = websiteinfo_;
  websiteinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::WebsiteInfo* AppAttr::unsafe_arena_release_websiteinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.websiteinfo)
  _has_bits_[0] &= ~0x00000800u;
  ::ClientCos::WebsiteInfo* temp = websiteinfo_;
  websiteinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::WebsiteInfo* AppAttr::_internal_mutable_websiteinfo() {
  _has_bits_[0] |= 0x00000800u;
  if (websiteinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::WebsiteInfo>(GetArena());
    websiteinfo_ = p;
  }
  return websiteinfo_;
}
inline ::ClientCos::WebsiteInfo* AppAttr::mutable_websiteinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.websiteinfo)
  return _internal_mutable_websiteinfo();
}
inline void AppAttr::set_allocated_websiteinfo(::ClientCos::WebsiteInfo* websiteinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete websiteinfo_;
  }
  if (websiteinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(websiteinfo);
    if (message_arena != submessage_arena) {
      websiteinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, websiteinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  websiteinfo_ = websiteinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.websiteinfo)
}

// repeated .ClientCos.ObjTag taglist = 37;
inline int AppAttr::_internal_taglist_size() const {
  return taglist_.size();
}
inline int AppAttr::taglist_size() const {
  return _internal_taglist_size();
}
inline void AppAttr::clear_taglist() {
  taglist_.Clear();
}
inline ::ClientCos::ObjTag* AppAttr::mutable_taglist(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.taglist)
  return taglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
AppAttr::mutable_taglist() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.taglist)
  return &taglist_;
}
inline const ::ClientCos::ObjTag& AppAttr::_internal_taglist(int index) const {
  return taglist_.Get(index);
}
inline const ::ClientCos::ObjTag& AppAttr::taglist(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.taglist)
  return _internal_taglist(index);
}
inline ::ClientCos::ObjTag* AppAttr::_internal_add_taglist() {
  return taglist_.Add();
}
inline ::ClientCos::ObjTag* AppAttr::add_taglist() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.taglist)
  return _internal_add_taglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
AppAttr::taglist() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.taglist)
  return taglist_;
}

// optional .ClientCos.ObjExpireAttr objexpireattr = 38;
inline bool AppAttr::_internal_has_objexpireattr() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || objexpireattr_ != nullptr);
  return value;
}
inline bool AppAttr::has_objexpireattr() const {
  return _internal_has_objexpireattr();
}
inline void AppAttr::clear_objexpireattr() {
  if (objexpireattr_ != nullptr) objexpireattr_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::ClientCos::ObjExpireAttr& AppAttr::_internal_objexpireattr() const {
  const ::ClientCos::ObjExpireAttr* p = objexpireattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjExpireAttr&>(
      ::ClientCos::_ObjExpireAttr_default_instance_);
}
inline const ::ClientCos::ObjExpireAttr& AppAttr::objexpireattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.objexpireattr)
  return _internal_objexpireattr();
}
inline void AppAttr::unsafe_arena_set_allocated_objexpireattr(
    ::ClientCos::ObjExpireAttr* objexpireattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objexpireattr_);
  }
  objexpireattr_ = objexpireattr;
  if (objexpireattr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.objexpireattr)
}
inline ::ClientCos::ObjExpireAttr* AppAttr::release_objexpireattr() {
  _has_bits_[0] &= ~0x00001000u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjExpireAttr* AppAttr::unsafe_arena_release_objexpireattr() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.objexpireattr)
  _has_bits_[0] &= ~0x00001000u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjExpireAttr* AppAttr::_internal_mutable_objexpireattr() {
  _has_bits_[0] |= 0x00001000u;
  if (objexpireattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjExpireAttr>(GetArena());
    objexpireattr_ = p;
  }
  return objexpireattr_;
}
inline ::ClientCos::ObjExpireAttr* AppAttr::mutable_objexpireattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.objexpireattr)
  return _internal_mutable_objexpireattr();
}
inline void AppAttr::set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objexpireattr_;
  }
  if (objexpireattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objexpireattr);
    if (message_arena != submessage_arena) {
      objexpireattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objexpireattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  objexpireattr_ = objexpireattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.objexpireattr)
}

// optional .ClientCos.CamAuth camauth = 39;
inline bool AppAttr::_internal_has_camauth() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool AppAttr::has_camauth() const {
  return _internal_has_camauth();
}
inline void AppAttr::clear_camauth() {
  camauth_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::ClientCos::CamAuth AppAttr::_internal_camauth() const {
  return static_cast< ::ClientCos::CamAuth >(camauth_);
}
inline ::ClientCos::CamAuth AppAttr::camauth() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.camauth)
  return _internal_camauth();
}
inline void AppAttr::_internal_set_camauth(::ClientCos::CamAuth value) {
  assert(::ClientCos::CamAuth_IsValid(value));
  _has_bits_[1] |= 0x00000001u;
  camauth_ = value;
}
inline void AppAttr::set_camauth(::ClientCos::CamAuth value) {
  _internal_set_camauth(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.camauth)
}

// optional bool is_v4 = 40;
inline bool AppAttr::_internal_has_is_v4() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool AppAttr::has_is_v4() const {
  return _internal_has_is_v4();
}
inline void AppAttr::clear_is_v4() {
  is_v4_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool AppAttr::_internal_is_v4() const {
  return is_v4_;
}
inline bool AppAttr::is_v4() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.is_v4)
  return _internal_is_v4();
}
inline void AppAttr::_internal_set_is_v4(bool value) {
  _has_bits_[1] |= 0x00000002u;
  is_v4_ = value;
}
inline void AppAttr::set_is_v4(bool value) {
  _internal_set_is_v4(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.is_v4)
}

// optional bool visit_v4 = 41;
inline bool AppAttr::_internal_has_visit_v4() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool AppAttr::has_visit_v4() const {
  return _internal_has_visit_v4();
}
inline void AppAttr::clear_visit_v4() {
  visit_v4_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool AppAttr::_internal_visit_v4() const {
  return visit_v4_;
}
inline bool AppAttr::visit_v4() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.visit_v4)
  return _internal_visit_v4();
}
inline void AppAttr::_internal_set_visit_v4(bool value) {
  _has_bits_[1] |= 0x00000004u;
  visit_v4_ = value;
}
inline void AppAttr::set_visit_v4(bool value) {
  _internal_set_visit_v4(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.visit_v4)
}

// optional bool is_chunk = 42;
inline bool AppAttr::_internal_has_is_chunk() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool AppAttr::has_is_chunk() const {
  return _internal_has_is_chunk();
}
inline void AppAttr::clear_is_chunk() {
  is_chunk_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool AppAttr::_internal_is_chunk() const {
  return is_chunk_;
}
inline bool AppAttr::is_chunk() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.is_chunk)
  return _internal_is_chunk();
}
inline void AppAttr::_internal_set_is_chunk(bool value) {
  _has_bits_[1] |= 0x00000008u;
  is_chunk_ = value;
}
inline void AppAttr::set_is_chunk(bool value) {
  _internal_set_is_chunk(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.is_chunk)
}

// optional .ClientCos.OwnerInfo objOwner = 43;
inline bool AppAttr::_internal_has_objowner() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || objowner_ != nullptr);
  return value;
}
inline bool AppAttr::has_objowner() const {
  return _internal_has_objowner();
}
inline void AppAttr::clear_objowner() {
  if (objowner_ != nullptr) objowner_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::ClientCos::OwnerInfo& AppAttr::_internal_objowner() const {
  const ::ClientCos::OwnerInfo* p = objowner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& AppAttr::objowner() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.objOwner)
  return _internal_objowner();
}
inline void AppAttr::unsafe_arena_set_allocated_objowner(
    ::ClientCos::OwnerInfo* objowner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objowner_);
  }
  objowner_ = objowner;
  if (objowner) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.objOwner)
}
inline ::ClientCos::OwnerInfo* AppAttr::release_objowner() {
  _has_bits_[0] &= ~0x00002000u;
  ::ClientCos::OwnerInfo* temp = objowner_;
  objowner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* AppAttr::unsafe_arena_release_objowner() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.objOwner)
  _has_bits_[0] &= ~0x00002000u;
  ::ClientCos::OwnerInfo* temp = objowner_;
  objowner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* AppAttr::_internal_mutable_objowner() {
  _has_bits_[0] |= 0x00002000u;
  if (objowner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    objowner_ = p;
  }
  return objowner_;
}
inline ::ClientCos::OwnerInfo* AppAttr::mutable_objowner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.objOwner)
  return _internal_mutable_objowner();
}
inline void AppAttr::set_allocated_objowner(::ClientCos::OwnerInfo* objowner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objowner_;
  }
  if (objowner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objowner);
    if (message_arena != submessage_arena) {
      objowner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objowner, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  objowner_ = objowner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.objOwner)
}

// optional .ClientCos.OwnerInfo bucketOwner = 44;
inline bool AppAttr::_internal_has_bucketowner() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || bucketowner_ != nullptr);
  return value;
}
inline bool AppAttr::has_bucketowner() const {
  return _internal_has_bucketowner();
}
inline void AppAttr::clear_bucketowner() {
  if (bucketowner_ != nullptr) bucketowner_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::ClientCos::OwnerInfo& AppAttr::_internal_bucketowner() const {
  const ::ClientCos::OwnerInfo* p = bucketowner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& AppAttr::bucketowner() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.bucketOwner)
  return _internal_bucketowner();
}
inline void AppAttr::unsafe_arena_set_allocated_bucketowner(
    ::ClientCos::OwnerInfo* bucketowner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketowner_);
  }
  bucketowner_ = bucketowner;
  if (bucketowner) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.bucketOwner)
}
inline ::ClientCos::OwnerInfo* AppAttr::release_bucketowner() {
  _has_bits_[0] &= ~0x00004000u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* AppAttr::unsafe_arena_release_bucketowner() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.bucketOwner)
  _has_bits_[0] &= ~0x00004000u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* AppAttr::_internal_mutable_bucketowner() {
  _has_bits_[0] |= 0x00004000u;
  if (bucketowner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    bucketowner_ = p;
  }
  return bucketowner_;
}
inline ::ClientCos::OwnerInfo* AppAttr::mutable_bucketowner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.bucketOwner)
  return _internal_mutable_bucketowner();
}
inline void AppAttr::set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketowner_;
  }
  if (bucketowner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketowner);
    if (message_arena != submessage_arena) {
      bucketowner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketowner, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  bucketowner_ = bucketowner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.bucketOwner)
}

// repeated .ClientCos.AclInfo acls = 45;
inline int AppAttr::_internal_acls_size() const {
  return acls_.size();
}
inline int AppAttr::acls_size() const {
  return _internal_acls_size();
}
inline void AppAttr::clear_acls() {
  acls_.Clear();
}
inline ::ClientCos::AclInfo* AppAttr::mutable_acls(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.acls)
  return acls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
AppAttr::mutable_acls() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppAttr.acls)
  return &acls_;
}
inline const ::ClientCos::AclInfo& AppAttr::_internal_acls(int index) const {
  return acls_.Get(index);
}
inline const ::ClientCos::AclInfo& AppAttr::acls(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.acls)
  return _internal_acls(index);
}
inline ::ClientCos::AclInfo* AppAttr::_internal_add_acls() {
  return acls_.Add();
}
inline ::ClientCos::AclInfo* AppAttr::add_acls() {
  // @@protoc_insertion_point(field_add:ClientCos.AppAttr.acls)
  return _internal_add_acls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
AppAttr::acls() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppAttr.acls)
  return acls_;
}

// optional .ClientCos.NSlot nslot = 46;
inline bool AppAttr::_internal_has_nslot() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool AppAttr::has_nslot() const {
  return _internal_has_nslot();
}
inline void AppAttr::clear_nslot() {
  nslot_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::ClientCos::NSlot AppAttr::_internal_nslot() const {
  return static_cast< ::ClientCos::NSlot >(nslot_);
}
inline ::ClientCos::NSlot AppAttr::nslot() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.nslot)
  return _internal_nslot();
}
inline void AppAttr::_internal_set_nslot(::ClientCos::NSlot value) {
  assert(::ClientCos::NSlot_IsValid(value));
  _has_bits_[1] |= 0x00000020u;
  nslot_ = value;
}
inline void AppAttr::set_nslot(::ClientCos::NSlot value) {
  _internal_set_nslot(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.nslot)
}

// optional bool is_ugc = 47;
inline bool AppAttr::_internal_has_is_ugc() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool AppAttr::has_is_ugc() const {
  return _internal_has_is_ugc();
}
inline void AppAttr::clear_is_ugc() {
  is_ugc_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool AppAttr::_internal_is_ugc() const {
  return is_ugc_;
}
inline bool AppAttr::is_ugc() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.is_ugc)
  return _internal_is_ugc();
}
inline void AppAttr::_internal_set_is_ugc(bool value) {
  _has_bits_[1] |= 0x00000010u;
  is_ugc_ = value;
}
inline void AppAttr::set_is_ugc(bool value) {
  _internal_set_is_ugc(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.is_ugc)
}

// optional .ClientCos.LockInfo lockinfo = 48;
inline bool AppAttr::_internal_has_lockinfo() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || lockinfo_ != nullptr);
  return value;
}
inline bool AppAttr::has_lockinfo() const {
  return _internal_has_lockinfo();
}
inline void AppAttr::clear_lockinfo() {
  if (lockinfo_ != nullptr) lockinfo_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::ClientCos::LockInfo& AppAttr::_internal_lockinfo() const {
  const ::ClientCos::LockInfo* p = lockinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::LockInfo&>(
      ::ClientCos::_LockInfo_default_instance_);
}
inline const ::ClientCos::LockInfo& AppAttr::lockinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.lockinfo)
  return _internal_lockinfo();
}
inline void AppAttr::unsafe_arena_set_allocated_lockinfo(
    ::ClientCos::LockInfo* lockinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockinfo_);
  }
  lockinfo_ = lockinfo;
  if (lockinfo) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.lockinfo)
}
inline ::ClientCos::LockInfo* AppAttr::release_lockinfo() {
  _has_bits_[0] &= ~0x00008000u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::LockInfo* AppAttr::unsafe_arena_release_lockinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.lockinfo)
  _has_bits_[0] &= ~0x00008000u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::LockInfo* AppAttr::_internal_mutable_lockinfo() {
  _has_bits_[0] |= 0x00008000u;
  if (lockinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::LockInfo>(GetArena());
    lockinfo_ = p;
  }
  return lockinfo_;
}
inline ::ClientCos::LockInfo* AppAttr::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.lockinfo)
  return _internal_mutable_lockinfo();
}
inline void AppAttr::set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lockinfo_;
  }
  if (lockinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lockinfo);
    if (message_arena != submessage_arena) {
      lockinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  lockinfo_ = lockinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.lockinfo)
}

// optional uint32 mtime_temp = 49;
inline bool AppAttr::_internal_has_mtime_temp() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool AppAttr::has_mtime_temp() const {
  return _internal_has_mtime_temp();
}
inline void AppAttr::clear_mtime_temp() {
  mtime_temp_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_mtime_temp() const {
  return mtime_temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::mtime_temp() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.mtime_temp)
  return _internal_mtime_temp();
}
inline void AppAttr::_internal_set_mtime_temp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  mtime_temp_ = value;
}
inline void AppAttr::set_mtime_temp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime_temp(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.mtime_temp)
}

// optional bytes inventory = 50;
inline bool AppAttr::_internal_has_inventory() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppAttr::has_inventory() const {
  return _internal_has_inventory();
}
inline void AppAttr::clear_inventory() {
  inventory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AppAttr::inventory() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.inventory)
  return _internal_inventory();
}
inline void AppAttr::set_inventory(const std::string& value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.inventory)
}
inline std::string* AppAttr::mutable_inventory() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.inventory)
  return _internal_mutable_inventory();
}
inline const std::string& AppAttr::_internal_inventory() const {
  return inventory_.Get();
}
inline void AppAttr::_internal_set_inventory(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppAttr::set_inventory(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  inventory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppAttr.inventory)
}
inline void AppAttr::set_inventory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppAttr.inventory)
}
inline void AppAttr::set_inventory(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppAttr.inventory)
}
inline std::string* AppAttr::_internal_mutable_inventory() {
  _has_bits_[0] |= 0x00000080u;
  return inventory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppAttr::release_inventory() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.inventory)
  if (!_internal_has_inventory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return inventory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppAttr::set_allocated_inventory(std::string* inventory) {
  if (inventory != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  inventory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.inventory)
}

// optional uint32 inventory_mtime = 51;
inline bool AppAttr::_internal_has_inventory_mtime() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool AppAttr::has_inventory_mtime() const {
  return _internal_has_inventory_mtime();
}
inline void AppAttr::clear_inventory_mtime() {
  inventory_mtime_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::_internal_inventory_mtime() const {
  return inventory_mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppAttr::inventory_mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.inventory_mtime)
  return _internal_inventory_mtime();
}
inline void AppAttr::_internal_set_inventory_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  inventory_mtime_ = value;
}
inline void AppAttr::set_inventory_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inventory_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppAttr.inventory_mtime)
}

// optional .ClientCos.Migrateinfo migrateinfo = 52;
inline bool AppAttr::_internal_has_migrateinfo() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || migrateinfo_ != nullptr);
  return value;
}
inline bool AppAttr::has_migrateinfo() const {
  return _internal_has_migrateinfo();
}
inline void AppAttr::clear_migrateinfo() {
  if (migrateinfo_ != nullptr) migrateinfo_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::ClientCos::Migrateinfo& AppAttr::_internal_migrateinfo() const {
  const ::ClientCos::Migrateinfo* p = migrateinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::Migrateinfo&>(
      ::ClientCos::_Migrateinfo_default_instance_);
}
inline const ::ClientCos::Migrateinfo& AppAttr::migrateinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppAttr.migrateinfo)
  return _internal_migrateinfo();
}
inline void AppAttr::unsafe_arena_set_allocated_migrateinfo(
    ::ClientCos::Migrateinfo* migrateinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migrateinfo_);
  }
  migrateinfo_ = migrateinfo;
  if (migrateinfo) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.AppAttr.migrateinfo)
}
inline ::ClientCos::Migrateinfo* AppAttr::release_migrateinfo() {
  _has_bits_[0] &= ~0x00010000u;
  ::ClientCos::Migrateinfo* temp = migrateinfo_;
  migrateinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::Migrateinfo* AppAttr::unsafe_arena_release_migrateinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.AppAttr.migrateinfo)
  _has_bits_[0] &= ~0x00010000u;
  ::ClientCos::Migrateinfo* temp = migrateinfo_;
  migrateinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::Migrateinfo* AppAttr::_internal_mutable_migrateinfo() {
  _has_bits_[0] |= 0x00010000u;
  if (migrateinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::Migrateinfo>(GetArena());
    migrateinfo_ = p;
  }
  return migrateinfo_;
}
inline ::ClientCos::Migrateinfo* AppAttr::mutable_migrateinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppAttr.migrateinfo)
  return _internal_mutable_migrateinfo();
}
inline void AppAttr::set_allocated_migrateinfo(::ClientCos::Migrateinfo* migrateinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete migrateinfo_;
  }
  if (migrateinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(migrateinfo);
    if (message_arena != submessage_arena) {
      migrateinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrateinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  migrateinfo_ = migrateinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppAttr.migrateinfo)
}

// -------------------------------------------------------------------

// KeyPair

// optional string accesskey = 1;
inline bool KeyPair::_internal_has_accesskey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeyPair::has_accesskey() const {
  return _internal_has_accesskey();
}
inline void KeyPair::clear_accesskey() {
  accesskey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyPair::accesskey() const {
  // @@protoc_insertion_point(field_get:ClientCos.KeyPair.accesskey)
  return _internal_accesskey();
}
inline void KeyPair::set_accesskey(const std::string& value) {
  _internal_set_accesskey(value);
  // @@protoc_insertion_point(field_set:ClientCos.KeyPair.accesskey)
}
inline std::string* KeyPair::mutable_accesskey() {
  // @@protoc_insertion_point(field_mutable:ClientCos.KeyPair.accesskey)
  return _internal_mutable_accesskey();
}
inline const std::string& KeyPair::_internal_accesskey() const {
  return accesskey_.Get();
}
inline void KeyPair::_internal_set_accesskey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  accesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyPair::set_accesskey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  accesskey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.KeyPair.accesskey)
}
inline void KeyPair::set_accesskey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  accesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.KeyPair.accesskey)
}
inline void KeyPair::set_accesskey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  accesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.KeyPair.accesskey)
}
inline std::string* KeyPair::_internal_mutable_accesskey() {
  _has_bits_[0] |= 0x00000001u;
  return accesskey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyPair::release_accesskey() {
  // @@protoc_insertion_point(field_release:ClientCos.KeyPair.accesskey)
  if (!_internal_has_accesskey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return accesskey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyPair::set_allocated_accesskey(std::string* accesskey) {
  if (accesskey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accesskey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesskey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.KeyPair.accesskey)
}

// optional string secretkey = 2;
inline bool KeyPair::_internal_has_secretkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyPair::has_secretkey() const {
  return _internal_has_secretkey();
}
inline void KeyPair::clear_secretkey() {
  secretkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeyPair::secretkey() const {
  // @@protoc_insertion_point(field_get:ClientCos.KeyPair.secretkey)
  return _internal_secretkey();
}
inline void KeyPair::set_secretkey(const std::string& value) {
  _internal_set_secretkey(value);
  // @@protoc_insertion_point(field_set:ClientCos.KeyPair.secretkey)
}
inline std::string* KeyPair::mutable_secretkey() {
  // @@protoc_insertion_point(field_mutable:ClientCos.KeyPair.secretkey)
  return _internal_mutable_secretkey();
}
inline const std::string& KeyPair::_internal_secretkey() const {
  return secretkey_.Get();
}
inline void KeyPair::_internal_set_secretkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  secretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyPair::set_secretkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  secretkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.KeyPair.secretkey)
}
inline void KeyPair::set_secretkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  secretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.KeyPair.secretkey)
}
inline void KeyPair::set_secretkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  secretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.KeyPair.secretkey)
}
inline std::string* KeyPair::_internal_mutable_secretkey() {
  _has_bits_[0] |= 0x00000002u;
  return secretkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyPair::release_secretkey() {
  // @@protoc_insertion_point(field_release:ClientCos.KeyPair.secretkey)
  if (!_internal_has_secretkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return secretkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyPair::set_allocated_secretkey(std::string* secretkey) {
  if (secretkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  secretkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secretkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.KeyPair.secretkey)
}

// -------------------------------------------------------------------

// ObjItem

// optional bytes name = 1;
inline bool ObjItem::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjItem::has_name() const {
  return _internal_has_name();
}
inline void ObjItem::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjItem::name() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.name)
  return _internal_name();
}
inline void ObjItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.name)
}
inline std::string* ObjItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.name)
  return _internal_mutable_name();
}
inline const std::string& ObjItem::_internal_name() const {
  return name_.Get();
}
inline void ObjItem::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjItem::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjItem.name)
}
inline void ObjItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjItem.name)
}
inline void ObjItem::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjItem.name)
}
inline std::string* ObjItem::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjItem::release_name() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.name)
}

// optional uint64 file_size = 3;
inline bool ObjItem::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ObjItem::has_file_size() const {
  return _internal_has_file_size();
}
inline void ObjItem::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::file_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.file_size)
  return _internal_file_size();
}
inline void ObjItem::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  file_size_ = value;
}
inline void ObjItem::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.file_size)
}

// optional uint64 upload_size = 4;
inline bool ObjItem::_internal_has_upload_size() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ObjItem::has_upload_size() const {
  return _internal_has_upload_size();
}
inline void ObjItem::clear_upload_size() {
  upload_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::_internal_upload_size() const {
  return upload_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::upload_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.upload_size)
  return _internal_upload_size();
}
inline void ObjItem::_internal_set_upload_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  upload_size_ = value;
}
inline void ObjItem::set_upload_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_upload_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.upload_size)
}

// optional uint64 ctime = 5;
inline bool ObjItem::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ObjItem::has_ctime() const {
  return _internal_has_ctime();
}
inline void ObjItem::clear_ctime() {
  ctime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.ctime)
  return _internal_ctime();
}
inline void ObjItem::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  ctime_ = value;
}
inline void ObjItem::set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.ctime)
}

// optional uint64 mtime = 6;
inline bool ObjItem::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ObjItem::has_mtime() const {
  return _internal_has_mtime();
}
inline void ObjItem::clear_mtime() {
  mtime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.mtime)
  return _internal_mtime();
}
inline void ObjItem::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  mtime_ = value;
}
inline void ObjItem::set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.mtime)
}

// optional bytes biz_attr = 7;
inline bool ObjItem::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjItem::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void ObjItem::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObjItem::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.biz_attr)
  return _internal_biz_attr();
}
inline void ObjItem::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.biz_attr)
}
inline std::string* ObjItem::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& ObjItem::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void ObjItem::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjItem::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjItem.biz_attr)
}
inline void ObjItem::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjItem.biz_attr)
}
inline void ObjItem::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjItem.biz_attr)
}
inline std::string* ObjItem::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000002u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjItem::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjItem::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.biz_attr)
}

// optional bytes sha = 8;
inline bool ObjItem::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjItem::has_sha() const {
  return _internal_has_sha();
}
inline void ObjItem::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ObjItem::sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.sha)
  return _internal_sha();
}
inline void ObjItem::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.sha)
}
inline std::string* ObjItem::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.sha)
  return _internal_mutable_sha();
}
inline const std::string& ObjItem::_internal_sha() const {
  return sha_.Get();
}
inline void ObjItem::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjItem::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjItem.sha)
}
inline void ObjItem::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjItem.sha)
}
inline void ObjItem::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjItem.sha)
}
inline std::string* ObjItem::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000004u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjItem::release_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjItem::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.sha)
}

// optional .ClientCos.Authority auth = 9;
inline bool ObjItem::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ObjItem::has_auth() const {
  return _internal_has_auth();
}
inline void ObjItem::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::ClientCos::Authority ObjItem::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority ObjItem::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.auth)
  return _internal_auth();
}
inline void ObjItem::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  auth_ = value;
}
inline void ObjItem::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.auth)
}

// repeated .ClientCos.ReservedAttr reservedattr = 10;
inline int ObjItem::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int ObjItem::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void ObjItem::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* ObjItem::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
ObjItem::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjItem.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& ObjItem::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& ObjItem::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* ObjItem::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* ObjItem::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjItem.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
ObjItem::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjItem.reservedattr)
  return reservedattr_;
}

// optional bytes real_sha = 11;
inline bool ObjItem::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObjItem::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void ObjItem::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ObjItem::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.real_sha)
  return _internal_real_sha();
}
inline void ObjItem::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.real_sha)
}
inline std::string* ObjItem::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& ObjItem::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void ObjItem::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjItem::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjItem.real_sha)
}
inline void ObjItem::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjItem.real_sha)
}
inline void ObjItem::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjItem.real_sha)
}
inline std::string* ObjItem::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000008u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjItem::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjItem::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.real_sha)
}

// optional bytes version = 12;
inline bool ObjItem::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObjItem::has_version() const {
  return _internal_has_version();
}
inline void ObjItem::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ObjItem::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.version)
  return _internal_version();
}
inline void ObjItem::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.version)
}
inline std::string* ObjItem::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.version)
  return _internal_mutable_version();
}
inline const std::string& ObjItem::_internal_version() const {
  return version_.Get();
}
inline void ObjItem::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjItem::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjItem.version)
}
inline void ObjItem::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjItem.version)
}
inline void ObjItem::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjItem.version)
}
inline std::string* ObjItem::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000010u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjItem::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjItem::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.version)
}

// optional uint64 ctime_ms = 13;
inline bool ObjItem::_internal_has_ctime_ms() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ObjItem::has_ctime_ms() const {
  return _internal_has_ctime_ms();
}
inline void ObjItem::clear_ctime_ms() {
  ctime_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::_internal_ctime_ms() const {
  return ctime_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjItem::ctime_ms() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.ctime_ms)
  return _internal_ctime_ms();
}
inline void ObjItem::_internal_set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  ctime_ms_ = value;
}
inline void ObjItem::set_ctime_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ctime_ms(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.ctime_ms)
}

// optional bytes storage_type = 14;
inline bool ObjItem::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObjItem::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void ObjItem::clear_storage_type() {
  storage_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ObjItem::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.storage_type)
  return _internal_storage_type();
}
inline void ObjItem::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.storage_type)
}
inline std::string* ObjItem::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& ObjItem::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void ObjItem::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjItem::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjItem.storage_type)
}
inline void ObjItem::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjItem.storage_type)
}
inline void ObjItem::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjItem.storage_type)
}
inline std::string* ObjItem::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000020u;
  return storage_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjItem::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return storage_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjItem::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  storage_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.storage_type)
}

// optional bool delete_marker = 15;
inline bool ObjItem::_internal_has_delete_marker() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ObjItem::has_delete_marker() const {
  return _internal_has_delete_marker();
}
inline void ObjItem::clear_delete_marker() {
  delete_marker_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ObjItem::_internal_delete_marker() const {
  return delete_marker_;
}
inline bool ObjItem::delete_marker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.delete_marker)
  return _internal_delete_marker();
}
inline void ObjItem::_internal_set_delete_marker(bool value) {
  _has_bits_[0] |= 0x00008000u;
  delete_marker_ = value;
}
inline void ObjItem::set_delete_marker(bool value) {
  _internal_set_delete_marker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.delete_marker)
}

// optional bool islatest = 16;
inline bool ObjItem::_internal_has_islatest() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ObjItem::has_islatest() const {
  return _internal_has_islatest();
}
inline void ObjItem::clear_islatest() {
  islatest_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ObjItem::_internal_islatest() const {
  return islatest_;
}
inline bool ObjItem::islatest() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.islatest)
  return _internal_islatest();
}
inline void ObjItem::_internal_set_islatest(bool value) {
  _has_bits_[0] |= 0x00010000u;
  islatest_ = value;
}
inline void ObjItem::set_islatest(bool value) {
  _internal_set_islatest(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.islatest)
}

// optional uint32 type = 17;
inline bool ObjItem::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ObjItem::has_type() const {
  return _internal_has_type();
}
inline void ObjItem::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjItem::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjItem::type() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.type)
  return _internal_type();
}
inline void ObjItem::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  type_ = value;
}
inline void ObjItem::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.type)
}

// repeated .ClientCos.ObjTag taglist = 18;
inline int ObjItem::_internal_taglist_size() const {
  return taglist_.size();
}
inline int ObjItem::taglist_size() const {
  return _internal_taglist_size();
}
inline void ObjItem::clear_taglist() {
  taglist_.Clear();
}
inline ::ClientCos::ObjTag* ObjItem::mutable_taglist(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.taglist)
  return taglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
ObjItem::mutable_taglist() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjItem.taglist)
  return &taglist_;
}
inline const ::ClientCos::ObjTag& ObjItem::_internal_taglist(int index) const {
  return taglist_.Get(index);
}
inline const ::ClientCos::ObjTag& ObjItem::taglist(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.taglist)
  return _internal_taglist(index);
}
inline ::ClientCos::ObjTag* ObjItem::_internal_add_taglist() {
  return taglist_.Add();
}
inline ::ClientCos::ObjTag* ObjItem::add_taglist() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjItem.taglist)
  return _internal_add_taglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
ObjItem::taglist() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjItem.taglist)
  return taglist_;
}

// optional .ClientCos.ObjExpireAttr objexpireattr = 19;
inline bool ObjItem::_internal_has_objexpireattr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || objexpireattr_ != nullptr);
  return value;
}
inline bool ObjItem::has_objexpireattr() const {
  return _internal_has_objexpireattr();
}
inline void ObjItem::clear_objexpireattr() {
  if (objexpireattr_ != nullptr) objexpireattr_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ClientCos::ObjExpireAttr& ObjItem::_internal_objexpireattr() const {
  const ::ClientCos::ObjExpireAttr* p = objexpireattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjExpireAttr&>(
      ::ClientCos::_ObjExpireAttr_default_instance_);
}
inline const ::ClientCos::ObjExpireAttr& ObjItem::objexpireattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.objexpireattr)
  return _internal_objexpireattr();
}
inline void ObjItem::unsafe_arena_set_allocated_objexpireattr(
    ::ClientCos::ObjExpireAttr* objexpireattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objexpireattr_);
  }
  objexpireattr_ = objexpireattr;
  if (objexpireattr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjItem.objexpireattr)
}
inline ::ClientCos::ObjExpireAttr* ObjItem::release_objexpireattr() {
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjExpireAttr* ObjItem::unsafe_arena_release_objexpireattr() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.objexpireattr)
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjExpireAttr* ObjItem::_internal_mutable_objexpireattr() {
  _has_bits_[0] |= 0x00000040u;
  if (objexpireattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjExpireAttr>(GetArena());
    objexpireattr_ = p;
  }
  return objexpireattr_;
}
inline ::ClientCos::ObjExpireAttr* ObjItem::mutable_objexpireattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.objexpireattr)
  return _internal_mutable_objexpireattr();
}
inline void ObjItem::set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objexpireattr_;
  }
  if (objexpireattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objexpireattr);
    if (message_arena != submessage_arena) {
      objexpireattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objexpireattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  objexpireattr_ = objexpireattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.objexpireattr)
}

// repeated .ClientCos.CustomHeader customheader = 20;
inline int ObjItem::_internal_customheader_size() const {
  return customheader_.size();
}
inline int ObjItem::customheader_size() const {
  return _internal_customheader_size();
}
inline void ObjItem::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* ObjItem::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
ObjItem::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjItem.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& ObjItem::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& ObjItem::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* ObjItem::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* ObjItem::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjItem.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
ObjItem::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjItem.customheader)
  return customheader_;
}

// optional .ClientCos.SseInfo sseinfo = 21;
inline bool ObjItem::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool ObjItem::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void ObjItem::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ClientCos::SseInfo& ObjItem::_internal_sseinfo() const {
  const ::ClientCos::SseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SseInfo&>(
      ::ClientCos::_SseInfo_default_instance_);
}
inline const ::ClientCos::SseInfo& ObjItem::sseinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.sseinfo)
  return _internal_sseinfo();
}
inline void ObjItem::unsafe_arena_set_allocated_sseinfo(
    ::ClientCos::SseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ObjItem.sseinfo)
}
inline ::ClientCos::SseInfo* ObjItem::release_sseinfo() {
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SseInfo* ObjItem::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjItem.sseinfo)
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::SseInfo* ObjItem::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000080u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::ClientCos::SseInfo* ObjItem::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void ObjItem::set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjItem.sseinfo)
}

// repeated .ClientCos.CustomHeader x_cos_customheader = 22;
inline int ObjItem::_internal_x_cos_customheader_size() const {
  return x_cos_customheader_.size();
}
inline int ObjItem::x_cos_customheader_size() const {
  return _internal_x_cos_customheader_size();
}
inline void ObjItem::clear_x_cos_customheader() {
  x_cos_customheader_.Clear();
}
inline ::ClientCos::CustomHeader* ObjItem::mutable_x_cos_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjItem.x_cos_customheader)
  return x_cos_customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
ObjItem::mutable_x_cos_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.ObjItem.x_cos_customheader)
  return &x_cos_customheader_;
}
inline const ::ClientCos::CustomHeader& ObjItem::_internal_x_cos_customheader(int index) const {
  return x_cos_customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& ObjItem::x_cos_customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.x_cos_customheader)
  return _internal_x_cos_customheader(index);
}
inline ::ClientCos::CustomHeader* ObjItem::_internal_add_x_cos_customheader() {
  return x_cos_customheader_.Add();
}
inline ::ClientCos::CustomHeader* ObjItem::add_x_cos_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.ObjItem.x_cos_customheader)
  return _internal_add_x_cos_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
ObjItem::x_cos_customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.ObjItem.x_cos_customheader)
  return x_cos_customheader_;
}

// optional uint32 forbid = 23;
inline bool ObjItem::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ObjItem::has_forbid() const {
  return _internal_has_forbid();
}
inline void ObjItem::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjItem::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjItem::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.forbid)
  return _internal_forbid();
}
inline void ObjItem::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  forbid_ = value;
}
inline void ObjItem::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.forbid)
}

// optional bool is_ugc = 24;
inline bool ObjItem::_internal_has_is_ugc() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ObjItem::has_is_ugc() const {
  return _internal_has_is_ugc();
}
inline void ObjItem::clear_is_ugc() {
  is_ugc_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ObjItem::_internal_is_ugc() const {
  return is_ugc_;
}
inline bool ObjItem::is_ugc() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjItem.is_ugc)
  return _internal_is_ugc();
}
inline void ObjItem::_internal_set_is_ugc(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_ugc_ = value;
}
inline void ObjItem::set_is_ugc(bool value) {
  _internal_set_is_ugc(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjItem.is_ugc)
}

// -------------------------------------------------------------------

// MutiObjItem

// optional bytes name = 1;
inline bool MutiObjItem::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MutiObjItem::has_name() const {
  return _internal_has_name();
}
inline void MutiObjItem::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MutiObjItem::name() const {
  // @@protoc_insertion_point(field_get:ClientCos.MutiObjItem.name)
  return _internal_name();
}
inline void MutiObjItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ClientCos.MutiObjItem.name)
}
inline std::string* MutiObjItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MutiObjItem.name)
  return _internal_mutable_name();
}
inline const std::string& MutiObjItem::_internal_name() const {
  return name_.Get();
}
inline void MutiObjItem::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutiObjItem::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MutiObjItem.name)
}
inline void MutiObjItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MutiObjItem.name)
}
inline void MutiObjItem::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MutiObjItem.name)
}
inline std::string* MutiObjItem::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutiObjItem::release_name() {
  // @@protoc_insertion_point(field_release:ClientCos.MutiObjItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutiObjItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MutiObjItem.name)
}

// optional bytes uploadkey = 3;
inline bool MutiObjItem::_internal_has_uploadkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MutiObjItem::has_uploadkey() const {
  return _internal_has_uploadkey();
}
inline void MutiObjItem::clear_uploadkey() {
  uploadkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MutiObjItem::uploadkey() const {
  // @@protoc_insertion_point(field_get:ClientCos.MutiObjItem.uploadkey)
  return _internal_uploadkey();
}
inline void MutiObjItem::set_uploadkey(const std::string& value) {
  _internal_set_uploadkey(value);
  // @@protoc_insertion_point(field_set:ClientCos.MutiObjItem.uploadkey)
}
inline std::string* MutiObjItem::mutable_uploadkey() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MutiObjItem.uploadkey)
  return _internal_mutable_uploadkey();
}
inline const std::string& MutiObjItem::_internal_uploadkey() const {
  return uploadkey_.Get();
}
inline void MutiObjItem::_internal_set_uploadkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutiObjItem::set_uploadkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MutiObjItem.uploadkey)
}
inline void MutiObjItem::set_uploadkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MutiObjItem.uploadkey)
}
inline void MutiObjItem::set_uploadkey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uploadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MutiObjItem.uploadkey)
}
inline std::string* MutiObjItem::_internal_mutable_uploadkey() {
  _has_bits_[0] |= 0x00000002u;
  return uploadkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutiObjItem::release_uploadkey() {
  // @@protoc_insertion_point(field_release:ClientCos.MutiObjItem.uploadkey)
  if (!_internal_has_uploadkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uploadkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutiObjItem::set_allocated_uploadkey(std::string* uploadkey) {
  if (uploadkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uploadkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MutiObjItem.uploadkey)
}

// optional uint32 ctime = 4;
inline bool MutiObjItem::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MutiObjItem::has_ctime() const {
  return _internal_has_ctime();
}
inline void MutiObjItem::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MutiObjItem::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MutiObjItem::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.MutiObjItem.ctime)
  return _internal_ctime();
}
inline void MutiObjItem::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ctime_ = value;
}
inline void MutiObjItem::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.MutiObjItem.ctime)
}

// optional uint32 mtime = 5;
inline bool MutiObjItem::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MutiObjItem::has_mtime() const {
  return _internal_has_mtime();
}
inline void MutiObjItem::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MutiObjItem::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MutiObjItem::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.MutiObjItem.mtime)
  return _internal_mtime();
}
inline void MutiObjItem::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mtime_ = value;
}
inline void MutiObjItem::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.MutiObjItem.mtime)
}

// optional bytes storage_type = 6;
inline bool MutiObjItem::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MutiObjItem::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void MutiObjItem::clear_storage_type() {
  storage_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MutiObjItem::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.MutiObjItem.storage_type)
  return _internal_storage_type();
}
inline void MutiObjItem::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.MutiObjItem.storage_type)
}
inline std::string* MutiObjItem::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MutiObjItem.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& MutiObjItem::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void MutiObjItem::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutiObjItem::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MutiObjItem.storage_type)
}
inline void MutiObjItem::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MutiObjItem.storage_type)
}
inline void MutiObjItem::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MutiObjItem.storage_type)
}
inline std::string* MutiObjItem::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000004u;
  return storage_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutiObjItem::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.MutiObjItem.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return storage_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutiObjItem::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MutiObjItem.storage_type)
}

// optional bytes uin = 7;
inline bool MutiObjItem::_internal_has_uin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MutiObjItem::has_uin() const {
  return _internal_has_uin();
}
inline void MutiObjItem::clear_uin() {
  uin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MutiObjItem::uin() const {
  // @@protoc_insertion_point(field_get:ClientCos.MutiObjItem.uin)
  return _internal_uin();
}
inline void MutiObjItem::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:ClientCos.MutiObjItem.uin)
}
inline std::string* MutiObjItem::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MutiObjItem.uin)
  return _internal_mutable_uin();
}
inline const std::string& MutiObjItem::_internal_uin() const {
  return uin_.Get();
}
inline void MutiObjItem::_internal_set_uin(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MutiObjItem::set_uin(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  uin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MutiObjItem.uin)
}
inline void MutiObjItem::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MutiObjItem.uin)
}
inline void MutiObjItem::set_uin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MutiObjItem.uin)
}
inline std::string* MutiObjItem::_internal_mutable_uin() {
  _has_bits_[0] |= 0x00000008u;
  return uin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MutiObjItem::release_uin() {
  // @@protoc_insertion_point(field_release:ClientCos.MutiObjItem.uin)
  if (!_internal_has_uin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return uin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutiObjItem::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MutiObjItem.uin)
}

// optional uint64 file_size = 8;
inline bool MutiObjItem::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MutiObjItem::has_file_size() const {
  return _internal_has_file_size();
}
inline void MutiObjItem::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MutiObjItem::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MutiObjItem::file_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.MutiObjItem.file_size)
  return _internal_file_size();
}
inline void MutiObjItem::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  file_size_ = value;
}
inline void MutiObjItem::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.MutiObjItem.file_size)
}

// -------------------------------------------------------------------

// DelObjExpireAttr

// required uint32 op = 1;
inline bool DelObjExpireAttr::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelObjExpireAttr::has_op() const {
  return _internal_has_op();
}
inline void DelObjExpireAttr::clear_op() {
  op_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelObjExpireAttr::_internal_op() const {
  return op_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelObjExpireAttr::op() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelObjExpireAttr.op)
  return _internal_op();
}
inline void DelObjExpireAttr::_internal_set_op(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  op_ = value;
}
inline void DelObjExpireAttr::set_op(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelObjExpireAttr.op)
}

// optional bool isLatest = 2;
inline bool DelObjExpireAttr::_internal_has_islatest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DelObjExpireAttr::has_islatest() const {
  return _internal_has_islatest();
}
inline void DelObjExpireAttr::clear_islatest() {
  islatest_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DelObjExpireAttr::_internal_islatest() const {
  return islatest_;
}
inline bool DelObjExpireAttr::islatest() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelObjExpireAttr.isLatest)
  return _internal_islatest();
}
inline void DelObjExpireAttr::_internal_set_islatest(bool value) {
  _has_bits_[0] |= 0x00000004u;
  islatest_ = value;
}
inline void DelObjExpireAttr::set_islatest(bool value) {
  _internal_set_islatest(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelObjExpireAttr.isLatest)
}

// optional bool isDeleteMarker = 3;
inline bool DelObjExpireAttr::_internal_has_isdeletemarker() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DelObjExpireAttr::has_isdeletemarker() const {
  return _internal_has_isdeletemarker();
}
inline void DelObjExpireAttr::clear_isdeletemarker() {
  isdeletemarker_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DelObjExpireAttr::_internal_isdeletemarker() const {
  return isdeletemarker_;
}
inline bool DelObjExpireAttr::isdeletemarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelObjExpireAttr.isDeleteMarker)
  return _internal_isdeletemarker();
}
inline void DelObjExpireAttr::_internal_set_isdeletemarker(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isdeletemarker_ = value;
}
inline void DelObjExpireAttr::set_isdeletemarker(bool value) {
  _internal_set_isdeletemarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelObjExpireAttr.isDeleteMarker)
}

// optional bytes next_version = 4;
inline bool DelObjExpireAttr::_internal_has_next_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelObjExpireAttr::has_next_version() const {
  return _internal_has_next_version();
}
inline void DelObjExpireAttr::clear_next_version() {
  next_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DelObjExpireAttr::next_version() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelObjExpireAttr.next_version)
  return _internal_next_version();
}
inline void DelObjExpireAttr::set_next_version(const std::string& value) {
  _internal_set_next_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelObjExpireAttr.next_version)
}
inline std::string* DelObjExpireAttr::mutable_next_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DelObjExpireAttr.next_version)
  return _internal_mutable_next_version();
}
inline const std::string& DelObjExpireAttr::_internal_next_version() const {
  return next_version_.Get();
}
inline void DelObjExpireAttr::_internal_set_next_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelObjExpireAttr::set_next_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  next_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.DelObjExpireAttr.next_version)
}
inline void DelObjExpireAttr::set_next_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  next_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.DelObjExpireAttr.next_version)
}
inline void DelObjExpireAttr::set_next_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  next_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.DelObjExpireAttr.next_version)
}
inline std::string* DelObjExpireAttr::_internal_mutable_next_version() {
  _has_bits_[0] |= 0x00000001u;
  return next_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelObjExpireAttr::release_next_version() {
  // @@protoc_insertion_point(field_release:ClientCos.DelObjExpireAttr.next_version)
  if (!_internal_has_next_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return next_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelObjExpireAttr::set_allocated_next_version(std::string* next_version) {
  if (next_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DelObjExpireAttr.next_version)
}

// optional uint32 next_version_ctime = 5;
inline bool DelObjExpireAttr::_internal_has_next_version_ctime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DelObjExpireAttr::has_next_version_ctime() const {
  return _internal_has_next_version_ctime();
}
inline void DelObjExpireAttr::clear_next_version_ctime() {
  next_version_ctime_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelObjExpireAttr::_internal_next_version_ctime() const {
  return next_version_ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelObjExpireAttr::next_version_ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelObjExpireAttr.next_version_ctime)
  return _internal_next_version_ctime();
}
inline void DelObjExpireAttr::_internal_set_next_version_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  next_version_ctime_ = value;
}
inline void DelObjExpireAttr::set_next_version_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_version_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelObjExpireAttr.next_version_ctime)
}

// optional uint64 next_version_seed = 6;
inline bool DelObjExpireAttr::_internal_has_next_version_seed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DelObjExpireAttr::has_next_version_seed() const {
  return _internal_has_next_version_seed();
}
inline void DelObjExpireAttr::clear_next_version_seed() {
  next_version_seed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelObjExpireAttr::_internal_next_version_seed() const {
  return next_version_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DelObjExpireAttr::next_version_seed() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelObjExpireAttr.next_version_seed)
  return _internal_next_version_seed();
}
inline void DelObjExpireAttr::_internal_set_next_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  next_version_seed_ = value;
}
inline void DelObjExpireAttr::set_next_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_version_seed(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelObjExpireAttr.next_version_seed)
}

// -------------------------------------------------------------------

// DelExpireFileReq

// required bytes path = 1;
inline bool DelExpireFileReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelExpireFileReq::has_path() const {
  return _internal_has_path();
}
inline void DelExpireFileReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DelExpireFileReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelExpireFileReq.path)
  return _internal_path();
}
inline void DelExpireFileReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelExpireFileReq.path)
}
inline std::string* DelExpireFileReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DelExpireFileReq.path)
  return _internal_mutable_path();
}
inline const std::string& DelExpireFileReq::_internal_path() const {
  return path_.Get();
}
inline void DelExpireFileReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelExpireFileReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.DelExpireFileReq.path)
}
inline void DelExpireFileReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.DelExpireFileReq.path)
}
inline void DelExpireFileReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.DelExpireFileReq.path)
}
inline std::string* DelExpireFileReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelExpireFileReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.DelExpireFileReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelExpireFileReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DelExpireFileReq.path)
}

// required uint32 mtime = 2;
inline bool DelExpireFileReq::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DelExpireFileReq::has_mtime() const {
  return _internal_has_mtime();
}
inline void DelExpireFileReq::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelExpireFileReq::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelExpireFileReq::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelExpireFileReq.mtime)
  return _internal_mtime();
}
inline void DelExpireFileReq::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mtime_ = value;
}
inline void DelExpireFileReq::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelExpireFileReq.mtime)
}

// optional bool switch_flag = 3;
inline bool DelExpireFileReq::_internal_has_switch_flag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DelExpireFileReq::has_switch_flag() const {
  return _internal_has_switch_flag();
}
inline void DelExpireFileReq::clear_switch_flag() {
  switch_flag_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DelExpireFileReq::_internal_switch_flag() const {
  return switch_flag_;
}
inline bool DelExpireFileReq::switch_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelExpireFileReq.switch_flag)
  return _internal_switch_flag();
}
inline void DelExpireFileReq::_internal_set_switch_flag(bool value) {
  _has_bits_[0] |= 0x00000008u;
  switch_flag_ = value;
}
inline void DelExpireFileReq::set_switch_flag(bool value) {
  _internal_set_switch_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelExpireFileReq.switch_flag)
}

// optional .ClientCos.DelObjExpireAttr expire_attr = 4;
inline bool DelExpireFileReq::_internal_has_expire_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || expire_attr_ != nullptr);
  return value;
}
inline bool DelExpireFileReq::has_expire_attr() const {
  return _internal_has_expire_attr();
}
inline void DelExpireFileReq::clear_expire_attr() {
  if (expire_attr_ != nullptr) expire_attr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::DelObjExpireAttr& DelExpireFileReq::_internal_expire_attr() const {
  const ::ClientCos::DelObjExpireAttr* p = expire_attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelObjExpireAttr&>(
      ::ClientCos::_DelObjExpireAttr_default_instance_);
}
inline const ::ClientCos::DelObjExpireAttr& DelExpireFileReq::expire_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelExpireFileReq.expire_attr)
  return _internal_expire_attr();
}
inline void DelExpireFileReq::unsafe_arena_set_allocated_expire_attr(
    ::ClientCos::DelObjExpireAttr* expire_attr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_attr_);
  }
  expire_attr_ = expire_attr;
  if (expire_attr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.DelExpireFileReq.expire_attr)
}
inline ::ClientCos::DelObjExpireAttr* DelExpireFileReq::release_expire_attr() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* DelExpireFileReq::unsafe_arena_release_expire_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.DelExpireFileReq.expire_attr)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* DelExpireFileReq::_internal_mutable_expire_attr() {
  _has_bits_[0] |= 0x00000002u;
  if (expire_attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelObjExpireAttr>(GetArena());
    expire_attr_ = p;
  }
  return expire_attr_;
}
inline ::ClientCos::DelObjExpireAttr* DelExpireFileReq::mutable_expire_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DelExpireFileReq.expire_attr)
  return _internal_mutable_expire_attr();
}
inline void DelExpireFileReq::set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expire_attr_;
  }
  if (expire_attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expire_attr);
    if (message_arena != submessage_arena) {
      expire_attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_attr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  expire_attr_ = expire_attr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DelExpireFileReq.expire_attr)
}

// -------------------------------------------------------------------

// DelExpireFileRsp

// optional uint32 mtime = 1;
inline bool DelExpireFileRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelExpireFileRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void DelExpireFileRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelExpireFileRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelExpireFileRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelExpireFileRsp.mtime)
  return _internal_mtime();
}
inline void DelExpireFileRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  mtime_ = value;
}
inline void DelExpireFileRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelExpireFileRsp.mtime)
}

// -------------------------------------------------------------------

// StorageTypeAttr

// required uint32 min_del_days = 1;
inline bool StorageTypeAttr::_internal_has_min_del_days() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorageTypeAttr::has_min_del_days() const {
  return _internal_has_min_del_days();
}
inline void StorageTypeAttr::clear_min_del_days() {
  min_del_days_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageTypeAttr::_internal_min_del_days() const {
  return min_del_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageTypeAttr::min_del_days() const {
  // @@protoc_insertion_point(field_get:ClientCos.StorageTypeAttr.min_del_days)
  return _internal_min_del_days();
}
inline void StorageTypeAttr::_internal_set_min_del_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_del_days_ = value;
}
inline void StorageTypeAttr::set_min_del_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_del_days(value);
  // @@protoc_insertion_point(field_set:ClientCos.StorageTypeAttr.min_del_days)
}

// optional uint32 min_file_size = 2 [default = 64000];
inline bool StorageTypeAttr::_internal_has_min_file_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StorageTypeAttr::has_min_file_size() const {
  return _internal_has_min_file_size();
}
inline void StorageTypeAttr::clear_min_file_size() {
  min_file_size_ = 64000u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageTypeAttr::_internal_min_file_size() const {
  return min_file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageTypeAttr::min_file_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.StorageTypeAttr.min_file_size)
  return _internal_min_file_size();
}
inline void StorageTypeAttr::_internal_set_min_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_file_size_ = value;
}
inline void StorageTypeAttr::set_min_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_file_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.StorageTypeAttr.min_file_size)
}

// -------------------------------------------------------------------

// LFAttr

// required bytes storagetype = 1;
inline bool LFAttr::_internal_has_storagetype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LFAttr::has_storagetype() const {
  return _internal_has_storagetype();
}
inline void LFAttr::clear_storagetype() {
  storagetype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LFAttr::storagetype() const {
  // @@protoc_insertion_point(field_get:ClientCos.LFAttr.storagetype)
  return _internal_storagetype();
}
inline void LFAttr::set_storagetype(const std::string& value) {
  _internal_set_storagetype(value);
  // @@protoc_insertion_point(field_set:ClientCos.LFAttr.storagetype)
}
inline std::string* LFAttr::mutable_storagetype() {
  // @@protoc_insertion_point(field_mutable:ClientCos.LFAttr.storagetype)
  return _internal_mutable_storagetype();
}
inline const std::string& LFAttr::_internal_storagetype() const {
  return storagetype_.Get();
}
inline void LFAttr::_internal_set_storagetype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LFAttr::set_storagetype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  storagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.LFAttr.storagetype)
}
inline void LFAttr::set_storagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.LFAttr.storagetype)
}
inline void LFAttr::set_storagetype(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.LFAttr.storagetype)
}
inline std::string* LFAttr::_internal_mutable_storagetype() {
  _has_bits_[0] |= 0x00000001u;
  return storagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LFAttr::release_storagetype() {
  // @@protoc_insertion_point(field_release:ClientCos.LFAttr.storagetype)
  if (!_internal_has_storagetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return storagetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LFAttr::set_allocated_storagetype(std::string* storagetype) {
  if (storagetype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  storagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.LFAttr.storagetype)
}

// required .ClientCos.StorageTypeAttr storagetypeattr = 2;
inline bool LFAttr::_internal_has_storagetypeattr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storagetypeattr_ != nullptr);
  return value;
}
inline bool LFAttr::has_storagetypeattr() const {
  return _internal_has_storagetypeattr();
}
inline void LFAttr::clear_storagetypeattr() {
  if (storagetypeattr_ != nullptr) storagetypeattr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::StorageTypeAttr& LFAttr::_internal_storagetypeattr() const {
  const ::ClientCos::StorageTypeAttr* p = storagetypeattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::StorageTypeAttr&>(
      ::ClientCos::_StorageTypeAttr_default_instance_);
}
inline const ::ClientCos::StorageTypeAttr& LFAttr::storagetypeattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.LFAttr.storagetypeattr)
  return _internal_storagetypeattr();
}
inline void LFAttr::unsafe_arena_set_allocated_storagetypeattr(
    ::ClientCos::StorageTypeAttr* storagetypeattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storagetypeattr_);
  }
  storagetypeattr_ = storagetypeattr;
  if (storagetypeattr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.LFAttr.storagetypeattr)
}
inline ::ClientCos::StorageTypeAttr* LFAttr::release_storagetypeattr() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::StorageTypeAttr* temp = storagetypeattr_;
  storagetypeattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::StorageTypeAttr* LFAttr::unsafe_arena_release_storagetypeattr() {
  // @@protoc_insertion_point(field_release:ClientCos.LFAttr.storagetypeattr)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::StorageTypeAttr* temp = storagetypeattr_;
  storagetypeattr_ = nullptr;
  return temp;
}
inline ::ClientCos::StorageTypeAttr* LFAttr::_internal_mutable_storagetypeattr() {
  _has_bits_[0] |= 0x00000002u;
  if (storagetypeattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::StorageTypeAttr>(GetArena());
    storagetypeattr_ = p;
  }
  return storagetypeattr_;
}
inline ::ClientCos::StorageTypeAttr* LFAttr::mutable_storagetypeattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.LFAttr.storagetypeattr)
  return _internal_mutable_storagetypeattr();
}
inline void LFAttr::set_allocated_storagetypeattr(::ClientCos::StorageTypeAttr* storagetypeattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete storagetypeattr_;
  }
  if (storagetypeattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storagetypeattr);
    if (message_arena != submessage_arena) {
      storagetypeattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storagetypeattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storagetypeattr_ = storagetypeattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.LFAttr.storagetypeattr)
}

// -------------------------------------------------------------------

// FileDelReq

// required bytes path = 1;
inline bool FileDelReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileDelReq::has_path() const {
  return _internal_has_path();
}
inline void FileDelReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileDelReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelReq.path)
  return _internal_path();
}
inline void FileDelReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelReq.path)
}
inline std::string* FileDelReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDelReq.path)
  return _internal_mutable_path();
}
inline const std::string& FileDelReq::_internal_path() const {
  return path_.Get();
}
inline void FileDelReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDelReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDelReq.path)
}
inline void FileDelReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDelReq.path)
}
inline void FileDelReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDelReq.path)
}
inline std::string* FileDelReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDelReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDelReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDelReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDelReq.path)
}

// optional bytes uploadid = 2;
inline bool FileDelReq::_internal_has_uploadid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileDelReq::has_uploadid() const {
  return _internal_has_uploadid();
}
inline void FileDelReq::clear_uploadid() {
  uploadid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileDelReq::uploadid() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelReq.uploadid)
  return _internal_uploadid();
}
inline void FileDelReq::set_uploadid(const std::string& value) {
  _internal_set_uploadid(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelReq.uploadid)
}
inline std::string* FileDelReq::mutable_uploadid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDelReq.uploadid)
  return _internal_mutable_uploadid();
}
inline const std::string& FileDelReq::_internal_uploadid() const {
  return uploadid_.Get();
}
inline void FileDelReq::_internal_set_uploadid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDelReq::set_uploadid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDelReq.uploadid)
}
inline void FileDelReq::set_uploadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDelReq.uploadid)
}
inline void FileDelReq::set_uploadid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDelReq.uploadid)
}
inline std::string* FileDelReq::_internal_mutable_uploadid() {
  _has_bits_[0] |= 0x00000002u;
  return uploadid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDelReq::release_uploadid() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDelReq.uploadid)
  if (!_internal_has_uploadid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uploadid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDelReq::set_allocated_uploadid(std::string* uploadid) {
  if (uploadid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uploadid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDelReq.uploadid)
}

// optional bool switch_flag = 3;
inline bool FileDelReq::_internal_has_switch_flag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileDelReq::has_switch_flag() const {
  return _internal_has_switch_flag();
}
inline void FileDelReq::clear_switch_flag() {
  switch_flag_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FileDelReq::_internal_switch_flag() const {
  return switch_flag_;
}
inline bool FileDelReq::switch_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelReq.switch_flag)
  return _internal_switch_flag();
}
inline void FileDelReq::_internal_set_switch_flag(bool value) {
  _has_bits_[0] |= 0x00000008u;
  switch_flag_ = value;
}
inline void FileDelReq::set_switch_flag(bool value) {
  _internal_set_switch_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelReq.switch_flag)
}

// optional bool isExpireReq = 4;
inline bool FileDelReq::_internal_has_isexpirereq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileDelReq::has_isexpirereq() const {
  return _internal_has_isexpirereq();
}
inline void FileDelReq::clear_isexpirereq() {
  isexpirereq_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FileDelReq::_internal_isexpirereq() const {
  return isexpirereq_;
}
inline bool FileDelReq::isexpirereq() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelReq.isExpireReq)
  return _internal_isexpirereq();
}
inline void FileDelReq::_internal_set_isexpirereq(bool value) {
  _has_bits_[0] |= 0x00000010u;
  isexpirereq_ = value;
}
inline void FileDelReq::set_isexpirereq(bool value) {
  _internal_set_isexpirereq(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDelReq.isExpireReq)
}

// optional .ClientCos.DelObjExpireAttr expire_attr = 5;
inline bool FileDelReq::_internal_has_expire_attr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || expire_attr_ != nullptr);
  return value;
}
inline bool FileDelReq::has_expire_attr() const {
  return _internal_has_expire_attr();
}
inline void FileDelReq::clear_expire_attr() {
  if (expire_attr_ != nullptr) expire_attr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ClientCos::DelObjExpireAttr& FileDelReq::_internal_expire_attr() const {
  const ::ClientCos::DelObjExpireAttr* p = expire_attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelObjExpireAttr&>(
      ::ClientCos::_DelObjExpireAttr_default_instance_);
}
inline const ::ClientCos::DelObjExpireAttr& FileDelReq::expire_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDelReq.expire_attr)
  return _internal_expire_attr();
}
inline void FileDelReq::unsafe_arena_set_allocated_expire_attr(
    ::ClientCos::DelObjExpireAttr* expire_attr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_attr_);
  }
  expire_attr_ = expire_attr;
  if (expire_attr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.FileDelReq.expire_attr)
}
inline ::ClientCos::DelObjExpireAttr* FileDelReq::release_expire_attr() {
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* FileDelReq::unsafe_arena_release_expire_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDelReq.expire_attr)
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* FileDelReq::_internal_mutable_expire_attr() {
  _has_bits_[0] |= 0x00000004u;
  if (expire_attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelObjExpireAttr>(GetArena());
    expire_attr_ = p;
  }
  return expire_attr_;
}
inline ::ClientCos::DelObjExpireAttr* FileDelReq::mutable_expire_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDelReq.expire_attr)
  return _internal_mutable_expire_attr();
}
inline void FileDelReq::set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expire_attr_;
  }
  if (expire_attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expire_attr);
    if (message_arena != submessage_arena) {
      expire_attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_attr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  expire_attr_ = expire_attr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDelReq.expire_attr)
}

// -------------------------------------------------------------------

// FileDelRsp

// -------------------------------------------------------------------

// ExpireFileDelNoVerReq

// required bytes path = 1;
inline bool ExpireFileDelNoVerReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpireFileDelNoVerReq::has_path() const {
  return _internal_has_path();
}
inline void ExpireFileDelNoVerReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExpireFileDelNoVerReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelNoVerReq.path)
  return _internal_path();
}
inline void ExpireFileDelNoVerReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelNoVerReq.path)
}
inline std::string* ExpireFileDelNoVerReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExpireFileDelNoVerReq.path)
  return _internal_mutable_path();
}
inline const std::string& ExpireFileDelNoVerReq::_internal_path() const {
  return path_.Get();
}
inline void ExpireFileDelNoVerReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExpireFileDelNoVerReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ExpireFileDelNoVerReq.path)
}
inline void ExpireFileDelNoVerReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ExpireFileDelNoVerReq.path)
}
inline void ExpireFileDelNoVerReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ExpireFileDelNoVerReq.path)
}
inline std::string* ExpireFileDelNoVerReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExpireFileDelNoVerReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.ExpireFileDelNoVerReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpireFileDelNoVerReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExpireFileDelNoVerReq.path)
}

// optional bool switch_flag = 2;
inline bool ExpireFileDelNoVerReq::_internal_has_switch_flag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExpireFileDelNoVerReq::has_switch_flag() const {
  return _internal_has_switch_flag();
}
inline void ExpireFileDelNoVerReq::clear_switch_flag() {
  switch_flag_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ExpireFileDelNoVerReq::_internal_switch_flag() const {
  return switch_flag_;
}
inline bool ExpireFileDelNoVerReq::switch_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelNoVerReq.switch_flag)
  return _internal_switch_flag();
}
inline void ExpireFileDelNoVerReq::_internal_set_switch_flag(bool value) {
  _has_bits_[0] |= 0x00000004u;
  switch_flag_ = value;
}
inline void ExpireFileDelNoVerReq::set_switch_flag(bool value) {
  _internal_set_switch_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelNoVerReq.switch_flag)
}

// optional .ClientCos.DelObjExpireAttr expire_attr = 3;
inline bool ExpireFileDelNoVerReq::_internal_has_expire_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || expire_attr_ != nullptr);
  return value;
}
inline bool ExpireFileDelNoVerReq::has_expire_attr() const {
  return _internal_has_expire_attr();
}
inline void ExpireFileDelNoVerReq::clear_expire_attr() {
  if (expire_attr_ != nullptr) expire_attr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::DelObjExpireAttr& ExpireFileDelNoVerReq::_internal_expire_attr() const {
  const ::ClientCos::DelObjExpireAttr* p = expire_attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelObjExpireAttr&>(
      ::ClientCos::_DelObjExpireAttr_default_instance_);
}
inline const ::ClientCos::DelObjExpireAttr& ExpireFileDelNoVerReq::expire_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelNoVerReq.expire_attr)
  return _internal_expire_attr();
}
inline void ExpireFileDelNoVerReq::unsafe_arena_set_allocated_expire_attr(
    ::ClientCos::DelObjExpireAttr* expire_attr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_attr_);
  }
  expire_attr_ = expire_attr;
  if (expire_attr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ExpireFileDelNoVerReq.expire_attr)
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelNoVerReq::release_expire_attr() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelNoVerReq::unsafe_arena_release_expire_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.ExpireFileDelNoVerReq.expire_attr)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelNoVerReq::_internal_mutable_expire_attr() {
  _has_bits_[0] |= 0x00000002u;
  if (expire_attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelObjExpireAttr>(GetArena());
    expire_attr_ = p;
  }
  return expire_attr_;
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelNoVerReq::mutable_expire_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExpireFileDelNoVerReq.expire_attr)
  return _internal_mutable_expire_attr();
}
inline void ExpireFileDelNoVerReq::set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expire_attr_;
  }
  if (expire_attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expire_attr);
    if (message_arena != submessage_arena) {
      expire_attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_attr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  expire_attr_ = expire_attr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExpireFileDelNoVerReq.expire_attr)
}

// -------------------------------------------------------------------

// ExpireFileDelNoverRsp

// required bytes version = 1;
inline bool ExpireFileDelNoverRsp::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpireFileDelNoverRsp::has_version() const {
  return _internal_has_version();
}
inline void ExpireFileDelNoverRsp::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExpireFileDelNoverRsp::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelNoverRsp.version)
  return _internal_version();
}
inline void ExpireFileDelNoverRsp::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelNoverRsp.version)
}
inline std::string* ExpireFileDelNoverRsp::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExpireFileDelNoverRsp.version)
  return _internal_mutable_version();
}
inline const std::string& ExpireFileDelNoverRsp::_internal_version() const {
  return version_.Get();
}
inline void ExpireFileDelNoverRsp::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExpireFileDelNoverRsp::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ExpireFileDelNoverRsp.version)
}
inline void ExpireFileDelNoverRsp::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ExpireFileDelNoverRsp.version)
}
inline void ExpireFileDelNoverRsp::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ExpireFileDelNoverRsp.version)
}
inline std::string* ExpireFileDelNoverRsp::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExpireFileDelNoverRsp::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.ExpireFileDelNoverRsp.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpireFileDelNoverRsp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExpireFileDelNoverRsp.version)
}

// required uint32 mtime = 2;
inline bool ExpireFileDelNoverRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpireFileDelNoverRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void ExpireFileDelNoverRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpireFileDelNoverRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpireFileDelNoverRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelNoverRsp.mtime)
  return _internal_mtime();
}
inline void ExpireFileDelNoverRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtime_ = value;
}
inline void ExpireFileDelNoverRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelNoverRsp.mtime)
}

// -------------------------------------------------------------------

// ExpireFileDelVerReq

// required bytes path = 1;
inline bool ExpireFileDelVerReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpireFileDelVerReq::has_path() const {
  return _internal_has_path();
}
inline void ExpireFileDelVerReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExpireFileDelVerReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelVerReq.path)
  return _internal_path();
}
inline void ExpireFileDelVerReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelVerReq.path)
}
inline std::string* ExpireFileDelVerReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExpireFileDelVerReq.path)
  return _internal_mutable_path();
}
inline const std::string& ExpireFileDelVerReq::_internal_path() const {
  return path_.Get();
}
inline void ExpireFileDelVerReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExpireFileDelVerReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ExpireFileDelVerReq.path)
}
inline void ExpireFileDelVerReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ExpireFileDelVerReq.path)
}
inline void ExpireFileDelVerReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ExpireFileDelVerReq.path)
}
inline std::string* ExpireFileDelVerReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExpireFileDelVerReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.ExpireFileDelVerReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpireFileDelVerReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExpireFileDelVerReq.path)
}

// required bytes version = 2;
inline bool ExpireFileDelVerReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpireFileDelVerReq::has_version() const {
  return _internal_has_version();
}
inline void ExpireFileDelVerReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExpireFileDelVerReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelVerReq.version)
  return _internal_version();
}
inline void ExpireFileDelVerReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelVerReq.version)
}
inline std::string* ExpireFileDelVerReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExpireFileDelVerReq.version)
  return _internal_mutable_version();
}
inline const std::string& ExpireFileDelVerReq::_internal_version() const {
  return version_.Get();
}
inline void ExpireFileDelVerReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExpireFileDelVerReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ExpireFileDelVerReq.version)
}
inline void ExpireFileDelVerReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ExpireFileDelVerReq.version)
}
inline void ExpireFileDelVerReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ExpireFileDelVerReq.version)
}
inline std::string* ExpireFileDelVerReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExpireFileDelVerReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.ExpireFileDelVerReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpireFileDelVerReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExpireFileDelVerReq.version)
}

// required uint32 mtime = 3;
inline bool ExpireFileDelVerReq::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExpireFileDelVerReq::has_mtime() const {
  return _internal_has_mtime();
}
inline void ExpireFileDelVerReq::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpireFileDelVerReq::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpireFileDelVerReq::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelVerReq.mtime)
  return _internal_mtime();
}
inline void ExpireFileDelVerReq::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  mtime_ = value;
}
inline void ExpireFileDelVerReq::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelVerReq.mtime)
}

// optional bool switch_flag = 4;
inline bool ExpireFileDelVerReq::_internal_has_switch_flag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExpireFileDelVerReq::has_switch_flag() const {
  return _internal_has_switch_flag();
}
inline void ExpireFileDelVerReq::clear_switch_flag() {
  switch_flag_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ExpireFileDelVerReq::_internal_switch_flag() const {
  return switch_flag_;
}
inline bool ExpireFileDelVerReq::switch_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelVerReq.switch_flag)
  return _internal_switch_flag();
}
inline void ExpireFileDelVerReq::_internal_set_switch_flag(bool value) {
  _has_bits_[0] |= 0x00000010u;
  switch_flag_ = value;
}
inline void ExpireFileDelVerReq::set_switch_flag(bool value) {
  _internal_set_switch_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelVerReq.switch_flag)
}

// optional .ClientCos.DelObjExpireAttr expire_attr = 5;
inline bool ExpireFileDelVerReq::_internal_has_expire_attr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || expire_attr_ != nullptr);
  return value;
}
inline bool ExpireFileDelVerReq::has_expire_attr() const {
  return _internal_has_expire_attr();
}
inline void ExpireFileDelVerReq::clear_expire_attr() {
  if (expire_attr_ != nullptr) expire_attr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ClientCos::DelObjExpireAttr& ExpireFileDelVerReq::_internal_expire_attr() const {
  const ::ClientCos::DelObjExpireAttr* p = expire_attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::DelObjExpireAttr&>(
      ::ClientCos::_DelObjExpireAttr_default_instance_);
}
inline const ::ClientCos::DelObjExpireAttr& ExpireFileDelVerReq::expire_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelVerReq.expire_attr)
  return _internal_expire_attr();
}
inline void ExpireFileDelVerReq::unsafe_arena_set_allocated_expire_attr(
    ::ClientCos::DelObjExpireAttr* expire_attr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_attr_);
  }
  expire_attr_ = expire_attr;
  if (expire_attr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.ExpireFileDelVerReq.expire_attr)
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelVerReq::release_expire_attr() {
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelVerReq::unsafe_arena_release_expire_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.ExpireFileDelVerReq.expire_attr)
  _has_bits_[0] &= ~0x00000004u;
  ::ClientCos::DelObjExpireAttr* temp = expire_attr_;
  expire_attr_ = nullptr;
  return temp;
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelVerReq::_internal_mutable_expire_attr() {
  _has_bits_[0] |= 0x00000004u;
  if (expire_attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::DelObjExpireAttr>(GetArena());
    expire_attr_ = p;
  }
  return expire_attr_;
}
inline ::ClientCos::DelObjExpireAttr* ExpireFileDelVerReq::mutable_expire_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ExpireFileDelVerReq.expire_attr)
  return _internal_mutable_expire_attr();
}
inline void ExpireFileDelVerReq::set_allocated_expire_attr(::ClientCos::DelObjExpireAttr* expire_attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expire_attr_;
  }
  if (expire_attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expire_attr);
    if (message_arena != submessage_arena) {
      expire_attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_attr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  expire_attr_ = expire_attr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ExpireFileDelVerReq.expire_attr)
}

// -------------------------------------------------------------------

// ExpireFileDelVerRsp

// required bool delete_marker = 1;
inline bool ExpireFileDelVerRsp::_internal_has_delete_marker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpireFileDelVerRsp::has_delete_marker() const {
  return _internal_has_delete_marker();
}
inline void ExpireFileDelVerRsp::clear_delete_marker() {
  delete_marker_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ExpireFileDelVerRsp::_internal_delete_marker() const {
  return delete_marker_;
}
inline bool ExpireFileDelVerRsp::delete_marker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelVerRsp.delete_marker)
  return _internal_delete_marker();
}
inline void ExpireFileDelVerRsp::_internal_set_delete_marker(bool value) {
  _has_bits_[0] |= 0x00000001u;
  delete_marker_ = value;
}
inline void ExpireFileDelVerRsp::set_delete_marker(bool value) {
  _internal_set_delete_marker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelVerRsp.delete_marker)
}

// required uint32 mtime = 2;
inline bool ExpireFileDelVerRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpireFileDelVerRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void ExpireFileDelVerRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpireFileDelVerRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpireFileDelVerRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ExpireFileDelVerRsp.mtime)
  return _internal_mtime();
}
inline void ExpireFileDelVerRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtime_ = value;
}
inline void ExpireFileDelVerRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ExpireFileDelVerRsp.mtime)
}

// -------------------------------------------------------------------

// SetBucketPriAttrReq

// required bytes path = 1;
inline bool SetBucketPriAttrReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBucketPriAttrReq::has_path() const {
  return _internal_has_path();
}
inline void SetBucketPriAttrReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetBucketPriAttrReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketPriAttrReq.path)
  return _internal_path();
}
inline void SetBucketPriAttrReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketPriAttrReq.path)
}
inline std::string* SetBucketPriAttrReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketPriAttrReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetBucketPriAttrReq::_internal_path() const {
  return path_.Get();
}
inline void SetBucketPriAttrReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBucketPriAttrReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetBucketPriAttrReq.path)
}
inline void SetBucketPriAttrReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetBucketPriAttrReq.path)
}
inline void SetBucketPriAttrReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetBucketPriAttrReq.path)
}
inline std::string* SetBucketPriAttrReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBucketPriAttrReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketPriAttrReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBucketPriAttrReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketPriAttrReq.path)
}

// required uint32 flag = 2;
inline bool SetBucketPriAttrReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetBucketPriAttrReq::has_flag() const {
  return _internal_has_flag();
}
inline void SetBucketPriAttrReq::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetBucketPriAttrReq::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetBucketPriAttrReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketPriAttrReq.flag)
  return _internal_flag();
}
inline void SetBucketPriAttrReq::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
}
inline void SetBucketPriAttrReq::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketPriAttrReq.flag)
}

// optional bool nofile = 3;
inline bool SetBucketPriAttrReq::_internal_has_nofile() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetBucketPriAttrReq::has_nofile() const {
  return _internal_has_nofile();
}
inline void SetBucketPriAttrReq::clear_nofile() {
  nofile_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SetBucketPriAttrReq::_internal_nofile() const {
  return nofile_;
}
inline bool SetBucketPriAttrReq::nofile() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketPriAttrReq.nofile)
  return _internal_nofile();
}
inline void SetBucketPriAttrReq::_internal_set_nofile(bool value) {
  _has_bits_[0] |= 0x00000004u;
  nofile_ = value;
}
inline void SetBucketPriAttrReq::set_nofile(bool value) {
  _internal_set_nofile(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketPriAttrReq.nofile)
}

// optional bool visit_v4 = 4;
inline bool SetBucketPriAttrReq::_internal_has_visit_v4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SetBucketPriAttrReq::has_visit_v4() const {
  return _internal_has_visit_v4();
}
inline void SetBucketPriAttrReq::clear_visit_v4() {
  visit_v4_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SetBucketPriAttrReq::_internal_visit_v4() const {
  return visit_v4_;
}
inline bool SetBucketPriAttrReq::visit_v4() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketPriAttrReq.visit_v4)
  return _internal_visit_v4();
}
inline void SetBucketPriAttrReq::_internal_set_visit_v4(bool value) {
  _has_bits_[0] |= 0x00000008u;
  visit_v4_ = value;
}
inline void SetBucketPriAttrReq::set_visit_v4(bool value) {
  _internal_set_visit_v4(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketPriAttrReq.visit_v4)
}

// -------------------------------------------------------------------

// SetBucketPriAttrRsp

// -------------------------------------------------------------------

// FileDownToCASReq

// required bytes path = 1;
inline bool FileDownToCASReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileDownToCASReq::has_path() const {
  return _internal_has_path();
}
inline void FileDownToCASReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileDownToCASReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDownToCASReq.path)
  return _internal_path();
}
inline void FileDownToCASReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDownToCASReq.path)
}
inline std::string* FileDownToCASReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDownToCASReq.path)
  return _internal_mutable_path();
}
inline const std::string& FileDownToCASReq::_internal_path() const {
  return path_.Get();
}
inline void FileDownToCASReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDownToCASReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDownToCASReq.path)
}
inline void FileDownToCASReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDownToCASReq.path)
}
inline void FileDownToCASReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDownToCASReq.path)
}
inline std::string* FileDownToCASReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDownToCASReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDownToCASReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDownToCASReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDownToCASReq.path)
}

// required bytes archive_id = 2;
inline bool FileDownToCASReq::_internal_has_archive_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileDownToCASReq::has_archive_id() const {
  return _internal_has_archive_id();
}
inline void FileDownToCASReq::clear_archive_id() {
  archive_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileDownToCASReq::archive_id() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDownToCASReq.archive_id)
  return _internal_archive_id();
}
inline void FileDownToCASReq::set_archive_id(const std::string& value) {
  _internal_set_archive_id(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDownToCASReq.archive_id)
}
inline std::string* FileDownToCASReq::mutable_archive_id() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDownToCASReq.archive_id)
  return _internal_mutable_archive_id();
}
inline const std::string& FileDownToCASReq::_internal_archive_id() const {
  return archive_id_.Get();
}
inline void FileDownToCASReq::_internal_set_archive_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDownToCASReq::set_archive_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDownToCASReq.archive_id)
}
inline void FileDownToCASReq::set_archive_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDownToCASReq.archive_id)
}
inline void FileDownToCASReq::set_archive_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDownToCASReq.archive_id)
}
inline std::string* FileDownToCASReq::_internal_mutable_archive_id() {
  _has_bits_[0] |= 0x00000002u;
  return archive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDownToCASReq::release_archive_id() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDownToCASReq.archive_id)
  if (!_internal_has_archive_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return archive_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDownToCASReq::set_allocated_archive_id(std::string* archive_id) {
  if (archive_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  archive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDownToCASReq.archive_id)
}

// required bytes sk = 3;
inline bool FileDownToCASReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileDownToCASReq::has_sk() const {
  return _internal_has_sk();
}
inline void FileDownToCASReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileDownToCASReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDownToCASReq.sk)
  return _internal_sk();
}
inline void FileDownToCASReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDownToCASReq.sk)
}
inline std::string* FileDownToCASReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDownToCASReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& FileDownToCASReq::_internal_sk() const {
  return sk_.Get();
}
inline void FileDownToCASReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDownToCASReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDownToCASReq.sk)
}
inline void FileDownToCASReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDownToCASReq.sk)
}
inline void FileDownToCASReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDownToCASReq.sk)
}
inline std::string* FileDownToCASReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000004u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDownToCASReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDownToCASReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDownToCASReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDownToCASReq.sk)
}

// required uint32 check_mtime = 4;
inline bool FileDownToCASReq::_internal_has_check_mtime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileDownToCASReq::has_check_mtime() const {
  return _internal_has_check_mtime();
}
inline void FileDownToCASReq::clear_check_mtime() {
  check_mtime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileDownToCASReq::_internal_check_mtime() const {
  return check_mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileDownToCASReq::check_mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDownToCASReq.check_mtime)
  return _internal_check_mtime();
}
inline void FileDownToCASReq::_internal_set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  check_mtime_ = value;
}
inline void FileDownToCASReq::set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_check_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDownToCASReq.check_mtime)
}

// optional bytes version = 5;
inline bool FileDownToCASReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileDownToCASReq::has_version() const {
  return _internal_has_version();
}
inline void FileDownToCASReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FileDownToCASReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDownToCASReq.version)
  return _internal_version();
}
inline void FileDownToCASReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDownToCASReq.version)
}
inline std::string* FileDownToCASReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDownToCASReq.version)
  return _internal_mutable_version();
}
inline const std::string& FileDownToCASReq::_internal_version() const {
  return version_.Get();
}
inline void FileDownToCASReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDownToCASReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDownToCASReq.version)
}
inline void FileDownToCASReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDownToCASReq.version)
}
inline void FileDownToCASReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDownToCASReq.version)
}
inline std::string* FileDownToCASReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000008u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDownToCASReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDownToCASReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDownToCASReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDownToCASReq.version)
}

// optional bool switch_flag = 6;
inline bool FileDownToCASReq::_internal_has_switch_flag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FileDownToCASReq::has_switch_flag() const {
  return _internal_has_switch_flag();
}
inline void FileDownToCASReq::clear_switch_flag() {
  switch_flag_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FileDownToCASReq::_internal_switch_flag() const {
  return switch_flag_;
}
inline bool FileDownToCASReq::switch_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDownToCASReq.switch_flag)
  return _internal_switch_flag();
}
inline void FileDownToCASReq::_internal_set_switch_flag(bool value) {
  _has_bits_[0] |= 0x00000020u;
  switch_flag_ = value;
}
inline void FileDownToCASReq::set_switch_flag(bool value) {
  _internal_set_switch_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDownToCASReq.switch_flag)
}

// -------------------------------------------------------------------

// FileDownToCASRsp

// optional bytes casfilekey = 1;
inline bool FileDownToCASRsp::_internal_has_casfilekey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileDownToCASRsp::has_casfilekey() const {
  return _internal_has_casfilekey();
}
inline void FileDownToCASRsp::clear_casfilekey() {
  casfilekey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileDownToCASRsp::casfilekey() const {
  // @@protoc_insertion_point(field_get:ClientCos.FileDownToCASRsp.casfilekey)
  return _internal_casfilekey();
}
inline void FileDownToCASRsp::set_casfilekey(const std::string& value) {
  _internal_set_casfilekey(value);
  // @@protoc_insertion_point(field_set:ClientCos.FileDownToCASRsp.casfilekey)
}
inline std::string* FileDownToCASRsp::mutable_casfilekey() {
  // @@protoc_insertion_point(field_mutable:ClientCos.FileDownToCASRsp.casfilekey)
  return _internal_mutable_casfilekey();
}
inline const std::string& FileDownToCASRsp::_internal_casfilekey() const {
  return casfilekey_.Get();
}
inline void FileDownToCASRsp::_internal_set_casfilekey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileDownToCASRsp::set_casfilekey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.FileDownToCASRsp.casfilekey)
}
inline void FileDownToCASRsp::set_casfilekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.FileDownToCASRsp.casfilekey)
}
inline void FileDownToCASRsp::set_casfilekey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  casfilekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.FileDownToCASRsp.casfilekey)
}
inline std::string* FileDownToCASRsp::_internal_mutable_casfilekey() {
  _has_bits_[0] |= 0x00000001u;
  return casfilekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileDownToCASRsp::release_casfilekey() {
  // @@protoc_insertion_point(field_release:ClientCos.FileDownToCASRsp.casfilekey)
  if (!_internal_has_casfilekey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return casfilekey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileDownToCASRsp::set_allocated_casfilekey(std::string* casfilekey) {
  if (casfilekey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  casfilekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), casfilekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.FileDownToCASRsp.casfilekey)
}

// -------------------------------------------------------------------

// CasObjAttrModifyReq

// required bytes path = 1;
inline bool CasObjAttrModifyReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CasObjAttrModifyReq::has_path() const {
  return _internal_has_path();
}
inline void CasObjAttrModifyReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CasObjAttrModifyReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjAttrModifyReq.path)
  return _internal_path();
}
inline void CasObjAttrModifyReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjAttrModifyReq.path)
}
inline std::string* CasObjAttrModifyReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjAttrModifyReq.path)
  return _internal_mutable_path();
}
inline const std::string& CasObjAttrModifyReq::_internal_path() const {
  return path_.Get();
}
inline void CasObjAttrModifyReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjAttrModifyReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjAttrModifyReq.path)
}
inline void CasObjAttrModifyReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjAttrModifyReq.path)
}
inline void CasObjAttrModifyReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjAttrModifyReq.path)
}
inline std::string* CasObjAttrModifyReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjAttrModifyReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjAttrModifyReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjAttrModifyReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjAttrModifyReq.path)
}

// optional bytes version = 2;
inline bool CasObjAttrModifyReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CasObjAttrModifyReq::has_version() const {
  return _internal_has_version();
}
inline void CasObjAttrModifyReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CasObjAttrModifyReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjAttrModifyReq.version)
  return _internal_version();
}
inline void CasObjAttrModifyReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjAttrModifyReq.version)
}
inline std::string* CasObjAttrModifyReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjAttrModifyReq.version)
  return _internal_mutable_version();
}
inline const std::string& CasObjAttrModifyReq::_internal_version() const {
  return version_.Get();
}
inline void CasObjAttrModifyReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjAttrModifyReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjAttrModifyReq.version)
}
inline void CasObjAttrModifyReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjAttrModifyReq.version)
}
inline void CasObjAttrModifyReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjAttrModifyReq.version)
}
inline std::string* CasObjAttrModifyReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjAttrModifyReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjAttrModifyReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjAttrModifyReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjAttrModifyReq.version)
}

// required uint64 expired_time = 3;
inline bool CasObjAttrModifyReq::_internal_has_expired_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CasObjAttrModifyReq::has_expired_time() const {
  return _internal_has_expired_time();
}
inline void CasObjAttrModifyReq::clear_expired_time() {
  expired_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasObjAttrModifyReq::_internal_expired_time() const {
  return expired_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasObjAttrModifyReq::expired_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjAttrModifyReq.expired_time)
  return _internal_expired_time();
}
inline void CasObjAttrModifyReq::_internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  expired_time_ = value;
}
inline void CasObjAttrModifyReq::set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expired_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjAttrModifyReq.expired_time)
}

// optional .ClientCos.CASRestoreTier restore_tier = 4;
inline bool CasObjAttrModifyReq::_internal_has_restore_tier() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CasObjAttrModifyReq::has_restore_tier() const {
  return _internal_has_restore_tier();
}
inline void CasObjAttrModifyReq::clear_restore_tier() {
  restore_tier_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ClientCos::CASRestoreTier CasObjAttrModifyReq::_internal_restore_tier() const {
  return static_cast< ::ClientCos::CASRestoreTier >(restore_tier_);
}
inline ::ClientCos::CASRestoreTier CasObjAttrModifyReq::restore_tier() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjAttrModifyReq.restore_tier)
  return _internal_restore_tier();
}
inline void CasObjAttrModifyReq::_internal_set_restore_tier(::ClientCos::CASRestoreTier value) {
  assert(::ClientCos::CASRestoreTier_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  restore_tier_ = value;
}
inline void CasObjAttrModifyReq::set_restore_tier(::ClientCos::CASRestoreTier value) {
  _internal_set_restore_tier(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjAttrModifyReq.restore_tier)
}

// -------------------------------------------------------------------

// CasObjAttrModifyRsp

// -------------------------------------------------------------------

// CasFileRecoverDelReq

// required bytes path = 1;
inline bool CasFileRecoverDelReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CasFileRecoverDelReq::has_path() const {
  return _internal_has_path();
}
inline void CasFileRecoverDelReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CasFileRecoverDelReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasFileRecoverDelReq.path)
  return _internal_path();
}
inline void CasFileRecoverDelReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasFileRecoverDelReq.path)
}
inline std::string* CasFileRecoverDelReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasFileRecoverDelReq.path)
  return _internal_mutable_path();
}
inline const std::string& CasFileRecoverDelReq::_internal_path() const {
  return path_.Get();
}
inline void CasFileRecoverDelReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasFileRecoverDelReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasFileRecoverDelReq.path)
}
inline void CasFileRecoverDelReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasFileRecoverDelReq.path)
}
inline void CasFileRecoverDelReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasFileRecoverDelReq.path)
}
inline std::string* CasFileRecoverDelReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasFileRecoverDelReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.CasFileRecoverDelReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasFileRecoverDelReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasFileRecoverDelReq.path)
}

// optional bytes version = 2;
inline bool CasFileRecoverDelReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CasFileRecoverDelReq::has_version() const {
  return _internal_has_version();
}
inline void CasFileRecoverDelReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CasFileRecoverDelReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasFileRecoverDelReq.version)
  return _internal_version();
}
inline void CasFileRecoverDelReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasFileRecoverDelReq.version)
}
inline std::string* CasFileRecoverDelReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasFileRecoverDelReq.version)
  return _internal_mutable_version();
}
inline const std::string& CasFileRecoverDelReq::_internal_version() const {
  return version_.Get();
}
inline void CasFileRecoverDelReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasFileRecoverDelReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasFileRecoverDelReq.version)
}
inline void CasFileRecoverDelReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasFileRecoverDelReq.version)
}
inline void CasFileRecoverDelReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasFileRecoverDelReq.version)
}
inline std::string* CasFileRecoverDelReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasFileRecoverDelReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.CasFileRecoverDelReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasFileRecoverDelReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasFileRecoverDelReq.version)
}

// -------------------------------------------------------------------

// CasFileRecoverDelRsp

// required uint64 expired_time = 1;
inline bool CasFileRecoverDelRsp::_internal_has_expired_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CasFileRecoverDelRsp::has_expired_time() const {
  return _internal_has_expired_time();
}
inline void CasFileRecoverDelRsp::clear_expired_time() {
  expired_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasFileRecoverDelRsp::_internal_expired_time() const {
  return expired_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasFileRecoverDelRsp::expired_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasFileRecoverDelRsp.expired_time)
  return _internal_expired_time();
}
inline void CasFileRecoverDelRsp::_internal_set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  expired_time_ = value;
}
inline void CasFileRecoverDelRsp::set_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expired_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasFileRecoverDelRsp.expired_time)
}

// -------------------------------------------------------------------

// CasObjRestoreErrReq

// required bytes path = 1;
inline bool CasObjRestoreErrReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CasObjRestoreErrReq::has_path() const {
  return _internal_has_path();
}
inline void CasObjRestoreErrReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CasObjRestoreErrReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjRestoreErrReq.path)
  return _internal_path();
}
inline void CasObjRestoreErrReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjRestoreErrReq.path)
}
inline std::string* CasObjRestoreErrReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjRestoreErrReq.path)
  return _internal_mutable_path();
}
inline const std::string& CasObjRestoreErrReq::_internal_path() const {
  return path_.Get();
}
inline void CasObjRestoreErrReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjRestoreErrReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjRestoreErrReq.path)
}
inline void CasObjRestoreErrReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjRestoreErrReq.path)
}
inline void CasObjRestoreErrReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjRestoreErrReq.path)
}
inline std::string* CasObjRestoreErrReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjRestoreErrReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjRestoreErrReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjRestoreErrReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjRestoreErrReq.path)
}

// optional bytes version = 2;
inline bool CasObjRestoreErrReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CasObjRestoreErrReq::has_version() const {
  return _internal_has_version();
}
inline void CasObjRestoreErrReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CasObjRestoreErrReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjRestoreErrReq.version)
  return _internal_version();
}
inline void CasObjRestoreErrReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjRestoreErrReq.version)
}
inline std::string* CasObjRestoreErrReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjRestoreErrReq.version)
  return _internal_mutable_version();
}
inline const std::string& CasObjRestoreErrReq::_internal_version() const {
  return version_.Get();
}
inline void CasObjRestoreErrReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjRestoreErrReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjRestoreErrReq.version)
}
inline void CasObjRestoreErrReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjRestoreErrReq.version)
}
inline void CasObjRestoreErrReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjRestoreErrReq.version)
}
inline std::string* CasObjRestoreErrReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjRestoreErrReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjRestoreErrReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjRestoreErrReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjRestoreErrReq.version)
}

// -------------------------------------------------------------------

// CasObjRestoreErrRsp

// -------------------------------------------------------------------

// CasObjRestoreFinReq

// required bytes path = 1;
inline bool CasObjRestoreFinReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CasObjRestoreFinReq::has_path() const {
  return _internal_has_path();
}
inline void CasObjRestoreFinReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CasObjRestoreFinReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjRestoreFinReq.path)
  return _internal_path();
}
inline void CasObjRestoreFinReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjRestoreFinReq.path)
}
inline std::string* CasObjRestoreFinReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjRestoreFinReq.path)
  return _internal_mutable_path();
}
inline const std::string& CasObjRestoreFinReq::_internal_path() const {
  return path_.Get();
}
inline void CasObjRestoreFinReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjRestoreFinReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjRestoreFinReq.path)
}
inline void CasObjRestoreFinReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjRestoreFinReq.path)
}
inline void CasObjRestoreFinReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjRestoreFinReq.path)
}
inline std::string* CasObjRestoreFinReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjRestoreFinReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjRestoreFinReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjRestoreFinReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjRestoreFinReq.path)
}

// optional bytes version = 2;
inline bool CasObjRestoreFinReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CasObjRestoreFinReq::has_version() const {
  return _internal_has_version();
}
inline void CasObjRestoreFinReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CasObjRestoreFinReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjRestoreFinReq.version)
  return _internal_version();
}
inline void CasObjRestoreFinReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjRestoreFinReq.version)
}
inline std::string* CasObjRestoreFinReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjRestoreFinReq.version)
  return _internal_mutable_version();
}
inline const std::string& CasObjRestoreFinReq::_internal_version() const {
  return version_.Get();
}
inline void CasObjRestoreFinReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjRestoreFinReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjRestoreFinReq.version)
}
inline void CasObjRestoreFinReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjRestoreFinReq.version)
}
inline void CasObjRestoreFinReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjRestoreFinReq.version)
}
inline std::string* CasObjRestoreFinReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjRestoreFinReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjRestoreFinReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjRestoreFinReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjRestoreFinReq.version)
}

// optional bytes sk = 3;
inline bool CasObjRestoreFinReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CasObjRestoreFinReq::has_sk() const {
  return _internal_has_sk();
}
inline void CasObjRestoreFinReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CasObjRestoreFinReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjRestoreFinReq.sk)
  return _internal_sk();
}
inline void CasObjRestoreFinReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjRestoreFinReq.sk)
}
inline std::string* CasObjRestoreFinReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjRestoreFinReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& CasObjRestoreFinReq::_internal_sk() const {
  return sk_.Get();
}
inline void CasObjRestoreFinReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjRestoreFinReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjRestoreFinReq.sk)
}
inline void CasObjRestoreFinReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjRestoreFinReq.sk)
}
inline void CasObjRestoreFinReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjRestoreFinReq.sk)
}
inline std::string* CasObjRestoreFinReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000004u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjRestoreFinReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjRestoreFinReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjRestoreFinReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjRestoreFinReq.sk)
}

// optional bytes storage_type = 4;
inline bool CasObjRestoreFinReq::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CasObjRestoreFinReq::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void CasObjRestoreFinReq::clear_storage_type() {
  storage_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CasObjRestoreFinReq::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.CasObjRestoreFinReq.storage_type)
  return _internal_storage_type();
}
inline void CasObjRestoreFinReq::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.CasObjRestoreFinReq.storage_type)
}
inline std::string* CasObjRestoreFinReq::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CasObjRestoreFinReq.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& CasObjRestoreFinReq::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void CasObjRestoreFinReq::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasObjRestoreFinReq::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CasObjRestoreFinReq.storage_type)
}
inline void CasObjRestoreFinReq::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CasObjRestoreFinReq.storage_type)
}
inline void CasObjRestoreFinReq::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CasObjRestoreFinReq.storage_type)
}
inline std::string* CasObjRestoreFinReq::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000008u;
  return storage_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasObjRestoreFinReq::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.CasObjRestoreFinReq.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return storage_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasObjRestoreFinReq::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  storage_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CasObjRestoreFinReq.storage_type)
}

// -------------------------------------------------------------------

// CasObjRestoreFinRsp

// -------------------------------------------------------------------

// SpObjAttrQueryReq

// required bytes path = 1;
inline bool SpObjAttrQueryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpObjAttrQueryReq::has_path() const {
  return _internal_has_path();
}
inline void SpObjAttrQueryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpObjAttrQueryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryReq.path)
  return _internal_path();
}
inline void SpObjAttrQueryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryReq.path)
}
inline std::string* SpObjAttrQueryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryReq.path)
  return _internal_mutable_path();
}
inline const std::string& SpObjAttrQueryReq::_internal_path() const {
  return path_.Get();
}
inline void SpObjAttrQueryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryReq.path)
}
inline void SpObjAttrQueryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryReq.path)
}
inline void SpObjAttrQueryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryReq.path)
}
inline std::string* SpObjAttrQueryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryReq.path)
}

// optional bytes version = 2;
inline bool SpObjAttrQueryReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpObjAttrQueryReq::has_version() const {
  return _internal_has_version();
}
inline void SpObjAttrQueryReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpObjAttrQueryReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryReq.version)
  return _internal_version();
}
inline void SpObjAttrQueryReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryReq.version)
}
inline std::string* SpObjAttrQueryReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryReq.version)
  return _internal_mutable_version();
}
inline const std::string& SpObjAttrQueryReq::_internal_version() const {
  return version_.Get();
}
inline void SpObjAttrQueryReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryReq.version)
}
inline void SpObjAttrQueryReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryReq.version)
}
inline void SpObjAttrQueryReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryReq.version)
}
inline std::string* SpObjAttrQueryReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryReq.version)
}

// -------------------------------------------------------------------

// SpObjAttrQueryRsp

// required bytes biz_attr = 1 [default = ""];
inline bool SpObjAttrQueryRsp::_internal_has_biz_attr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_biz_attr() const {
  return _internal_has_biz_attr();
}
inline void SpObjAttrQueryRsp::clear_biz_attr() {
  biz_attr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpObjAttrQueryRsp::biz_attr() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.biz_attr)
  return _internal_biz_attr();
}
inline void SpObjAttrQueryRsp::set_biz_attr(const std::string& value) {
  _internal_set_biz_attr(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.biz_attr)
}
inline std::string* SpObjAttrQueryRsp::mutable_biz_attr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.biz_attr)
  return _internal_mutable_biz_attr();
}
inline const std::string& SpObjAttrQueryRsp::_internal_biz_attr() const {
  return biz_attr_.Get();
}
inline void SpObjAttrQueryRsp::_internal_set_biz_attr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryRsp::set_biz_attr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryRsp.biz_attr)
}
inline void SpObjAttrQueryRsp::set_biz_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryRsp.biz_attr)
}
inline void SpObjAttrQueryRsp::set_biz_attr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  biz_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryRsp.biz_attr)
}
inline std::string* SpObjAttrQueryRsp::_internal_mutable_biz_attr() {
  _has_bits_[0] |= 0x00000001u;
  return biz_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryRsp::release_biz_attr() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.biz_attr)
  if (!_internal_has_biz_attr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return biz_attr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryRsp::set_allocated_biz_attr(std::string* biz_attr) {
  if (biz_attr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  biz_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.biz_attr)
}

// required uint32 ctime = 2 [default = 0];
inline bool SpObjAttrQueryRsp::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_ctime() const {
  return _internal_has_ctime();
}
inline void SpObjAttrQueryRsp::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.ctime)
  return _internal_ctime();
}
inline void SpObjAttrQueryRsp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  ctime_ = value;
}
inline void SpObjAttrQueryRsp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.ctime)
}

// required uint32 mtime = 3 [default = 0];
inline bool SpObjAttrQueryRsp::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_mtime() const {
  return _internal_has_mtime();
}
inline void SpObjAttrQueryRsp::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.mtime)
  return _internal_mtime();
}
inline void SpObjAttrQueryRsp::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  mtime_ = value;
}
inline void SpObjAttrQueryRsp::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.mtime)
}

// optional uint64 file_size = 4;
inline bool SpObjAttrQueryRsp::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_file_size() const {
  return _internal_has_file_size();
}
inline void SpObjAttrQueryRsp::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::file_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.file_size)
  return _internal_file_size();
}
inline void SpObjAttrQueryRsp::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  file_size_ = value;
}
inline void SpObjAttrQueryRsp::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.file_size)
}

// optional uint64 file_length = 5;
inline bool SpObjAttrQueryRsp::_internal_has_file_length() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_file_length() const {
  return _internal_has_file_length();
}
inline void SpObjAttrQueryRsp::clear_file_length() {
  file_length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::_internal_file_length() const {
  return file_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::file_length() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.file_length)
  return _internal_file_length();
}
inline void SpObjAttrQueryRsp::_internal_set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  file_length_ = value;
}
inline void SpObjAttrQueryRsp::set_file_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_length(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.file_length)
}

// optional bytes sha = 6;
inline bool SpObjAttrQueryRsp::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_sha() const {
  return _internal_has_sha();
}
inline void SpObjAttrQueryRsp::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpObjAttrQueryRsp::sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.sha)
  return _internal_sha();
}
inline void SpObjAttrQueryRsp::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.sha)
}
inline std::string* SpObjAttrQueryRsp::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.sha)
  return _internal_mutable_sha();
}
inline const std::string& SpObjAttrQueryRsp::_internal_sha() const {
  return sha_.Get();
}
inline void SpObjAttrQueryRsp::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryRsp::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryRsp.sha)
}
inline void SpObjAttrQueryRsp::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryRsp.sha)
}
inline void SpObjAttrQueryRsp::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryRsp.sha)
}
inline std::string* SpObjAttrQueryRsp::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000002u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryRsp::release_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryRsp::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.sha)
}

// optional uint32 forbid = 7;
inline bool SpObjAttrQueryRsp::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_forbid() const {
  return _internal_has_forbid();
}
inline void SpObjAttrQueryRsp::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.forbid)
  return _internal_forbid();
}
inline void SpObjAttrQueryRsp::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  forbid_ = value;
}
inline void SpObjAttrQueryRsp::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.forbid)
}

// repeated .ClientCos.ReservedAttr reservedattr = 8;
inline int SpObjAttrQueryRsp::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int SpObjAttrQueryRsp::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void SpObjAttrQueryRsp::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* SpObjAttrQueryRsp::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
SpObjAttrQueryRsp::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrQueryRsp.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& SpObjAttrQueryRsp::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& SpObjAttrQueryRsp::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* SpObjAttrQueryRsp::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* SpObjAttrQueryRsp::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrQueryRsp.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
SpObjAttrQueryRsp::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrQueryRsp.reservedattr)
  return reservedattr_;
}

// optional .ClientCos.Authority auth = 9;
inline bool SpObjAttrQueryRsp::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_auth() const {
  return _internal_has_auth();
}
inline void SpObjAttrQueryRsp::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::ClientCos::Authority SpObjAttrQueryRsp::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority SpObjAttrQueryRsp::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.auth)
  return _internal_auth();
}
inline void SpObjAttrQueryRsp::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  auth_ = value;
}
inline void SpObjAttrQueryRsp::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.auth)
}

// repeated .ClientCos.CustomHeader customheader = 10;
inline int SpObjAttrQueryRsp::_internal_customheader_size() const {
  return customheader_.size();
}
inline int SpObjAttrQueryRsp::customheader_size() const {
  return _internal_customheader_size();
}
inline void SpObjAttrQueryRsp::clear_customheader() {
  customheader_.Clear();
}
inline ::ClientCos::CustomHeader* SpObjAttrQueryRsp::mutable_customheader(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.customheader)
  return customheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
SpObjAttrQueryRsp::mutable_customheader() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrQueryRsp.customheader)
  return &customheader_;
}
inline const ::ClientCos::CustomHeader& SpObjAttrQueryRsp::_internal_customheader(int index) const {
  return customheader_.Get(index);
}
inline const ::ClientCos::CustomHeader& SpObjAttrQueryRsp::customheader(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.customheader)
  return _internal_customheader(index);
}
inline ::ClientCos::CustomHeader* SpObjAttrQueryRsp::_internal_add_customheader() {
  return customheader_.Add();
}
inline ::ClientCos::CustomHeader* SpObjAttrQueryRsp::add_customheader() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrQueryRsp.customheader)
  return _internal_add_customheader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
SpObjAttrQueryRsp::customheader() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrQueryRsp.customheader)
  return customheader_;
}

// optional bytes real_sha = 11;
inline bool SpObjAttrQueryRsp::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void SpObjAttrQueryRsp::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SpObjAttrQueryRsp::real_sha() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.real_sha)
  return _internal_real_sha();
}
inline void SpObjAttrQueryRsp::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.real_sha)
}
inline std::string* SpObjAttrQueryRsp::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& SpObjAttrQueryRsp::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void SpObjAttrQueryRsp::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryRsp::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryRsp.real_sha)
}
inline void SpObjAttrQueryRsp::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryRsp.real_sha)
}
inline void SpObjAttrQueryRsp::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryRsp.real_sha)
}
inline std::string* SpObjAttrQueryRsp::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000004u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryRsp::release_real_sha() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryRsp::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.real_sha)
}

// optional uint32 slicesize = 12;
inline bool SpObjAttrQueryRsp::_internal_has_slicesize() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_slicesize() const {
  return _internal_has_slicesize();
}
inline void SpObjAttrQueryRsp::clear_slicesize() {
  slicesize_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::_internal_slicesize() const {
  return slicesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::slicesize() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.slicesize)
  return _internal_slicesize();
}
inline void SpObjAttrQueryRsp::_internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  slicesize_ = value;
}
inline void SpObjAttrQueryRsp::set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slicesize(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.slicesize)
}

// optional uint32 type = 13;
inline bool SpObjAttrQueryRsp::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_type() const {
  return _internal_has_type();
}
inline void SpObjAttrQueryRsp::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::type() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.type)
  return _internal_type();
}
inline void SpObjAttrQueryRsp::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  type_ = value;
}
inline void SpObjAttrQueryRsp::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.type)
}

// optional bytes storage_type = 14;
inline bool SpObjAttrQueryRsp::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void SpObjAttrQueryRsp::clear_storage_type() {
  storage_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SpObjAttrQueryRsp::storage_type() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.storage_type)
  return _internal_storage_type();
}
inline void SpObjAttrQueryRsp::set_storage_type(const std::string& value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.storage_type)
}
inline std::string* SpObjAttrQueryRsp::mutable_storage_type() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.storage_type)
  return _internal_mutable_storage_type();
}
inline const std::string& SpObjAttrQueryRsp::_internal_storage_type() const {
  return storage_type_.Get();
}
inline void SpObjAttrQueryRsp::_internal_set_storage_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryRsp::set_storage_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryRsp.storage_type)
}
inline void SpObjAttrQueryRsp::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryRsp.storage_type)
}
inline void SpObjAttrQueryRsp::set_storage_type(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  storage_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryRsp.storage_type)
}
inline std::string* SpObjAttrQueryRsp::_internal_mutable_storage_type() {
  _has_bits_[0] |= 0x00000008u;
  return storage_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryRsp::release_storage_type() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.storage_type)
  if (!_internal_has_storage_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return storage_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryRsp::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  storage_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.storage_type)
}

// optional bytes version = 15;
inline bool SpObjAttrQueryRsp::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_version() const {
  return _internal_has_version();
}
inline void SpObjAttrQueryRsp::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SpObjAttrQueryRsp::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.version)
  return _internal_version();
}
inline void SpObjAttrQueryRsp::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.version)
}
inline std::string* SpObjAttrQueryRsp::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.version)
  return _internal_mutable_version();
}
inline const std::string& SpObjAttrQueryRsp::_internal_version() const {
  return version_.Get();
}
inline void SpObjAttrQueryRsp::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryRsp::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryRsp.version)
}
inline void SpObjAttrQueryRsp::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryRsp.version)
}
inline void SpObjAttrQueryRsp::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryRsp.version)
}
inline std::string* SpObjAttrQueryRsp::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000010u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryRsp::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryRsp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.version)
}

// optional bool delete_marker = 16;
inline bool SpObjAttrQueryRsp::_internal_has_delete_marker() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_delete_marker() const {
  return _internal_has_delete_marker();
}
inline void SpObjAttrQueryRsp::clear_delete_marker() {
  delete_marker_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool SpObjAttrQueryRsp::_internal_delete_marker() const {
  return delete_marker_;
}
inline bool SpObjAttrQueryRsp::delete_marker() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.delete_marker)
  return _internal_delete_marker();
}
inline void SpObjAttrQueryRsp::_internal_set_delete_marker(bool value) {
  _has_bits_[0] |= 0x00080000u;
  delete_marker_ = value;
}
inline void SpObjAttrQueryRsp::set_delete_marker(bool value) {
  _internal_set_delete_marker(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.delete_marker)
}

// optional bool islatest = 17;
inline bool SpObjAttrQueryRsp::_internal_has_islatest() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_islatest() const {
  return _internal_has_islatest();
}
inline void SpObjAttrQueryRsp::clear_islatest() {
  islatest_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool SpObjAttrQueryRsp::_internal_islatest() const {
  return islatest_;
}
inline bool SpObjAttrQueryRsp::islatest() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.islatest)
  return _internal_islatest();
}
inline void SpObjAttrQueryRsp::_internal_set_islatest(bool value) {
  _has_bits_[0] |= 0x00100000u;
  islatest_ = value;
}
inline void SpObjAttrQueryRsp::set_islatest(bool value) {
  _internal_set_islatest(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.islatest)
}

// optional bytes upload_source = 18;
inline bool SpObjAttrQueryRsp::_internal_has_upload_source() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_upload_source() const {
  return _internal_has_upload_source();
}
inline void SpObjAttrQueryRsp::clear_upload_source() {
  upload_source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SpObjAttrQueryRsp::upload_source() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.upload_source)
  return _internal_upload_source();
}
inline void SpObjAttrQueryRsp::set_upload_source(const std::string& value) {
  _internal_set_upload_source(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.upload_source)
}
inline std::string* SpObjAttrQueryRsp::mutable_upload_source() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.upload_source)
  return _internal_mutable_upload_source();
}
inline const std::string& SpObjAttrQueryRsp::_internal_upload_source() const {
  return upload_source_.Get();
}
inline void SpObjAttrQueryRsp::_internal_set_upload_source(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpObjAttrQueryRsp::set_upload_source(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SpObjAttrQueryRsp.upload_source)
}
inline void SpObjAttrQueryRsp::set_upload_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SpObjAttrQueryRsp.upload_source)
}
inline void SpObjAttrQueryRsp::set_upload_source(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  upload_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SpObjAttrQueryRsp.upload_source)
}
inline std::string* SpObjAttrQueryRsp::_internal_mutable_upload_source() {
  _has_bits_[0] |= 0x00000020u;
  return upload_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpObjAttrQueryRsp::release_upload_source() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.upload_source)
  if (!_internal_has_upload_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return upload_source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpObjAttrQueryRsp::set_allocated_upload_source(std::string* upload_source) {
  if (upload_source != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  upload_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.upload_source)
}

// optional .ClientCos.CasInfo casinfo = 19;
inline bool SpObjAttrQueryRsp::_internal_has_casinfo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || casinfo_ != nullptr);
  return value;
}
inline bool SpObjAttrQueryRsp::has_casinfo() const {
  return _internal_has_casinfo();
}
inline void SpObjAttrQueryRsp::clear_casinfo() {
  if (casinfo_ != nullptr) casinfo_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ClientCos::CasInfo& SpObjAttrQueryRsp::_internal_casinfo() const {
  const ::ClientCos::CasInfo* p = casinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CasInfo&>(
      ::ClientCos::_CasInfo_default_instance_);
}
inline const ::ClientCos::CasInfo& SpObjAttrQueryRsp::casinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.casinfo)
  return _internal_casinfo();
}
inline void SpObjAttrQueryRsp::unsafe_arena_set_allocated_casinfo(
    ::ClientCos::CasInfo* casinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casinfo_);
  }
  casinfo_ = casinfo;
  if (casinfo) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SpObjAttrQueryRsp.casinfo)
}
inline ::ClientCos::CasInfo* SpObjAttrQueryRsp::release_casinfo() {
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CasInfo* SpObjAttrQueryRsp::unsafe_arena_release_casinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.casinfo)
  _has_bits_[0] &= ~0x00000040u;
  ::ClientCos::CasInfo* temp = casinfo_;
  casinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::CasInfo* SpObjAttrQueryRsp::_internal_mutable_casinfo() {
  _has_bits_[0] |= 0x00000040u;
  if (casinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CasInfo>(GetArena());
    casinfo_ = p;
  }
  return casinfo_;
}
inline ::ClientCos::CasInfo* SpObjAttrQueryRsp::mutable_casinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.casinfo)
  return _internal_mutable_casinfo();
}
inline void SpObjAttrQueryRsp::set_allocated_casinfo(::ClientCos::CasInfo* casinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete casinfo_;
  }
  if (casinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casinfo);
    if (message_arena != submessage_arena) {
      casinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  casinfo_ = casinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.casinfo)
}

// optional .ClientCos.SseInfo sseinfo = 20;
inline bool SpObjAttrQueryRsp::_internal_has_sseinfo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || sseinfo_ != nullptr);
  return value;
}
inline bool SpObjAttrQueryRsp::has_sseinfo() const {
  return _internal_has_sseinfo();
}
inline void SpObjAttrQueryRsp::clear_sseinfo() {
  if (sseinfo_ != nullptr) sseinfo_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ClientCos::SseInfo& SpObjAttrQueryRsp::_internal_sseinfo() const {
  const ::ClientCos::SseInfo* p = sseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::SseInfo&>(
      ::ClientCos::_SseInfo_default_instance_);
}
inline const ::ClientCos::SseInfo& SpObjAttrQueryRsp::sseinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.sseinfo)
  return _internal_sseinfo();
}
inline void SpObjAttrQueryRsp::unsafe_arena_set_allocated_sseinfo(
    ::ClientCos::SseInfo* sseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sseinfo_);
  }
  sseinfo_ = sseinfo;
  if (sseinfo) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SpObjAttrQueryRsp.sseinfo)
}
inline ::ClientCos::SseInfo* SpObjAttrQueryRsp::release_sseinfo() {
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::SseInfo* SpObjAttrQueryRsp::unsafe_arena_release_sseinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.sseinfo)
  _has_bits_[0] &= ~0x00000080u;
  ::ClientCos::SseInfo* temp = sseinfo_;
  sseinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::SseInfo* SpObjAttrQueryRsp::_internal_mutable_sseinfo() {
  _has_bits_[0] |= 0x00000080u;
  if (sseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::SseInfo>(GetArena());
    sseinfo_ = p;
  }
  return sseinfo_;
}
inline ::ClientCos::SseInfo* SpObjAttrQueryRsp::mutable_sseinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.sseinfo)
  return _internal_mutable_sseinfo();
}
inline void SpObjAttrQueryRsp::set_allocated_sseinfo(::ClientCos::SseInfo* sseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sseinfo_;
  }
  if (sseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sseinfo);
    if (message_arena != submessage_arena) {
      sseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sseinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sseinfo_ = sseinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.sseinfo)
}

// optional uint32 tagnum = 21;
inline bool SpObjAttrQueryRsp::_internal_has_tagnum() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_tagnum() const {
  return _internal_has_tagnum();
}
inline void SpObjAttrQueryRsp::clear_tagnum() {
  tagnum_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::_internal_tagnum() const {
  return tagnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpObjAttrQueryRsp::tagnum() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.tagnum)
  return _internal_tagnum();
}
inline void SpObjAttrQueryRsp::_internal_set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  tagnum_ = value;
}
inline void SpObjAttrQueryRsp::set_tagnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tagnum(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.tagnum)
}

// optional .ClientCos.ObjExpireAttr objexpireattr = 22;
inline bool SpObjAttrQueryRsp::_internal_has_objexpireattr() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || objexpireattr_ != nullptr);
  return value;
}
inline bool SpObjAttrQueryRsp::has_objexpireattr() const {
  return _internal_has_objexpireattr();
}
inline void SpObjAttrQueryRsp::clear_objexpireattr() {
  if (objexpireattr_ != nullptr) objexpireattr_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ClientCos::ObjExpireAttr& SpObjAttrQueryRsp::_internal_objexpireattr() const {
  const ::ClientCos::ObjExpireAttr* p = objexpireattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::ObjExpireAttr&>(
      ::ClientCos::_ObjExpireAttr_default_instance_);
}
inline const ::ClientCos::ObjExpireAttr& SpObjAttrQueryRsp::objexpireattr() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.objexpireattr)
  return _internal_objexpireattr();
}
inline void SpObjAttrQueryRsp::unsafe_arena_set_allocated_objexpireattr(
    ::ClientCos::ObjExpireAttr* objexpireattr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objexpireattr_);
  }
  objexpireattr_ = objexpireattr;
  if (objexpireattr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SpObjAttrQueryRsp.objexpireattr)
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrQueryRsp::release_objexpireattr() {
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrQueryRsp::unsafe_arena_release_objexpireattr() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.objexpireattr)
  _has_bits_[0] &= ~0x00000100u;
  ::ClientCos::ObjExpireAttr* temp = objexpireattr_;
  objexpireattr_ = nullptr;
  return temp;
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrQueryRsp::_internal_mutable_objexpireattr() {
  _has_bits_[0] |= 0x00000100u;
  if (objexpireattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::ObjExpireAttr>(GetArena());
    objexpireattr_ = p;
  }
  return objexpireattr_;
}
inline ::ClientCos::ObjExpireAttr* SpObjAttrQueryRsp::mutable_objexpireattr() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.objexpireattr)
  return _internal_mutable_objexpireattr();
}
inline void SpObjAttrQueryRsp::set_allocated_objexpireattr(::ClientCos::ObjExpireAttr* objexpireattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objexpireattr_;
  }
  if (objexpireattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objexpireattr);
    if (message_arena != submessage_arena) {
      objexpireattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objexpireattr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  objexpireattr_ = objexpireattr;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.objexpireattr)
}

// repeated .ClientCos.ObjTag taglist = 23;
inline int SpObjAttrQueryRsp::_internal_taglist_size() const {
  return taglist_.size();
}
inline int SpObjAttrQueryRsp::taglist_size() const {
  return _internal_taglist_size();
}
inline void SpObjAttrQueryRsp::clear_taglist() {
  taglist_.Clear();
}
inline ::ClientCos::ObjTag* SpObjAttrQueryRsp::mutable_taglist(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.taglist)
  return taglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >*
SpObjAttrQueryRsp::mutable_taglist() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrQueryRsp.taglist)
  return &taglist_;
}
inline const ::ClientCos::ObjTag& SpObjAttrQueryRsp::_internal_taglist(int index) const {
  return taglist_.Get(index);
}
inline const ::ClientCos::ObjTag& SpObjAttrQueryRsp::taglist(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.taglist)
  return _internal_taglist(index);
}
inline ::ClientCos::ObjTag* SpObjAttrQueryRsp::_internal_add_taglist() {
  return taglist_.Add();
}
inline ::ClientCos::ObjTag* SpObjAttrQueryRsp::add_taglist() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrQueryRsp.taglist)
  return _internal_add_taglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ObjTag >&
SpObjAttrQueryRsp::taglist() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrQueryRsp.taglist)
  return taglist_;
}

// optional uint64 version_seed = 24;
inline bool SpObjAttrQueryRsp::_internal_has_version_seed() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_version_seed() const {
  return _internal_has_version_seed();
}
inline void SpObjAttrQueryRsp::clear_version_seed() {
  version_seed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::_internal_version_seed() const {
  return version_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::version_seed() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.version_seed)
  return _internal_version_seed();
}
inline void SpObjAttrQueryRsp::_internal_set_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00800000u;
  version_seed_ = value;
}
inline void SpObjAttrQueryRsp::set_version_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version_seed(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.version_seed)
}

// optional bool is_ugc = 25;
inline bool SpObjAttrQueryRsp::_internal_has_is_ugc() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_is_ugc() const {
  return _internal_has_is_ugc();
}
inline void SpObjAttrQueryRsp::clear_is_ugc() {
  is_ugc_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool SpObjAttrQueryRsp::_internal_is_ugc() const {
  return is_ugc_;
}
inline bool SpObjAttrQueryRsp::is_ugc() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.is_ugc)
  return _internal_is_ugc();
}
inline void SpObjAttrQueryRsp::_internal_set_is_ugc(bool value) {
  _has_bits_[0] |= 0x00200000u;
  is_ugc_ = value;
}
inline void SpObjAttrQueryRsp::set_is_ugc(bool value) {
  _internal_set_is_ugc(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.is_ugc)
}

// optional .ClientCos.OwnerInfo owner = 26;
inline bool SpObjAttrQueryRsp::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || owner_ != nullptr);
  return value;
}
inline bool SpObjAttrQueryRsp::has_owner() const {
  return _internal_has_owner();
}
inline void SpObjAttrQueryRsp::clear_owner() {
  if (owner_ != nullptr) owner_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ClientCos::OwnerInfo& SpObjAttrQueryRsp::_internal_owner() const {
  const ::ClientCos::OwnerInfo* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& SpObjAttrQueryRsp::owner() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.owner)
  return _internal_owner();
}
inline void SpObjAttrQueryRsp::unsafe_arena_set_allocated_owner(
    ::ClientCos::OwnerInfo* owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SpObjAttrQueryRsp.owner)
}
inline ::ClientCos::OwnerInfo* SpObjAttrQueryRsp::release_owner() {
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* SpObjAttrQueryRsp::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:ClientCos.SpObjAttrQueryRsp.owner)
  _has_bits_[0] &= ~0x00000200u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* SpObjAttrQueryRsp::_internal_mutable_owner() {
  _has_bits_[0] |= 0x00000200u;
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    owner_ = p;
  }
  return owner_;
}
inline ::ClientCos::OwnerInfo* SpObjAttrQueryRsp::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.owner)
  return _internal_mutable_owner();
}
inline void SpObjAttrQueryRsp::set_allocated_owner(::ClientCos::OwnerInfo* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SpObjAttrQueryRsp.owner)
}

// optional bool is_cas = 27;
inline bool SpObjAttrQueryRsp::_internal_has_is_cas() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_is_cas() const {
  return _internal_has_is_cas();
}
inline void SpObjAttrQueryRsp::clear_is_cas() {
  is_cas_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool SpObjAttrQueryRsp::_internal_is_cas() const {
  return is_cas_;
}
inline bool SpObjAttrQueryRsp::is_cas() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.is_cas)
  return _internal_is_cas();
}
inline void SpObjAttrQueryRsp::_internal_set_is_cas(bool value) {
  _has_bits_[0] |= 0x00400000u;
  is_cas_ = value;
}
inline void SpObjAttrQueryRsp::set_is_cas(bool value) {
  _internal_set_is_cas(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.is_cas)
}

// repeated .ClientCos.AclInfo acls = 28;
inline int SpObjAttrQueryRsp::_internal_acls_size() const {
  return acls_.size();
}
inline int SpObjAttrQueryRsp::acls_size() const {
  return _internal_acls_size();
}
inline void SpObjAttrQueryRsp::clear_acls() {
  acls_.Clear();
}
inline ::ClientCos::AclInfo* SpObjAttrQueryRsp::mutable_acls(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SpObjAttrQueryRsp.acls)
  return acls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
SpObjAttrQueryRsp::mutable_acls() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SpObjAttrQueryRsp.acls)
  return &acls_;
}
inline const ::ClientCos::AclInfo& SpObjAttrQueryRsp::_internal_acls(int index) const {
  return acls_.Get(index);
}
inline const ::ClientCos::AclInfo& SpObjAttrQueryRsp::acls(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.acls)
  return _internal_acls(index);
}
inline ::ClientCos::AclInfo* SpObjAttrQueryRsp::_internal_add_acls() {
  return acls_.Add();
}
inline ::ClientCos::AclInfo* SpObjAttrQueryRsp::add_acls() {
  // @@protoc_insertion_point(field_add:ClientCos.SpObjAttrQueryRsp.acls)
  return _internal_add_acls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
SpObjAttrQueryRsp::acls() const {
  // @@protoc_insertion_point(field_list:ClientCos.SpObjAttrQueryRsp.acls)
  return acls_;
}

// optional uint64 lock_expired_time = 29;
inline bool SpObjAttrQueryRsp::_internal_has_lock_expired_time() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_lock_expired_time() const {
  return _internal_has_lock_expired_time();
}
inline void SpObjAttrQueryRsp::clear_lock_expired_time() {
  lock_expired_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::_internal_lock_expired_time() const {
  return lock_expired_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SpObjAttrQueryRsp::lock_expired_time() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.lock_expired_time)
  return _internal_lock_expired_time();
}
inline void SpObjAttrQueryRsp::_internal_set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x01000000u;
  lock_expired_time_ = value;
}
inline void SpObjAttrQueryRsp::set_lock_expired_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_expired_time(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.lock_expired_time)
}

// optional bool is_v4 = 30;
inline bool SpObjAttrQueryRsp::_internal_has_is_v4() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SpObjAttrQueryRsp::has_is_v4() const {
  return _internal_has_is_v4();
}
inline void SpObjAttrQueryRsp::clear_is_v4() {
  is_v4_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool SpObjAttrQueryRsp::_internal_is_v4() const {
  return is_v4_;
}
inline bool SpObjAttrQueryRsp::is_v4() const {
  // @@protoc_insertion_point(field_get:ClientCos.SpObjAttrQueryRsp.is_v4)
  return _internal_is_v4();
}
inline void SpObjAttrQueryRsp::_internal_set_is_v4(bool value) {
  _has_bits_[0] |= 0x02000000u;
  is_v4_ = value;
}
inline void SpObjAttrQueryRsp::set_is_v4(bool value) {
  _internal_set_is_v4(value);
  // @@protoc_insertion_point(field_set:ClientCos.SpObjAttrQueryRsp.is_v4)
}

// -------------------------------------------------------------------

// ObjModStorageTypeReq

// required bytes path = 1;
inline bool ObjModStorageTypeReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjModStorageTypeReq::has_path() const {
  return _internal_has_path();
}
inline void ObjModStorageTypeReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjModStorageTypeReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModStorageTypeReq.path)
  return _internal_path();
}
inline void ObjModStorageTypeReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModStorageTypeReq.path)
}
inline std::string* ObjModStorageTypeReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjModStorageTypeReq.path)
  return _internal_mutable_path();
}
inline const std::string& ObjModStorageTypeReq::_internal_path() const {
  return path_.Get();
}
inline void ObjModStorageTypeReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjModStorageTypeReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjModStorageTypeReq.path)
}
inline void ObjModStorageTypeReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjModStorageTypeReq.path)
}
inline void ObjModStorageTypeReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjModStorageTypeReq.path)
}
inline std::string* ObjModStorageTypeReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjModStorageTypeReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjModStorageTypeReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjModStorageTypeReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjModStorageTypeReq.path)
}

// required bytes storagetype = 2;
inline bool ObjModStorageTypeReq::_internal_has_storagetype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjModStorageTypeReq::has_storagetype() const {
  return _internal_has_storagetype();
}
inline void ObjModStorageTypeReq::clear_storagetype() {
  storagetype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObjModStorageTypeReq::storagetype() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModStorageTypeReq.storagetype)
  return _internal_storagetype();
}
inline void ObjModStorageTypeReq::set_storagetype(const std::string& value) {
  _internal_set_storagetype(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModStorageTypeReq.storagetype)
}
inline std::string* ObjModStorageTypeReq::mutable_storagetype() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjModStorageTypeReq.storagetype)
  return _internal_mutable_storagetype();
}
inline const std::string& ObjModStorageTypeReq::_internal_storagetype() const {
  return storagetype_.Get();
}
inline void ObjModStorageTypeReq::_internal_set_storagetype(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjModStorageTypeReq::set_storagetype(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  storagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjModStorageTypeReq.storagetype)
}
inline void ObjModStorageTypeReq::set_storagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjModStorageTypeReq.storagetype)
}
inline void ObjModStorageTypeReq::set_storagetype(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  storagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjModStorageTypeReq.storagetype)
}
inline std::string* ObjModStorageTypeReq::_internal_mutable_storagetype() {
  _has_bits_[0] |= 0x00000002u;
  return storagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjModStorageTypeReq::release_storagetype() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjModStorageTypeReq.storagetype)
  if (!_internal_has_storagetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return storagetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjModStorageTypeReq::set_allocated_storagetype(std::string* storagetype) {
  if (storagetype != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjModStorageTypeReq.storagetype)
}

// optional bytes version = 3;
inline bool ObjModStorageTypeReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjModStorageTypeReq::has_version() const {
  return _internal_has_version();
}
inline void ObjModStorageTypeReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ObjModStorageTypeReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModStorageTypeReq.version)
  return _internal_version();
}
inline void ObjModStorageTypeReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModStorageTypeReq.version)
}
inline std::string* ObjModStorageTypeReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjModStorageTypeReq.version)
  return _internal_mutable_version();
}
inline const std::string& ObjModStorageTypeReq::_internal_version() const {
  return version_.Get();
}
inline void ObjModStorageTypeReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjModStorageTypeReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjModStorageTypeReq.version)
}
inline void ObjModStorageTypeReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjModStorageTypeReq.version)
}
inline void ObjModStorageTypeReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjModStorageTypeReq.version)
}
inline std::string* ObjModStorageTypeReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjModStorageTypeReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjModStorageTypeReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjModStorageTypeReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjModStorageTypeReq.version)
}

// optional bool switch_flag = 4;
inline bool ObjModStorageTypeReq::_internal_has_switch_flag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObjModStorageTypeReq::has_switch_flag() const {
  return _internal_has_switch_flag();
}
inline void ObjModStorageTypeReq::clear_switch_flag() {
  switch_flag_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ObjModStorageTypeReq::_internal_switch_flag() const {
  return switch_flag_;
}
inline bool ObjModStorageTypeReq::switch_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModStorageTypeReq.switch_flag)
  return _internal_switch_flag();
}
inline void ObjModStorageTypeReq::_internal_set_switch_flag(bool value) {
  _has_bits_[0] |= 0x00000010u;
  switch_flag_ = value;
}
inline void ObjModStorageTypeReq::set_switch_flag(bool value) {
  _internal_set_switch_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModStorageTypeReq.switch_flag)
}

// optional bytes sk = 5;
inline bool ObjModStorageTypeReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObjModStorageTypeReq::has_sk() const {
  return _internal_has_sk();
}
inline void ObjModStorageTypeReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ObjModStorageTypeReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModStorageTypeReq.sk)
  return _internal_sk();
}
inline void ObjModStorageTypeReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModStorageTypeReq.sk)
}
inline std::string* ObjModStorageTypeReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ObjModStorageTypeReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& ObjModStorageTypeReq::_internal_sk() const {
  return sk_.Get();
}
inline void ObjModStorageTypeReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjModStorageTypeReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ObjModStorageTypeReq.sk)
}
inline void ObjModStorageTypeReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ObjModStorageTypeReq.sk)
}
inline void ObjModStorageTypeReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ObjModStorageTypeReq.sk)
}
inline std::string* ObjModStorageTypeReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000008u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjModStorageTypeReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.ObjModStorageTypeReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjModStorageTypeReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ObjModStorageTypeReq.sk)
}

// optional uint32 check_mtime = 6;
inline bool ObjModStorageTypeReq::_internal_has_check_mtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObjModStorageTypeReq::has_check_mtime() const {
  return _internal_has_check_mtime();
}
inline void ObjModStorageTypeReq::clear_check_mtime() {
  check_mtime_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjModStorageTypeReq::_internal_check_mtime() const {
  return check_mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjModStorageTypeReq::check_mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.ObjModStorageTypeReq.check_mtime)
  return _internal_check_mtime();
}
inline void ObjModStorageTypeReq::_internal_set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  check_mtime_ = value;
}
inline void ObjModStorageTypeReq::set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_check_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.ObjModStorageTypeReq.check_mtime)
}

// -------------------------------------------------------------------

// ObjModStorageTypeRsp

// -------------------------------------------------------------------

// SseInfo

// optional .ClientCos.SseType ssetype = 1;
inline bool SseInfo::_internal_has_ssetype() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SseInfo::has_ssetype() const {
  return _internal_has_ssetype();
}
inline void SseInfo::clear_ssetype() {
  ssetype_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::ClientCos::SseType SseInfo::_internal_ssetype() const {
  return static_cast< ::ClientCos::SseType >(ssetype_);
}
inline ::ClientCos::SseType SseInfo::ssetype() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.ssetype)
  return _internal_ssetype();
}
inline void SseInfo::_internal_set_ssetype(::ClientCos::SseType value) {
  assert(::ClientCos::SseType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  ssetype_ = value;
}
inline void SseInfo::set_ssetype(::ClientCos::SseType value) {
  _internal_set_ssetype(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.ssetype)
}

// optional bytes algorithm = 2;
inline bool SseInfo::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SseInfo::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void SseInfo::clear_algorithm() {
  algorithm_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SseInfo::algorithm() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.algorithm)
  return _internal_algorithm();
}
inline void SseInfo::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.algorithm)
}
inline std::string* SseInfo::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& SseInfo::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SseInfo::_internal_set_algorithm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_algorithm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.algorithm)
}
inline void SseInfo::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.algorithm)
}
inline void SseInfo::set_algorithm(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.algorithm)
}
inline std::string* SseInfo::_internal_mutable_algorithm() {
  _has_bits_[0] |= 0x00000001u;
  return algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_algorithm() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.algorithm)
  if (!_internal_has_algorithm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return algorithm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.algorithm)
}

// optional bytes ssec_key = 3;
inline bool SseInfo::_internal_has_ssec_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SseInfo::has_ssec_key() const {
  return _internal_has_ssec_key();
}
inline void SseInfo::clear_ssec_key() {
  ssec_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SseInfo::ssec_key() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.ssec_key)
  return _internal_ssec_key();
}
inline void SseInfo::set_ssec_key(const std::string& value) {
  _internal_set_ssec_key(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.ssec_key)
}
inline std::string* SseInfo::mutable_ssec_key() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.ssec_key)
  return _internal_mutable_ssec_key();
}
inline const std::string& SseInfo::_internal_ssec_key() const {
  return ssec_key_.Get();
}
inline void SseInfo::_internal_set_ssec_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ssec_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_ssec_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ssec_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.ssec_key)
}
inline void SseInfo::set_ssec_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ssec_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.ssec_key)
}
inline void SseInfo::set_ssec_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ssec_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.ssec_key)
}
inline std::string* SseInfo::_internal_mutable_ssec_key() {
  _has_bits_[0] |= 0x00000002u;
  return ssec_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_ssec_key() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.ssec_key)
  if (!_internal_has_ssec_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ssec_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_ssec_key(std::string* ssec_key) {
  if (ssec_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ssec_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssec_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.ssec_key)
}

// optional bytes ssec_key_md5 = 4;
inline bool SseInfo::_internal_has_ssec_key_md5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SseInfo::has_ssec_key_md5() const {
  return _internal_has_ssec_key_md5();
}
inline void SseInfo::clear_ssec_key_md5() {
  ssec_key_md5_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SseInfo::ssec_key_md5() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.ssec_key_md5)
  return _internal_ssec_key_md5();
}
inline void SseInfo::set_ssec_key_md5(const std::string& value) {
  _internal_set_ssec_key_md5(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.ssec_key_md5)
}
inline std::string* SseInfo::mutable_ssec_key_md5() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.ssec_key_md5)
  return _internal_mutable_ssec_key_md5();
}
inline const std::string& SseInfo::_internal_ssec_key_md5() const {
  return ssec_key_md5_.Get();
}
inline void SseInfo::_internal_set_ssec_key_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ssec_key_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_ssec_key_md5(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ssec_key_md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.ssec_key_md5)
}
inline void SseInfo::set_ssec_key_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ssec_key_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.ssec_key_md5)
}
inline void SseInfo::set_ssec_key_md5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ssec_key_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.ssec_key_md5)
}
inline std::string* SseInfo::_internal_mutable_ssec_key_md5() {
  _has_bits_[0] |= 0x00000004u;
  return ssec_key_md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_ssec_key_md5() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.ssec_key_md5)
  if (!_internal_has_ssec_key_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ssec_key_md5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_ssec_key_md5(std::string* ssec_key_md5) {
  if (ssec_key_md5 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ssec_key_md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssec_key_md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.ssec_key_md5)
}

// optional bytes kms_id = 5;
inline bool SseInfo::_internal_has_kms_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SseInfo::has_kms_id() const {
  return _internal_has_kms_id();
}
inline void SseInfo::clear_kms_id() {
  kms_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SseInfo::kms_id() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.kms_id)
  return _internal_kms_id();
}
inline void SseInfo::set_kms_id(const std::string& value) {
  _internal_set_kms_id(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.kms_id)
}
inline std::string* SseInfo::mutable_kms_id() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.kms_id)
  return _internal_mutable_kms_id();
}
inline const std::string& SseInfo::_internal_kms_id() const {
  return kms_id_.Get();
}
inline void SseInfo::_internal_set_kms_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  kms_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_kms_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  kms_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.kms_id)
}
inline void SseInfo::set_kms_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  kms_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.kms_id)
}
inline void SseInfo::set_kms_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  kms_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.kms_id)
}
inline std::string* SseInfo::_internal_mutable_kms_id() {
  _has_bits_[0] |= 0x00000008u;
  return kms_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_kms_id() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.kms_id)
  if (!_internal_has_kms_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return kms_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_kms_id(std::string* kms_id) {
  if (kms_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  kms_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.kms_id)
}

// optional bytes kms_context = 6;
inline bool SseInfo::_internal_has_kms_context() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SseInfo::has_kms_context() const {
  return _internal_has_kms_context();
}
inline void SseInfo::clear_kms_context() {
  kms_context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SseInfo::kms_context() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.kms_context)
  return _internal_kms_context();
}
inline void SseInfo::set_kms_context(const std::string& value) {
  _internal_set_kms_context(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.kms_context)
}
inline std::string* SseInfo::mutable_kms_context() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.kms_context)
  return _internal_mutable_kms_context();
}
inline const std::string& SseInfo::_internal_kms_context() const {
  return kms_context_.Get();
}
inline void SseInfo::_internal_set_kms_context(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  kms_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_kms_context(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  kms_context_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.kms_context)
}
inline void SseInfo::set_kms_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  kms_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.kms_context)
}
inline void SseInfo::set_kms_context(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  kms_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.kms_context)
}
inline std::string* SseInfo::_internal_mutable_kms_context() {
  _has_bits_[0] |= 0x00000010u;
  return kms_context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_kms_context() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.kms_context)
  if (!_internal_has_kms_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return kms_context_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_kms_context(std::string* kms_context) {
  if (kms_context != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  kms_context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.kms_context)
}

// optional bytes kms_datakey = 7;
inline bool SseInfo::_internal_has_kms_datakey() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SseInfo::has_kms_datakey() const {
  return _internal_has_kms_datakey();
}
inline void SseInfo::clear_kms_datakey() {
  kms_datakey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SseInfo::kms_datakey() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.kms_datakey)
  return _internal_kms_datakey();
}
inline void SseInfo::set_kms_datakey(const std::string& value) {
  _internal_set_kms_datakey(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.kms_datakey)
}
inline std::string* SseInfo::mutable_kms_datakey() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.kms_datakey)
  return _internal_mutable_kms_datakey();
}
inline const std::string& SseInfo::_internal_kms_datakey() const {
  return kms_datakey_.Get();
}
inline void SseInfo::_internal_set_kms_datakey(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  kms_datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_kms_datakey(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  kms_datakey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.kms_datakey)
}
inline void SseInfo::set_kms_datakey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  kms_datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.kms_datakey)
}
inline void SseInfo::set_kms_datakey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  kms_datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.kms_datakey)
}
inline std::string* SseInfo::_internal_mutable_kms_datakey() {
  _has_bits_[0] |= 0x00000020u;
  return kms_datakey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_kms_datakey() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.kms_datakey)
  if (!_internal_has_kms_datakey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return kms_datakey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_kms_datakey(std::string* kms_datakey) {
  if (kms_datakey != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  kms_datakey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_datakey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.kms_datakey)
}

// optional bytes kms_datakey_encryp = 8;
inline bool SseInfo::_internal_has_kms_datakey_encryp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SseInfo::has_kms_datakey_encryp() const {
  return _internal_has_kms_datakey_encryp();
}
inline void SseInfo::clear_kms_datakey_encryp() {
  kms_datakey_encryp_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SseInfo::kms_datakey_encryp() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.kms_datakey_encryp)
  return _internal_kms_datakey_encryp();
}
inline void SseInfo::set_kms_datakey_encryp(const std::string& value) {
  _internal_set_kms_datakey_encryp(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.kms_datakey_encryp)
}
inline std::string* SseInfo::mutable_kms_datakey_encryp() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.kms_datakey_encryp)
  return _internal_mutable_kms_datakey_encryp();
}
inline const std::string& SseInfo::_internal_kms_datakey_encryp() const {
  return kms_datakey_encryp_.Get();
}
inline void SseInfo::_internal_set_kms_datakey_encryp(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  kms_datakey_encryp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_kms_datakey_encryp(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  kms_datakey_encryp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.kms_datakey_encryp)
}
inline void SseInfo::set_kms_datakey_encryp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  kms_datakey_encryp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.kms_datakey_encryp)
}
inline void SseInfo::set_kms_datakey_encryp(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  kms_datakey_encryp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.kms_datakey_encryp)
}
inline std::string* SseInfo::_internal_mutable_kms_datakey_encryp() {
  _has_bits_[0] |= 0x00000040u;
  return kms_datakey_encryp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_kms_datakey_encryp() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.kms_datakey_encryp)
  if (!_internal_has_kms_datakey_encryp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return kms_datakey_encryp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_kms_datakey_encryp(std::string* kms_datakey_encryp) {
  if (kms_datakey_encryp != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  kms_datakey_encryp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_datakey_encryp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.kms_datakey_encryp)
}

// optional bytes sse_etag = 9;
inline bool SseInfo::_internal_has_sse_etag() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SseInfo::has_sse_etag() const {
  return _internal_has_sse_etag();
}
inline void SseInfo::clear_sse_etag() {
  sse_etag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SseInfo::sse_etag() const {
  // @@protoc_insertion_point(field_get:ClientCos.SseInfo.sse_etag)
  return _internal_sse_etag();
}
inline void SseInfo::set_sse_etag(const std::string& value) {
  _internal_set_sse_etag(value);
  // @@protoc_insertion_point(field_set:ClientCos.SseInfo.sse_etag)
}
inline std::string* SseInfo::mutable_sse_etag() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SseInfo.sse_etag)
  return _internal_mutable_sse_etag();
}
inline const std::string& SseInfo::_internal_sse_etag() const {
  return sse_etag_.Get();
}
inline void SseInfo::_internal_set_sse_etag(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  sse_etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SseInfo::set_sse_etag(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  sse_etag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SseInfo.sse_etag)
}
inline void SseInfo::set_sse_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  sse_etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SseInfo.sse_etag)
}
inline void SseInfo::set_sse_etag(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  sse_etag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SseInfo.sse_etag)
}
inline std::string* SseInfo::_internal_mutable_sse_etag() {
  _has_bits_[0] |= 0x00000080u;
  return sse_etag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SseInfo::release_sse_etag() {
  // @@protoc_insertion_point(field_release:ClientCos.SseInfo.sse_etag)
  if (!_internal_has_sse_etag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return sse_etag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SseInfo::set_allocated_sse_etag(std::string* sse_etag) {
  if (sse_etag != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sse_etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sse_etag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SseInfo.sse_etag)
}

// -------------------------------------------------------------------

// ErrorCodeReturned

// required uint32 errorcode = 1;
inline bool ErrorCodeReturned::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ErrorCodeReturned::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void ErrorCodeReturned::clear_errorcode() {
  errorcode_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorCodeReturned::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorCodeReturned::errorcode() const {
  // @@protoc_insertion_point(field_get:ClientCos.ErrorCodeReturned.errorcode)
  return _internal_errorcode();
}
inline void ErrorCodeReturned::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  errorcode_ = value;
}
inline void ErrorCodeReturned::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ClientCos.ErrorCodeReturned.errorcode)
}

// optional bytes protocol = 2;
inline bool ErrorCodeReturned::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorCodeReturned::has_protocol() const {
  return _internal_has_protocol();
}
inline void ErrorCodeReturned::clear_protocol() {
  protocol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorCodeReturned::protocol() const {
  // @@protoc_insertion_point(field_get:ClientCos.ErrorCodeReturned.protocol)
  return _internal_protocol();
}
inline void ErrorCodeReturned::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:ClientCos.ErrorCodeReturned.protocol)
}
inline std::string* ErrorCodeReturned::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ErrorCodeReturned.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& ErrorCodeReturned::_internal_protocol() const {
  return protocol_.Get();
}
inline void ErrorCodeReturned::_internal_set_protocol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorCodeReturned::set_protocol(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ErrorCodeReturned.protocol)
}
inline void ErrorCodeReturned::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ErrorCodeReturned.protocol)
}
inline void ErrorCodeReturned::set_protocol(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ErrorCodeReturned.protocol)
}
inline std::string* ErrorCodeReturned::_internal_mutable_protocol() {
  _has_bits_[0] |= 0x00000001u;
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorCodeReturned::release_protocol() {
  // @@protoc_insertion_point(field_release:ClientCos.ErrorCodeReturned.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return protocol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCodeReturned::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ErrorCodeReturned.protocol)
}

// optional bytes replacekeywith = 3;
inline bool ErrorCodeReturned::_internal_has_replacekeywith() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorCodeReturned::has_replacekeywith() const {
  return _internal_has_replacekeywith();
}
inline void ErrorCodeReturned::clear_replacekeywith() {
  replacekeywith_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ErrorCodeReturned::replacekeywith() const {
  // @@protoc_insertion_point(field_get:ClientCos.ErrorCodeReturned.replacekeywith)
  return _internal_replacekeywith();
}
inline void ErrorCodeReturned::set_replacekeywith(const std::string& value) {
  _internal_set_replacekeywith(value);
  // @@protoc_insertion_point(field_set:ClientCos.ErrorCodeReturned.replacekeywith)
}
inline std::string* ErrorCodeReturned::mutable_replacekeywith() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ErrorCodeReturned.replacekeywith)
  return _internal_mutable_replacekeywith();
}
inline const std::string& ErrorCodeReturned::_internal_replacekeywith() const {
  return replacekeywith_.Get();
}
inline void ErrorCodeReturned::_internal_set_replacekeywith(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorCodeReturned::set_replacekeywith(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  replacekeywith_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ErrorCodeReturned.replacekeywith)
}
inline void ErrorCodeReturned::set_replacekeywith(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ErrorCodeReturned.replacekeywith)
}
inline void ErrorCodeReturned::set_replacekeywith(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ErrorCodeReturned.replacekeywith)
}
inline std::string* ErrorCodeReturned::_internal_mutable_replacekeywith() {
  _has_bits_[0] |= 0x00000002u;
  return replacekeywith_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorCodeReturned::release_replacekeywith() {
  // @@protoc_insertion_point(field_release:ClientCos.ErrorCodeReturned.replacekeywith)
  if (!_internal_has_replacekeywith()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return replacekeywith_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCodeReturned::set_allocated_replacekeywith(std::string* replacekeywith) {
  if (replacekeywith != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  replacekeywith_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replacekeywith,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ErrorCodeReturned.replacekeywith)
}

// optional bytes hostname = 4;
inline bool ErrorCodeReturned::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ErrorCodeReturned::has_hostname() const {
  return _internal_has_hostname();
}
inline void ErrorCodeReturned::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ErrorCodeReturned::hostname() const {
  // @@protoc_insertion_point(field_get:ClientCos.ErrorCodeReturned.hostname)
  return _internal_hostname();
}
inline void ErrorCodeReturned::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:ClientCos.ErrorCodeReturned.hostname)
}
inline std::string* ErrorCodeReturned::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ErrorCodeReturned.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ErrorCodeReturned::_internal_hostname() const {
  return hostname_.Get();
}
inline void ErrorCodeReturned::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorCodeReturned::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ErrorCodeReturned.hostname)
}
inline void ErrorCodeReturned::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ErrorCodeReturned.hostname)
}
inline void ErrorCodeReturned::set_hostname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ErrorCodeReturned.hostname)
}
inline std::string* ErrorCodeReturned::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000004u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorCodeReturned::release_hostname() {
  // @@protoc_insertion_point(field_release:ClientCos.ErrorCodeReturned.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCodeReturned::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ErrorCodeReturned.hostname)
}

// -------------------------------------------------------------------

// PrefixReturned

// required bytes keyprefix = 1;
inline bool PrefixReturned::_internal_has_keyprefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrefixReturned::has_keyprefix() const {
  return _internal_has_keyprefix();
}
inline void PrefixReturned::clear_keyprefix() {
  keyprefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrefixReturned::keyprefix() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixReturned.keyprefix)
  return _internal_keyprefix();
}
inline void PrefixReturned::set_keyprefix(const std::string& value) {
  _internal_set_keyprefix(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixReturned.keyprefix)
}
inline std::string* PrefixReturned::mutable_keyprefix() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixReturned.keyprefix)
  return _internal_mutable_keyprefix();
}
inline const std::string& PrefixReturned::_internal_keyprefix() const {
  return keyprefix_.Get();
}
inline void PrefixReturned::_internal_set_keyprefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixReturned::set_keyprefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixReturned.keyprefix)
}
inline void PrefixReturned::set_keyprefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixReturned.keyprefix)
}
inline void PrefixReturned::set_keyprefix(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixReturned.keyprefix)
}
inline std::string* PrefixReturned::_internal_mutable_keyprefix() {
  _has_bits_[0] |= 0x00000001u;
  return keyprefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixReturned::release_keyprefix() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixReturned.keyprefix)
  if (!_internal_has_keyprefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return keyprefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixReturned::set_allocated_keyprefix(std::string* keyprefix) {
  if (keyprefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keyprefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyprefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixReturned.keyprefix)
}

// optional bytes protocol = 2;
inline bool PrefixReturned::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrefixReturned::has_protocol() const {
  return _internal_has_protocol();
}
inline void PrefixReturned::clear_protocol() {
  protocol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrefixReturned::protocol() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixReturned.protocol)
  return _internal_protocol();
}
inline void PrefixReturned::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixReturned.protocol)
}
inline std::string* PrefixReturned::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixReturned.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& PrefixReturned::_internal_protocol() const {
  return protocol_.Get();
}
inline void PrefixReturned::_internal_set_protocol(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixReturned::set_protocol(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixReturned.protocol)
}
inline void PrefixReturned::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixReturned.protocol)
}
inline void PrefixReturned::set_protocol(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixReturned.protocol)
}
inline std::string* PrefixReturned::_internal_mutable_protocol() {
  _has_bits_[0] |= 0x00000002u;
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixReturned::release_protocol() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixReturned.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return protocol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixReturned::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixReturned.protocol)
}

// optional bytes replacekeyprefixwith = 3;
inline bool PrefixReturned::_internal_has_replacekeyprefixwith() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrefixReturned::has_replacekeyprefixwith() const {
  return _internal_has_replacekeyprefixwith();
}
inline void PrefixReturned::clear_replacekeyprefixwith() {
  replacekeyprefixwith_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrefixReturned::replacekeyprefixwith() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixReturned.replacekeyprefixwith)
  return _internal_replacekeyprefixwith();
}
inline void PrefixReturned::set_replacekeyprefixwith(const std::string& value) {
  _internal_set_replacekeyprefixwith(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixReturned.replacekeyprefixwith)
}
inline std::string* PrefixReturned::mutable_replacekeyprefixwith() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixReturned.replacekeyprefixwith)
  return _internal_mutable_replacekeyprefixwith();
}
inline const std::string& PrefixReturned::_internal_replacekeyprefixwith() const {
  return replacekeyprefixwith_.Get();
}
inline void PrefixReturned::_internal_set_replacekeyprefixwith(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  replacekeyprefixwith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixReturned::set_replacekeyprefixwith(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  replacekeyprefixwith_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixReturned.replacekeyprefixwith)
}
inline void PrefixReturned::set_replacekeyprefixwith(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  replacekeyprefixwith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixReturned.replacekeyprefixwith)
}
inline void PrefixReturned::set_replacekeyprefixwith(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  replacekeyprefixwith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixReturned.replacekeyprefixwith)
}
inline std::string* PrefixReturned::_internal_mutable_replacekeyprefixwith() {
  _has_bits_[0] |= 0x00000004u;
  return replacekeyprefixwith_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixReturned::release_replacekeyprefixwith() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixReturned.replacekeyprefixwith)
  if (!_internal_has_replacekeyprefixwith()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return replacekeyprefixwith_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixReturned::set_allocated_replacekeyprefixwith(std::string* replacekeyprefixwith) {
  if (replacekeyprefixwith != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  replacekeyprefixwith_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replacekeyprefixwith,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixReturned.replacekeyprefixwith)
}

// optional bytes replacekeywith = 4;
inline bool PrefixReturned::_internal_has_replacekeywith() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrefixReturned::has_replacekeywith() const {
  return _internal_has_replacekeywith();
}
inline void PrefixReturned::clear_replacekeywith() {
  replacekeywith_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrefixReturned::replacekeywith() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixReturned.replacekeywith)
  return _internal_replacekeywith();
}
inline void PrefixReturned::set_replacekeywith(const std::string& value) {
  _internal_set_replacekeywith(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixReturned.replacekeywith)
}
inline std::string* PrefixReturned::mutable_replacekeywith() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixReturned.replacekeywith)
  return _internal_mutable_replacekeywith();
}
inline const std::string& PrefixReturned::_internal_replacekeywith() const {
  return replacekeywith_.Get();
}
inline void PrefixReturned::_internal_set_replacekeywith(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixReturned::set_replacekeywith(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  replacekeywith_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixReturned.replacekeywith)
}
inline void PrefixReturned::set_replacekeywith(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixReturned.replacekeywith)
}
inline void PrefixReturned::set_replacekeywith(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixReturned.replacekeywith)
}
inline std::string* PrefixReturned::_internal_mutable_replacekeywith() {
  _has_bits_[0] |= 0x00000008u;
  return replacekeywith_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixReturned::release_replacekeywith() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixReturned.replacekeywith)
  if (!_internal_has_replacekeywith()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return replacekeywith_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixReturned::set_allocated_replacekeywith(std::string* replacekeywith) {
  if (replacekeywith != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  replacekeywith_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replacekeywith,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixReturned.replacekeywith)
}

// optional bytes hostname = 5;
inline bool PrefixReturned::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrefixReturned::has_hostname() const {
  return _internal_has_hostname();
}
inline void PrefixReturned::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PrefixReturned::hostname() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixReturned.hostname)
  return _internal_hostname();
}
inline void PrefixReturned::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixReturned.hostname)
}
inline std::string* PrefixReturned::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixReturned.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& PrefixReturned::_internal_hostname() const {
  return hostname_.Get();
}
inline void PrefixReturned::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixReturned::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixReturned.hostname)
}
inline void PrefixReturned::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixReturned.hostname)
}
inline void PrefixReturned::set_hostname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixReturned.hostname)
}
inline std::string* PrefixReturned::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000010u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixReturned::release_hostname() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixReturned.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixReturned::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixReturned.hostname)
}

// optional bytes httpredirectcode = 6;
inline bool PrefixReturned::_internal_has_httpredirectcode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PrefixReturned::has_httpredirectcode() const {
  return _internal_has_httpredirectcode();
}
inline void PrefixReturned::clear_httpredirectcode() {
  httpredirectcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PrefixReturned::httpredirectcode() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixReturned.httpredirectcode)
  return _internal_httpredirectcode();
}
inline void PrefixReturned::set_httpredirectcode(const std::string& value) {
  _internal_set_httpredirectcode(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixReturned.httpredirectcode)
}
inline std::string* PrefixReturned::mutable_httpredirectcode() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixReturned.httpredirectcode)
  return _internal_mutable_httpredirectcode();
}
inline const std::string& PrefixReturned::_internal_httpredirectcode() const {
  return httpredirectcode_.Get();
}
inline void PrefixReturned::_internal_set_httpredirectcode(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixReturned::set_httpredirectcode(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixReturned.httpredirectcode)
}
inline void PrefixReturned::set_httpredirectcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixReturned.httpredirectcode)
}
inline void PrefixReturned::set_httpredirectcode(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixReturned.httpredirectcode)
}
inline std::string* PrefixReturned::_internal_mutable_httpredirectcode() {
  _has_bits_[0] |= 0x00000020u;
  return httpredirectcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixReturned::release_httpredirectcode() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixReturned.httpredirectcode)
  if (!_internal_has_httpredirectcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return httpredirectcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixReturned::set_allocated_httpredirectcode(std::string* httpredirectcode) {
  if (httpredirectcode != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  httpredirectcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), httpredirectcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixReturned.httpredirectcode)
}

// -------------------------------------------------------------------

// PrefixAndErrcodeReturned

// optional uint32 errorcode = 1;
inline bool PrefixAndErrcodeReturned::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PrefixAndErrcodeReturned::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void PrefixAndErrcodeReturned::clear_errorcode() {
  errorcode_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrefixAndErrcodeReturned::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrefixAndErrcodeReturned::errorcode() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixAndErrcodeReturned.errorcode)
  return _internal_errorcode();
}
inline void PrefixAndErrcodeReturned::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  errorcode_ = value;
}
inline void PrefixAndErrcodeReturned::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixAndErrcodeReturned.errorcode)
}

// optional bytes keyprefix = 2;
inline bool PrefixAndErrcodeReturned::_internal_has_keyprefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrefixAndErrcodeReturned::has_keyprefix() const {
  return _internal_has_keyprefix();
}
inline void PrefixAndErrcodeReturned::clear_keyprefix() {
  keyprefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrefixAndErrcodeReturned::keyprefix() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixAndErrcodeReturned.keyprefix)
  return _internal_keyprefix();
}
inline void PrefixAndErrcodeReturned::set_keyprefix(const std::string& value) {
  _internal_set_keyprefix(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixAndErrcodeReturned.keyprefix)
}
inline std::string* PrefixAndErrcodeReturned::mutable_keyprefix() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixAndErrcodeReturned.keyprefix)
  return _internal_mutable_keyprefix();
}
inline const std::string& PrefixAndErrcodeReturned::_internal_keyprefix() const {
  return keyprefix_.Get();
}
inline void PrefixAndErrcodeReturned::_internal_set_keyprefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixAndErrcodeReturned::set_keyprefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixAndErrcodeReturned.keyprefix)
}
inline void PrefixAndErrcodeReturned::set_keyprefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixAndErrcodeReturned.keyprefix)
}
inline void PrefixAndErrcodeReturned::set_keyprefix(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  keyprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixAndErrcodeReturned.keyprefix)
}
inline std::string* PrefixAndErrcodeReturned::_internal_mutable_keyprefix() {
  _has_bits_[0] |= 0x00000001u;
  return keyprefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixAndErrcodeReturned::release_keyprefix() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixAndErrcodeReturned.keyprefix)
  if (!_internal_has_keyprefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return keyprefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixAndErrcodeReturned::set_allocated_keyprefix(std::string* keyprefix) {
  if (keyprefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keyprefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyprefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixAndErrcodeReturned.keyprefix)
}

// optional bytes protocol = 3;
inline bool PrefixAndErrcodeReturned::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrefixAndErrcodeReturned::has_protocol() const {
  return _internal_has_protocol();
}
inline void PrefixAndErrcodeReturned::clear_protocol() {
  protocol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrefixAndErrcodeReturned::protocol() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixAndErrcodeReturned.protocol)
  return _internal_protocol();
}
inline void PrefixAndErrcodeReturned::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixAndErrcodeReturned.protocol)
}
inline std::string* PrefixAndErrcodeReturned::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixAndErrcodeReturned.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& PrefixAndErrcodeReturned::_internal_protocol() const {
  return protocol_.Get();
}
inline void PrefixAndErrcodeReturned::_internal_set_protocol(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixAndErrcodeReturned::set_protocol(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixAndErrcodeReturned.protocol)
}
inline void PrefixAndErrcodeReturned::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixAndErrcodeReturned.protocol)
}
inline void PrefixAndErrcodeReturned::set_protocol(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixAndErrcodeReturned.protocol)
}
inline std::string* PrefixAndErrcodeReturned::_internal_mutable_protocol() {
  _has_bits_[0] |= 0x00000002u;
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixAndErrcodeReturned::release_protocol() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixAndErrcodeReturned.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return protocol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixAndErrcodeReturned::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixAndErrcodeReturned.protocol)
}

// optional bytes hostname = 4;
inline bool PrefixAndErrcodeReturned::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrefixAndErrcodeReturned::has_hostname() const {
  return _internal_has_hostname();
}
inline void PrefixAndErrcodeReturned::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrefixAndErrcodeReturned::hostname() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixAndErrcodeReturned.hostname)
  return _internal_hostname();
}
inline void PrefixAndErrcodeReturned::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixAndErrcodeReturned.hostname)
}
inline std::string* PrefixAndErrcodeReturned::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixAndErrcodeReturned.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& PrefixAndErrcodeReturned::_internal_hostname() const {
  return hostname_.Get();
}
inline void PrefixAndErrcodeReturned::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixAndErrcodeReturned::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixAndErrcodeReturned.hostname)
}
inline void PrefixAndErrcodeReturned::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixAndErrcodeReturned.hostname)
}
inline void PrefixAndErrcodeReturned::set_hostname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixAndErrcodeReturned.hostname)
}
inline std::string* PrefixAndErrcodeReturned::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000004u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixAndErrcodeReturned::release_hostname() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixAndErrcodeReturned.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixAndErrcodeReturned::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixAndErrcodeReturned.hostname)
}

// optional bytes replacekeyprefixwith = 5;
inline bool PrefixAndErrcodeReturned::_internal_has_replacekeyprefixwith() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrefixAndErrcodeReturned::has_replacekeyprefixwith() const {
  return _internal_has_replacekeyprefixwith();
}
inline void PrefixAndErrcodeReturned::clear_replacekeyprefixwith() {
  replacekeyprefixwith_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrefixAndErrcodeReturned::replacekeyprefixwith() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
  return _internal_replacekeyprefixwith();
}
inline void PrefixAndErrcodeReturned::set_replacekeyprefixwith(const std::string& value) {
  _internal_set_replacekeyprefixwith(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
}
inline std::string* PrefixAndErrcodeReturned::mutable_replacekeyprefixwith() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
  return _internal_mutable_replacekeyprefixwith();
}
inline const std::string& PrefixAndErrcodeReturned::_internal_replacekeyprefixwith() const {
  return replacekeyprefixwith_.Get();
}
inline void PrefixAndErrcodeReturned::_internal_set_replacekeyprefixwith(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  replacekeyprefixwith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixAndErrcodeReturned::set_replacekeyprefixwith(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  replacekeyprefixwith_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
}
inline void PrefixAndErrcodeReturned::set_replacekeyprefixwith(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  replacekeyprefixwith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
}
inline void PrefixAndErrcodeReturned::set_replacekeyprefixwith(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  replacekeyprefixwith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
}
inline std::string* PrefixAndErrcodeReturned::_internal_mutable_replacekeyprefixwith() {
  _has_bits_[0] |= 0x00000008u;
  return replacekeyprefixwith_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixAndErrcodeReturned::release_replacekeyprefixwith() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
  if (!_internal_has_replacekeyprefixwith()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return replacekeyprefixwith_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixAndErrcodeReturned::set_allocated_replacekeyprefixwith(std::string* replacekeyprefixwith) {
  if (replacekeyprefixwith != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  replacekeyprefixwith_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replacekeyprefixwith,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixAndErrcodeReturned.replacekeyprefixwith)
}

// optional bytes replacekeywith = 6;
inline bool PrefixAndErrcodeReturned::_internal_has_replacekeywith() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrefixAndErrcodeReturned::has_replacekeywith() const {
  return _internal_has_replacekeywith();
}
inline void PrefixAndErrcodeReturned::clear_replacekeywith() {
  replacekeywith_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PrefixAndErrcodeReturned::replacekeywith() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
  return _internal_replacekeywith();
}
inline void PrefixAndErrcodeReturned::set_replacekeywith(const std::string& value) {
  _internal_set_replacekeywith(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
}
inline std::string* PrefixAndErrcodeReturned::mutable_replacekeywith() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
  return _internal_mutable_replacekeywith();
}
inline const std::string& PrefixAndErrcodeReturned::_internal_replacekeywith() const {
  return replacekeywith_.Get();
}
inline void PrefixAndErrcodeReturned::_internal_set_replacekeywith(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixAndErrcodeReturned::set_replacekeywith(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  replacekeywith_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
}
inline void PrefixAndErrcodeReturned::set_replacekeywith(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
}
inline void PrefixAndErrcodeReturned::set_replacekeywith(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  replacekeywith_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
}
inline std::string* PrefixAndErrcodeReturned::_internal_mutable_replacekeywith() {
  _has_bits_[0] |= 0x00000010u;
  return replacekeywith_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixAndErrcodeReturned::release_replacekeywith() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
  if (!_internal_has_replacekeywith()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return replacekeywith_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixAndErrcodeReturned::set_allocated_replacekeywith(std::string* replacekeywith) {
  if (replacekeywith != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  replacekeywith_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replacekeywith,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixAndErrcodeReturned.replacekeywith)
}

// optional bytes httpredirectcode = 7;
inline bool PrefixAndErrcodeReturned::_internal_has_httpredirectcode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PrefixAndErrcodeReturned::has_httpredirectcode() const {
  return _internal_has_httpredirectcode();
}
inline void PrefixAndErrcodeReturned::clear_httpredirectcode() {
  httpredirectcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PrefixAndErrcodeReturned::httpredirectcode() const {
  // @@protoc_insertion_point(field_get:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
  return _internal_httpredirectcode();
}
inline void PrefixAndErrcodeReturned::set_httpredirectcode(const std::string& value) {
  _internal_set_httpredirectcode(value);
  // @@protoc_insertion_point(field_set:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
}
inline std::string* PrefixAndErrcodeReturned::mutable_httpredirectcode() {
  // @@protoc_insertion_point(field_mutable:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
  return _internal_mutable_httpredirectcode();
}
inline const std::string& PrefixAndErrcodeReturned::_internal_httpredirectcode() const {
  return httpredirectcode_.Get();
}
inline void PrefixAndErrcodeReturned::_internal_set_httpredirectcode(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrefixAndErrcodeReturned::set_httpredirectcode(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
}
inline void PrefixAndErrcodeReturned::set_httpredirectcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
}
inline void PrefixAndErrcodeReturned::set_httpredirectcode(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  httpredirectcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
}
inline std::string* PrefixAndErrcodeReturned::_internal_mutable_httpredirectcode() {
  _has_bits_[0] |= 0x00000020u;
  return httpredirectcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrefixAndErrcodeReturned::release_httpredirectcode() {
  // @@protoc_insertion_point(field_release:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
  if (!_internal_has_httpredirectcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return httpredirectcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrefixAndErrcodeReturned::set_allocated_httpredirectcode(std::string* httpredirectcode) {
  if (httpredirectcode != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  httpredirectcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), httpredirectcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.PrefixAndErrcodeReturned.httpredirectcode)
}

// -------------------------------------------------------------------

// RoutingRule

// repeated .ClientCos.ErrorCodeReturned errorcodereturned = 1;
inline int RoutingRule::_internal_errorcodereturned_size() const {
  return errorcodereturned_.size();
}
inline int RoutingRule::errorcodereturned_size() const {
  return _internal_errorcodereturned_size();
}
inline void RoutingRule::clear_errorcodereturned() {
  errorcodereturned_.Clear();
}
inline ::ClientCos::ErrorCodeReturned* RoutingRule::mutable_errorcodereturned(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.RoutingRule.errorcodereturned)
  return errorcodereturned_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ErrorCodeReturned >*
RoutingRule::mutable_errorcodereturned() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.RoutingRule.errorcodereturned)
  return &errorcodereturned_;
}
inline const ::ClientCos::ErrorCodeReturned& RoutingRule::_internal_errorcodereturned(int index) const {
  return errorcodereturned_.Get(index);
}
inline const ::ClientCos::ErrorCodeReturned& RoutingRule::errorcodereturned(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.RoutingRule.errorcodereturned)
  return _internal_errorcodereturned(index);
}
inline ::ClientCos::ErrorCodeReturned* RoutingRule::_internal_add_errorcodereturned() {
  return errorcodereturned_.Add();
}
inline ::ClientCos::ErrorCodeReturned* RoutingRule::add_errorcodereturned() {
  // @@protoc_insertion_point(field_add:ClientCos.RoutingRule.errorcodereturned)
  return _internal_add_errorcodereturned();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ErrorCodeReturned >&
RoutingRule::errorcodereturned() const {
  // @@protoc_insertion_point(field_list:ClientCos.RoutingRule.errorcodereturned)
  return errorcodereturned_;
}

// repeated .ClientCos.PrefixReturned prefixreturned = 2;
inline int RoutingRule::_internal_prefixreturned_size() const {
  return prefixreturned_.size();
}
inline int RoutingRule::prefixreturned_size() const {
  return _internal_prefixreturned_size();
}
inline void RoutingRule::clear_prefixreturned() {
  prefixreturned_.Clear();
}
inline ::ClientCos::PrefixReturned* RoutingRule::mutable_prefixreturned(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.RoutingRule.prefixreturned)
  return prefixreturned_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixReturned >*
RoutingRule::mutable_prefixreturned() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.RoutingRule.prefixreturned)
  return &prefixreturned_;
}
inline const ::ClientCos::PrefixReturned& RoutingRule::_internal_prefixreturned(int index) const {
  return prefixreturned_.Get(index);
}
inline const ::ClientCos::PrefixReturned& RoutingRule::prefixreturned(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.RoutingRule.prefixreturned)
  return _internal_prefixreturned(index);
}
inline ::ClientCos::PrefixReturned* RoutingRule::_internal_add_prefixreturned() {
  return prefixreturned_.Add();
}
inline ::ClientCos::PrefixReturned* RoutingRule::add_prefixreturned() {
  // @@protoc_insertion_point(field_add:ClientCos.RoutingRule.prefixreturned)
  return _internal_add_prefixreturned();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixReturned >&
RoutingRule::prefixreturned() const {
  // @@protoc_insertion_point(field_list:ClientCos.RoutingRule.prefixreturned)
  return prefixreturned_;
}

// repeated .ClientCos.PrefixAndErrcodeReturned prefixanderrcodereturned = 3;
inline int RoutingRule::_internal_prefixanderrcodereturned_size() const {
  return prefixanderrcodereturned_.size();
}
inline int RoutingRule::prefixanderrcodereturned_size() const {
  return _internal_prefixanderrcodereturned_size();
}
inline void RoutingRule::clear_prefixanderrcodereturned() {
  prefixanderrcodereturned_.Clear();
}
inline ::ClientCos::PrefixAndErrcodeReturned* RoutingRule::mutable_prefixanderrcodereturned(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.RoutingRule.prefixanderrcodereturned)
  return prefixanderrcodereturned_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixAndErrcodeReturned >*
RoutingRule::mutable_prefixanderrcodereturned() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.RoutingRule.prefixanderrcodereturned)
  return &prefixanderrcodereturned_;
}
inline const ::ClientCos::PrefixAndErrcodeReturned& RoutingRule::_internal_prefixanderrcodereturned(int index) const {
  return prefixanderrcodereturned_.Get(index);
}
inline const ::ClientCos::PrefixAndErrcodeReturned& RoutingRule::prefixanderrcodereturned(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.RoutingRule.prefixanderrcodereturned)
  return _internal_prefixanderrcodereturned(index);
}
inline ::ClientCos::PrefixAndErrcodeReturned* RoutingRule::_internal_add_prefixanderrcodereturned() {
  return prefixanderrcodereturned_.Add();
}
inline ::ClientCos::PrefixAndErrcodeReturned* RoutingRule::add_prefixanderrcodereturned() {
  // @@protoc_insertion_point(field_add:ClientCos.RoutingRule.prefixanderrcodereturned)
  return _internal_add_prefixanderrcodereturned();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::PrefixAndErrcodeReturned >&
RoutingRule::prefixanderrcodereturned() const {
  // @@protoc_insertion_point(field_list:ClientCos.RoutingRule.prefixanderrcodereturned)
  return prefixanderrcodereturned_;
}

// -------------------------------------------------------------------

// WebsiteInfo

// required bytes indexdocument = 1;
inline bool WebsiteInfo::_internal_has_indexdocument() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebsiteInfo::has_indexdocument() const {
  return _internal_has_indexdocument();
}
inline void WebsiteInfo::clear_indexdocument() {
  indexdocument_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebsiteInfo::indexdocument() const {
  // @@protoc_insertion_point(field_get:ClientCos.WebsiteInfo.indexdocument)
  return _internal_indexdocument();
}
inline void WebsiteInfo::set_indexdocument(const std::string& value) {
  _internal_set_indexdocument(value);
  // @@protoc_insertion_point(field_set:ClientCos.WebsiteInfo.indexdocument)
}
inline std::string* WebsiteInfo::mutable_indexdocument() {
  // @@protoc_insertion_point(field_mutable:ClientCos.WebsiteInfo.indexdocument)
  return _internal_mutable_indexdocument();
}
inline const std::string& WebsiteInfo::_internal_indexdocument() const {
  return indexdocument_.Get();
}
inline void WebsiteInfo::_internal_set_indexdocument(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  indexdocument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebsiteInfo::set_indexdocument(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  indexdocument_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.WebsiteInfo.indexdocument)
}
inline void WebsiteInfo::set_indexdocument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  indexdocument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.WebsiteInfo.indexdocument)
}
inline void WebsiteInfo::set_indexdocument(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  indexdocument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.WebsiteInfo.indexdocument)
}
inline std::string* WebsiteInfo::_internal_mutable_indexdocument() {
  _has_bits_[0] |= 0x00000001u;
  return indexdocument_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebsiteInfo::release_indexdocument() {
  // @@protoc_insertion_point(field_release:ClientCos.WebsiteInfo.indexdocument)
  if (!_internal_has_indexdocument()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return indexdocument_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebsiteInfo::set_allocated_indexdocument(std::string* indexdocument) {
  if (indexdocument != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  indexdocument_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indexdocument,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.WebsiteInfo.indexdocument)
}

// optional bytes protocol = 2;
inline bool WebsiteInfo::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebsiteInfo::has_protocol() const {
  return _internal_has_protocol();
}
inline void WebsiteInfo::clear_protocol() {
  protocol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebsiteInfo::protocol() const {
  // @@protoc_insertion_point(field_get:ClientCos.WebsiteInfo.protocol)
  return _internal_protocol();
}
inline void WebsiteInfo::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:ClientCos.WebsiteInfo.protocol)
}
inline std::string* WebsiteInfo::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:ClientCos.WebsiteInfo.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& WebsiteInfo::_internal_protocol() const {
  return protocol_.Get();
}
inline void WebsiteInfo::_internal_set_protocol(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebsiteInfo::set_protocol(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.WebsiteInfo.protocol)
}
inline void WebsiteInfo::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.WebsiteInfo.protocol)
}
inline void WebsiteInfo::set_protocol(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.WebsiteInfo.protocol)
}
inline std::string* WebsiteInfo::_internal_mutable_protocol() {
  _has_bits_[0] |= 0x00000002u;
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebsiteInfo::release_protocol() {
  // @@protoc_insertion_point(field_release:ClientCos.WebsiteInfo.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return protocol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebsiteInfo::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.WebsiteInfo.protocol)
}

// optional bytes errordocument = 3;
inline bool WebsiteInfo::_internal_has_errordocument() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebsiteInfo::has_errordocument() const {
  return _internal_has_errordocument();
}
inline void WebsiteInfo::clear_errordocument() {
  errordocument_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WebsiteInfo::errordocument() const {
  // @@protoc_insertion_point(field_get:ClientCos.WebsiteInfo.errordocument)
  return _internal_errordocument();
}
inline void WebsiteInfo::set_errordocument(const std::string& value) {
  _internal_set_errordocument(value);
  // @@protoc_insertion_point(field_set:ClientCos.WebsiteInfo.errordocument)
}
inline std::string* WebsiteInfo::mutable_errordocument() {
  // @@protoc_insertion_point(field_mutable:ClientCos.WebsiteInfo.errordocument)
  return _internal_mutable_errordocument();
}
inline const std::string& WebsiteInfo::_internal_errordocument() const {
  return errordocument_.Get();
}
inline void WebsiteInfo::_internal_set_errordocument(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  errordocument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebsiteInfo::set_errordocument(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  errordocument_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.WebsiteInfo.errordocument)
}
inline void WebsiteInfo::set_errordocument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  errordocument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.WebsiteInfo.errordocument)
}
inline void WebsiteInfo::set_errordocument(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  errordocument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.WebsiteInfo.errordocument)
}
inline std::string* WebsiteInfo::_internal_mutable_errordocument() {
  _has_bits_[0] |= 0x00000004u;
  return errordocument_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebsiteInfo::release_errordocument() {
  // @@protoc_insertion_point(field_release:ClientCos.WebsiteInfo.errordocument)
  if (!_internal_has_errordocument()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return errordocument_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebsiteInfo::set_allocated_errordocument(std::string* errordocument) {
  if (errordocument != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  errordocument_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordocument,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.WebsiteInfo.errordocument)
}

// optional .ClientCos.RoutingRule routingrule = 4;
inline bool WebsiteInfo::_internal_has_routingrule() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || routingrule_ != nullptr);
  return value;
}
inline bool WebsiteInfo::has_routingrule() const {
  return _internal_has_routingrule();
}
inline void WebsiteInfo::clear_routingrule() {
  if (routingrule_ != nullptr) routingrule_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ClientCos::RoutingRule& WebsiteInfo::_internal_routingrule() const {
  const ::ClientCos::RoutingRule* p = routingrule_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::RoutingRule&>(
      ::ClientCos::_RoutingRule_default_instance_);
}
inline const ::ClientCos::RoutingRule& WebsiteInfo::routingrule() const {
  // @@protoc_insertion_point(field_get:ClientCos.WebsiteInfo.routingrule)
  return _internal_routingrule();
}
inline void WebsiteInfo::unsafe_arena_set_allocated_routingrule(
    ::ClientCos::RoutingRule* routingrule) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routingrule_);
  }
  routingrule_ = routingrule;
  if (routingrule) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.WebsiteInfo.routingrule)
}
inline ::ClientCos::RoutingRule* WebsiteInfo::release_routingrule() {
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::RoutingRule* temp = routingrule_;
  routingrule_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::RoutingRule* WebsiteInfo::unsafe_arena_release_routingrule() {
  // @@protoc_insertion_point(field_release:ClientCos.WebsiteInfo.routingrule)
  _has_bits_[0] &= ~0x00000010u;
  ::ClientCos::RoutingRule* temp = routingrule_;
  routingrule_ = nullptr;
  return temp;
}
inline ::ClientCos::RoutingRule* WebsiteInfo::_internal_mutable_routingrule() {
  _has_bits_[0] |= 0x00000010u;
  if (routingrule_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::RoutingRule>(GetArena());
    routingrule_ = p;
  }
  return routingrule_;
}
inline ::ClientCos::RoutingRule* WebsiteInfo::mutable_routingrule() {
  // @@protoc_insertion_point(field_mutable:ClientCos.WebsiteInfo.routingrule)
  return _internal_mutable_routingrule();
}
inline void WebsiteInfo::set_allocated_routingrule(::ClientCos::RoutingRule* routingrule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete routingrule_;
  }
  if (routingrule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routingrule);
    if (message_arena != submessage_arena) {
      routingrule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routingrule, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  routingrule_ = routingrule;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.WebsiteInfo.routingrule)
}

// optional bytes hostname = 5;
inline bool WebsiteInfo::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WebsiteInfo::has_hostname() const {
  return _internal_has_hostname();
}
inline void WebsiteInfo::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WebsiteInfo::hostname() const {
  // @@protoc_insertion_point(field_get:ClientCos.WebsiteInfo.hostname)
  return _internal_hostname();
}
inline void WebsiteInfo::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:ClientCos.WebsiteInfo.hostname)
}
inline std::string* WebsiteInfo::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:ClientCos.WebsiteInfo.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& WebsiteInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void WebsiteInfo::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebsiteInfo::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.WebsiteInfo.hostname)
}
inline void WebsiteInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.WebsiteInfo.hostname)
}
inline void WebsiteInfo::set_hostname(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.WebsiteInfo.hostname)
}
inline std::string* WebsiteInfo::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000008u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebsiteInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:ClientCos.WebsiteInfo.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebsiteInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.WebsiteInfo.hostname)
}

// -------------------------------------------------------------------

// SetBucketWebsiteInfoReq

// required bytes path = 1;
inline bool SetBucketWebsiteInfoReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBucketWebsiteInfoReq::has_path() const {
  return _internal_has_path();
}
inline void SetBucketWebsiteInfoReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetBucketWebsiteInfoReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketWebsiteInfoReq.path)
  return _internal_path();
}
inline void SetBucketWebsiteInfoReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketWebsiteInfoReq.path)
}
inline std::string* SetBucketWebsiteInfoReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketWebsiteInfoReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetBucketWebsiteInfoReq::_internal_path() const {
  return path_.Get();
}
inline void SetBucketWebsiteInfoReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBucketWebsiteInfoReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetBucketWebsiteInfoReq.path)
}
inline void SetBucketWebsiteInfoReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetBucketWebsiteInfoReq.path)
}
inline void SetBucketWebsiteInfoReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetBucketWebsiteInfoReq.path)
}
inline std::string* SetBucketWebsiteInfoReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBucketWebsiteInfoReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketWebsiteInfoReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBucketWebsiteInfoReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketWebsiteInfoReq.path)
}

// required uint32 setflag = 2;
inline bool SetBucketWebsiteInfoReq::_internal_has_setflag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetBucketWebsiteInfoReq::has_setflag() const {
  return _internal_has_setflag();
}
inline void SetBucketWebsiteInfoReq::clear_setflag() {
  setflag_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetBucketWebsiteInfoReq::_internal_setflag() const {
  return setflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetBucketWebsiteInfoReq::setflag() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketWebsiteInfoReq.setflag)
  return _internal_setflag();
}
inline void SetBucketWebsiteInfoReq::_internal_set_setflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  setflag_ = value;
}
inline void SetBucketWebsiteInfoReq::set_setflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setflag(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketWebsiteInfoReq.setflag)
}

// optional .ClientCos.WebsiteInfo websiteinfo = 3;
inline bool SetBucketWebsiteInfoReq::_internal_has_websiteinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || websiteinfo_ != nullptr);
  return value;
}
inline bool SetBucketWebsiteInfoReq::has_websiteinfo() const {
  return _internal_has_websiteinfo();
}
inline void SetBucketWebsiteInfoReq::clear_websiteinfo() {
  if (websiteinfo_ != nullptr) websiteinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::WebsiteInfo& SetBucketWebsiteInfoReq::_internal_websiteinfo() const {
  const ::ClientCos::WebsiteInfo* p = websiteinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::WebsiteInfo&>(
      ::ClientCos::_WebsiteInfo_default_instance_);
}
inline const ::ClientCos::WebsiteInfo& SetBucketWebsiteInfoReq::websiteinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketWebsiteInfoReq.websiteinfo)
  return _internal_websiteinfo();
}
inline void SetBucketWebsiteInfoReq::unsafe_arena_set_allocated_websiteinfo(
    ::ClientCos::WebsiteInfo* websiteinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(websiteinfo_);
  }
  websiteinfo_ = websiteinfo;
  if (websiteinfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SetBucketWebsiteInfoReq.websiteinfo)
}
inline ::ClientCos::WebsiteInfo* SetBucketWebsiteInfoReq::release_websiteinfo() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::WebsiteInfo* temp = websiteinfo_;
  websiteinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::WebsiteInfo* SetBucketWebsiteInfoReq::unsafe_arena_release_websiteinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketWebsiteInfoReq.websiteinfo)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::WebsiteInfo* temp = websiteinfo_;
  websiteinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::WebsiteInfo* SetBucketWebsiteInfoReq::_internal_mutable_websiteinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (websiteinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::WebsiteInfo>(GetArena());
    websiteinfo_ = p;
  }
  return websiteinfo_;
}
inline ::ClientCos::WebsiteInfo* SetBucketWebsiteInfoReq::mutable_websiteinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketWebsiteInfoReq.websiteinfo)
  return _internal_mutable_websiteinfo();
}
inline void SetBucketWebsiteInfoReq::set_allocated_websiteinfo(::ClientCos::WebsiteInfo* websiteinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete websiteinfo_;
  }
  if (websiteinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(websiteinfo);
    if (message_arena != submessage_arena) {
      websiteinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, websiteinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  websiteinfo_ = websiteinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketWebsiteInfoReq.websiteinfo)
}

// -------------------------------------------------------------------

// SetBucketWebsiteInfoRsp

// -------------------------------------------------------------------

// SetCamAttrReq

// required bytes path = 1;
inline bool SetCamAttrReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetCamAttrReq::has_path() const {
  return _internal_has_path();
}
inline void SetCamAttrReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetCamAttrReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetCamAttrReq.path)
  return _internal_path();
}
inline void SetCamAttrReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetCamAttrReq.path)
}
inline std::string* SetCamAttrReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetCamAttrReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetCamAttrReq::_internal_path() const {
  return path_.Get();
}
inline void SetCamAttrReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetCamAttrReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetCamAttrReq.path)
}
inline void SetCamAttrReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetCamAttrReq.path)
}
inline void SetCamAttrReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetCamAttrReq.path)
}
inline std::string* SetCamAttrReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetCamAttrReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetCamAttrReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetCamAttrReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetCamAttrReq.path)
}

// required .ClientCos.CamAuth camauth = 2;
inline bool SetCamAttrReq::_internal_has_camauth() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetCamAttrReq::has_camauth() const {
  return _internal_has_camauth();
}
inline void SetCamAttrReq::clear_camauth() {
  camauth_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ClientCos::CamAuth SetCamAttrReq::_internal_camauth() const {
  return static_cast< ::ClientCos::CamAuth >(camauth_);
}
inline ::ClientCos::CamAuth SetCamAttrReq::camauth() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetCamAttrReq.camauth)
  return _internal_camauth();
}
inline void SetCamAttrReq::_internal_set_camauth(::ClientCos::CamAuth value) {
  assert(::ClientCos::CamAuth_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  camauth_ = value;
}
inline void SetCamAttrReq::set_camauth(::ClientCos::CamAuth value) {
  _internal_set_camauth(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetCamAttrReq.camauth)
}

// -------------------------------------------------------------------

// SetCamAttrRsp

// -------------------------------------------------------------------

// BucketCamAuthQueryReq

// required bytes path = 1;
inline bool BucketCamAuthQueryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BucketCamAuthQueryReq::has_path() const {
  return _internal_has_path();
}
inline void BucketCamAuthQueryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BucketCamAuthQueryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCamAuthQueryReq.path)
  return _internal_path();
}
inline void BucketCamAuthQueryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketCamAuthQueryReq.path)
}
inline std::string* BucketCamAuthQueryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.BucketCamAuthQueryReq.path)
  return _internal_mutable_path();
}
inline const std::string& BucketCamAuthQueryReq::_internal_path() const {
  return path_.Get();
}
inline void BucketCamAuthQueryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketCamAuthQueryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.BucketCamAuthQueryReq.path)
}
inline void BucketCamAuthQueryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.BucketCamAuthQueryReq.path)
}
inline void BucketCamAuthQueryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.BucketCamAuthQueryReq.path)
}
inline std::string* BucketCamAuthQueryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketCamAuthQueryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.BucketCamAuthQueryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketCamAuthQueryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.BucketCamAuthQueryReq.path)
}

// -------------------------------------------------------------------

// BucketCamAuthQueryRsp

// required bool iscamauth = 1;
inline bool BucketCamAuthQueryRsp::_internal_has_iscamauth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BucketCamAuthQueryRsp::has_iscamauth() const {
  return _internal_has_iscamauth();
}
inline void BucketCamAuthQueryRsp::clear_iscamauth() {
  iscamauth_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BucketCamAuthQueryRsp::_internal_iscamauth() const {
  return iscamauth_;
}
inline bool BucketCamAuthQueryRsp::iscamauth() const {
  // @@protoc_insertion_point(field_get:ClientCos.BucketCamAuthQueryRsp.iscamauth)
  return _internal_iscamauth();
}
inline void BucketCamAuthQueryRsp::_internal_set_iscamauth(bool value) {
  _has_bits_[0] |= 0x00000001u;
  iscamauth_ = value;
}
inline void BucketCamAuthQueryRsp::set_iscamauth(bool value) {
  _internal_set_iscamauth(value);
  // @@protoc_insertion_point(field_set:ClientCos.BucketCamAuthQueryRsp.iscamauth)
}

// -------------------------------------------------------------------

// CamAtuhItem

// required bytes bucketpath = 1;
inline bool CamAtuhItem::_internal_has_bucketpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CamAtuhItem::has_bucketpath() const {
  return _internal_has_bucketpath();
}
inline void CamAtuhItem::clear_bucketpath() {
  bucketpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CamAtuhItem::bucketpath() const {
  // @@protoc_insertion_point(field_get:ClientCos.CamAtuhItem.bucketpath)
  return _internal_bucketpath();
}
inline void CamAtuhItem::set_bucketpath(const std::string& value) {
  _internal_set_bucketpath(value);
  // @@protoc_insertion_point(field_set:ClientCos.CamAtuhItem.bucketpath)
}
inline std::string* CamAtuhItem::mutable_bucketpath() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CamAtuhItem.bucketpath)
  return _internal_mutable_bucketpath();
}
inline const std::string& CamAtuhItem::_internal_bucketpath() const {
  return bucketpath_.Get();
}
inline void CamAtuhItem::_internal_set_bucketpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bucketpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CamAtuhItem::set_bucketpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bucketpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CamAtuhItem.bucketpath)
}
inline void CamAtuhItem::set_bucketpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bucketpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CamAtuhItem.bucketpath)
}
inline void CamAtuhItem::set_bucketpath(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bucketpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CamAtuhItem.bucketpath)
}
inline std::string* CamAtuhItem::_internal_mutable_bucketpath() {
  _has_bits_[0] |= 0x00000001u;
  return bucketpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CamAtuhItem::release_bucketpath() {
  // @@protoc_insertion_point(field_release:ClientCos.CamAtuhItem.bucketpath)
  if (!_internal_has_bucketpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bucketpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CamAtuhItem::set_allocated_bucketpath(std::string* bucketpath) {
  if (bucketpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bucketpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucketpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CamAtuhItem.bucketpath)
}

// required bool iscamauth = 2;
inline bool CamAtuhItem::_internal_has_iscamauth() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CamAtuhItem::has_iscamauth() const {
  return _internal_has_iscamauth();
}
inline void CamAtuhItem::clear_iscamauth() {
  iscamauth_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CamAtuhItem::_internal_iscamauth() const {
  return iscamauth_;
}
inline bool CamAtuhItem::iscamauth() const {
  // @@protoc_insertion_point(field_get:ClientCos.CamAtuhItem.iscamauth)
  return _internal_iscamauth();
}
inline void CamAtuhItem::_internal_set_iscamauth(bool value) {
  _has_bits_[0] |= 0x00000002u;
  iscamauth_ = value;
}
inline void CamAtuhItem::set_iscamauth(bool value) {
  _internal_set_iscamauth(value);
  // @@protoc_insertion_point(field_set:ClientCos.CamAtuhItem.iscamauth)
}

// -------------------------------------------------------------------

// AppCamAuthQueryReq

// required bytes appid = 1;
inline bool AppCamAuthQueryReq::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppCamAuthQueryReq::has_appid() const {
  return _internal_has_appid();
}
inline void AppCamAuthQueryReq::clear_appid() {
  appid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppCamAuthQueryReq::appid() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppCamAuthQueryReq.appid)
  return _internal_appid();
}
inline void AppCamAuthQueryReq::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppCamAuthQueryReq.appid)
}
inline std::string* AppCamAuthQueryReq::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppCamAuthQueryReq.appid)
  return _internal_mutable_appid();
}
inline const std::string& AppCamAuthQueryReq::_internal_appid() const {
  return appid_.Get();
}
inline void AppCamAuthQueryReq::_internal_set_appid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppCamAuthQueryReq::set_appid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppCamAuthQueryReq.appid)
}
inline void AppCamAuthQueryReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppCamAuthQueryReq.appid)
}
inline void AppCamAuthQueryReq::set_appid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppCamAuthQueryReq.appid)
}
inline std::string* AppCamAuthQueryReq::_internal_mutable_appid() {
  _has_bits_[0] |= 0x00000001u;
  return appid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppCamAuthQueryReq::release_appid() {
  // @@protoc_insertion_point(field_release:ClientCos.AppCamAuthQueryReq.appid)
  if (!_internal_has_appid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return appid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppCamAuthQueryReq::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppCamAuthQueryReq.appid)
}

// required bytes next_bucket = 2;
inline bool AppCamAuthQueryReq::_internal_has_next_bucket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppCamAuthQueryReq::has_next_bucket() const {
  return _internal_has_next_bucket();
}
inline void AppCamAuthQueryReq::clear_next_bucket() {
  next_bucket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppCamAuthQueryReq::next_bucket() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppCamAuthQueryReq.next_bucket)
  return _internal_next_bucket();
}
inline void AppCamAuthQueryReq::set_next_bucket(const std::string& value) {
  _internal_set_next_bucket(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppCamAuthQueryReq.next_bucket)
}
inline std::string* AppCamAuthQueryReq::mutable_next_bucket() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppCamAuthQueryReq.next_bucket)
  return _internal_mutable_next_bucket();
}
inline const std::string& AppCamAuthQueryReq::_internal_next_bucket() const {
  return next_bucket_.Get();
}
inline void AppCamAuthQueryReq::_internal_set_next_bucket(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  next_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppCamAuthQueryReq::set_next_bucket(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  next_bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppCamAuthQueryReq.next_bucket)
}
inline void AppCamAuthQueryReq::set_next_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  next_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppCamAuthQueryReq.next_bucket)
}
inline void AppCamAuthQueryReq::set_next_bucket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  next_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppCamAuthQueryReq.next_bucket)
}
inline std::string* AppCamAuthQueryReq::_internal_mutable_next_bucket() {
  _has_bits_[0] |= 0x00000002u;
  return next_bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppCamAuthQueryReq::release_next_bucket() {
  // @@protoc_insertion_point(field_release:ClientCos.AppCamAuthQueryReq.next_bucket)
  if (!_internal_has_next_bucket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return next_bucket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppCamAuthQueryReq::set_allocated_next_bucket(std::string* next_bucket) {
  if (next_bucket != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppCamAuthQueryReq.next_bucket)
}

// -------------------------------------------------------------------

// AppCamAuthQueryRsp

// required .ClientCos.CamAuth camauth = 1;
inline bool AppCamAuthQueryRsp::_internal_has_camauth() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppCamAuthQueryRsp::has_camauth() const {
  return _internal_has_camauth();
}
inline void AppCamAuthQueryRsp::clear_camauth() {
  camauth_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ClientCos::CamAuth AppCamAuthQueryRsp::_internal_camauth() const {
  return static_cast< ::ClientCos::CamAuth >(camauth_);
}
inline ::ClientCos::CamAuth AppCamAuthQueryRsp::camauth() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppCamAuthQueryRsp.camauth)
  return _internal_camauth();
}
inline void AppCamAuthQueryRsp::_internal_set_camauth(::ClientCos::CamAuth value) {
  assert(::ClientCos::CamAuth_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  camauth_ = value;
}
inline void AppCamAuthQueryRsp::set_camauth(::ClientCos::CamAuth value) {
  _internal_set_camauth(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppCamAuthQueryRsp.camauth)
}

// required bytes next_bucket = 2;
inline bool AppCamAuthQueryRsp::_internal_has_next_bucket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppCamAuthQueryRsp::has_next_bucket() const {
  return _internal_has_next_bucket();
}
inline void AppCamAuthQueryRsp::clear_next_bucket() {
  next_bucket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppCamAuthQueryRsp::next_bucket() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppCamAuthQueryRsp.next_bucket)
  return _internal_next_bucket();
}
inline void AppCamAuthQueryRsp::set_next_bucket(const std::string& value) {
  _internal_set_next_bucket(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppCamAuthQueryRsp.next_bucket)
}
inline std::string* AppCamAuthQueryRsp::mutable_next_bucket() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppCamAuthQueryRsp.next_bucket)
  return _internal_mutable_next_bucket();
}
inline const std::string& AppCamAuthQueryRsp::_internal_next_bucket() const {
  return next_bucket_.Get();
}
inline void AppCamAuthQueryRsp::_internal_set_next_bucket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppCamAuthQueryRsp::set_next_bucket(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  next_bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AppCamAuthQueryRsp.next_bucket)
}
inline void AppCamAuthQueryRsp::set_next_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  next_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AppCamAuthQueryRsp.next_bucket)
}
inline void AppCamAuthQueryRsp::set_next_bucket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  next_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AppCamAuthQueryRsp.next_bucket)
}
inline std::string* AppCamAuthQueryRsp::_internal_mutable_next_bucket() {
  _has_bits_[0] |= 0x00000001u;
  return next_bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppCamAuthQueryRsp::release_next_bucket() {
  // @@protoc_insertion_point(field_release:ClientCos.AppCamAuthQueryRsp.next_bucket)
  if (!_internal_has_next_bucket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return next_bucket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppCamAuthQueryRsp::set_allocated_next_bucket(std::string* next_bucket) {
  if (next_bucket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AppCamAuthQueryRsp.next_bucket)
}

// repeated .ClientCos.CamAtuhItem item = 3;
inline int AppCamAuthQueryRsp::_internal_item_size() const {
  return item_.size();
}
inline int AppCamAuthQueryRsp::item_size() const {
  return _internal_item_size();
}
inline void AppCamAuthQueryRsp::clear_item() {
  item_.Clear();
}
inline ::ClientCos::CamAtuhItem* AppCamAuthQueryRsp::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.AppCamAuthQueryRsp.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CamAtuhItem >*
AppCamAuthQueryRsp::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.AppCamAuthQueryRsp.item)
  return &item_;
}
inline const ::ClientCos::CamAtuhItem& AppCamAuthQueryRsp::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::ClientCos::CamAtuhItem& AppCamAuthQueryRsp::item(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.AppCamAuthQueryRsp.item)
  return _internal_item(index);
}
inline ::ClientCos::CamAtuhItem* AppCamAuthQueryRsp::_internal_add_item() {
  return item_.Add();
}
inline ::ClientCos::CamAtuhItem* AppCamAuthQueryRsp::add_item() {
  // @@protoc_insertion_point(field_add:ClientCos.AppCamAuthQueryRsp.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CamAtuhItem >&
AppCamAuthQueryRsp::item() const {
  // @@protoc_insertion_point(field_list:ClientCos.AppCamAuthQueryRsp.item)
  return item_;
}

// required bool isover = 4 [default = false];
inline bool AppCamAuthQueryRsp::_internal_has_isover() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppCamAuthQueryRsp::has_isover() const {
  return _internal_has_isover();
}
inline void AppCamAuthQueryRsp::clear_isover() {
  isover_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AppCamAuthQueryRsp::_internal_isover() const {
  return isover_;
}
inline bool AppCamAuthQueryRsp::isover() const {
  // @@protoc_insertion_point(field_get:ClientCos.AppCamAuthQueryRsp.isover)
  return _internal_isover();
}
inline void AppCamAuthQueryRsp::_internal_set_isover(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isover_ = value;
}
inline void AppCamAuthQueryRsp::set_isover(bool value) {
  _internal_set_isover(value);
  // @@protoc_insertion_point(field_set:ClientCos.AppCamAuthQueryRsp.isover)
}

// -------------------------------------------------------------------

// CgiArgs

// optional .ClientCos.AuthInfo auth_info = 1;
inline bool CgiArgs::_internal_has_auth_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || auth_info_ != nullptr);
  return value;
}
inline bool CgiArgs::has_auth_info() const {
  return _internal_has_auth_info();
}
inline void CgiArgs::clear_auth_info() {
  if (auth_info_ != nullptr) auth_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::AuthInfo& CgiArgs::_internal_auth_info() const {
  const ::ClientCos::AuthInfo* p = auth_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::AuthInfo&>(
      ::ClientCos::_AuthInfo_default_instance_);
}
inline const ::ClientCos::AuthInfo& CgiArgs::auth_info() const {
  // @@protoc_insertion_point(field_get:ClientCos.CgiArgs.auth_info)
  return _internal_auth_info();
}
inline void CgiArgs::unsafe_arena_set_allocated_auth_info(
    ::ClientCos::AuthInfo* auth_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_info_);
  }
  auth_info_ = auth_info;
  if (auth_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CgiArgs.auth_info)
}
inline ::ClientCos::AuthInfo* CgiArgs::release_auth_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::AuthInfo* temp = auth_info_;
  auth_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::AuthInfo* CgiArgs::unsafe_arena_release_auth_info() {
  // @@protoc_insertion_point(field_release:ClientCos.CgiArgs.auth_info)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::AuthInfo* temp = auth_info_;
  auth_info_ = nullptr;
  return temp;
}
inline ::ClientCos::AuthInfo* CgiArgs::_internal_mutable_auth_info() {
  _has_bits_[0] |= 0x00000001u;
  if (auth_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::AuthInfo>(GetArena());
    auth_info_ = p;
  }
  return auth_info_;
}
inline ::ClientCos::AuthInfo* CgiArgs::mutable_auth_info() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CgiArgs.auth_info)
  return _internal_mutable_auth_info();
}
inline void CgiArgs::set_allocated_auth_info(::ClientCos::AuthInfo* auth_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auth_info_;
  }
  if (auth_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auth_info);
    if (message_arena != submessage_arena) {
      auth_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auth_info_ = auth_info;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CgiArgs.auth_info)
}

// optional .ClientCos.OwnerInfo owner = 2;
inline bool CgiArgs::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || owner_ != nullptr);
  return value;
}
inline bool CgiArgs::has_owner() const {
  return _internal_has_owner();
}
inline void CgiArgs::clear_owner() {
  if (owner_ != nullptr) owner_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::OwnerInfo& CgiArgs::_internal_owner() const {
  const ::ClientCos::OwnerInfo* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& CgiArgs::owner() const {
  // @@protoc_insertion_point(field_get:ClientCos.CgiArgs.owner)
  return _internal_owner();
}
inline void CgiArgs::unsafe_arena_set_allocated_owner(
    ::ClientCos::OwnerInfo* owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CgiArgs.owner)
}
inline ::ClientCos::OwnerInfo* CgiArgs::release_owner() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* CgiArgs::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:ClientCos.CgiArgs.owner)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* CgiArgs::_internal_mutable_owner() {
  _has_bits_[0] |= 0x00000002u;
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    owner_ = p;
  }
  return owner_;
}
inline ::ClientCos::OwnerInfo* CgiArgs::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CgiArgs.owner)
  return _internal_mutable_owner();
}
inline void CgiArgs::set_allocated_owner(::ClientCos::OwnerInfo* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CgiArgs.owner)
}

// repeated .ClientCos.AclInfo acls = 3;
inline int CgiArgs::_internal_acls_size() const {
  return acls_.size();
}
inline int CgiArgs::acls_size() const {
  return _internal_acls_size();
}
inline void CgiArgs::clear_acls() {
  acls_.Clear();
}
inline ::ClientCos::AclInfo* CgiArgs::mutable_acls(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.CgiArgs.acls)
  return acls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
CgiArgs::mutable_acls() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.CgiArgs.acls)
  return &acls_;
}
inline const ::ClientCos::AclInfo& CgiArgs::_internal_acls(int index) const {
  return acls_.Get(index);
}
inline const ::ClientCos::AclInfo& CgiArgs::acls(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.CgiArgs.acls)
  return _internal_acls(index);
}
inline ::ClientCos::AclInfo* CgiArgs::_internal_add_acls() {
  return acls_.Add();
}
inline ::ClientCos::AclInfo* CgiArgs::add_acls() {
  // @@protoc_insertion_point(field_add:ClientCos.CgiArgs.acls)
  return _internal_add_acls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
CgiArgs::acls() const {
  // @@protoc_insertion_point(field_list:ClientCos.CgiArgs.acls)
  return acls_;
}

// -------------------------------------------------------------------

// CgiParams

// optional .ClientCos.GetObjectExtend get_object_extend = 1;
inline bool CgiParams::_internal_has_get_object_extend() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || get_object_extend_ != nullptr);
  return value;
}
inline bool CgiParams::has_get_object_extend() const {
  return _internal_has_get_object_extend();
}
inline void CgiParams::clear_get_object_extend() {
  if (get_object_extend_ != nullptr) get_object_extend_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::GetObjectExtend& CgiParams::_internal_get_object_extend() const {
  const ::ClientCos::GetObjectExtend* p = get_object_extend_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::GetObjectExtend&>(
      ::ClientCos::_GetObjectExtend_default_instance_);
}
inline const ::ClientCos::GetObjectExtend& CgiParams::get_object_extend() const {
  // @@protoc_insertion_point(field_get:ClientCos.CgiParams.get_object_extend)
  return _internal_get_object_extend();
}
inline void CgiParams::unsafe_arena_set_allocated_get_object_extend(
    ::ClientCos::GetObjectExtend* get_object_extend) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_object_extend_);
  }
  get_object_extend_ = get_object_extend;
  if (get_object_extend) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CgiParams.get_object_extend)
}
inline ::ClientCos::GetObjectExtend* CgiParams::release_get_object_extend() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::GetObjectExtend* temp = get_object_extend_;
  get_object_extend_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::GetObjectExtend* CgiParams::unsafe_arena_release_get_object_extend() {
  // @@protoc_insertion_point(field_release:ClientCos.CgiParams.get_object_extend)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::GetObjectExtend* temp = get_object_extend_;
  get_object_extend_ = nullptr;
  return temp;
}
inline ::ClientCos::GetObjectExtend* CgiParams::_internal_mutable_get_object_extend() {
  _has_bits_[0] |= 0x00000001u;
  if (get_object_extend_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::GetObjectExtend>(GetArena());
    get_object_extend_ = p;
  }
  return get_object_extend_;
}
inline ::ClientCos::GetObjectExtend* CgiParams::mutable_get_object_extend() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CgiParams.get_object_extend)
  return _internal_mutable_get_object_extend();
}
inline void CgiParams::set_allocated_get_object_extend(::ClientCos::GetObjectExtend* get_object_extend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_object_extend_;
  }
  if (get_object_extend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_object_extend);
    if (message_arena != submessage_arena) {
      get_object_extend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_object_extend, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  get_object_extend_ = get_object_extend;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CgiParams.get_object_extend)
}

// optional .ClientCos.CompleteMultiUploadExtend complete_multi_upload_extend = 2;
inline bool CgiParams::_internal_has_complete_multi_upload_extend() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || complete_multi_upload_extend_ != nullptr);
  return value;
}
inline bool CgiParams::has_complete_multi_upload_extend() const {
  return _internal_has_complete_multi_upload_extend();
}
inline void CgiParams::clear_complete_multi_upload_extend() {
  if (complete_multi_upload_extend_ != nullptr) complete_multi_upload_extend_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::CompleteMultiUploadExtend& CgiParams::_internal_complete_multi_upload_extend() const {
  const ::ClientCos::CompleteMultiUploadExtend* p = complete_multi_upload_extend_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::CompleteMultiUploadExtend&>(
      ::ClientCos::_CompleteMultiUploadExtend_default_instance_);
}
inline const ::ClientCos::CompleteMultiUploadExtend& CgiParams::complete_multi_upload_extend() const {
  // @@protoc_insertion_point(field_get:ClientCos.CgiParams.complete_multi_upload_extend)
  return _internal_complete_multi_upload_extend();
}
inline void CgiParams::unsafe_arena_set_allocated_complete_multi_upload_extend(
    ::ClientCos::CompleteMultiUploadExtend* complete_multi_upload_extend) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(complete_multi_upload_extend_);
  }
  complete_multi_upload_extend_ = complete_multi_upload_extend;
  if (complete_multi_upload_extend) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.CgiParams.complete_multi_upload_extend)
}
inline ::ClientCos::CompleteMultiUploadExtend* CgiParams::release_complete_multi_upload_extend() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::CompleteMultiUploadExtend* temp = complete_multi_upload_extend_;
  complete_multi_upload_extend_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::CompleteMultiUploadExtend* CgiParams::unsafe_arena_release_complete_multi_upload_extend() {
  // @@protoc_insertion_point(field_release:ClientCos.CgiParams.complete_multi_upload_extend)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::CompleteMultiUploadExtend* temp = complete_multi_upload_extend_;
  complete_multi_upload_extend_ = nullptr;
  return temp;
}
inline ::ClientCos::CompleteMultiUploadExtend* CgiParams::_internal_mutable_complete_multi_upload_extend() {
  _has_bits_[0] |= 0x00000002u;
  if (complete_multi_upload_extend_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::CompleteMultiUploadExtend>(GetArena());
    complete_multi_upload_extend_ = p;
  }
  return complete_multi_upload_extend_;
}
inline ::ClientCos::CompleteMultiUploadExtend* CgiParams::mutable_complete_multi_upload_extend() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CgiParams.complete_multi_upload_extend)
  return _internal_mutable_complete_multi_upload_extend();
}
inline void CgiParams::set_allocated_complete_multi_upload_extend(::ClientCos::CompleteMultiUploadExtend* complete_multi_upload_extend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete complete_multi_upload_extend_;
  }
  if (complete_multi_upload_extend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(complete_multi_upload_extend);
    if (message_arena != submessage_arena) {
      complete_multi_upload_extend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, complete_multi_upload_extend, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  complete_multi_upload_extend_ = complete_multi_upload_extend;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CgiParams.complete_multi_upload_extend)
}

// -------------------------------------------------------------------

// GetObjectExtend

// optional bool check_refer = 1 [default = true];
inline bool GetObjectExtend::_internal_has_check_refer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetObjectExtend::has_check_refer() const {
  return _internal_has_check_refer();
}
inline void GetObjectExtend::clear_check_refer() {
  check_refer_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GetObjectExtend::_internal_check_refer() const {
  return check_refer_;
}
inline bool GetObjectExtend::check_refer() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetObjectExtend.check_refer)
  return _internal_check_refer();
}
inline void GetObjectExtend::_internal_set_check_refer(bool value) {
  _has_bits_[0] |= 0x00000001u;
  check_refer_ = value;
}
inline void GetObjectExtend::set_check_refer(bool value) {
  _internal_set_check_refer(value);
  // @@protoc_insertion_point(field_set:ClientCos.GetObjectExtend.check_refer)
}

// -------------------------------------------------------------------

// CompleteMultiUploadExtend

// optional int32 min_part_size = 1;
inline bool CompleteMultiUploadExtend::_internal_has_min_part_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompleteMultiUploadExtend::has_min_part_size() const {
  return _internal_has_min_part_size();
}
inline void CompleteMultiUploadExtend::clear_min_part_size() {
  min_part_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompleteMultiUploadExtend::_internal_min_part_size() const {
  return min_part_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompleteMultiUploadExtend::min_part_size() const {
  // @@protoc_insertion_point(field_get:ClientCos.CompleteMultiUploadExtend.min_part_size)
  return _internal_min_part_size();
}
inline void CompleteMultiUploadExtend::_internal_set_min_part_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_part_size_ = value;
}
inline void CompleteMultiUploadExtend::set_min_part_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_part_size(value);
  // @@protoc_insertion_point(field_set:ClientCos.CompleteMultiUploadExtend.min_part_size)
}

// -------------------------------------------------------------------

// TrsfArgs

// repeated .ClientCos.CustomHeader customheader_plat = 1;
inline int TrsfArgs::_internal_customheader_plat_size() const {
  return customheader_plat_.size();
}
inline int TrsfArgs::customheader_plat_size() const {
  return _internal_customheader_plat_size();
}
inline void TrsfArgs::clear_customheader_plat() {
  customheader_plat_.Clear();
}
inline ::ClientCos::CustomHeader* TrsfArgs::mutable_customheader_plat(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.TrsfArgs.customheader_plat)
  return customheader_plat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >*
TrsfArgs::mutable_customheader_plat() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.TrsfArgs.customheader_plat)
  return &customheader_plat_;
}
inline const ::ClientCos::CustomHeader& TrsfArgs::_internal_customheader_plat(int index) const {
  return customheader_plat_.Get(index);
}
inline const ::ClientCos::CustomHeader& TrsfArgs::customheader_plat(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.TrsfArgs.customheader_plat)
  return _internal_customheader_plat(index);
}
inline ::ClientCos::CustomHeader* TrsfArgs::_internal_add_customheader_plat() {
  return customheader_plat_.Add();
}
inline ::ClientCos::CustomHeader* TrsfArgs::add_customheader_plat() {
  // @@protoc_insertion_point(field_add:ClientCos.TrsfArgs.customheader_plat)
  return _internal_add_customheader_plat();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::CustomHeader >&
TrsfArgs::customheader_plat() const {
  // @@protoc_insertion_point(field_list:ClientCos.TrsfArgs.customheader_plat)
  return customheader_plat_;
}

// optional uint32 src_ctime = 2;
inline bool TrsfArgs::_internal_has_src_ctime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrsfArgs::has_src_ctime() const {
  return _internal_has_src_ctime();
}
inline void TrsfArgs::clear_src_ctime() {
  src_ctime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfArgs::_internal_src_ctime() const {
  return src_ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfArgs::src_ctime() const {
  // @@protoc_insertion_point(field_get:ClientCos.TrsfArgs.src_ctime)
  return _internal_src_ctime();
}
inline void TrsfArgs::_internal_set_src_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  src_ctime_ = value;
}
inline void TrsfArgs::set_src_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_ctime(value);
  // @@protoc_insertion_point(field_set:ClientCos.TrsfArgs.src_ctime)
}

// optional uint32 mtime = 3 [default = 0];
inline bool TrsfArgs::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrsfArgs::has_mtime() const {
  return _internal_has_mtime();
}
inline void TrsfArgs::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfArgs::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfArgs::mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.TrsfArgs.mtime)
  return _internal_mtime();
}
inline void TrsfArgs::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtime_ = value;
}
inline void TrsfArgs::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.TrsfArgs.mtime)
}

// optional uint32 forbid = 4;
inline bool TrsfArgs::_internal_has_forbid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrsfArgs::has_forbid() const {
  return _internal_has_forbid();
}
inline void TrsfArgs::clear_forbid() {
  forbid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfArgs::_internal_forbid() const {
  return forbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrsfArgs::forbid() const {
  // @@protoc_insertion_point(field_get:ClientCos.TrsfArgs.forbid)
  return _internal_forbid();
}
inline void TrsfArgs::_internal_set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  forbid_ = value;
}
inline void TrsfArgs::set_forbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:ClientCos.TrsfArgs.forbid)
}

// repeated .ClientCos.ReservedAttr reservedattr = 5;
inline int TrsfArgs::_internal_reservedattr_size() const {
  return reservedattr_.size();
}
inline int TrsfArgs::reservedattr_size() const {
  return _internal_reservedattr_size();
}
inline void TrsfArgs::clear_reservedattr() {
  reservedattr_.Clear();
}
inline ::ClientCos::ReservedAttr* TrsfArgs::mutable_reservedattr(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.TrsfArgs.reservedattr)
  return reservedattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >*
TrsfArgs::mutable_reservedattr() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.TrsfArgs.reservedattr)
  return &reservedattr_;
}
inline const ::ClientCos::ReservedAttr& TrsfArgs::_internal_reservedattr(int index) const {
  return reservedattr_.Get(index);
}
inline const ::ClientCos::ReservedAttr& TrsfArgs::reservedattr(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.TrsfArgs.reservedattr)
  return _internal_reservedattr(index);
}
inline ::ClientCos::ReservedAttr* TrsfArgs::_internal_add_reservedattr() {
  return reservedattr_.Add();
}
inline ::ClientCos::ReservedAttr* TrsfArgs::add_reservedattr() {
  // @@protoc_insertion_point(field_add:ClientCos.TrsfArgs.reservedattr)
  return _internal_add_reservedattr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::ReservedAttr >&
TrsfArgs::reservedattr() const {
  // @@protoc_insertion_point(field_list:ClientCos.TrsfArgs.reservedattr)
  return reservedattr_;
}

// optional .ClientCos.Authority auth = 6;
inline bool TrsfArgs::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrsfArgs::has_auth() const {
  return _internal_has_auth();
}
inline void TrsfArgs::clear_auth() {
  auth_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ClientCos::Authority TrsfArgs::_internal_auth() const {
  return static_cast< ::ClientCos::Authority >(auth_);
}
inline ::ClientCos::Authority TrsfArgs::auth() const {
  // @@protoc_insertion_point(field_get:ClientCos.TrsfArgs.auth)
  return _internal_auth();
}
inline void TrsfArgs::_internal_set_auth(::ClientCos::Authority value) {
  assert(::ClientCos::Authority_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  auth_ = value;
}
inline void TrsfArgs::set_auth(::ClientCos::Authority value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ClientCos.TrsfArgs.auth)
}

// -------------------------------------------------------------------

// AclInfo

// optional bytes uin = 1;
inline bool AclInfo::_internal_has_uin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AclInfo::has_uin() const {
  return _internal_has_uin();
}
inline void AclInfo::clear_uin() {
  uin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AclInfo::uin() const {
  // @@protoc_insertion_point(field_get:ClientCos.AclInfo.uin)
  return _internal_uin();
}
inline void AclInfo::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:ClientCos.AclInfo.uin)
}
inline std::string* AclInfo::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AclInfo.uin)
  return _internal_mutable_uin();
}
inline const std::string& AclInfo::_internal_uin() const {
  return uin_.Get();
}
inline void AclInfo::_internal_set_uin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AclInfo::set_uin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AclInfo.uin)
}
inline void AclInfo::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AclInfo.uin)
}
inline void AclInfo::set_uin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AclInfo.uin)
}
inline std::string* AclInfo::_internal_mutable_uin() {
  _has_bits_[0] |= 0x00000001u;
  return uin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AclInfo::release_uin() {
  // @@protoc_insertion_point(field_release:ClientCos.AclInfo.uin)
  if (!_internal_has_uin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AclInfo::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AclInfo.uin)
}

// optional int32 perm = 2;
inline bool AclInfo::_internal_has_perm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AclInfo::has_perm() const {
  return _internal_has_perm();
}
inline void AclInfo::clear_perm() {
  perm_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AclInfo::_internal_perm() const {
  return perm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AclInfo::perm() const {
  // @@protoc_insertion_point(field_get:ClientCos.AclInfo.perm)
  return _internal_perm();
}
inline void AclInfo::_internal_set_perm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  perm_ = value;
}
inline void AclInfo::set_perm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_perm(value);
  // @@protoc_insertion_point(field_set:ClientCos.AclInfo.perm)
}

// -------------------------------------------------------------------

// AuthInfo

// optional bytes reqUin = 1;
inline bool AuthInfo::_internal_has_requin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthInfo::has_requin() const {
  return _internal_has_requin();
}
inline void AuthInfo::clear_requin() {
  requin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthInfo::requin() const {
  // @@protoc_insertion_point(field_get:ClientCos.AuthInfo.reqUin)
  return _internal_requin();
}
inline void AuthInfo::set_requin(const std::string& value) {
  _internal_set_requin(value);
  // @@protoc_insertion_point(field_set:ClientCos.AuthInfo.reqUin)
}
inline std::string* AuthInfo::mutable_requin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.AuthInfo.reqUin)
  return _internal_mutable_requin();
}
inline const std::string& AuthInfo::_internal_requin() const {
  return requin_.Get();
}
inline void AuthInfo::_internal_set_requin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  requin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthInfo::set_requin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  requin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.AuthInfo.reqUin)
}
inline void AuthInfo::set_requin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  requin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.AuthInfo.reqUin)
}
inline void AuthInfo::set_requin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  requin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.AuthInfo.reqUin)
}
inline std::string* AuthInfo::_internal_mutable_requin() {
  _has_bits_[0] |= 0x00000001u;
  return requin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthInfo::release_requin() {
  // @@protoc_insertion_point(field_release:ClientCos.AuthInfo.reqUin)
  if (!_internal_has_requin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return requin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthInfo::set_allocated_requin(std::string* requin) {
  if (requin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  requin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.AuthInfo.reqUin)
}

// optional bool contextPass = 2;
inline bool AuthInfo::_internal_has_contextpass() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthInfo::has_contextpass() const {
  return _internal_has_contextpass();
}
inline void AuthInfo::clear_contextpass() {
  contextpass_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AuthInfo::_internal_contextpass() const {
  return contextpass_;
}
inline bool AuthInfo::contextpass() const {
  // @@protoc_insertion_point(field_get:ClientCos.AuthInfo.contextPass)
  return _internal_contextpass();
}
inline void AuthInfo::_internal_set_contextpass(bool value) {
  _has_bits_[0] |= 0x00000002u;
  contextpass_ = value;
}
inline void AuthInfo::set_contextpass(bool value) {
  _internal_set_contextpass(value);
  // @@protoc_insertion_point(field_set:ClientCos.AuthInfo.contextPass)
}

// optional bool needAcl = 3;
inline bool AuthInfo::_internal_has_needacl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthInfo::has_needacl() const {
  return _internal_has_needacl();
}
inline void AuthInfo::clear_needacl() {
  needacl_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AuthInfo::_internal_needacl() const {
  return needacl_;
}
inline bool AuthInfo::needacl() const {
  // @@protoc_insertion_point(field_get:ClientCos.AuthInfo.needAcl)
  return _internal_needacl();
}
inline void AuthInfo::_internal_set_needacl(bool value) {
  _has_bits_[0] |= 0x00000004u;
  needacl_ = value;
}
inline void AuthInfo::set_needacl(bool value) {
  _internal_set_needacl(value);
  // @@protoc_insertion_point(field_set:ClientCos.AuthInfo.needAcl)
}

// -------------------------------------------------------------------

// OwnerInfo

// optional bytes uin = 1;
inline bool OwnerInfo::_internal_has_uin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OwnerInfo::has_uin() const {
  return _internal_has_uin();
}
inline void OwnerInfo::clear_uin() {
  uin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OwnerInfo::uin() const {
  // @@protoc_insertion_point(field_get:ClientCos.OwnerInfo.uin)
  return _internal_uin();
}
inline void OwnerInfo::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:ClientCos.OwnerInfo.uin)
}
inline std::string* OwnerInfo::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:ClientCos.OwnerInfo.uin)
  return _internal_mutable_uin();
}
inline const std::string& OwnerInfo::_internal_uin() const {
  return uin_.Get();
}
inline void OwnerInfo::_internal_set_uin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OwnerInfo::set_uin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.OwnerInfo.uin)
}
inline void OwnerInfo::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.OwnerInfo.uin)
}
inline void OwnerInfo::set_uin(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.OwnerInfo.uin)
}
inline std::string* OwnerInfo::_internal_mutable_uin() {
  _has_bits_[0] |= 0x00000001u;
  return uin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OwnerInfo::release_uin() {
  // @@protoc_insertion_point(field_release:ClientCos.OwnerInfo.uin)
  if (!_internal_has_uin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OwnerInfo::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.OwnerInfo.uin)
}

// -------------------------------------------------------------------

// CheckObjAclReq

// required bytes path = 1;
inline bool CheckObjAclReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckObjAclReq::has_path() const {
  return _internal_has_path();
}
inline void CheckObjAclReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CheckObjAclReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.CheckObjAclReq.path)
  return _internal_path();
}
inline void CheckObjAclReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.CheckObjAclReq.path)
}
inline std::string* CheckObjAclReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CheckObjAclReq.path)
  return _internal_mutable_path();
}
inline const std::string& CheckObjAclReq::_internal_path() const {
  return path_.Get();
}
inline void CheckObjAclReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckObjAclReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CheckObjAclReq.path)
}
inline void CheckObjAclReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CheckObjAclReq.path)
}
inline void CheckObjAclReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CheckObjAclReq.path)
}
inline std::string* CheckObjAclReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckObjAclReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.CheckObjAclReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckObjAclReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CheckObjAclReq.path)
}

// optional bytes version = 2;
inline bool CheckObjAclReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CheckObjAclReq::has_version() const {
  return _internal_has_version();
}
inline void CheckObjAclReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CheckObjAclReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.CheckObjAclReq.version)
  return _internal_version();
}
inline void CheckObjAclReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.CheckObjAclReq.version)
}
inline std::string* CheckObjAclReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.CheckObjAclReq.version)
  return _internal_mutable_version();
}
inline const std::string& CheckObjAclReq::_internal_version() const {
  return version_.Get();
}
inline void CheckObjAclReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckObjAclReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.CheckObjAclReq.version)
}
inline void CheckObjAclReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.CheckObjAclReq.version)
}
inline void CheckObjAclReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.CheckObjAclReq.version)
}
inline std::string* CheckObjAclReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckObjAclReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.CheckObjAclReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckObjAclReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.CheckObjAclReq.version)
}

// optional int32 perm = 3;
inline bool CheckObjAclReq::_internal_has_perm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CheckObjAclReq::has_perm() const {
  return _internal_has_perm();
}
inline void CheckObjAclReq::clear_perm() {
  perm_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckObjAclReq::_internal_perm() const {
  return perm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckObjAclReq::perm() const {
  // @@protoc_insertion_point(field_get:ClientCos.CheckObjAclReq.perm)
  return _internal_perm();
}
inline void CheckObjAclReq::_internal_set_perm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  perm_ = value;
}
inline void CheckObjAclReq::set_perm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_perm(value);
  // @@protoc_insertion_point(field_set:ClientCos.CheckObjAclReq.perm)
}

// -------------------------------------------------------------------

// CheckObjAclRsp

// -------------------------------------------------------------------

// SetObjAclReq

// required bytes path = 1;
inline bool SetObjAclReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetObjAclReq::has_path() const {
  return _internal_has_path();
}
inline void SetObjAclReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetObjAclReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetObjAclReq.path)
  return _internal_path();
}
inline void SetObjAclReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetObjAclReq.path)
}
inline std::string* SetObjAclReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetObjAclReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetObjAclReq::_internal_path() const {
  return path_.Get();
}
inline void SetObjAclReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetObjAclReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetObjAclReq.path)
}
inline void SetObjAclReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetObjAclReq.path)
}
inline void SetObjAclReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetObjAclReq.path)
}
inline std::string* SetObjAclReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetObjAclReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetObjAclReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetObjAclReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetObjAclReq.path)
}

// optional bytes version = 2;
inline bool SetObjAclReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetObjAclReq::has_version() const {
  return _internal_has_version();
}
inline void SetObjAclReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetObjAclReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetObjAclReq.version)
  return _internal_version();
}
inline void SetObjAclReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetObjAclReq.version)
}
inline std::string* SetObjAclReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetObjAclReq.version)
  return _internal_mutable_version();
}
inline const std::string& SetObjAclReq::_internal_version() const {
  return version_.Get();
}
inline void SetObjAclReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetObjAclReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetObjAclReq.version)
}
inline void SetObjAclReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetObjAclReq.version)
}
inline void SetObjAclReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetObjAclReq.version)
}
inline std::string* SetObjAclReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetObjAclReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.SetObjAclReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetObjAclReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetObjAclReq.version)
}

// repeated .ClientCos.AclInfo acls = 3;
inline int SetObjAclReq::_internal_acls_size() const {
  return acls_.size();
}
inline int SetObjAclReq::acls_size() const {
  return _internal_acls_size();
}
inline void SetObjAclReq::clear_acls() {
  acls_.Clear();
}
inline ::ClientCos::AclInfo* SetObjAclReq::mutable_acls(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetObjAclReq.acls)
  return acls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
SetObjAclReq::mutable_acls() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.SetObjAclReq.acls)
  return &acls_;
}
inline const ::ClientCos::AclInfo& SetObjAclReq::_internal_acls(int index) const {
  return acls_.Get(index);
}
inline const ::ClientCos::AclInfo& SetObjAclReq::acls(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.SetObjAclReq.acls)
  return _internal_acls(index);
}
inline ::ClientCos::AclInfo* SetObjAclReq::_internal_add_acls() {
  return acls_.Add();
}
inline ::ClientCos::AclInfo* SetObjAclReq::add_acls() {
  // @@protoc_insertion_point(field_add:ClientCos.SetObjAclReq.acls)
  return _internal_add_acls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
SetObjAclReq::acls() const {
  // @@protoc_insertion_point(field_list:ClientCos.SetObjAclReq.acls)
  return acls_;
}

// -------------------------------------------------------------------

// SetObjAclRsp

// -------------------------------------------------------------------

// GetObjAclReq

// required bytes path = 1;
inline bool GetObjAclReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetObjAclReq::has_path() const {
  return _internal_has_path();
}
inline void GetObjAclReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetObjAclReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetObjAclReq.path)
  return _internal_path();
}
inline void GetObjAclReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.GetObjAclReq.path)
}
inline std::string* GetObjAclReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetObjAclReq.path)
  return _internal_mutable_path();
}
inline const std::string& GetObjAclReq::_internal_path() const {
  return path_.Get();
}
inline void GetObjAclReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetObjAclReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.GetObjAclReq.path)
}
inline void GetObjAclReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.GetObjAclReq.path)
}
inline void GetObjAclReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.GetObjAclReq.path)
}
inline std::string* GetObjAclReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetObjAclReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.GetObjAclReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetObjAclReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetObjAclReq.path)
}

// optional bytes version = 2;
inline bool GetObjAclReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetObjAclReq::has_version() const {
  return _internal_has_version();
}
inline void GetObjAclReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetObjAclReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetObjAclReq.version)
  return _internal_version();
}
inline void GetObjAclReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.GetObjAclReq.version)
}
inline std::string* GetObjAclReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetObjAclReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetObjAclReq::_internal_version() const {
  return version_.Get();
}
inline void GetObjAclReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetObjAclReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.GetObjAclReq.version)
}
inline void GetObjAclReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.GetObjAclReq.version)
}
inline void GetObjAclReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.GetObjAclReq.version)
}
inline std::string* GetObjAclReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetObjAclReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.GetObjAclReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetObjAclReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetObjAclReq.version)
}

// -------------------------------------------------------------------

// GetObjAclRsp

// repeated .ClientCos.AclInfo acls = 1;
inline int GetObjAclRsp::_internal_acls_size() const {
  return acls_.size();
}
inline int GetObjAclRsp::acls_size() const {
  return _internal_acls_size();
}
inline void GetObjAclRsp::clear_acls() {
  acls_.Clear();
}
inline ::ClientCos::AclInfo* GetObjAclRsp::mutable_acls(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetObjAclRsp.acls)
  return acls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >*
GetObjAclRsp::mutable_acls() {
  // @@protoc_insertion_point(field_mutable_list:ClientCos.GetObjAclRsp.acls)
  return &acls_;
}
inline const ::ClientCos::AclInfo& GetObjAclRsp::_internal_acls(int index) const {
  return acls_.Get(index);
}
inline const ::ClientCos::AclInfo& GetObjAclRsp::acls(int index) const {
  // @@protoc_insertion_point(field_get:ClientCos.GetObjAclRsp.acls)
  return _internal_acls(index);
}
inline ::ClientCos::AclInfo* GetObjAclRsp::_internal_add_acls() {
  return acls_.Add();
}
inline ::ClientCos::AclInfo* GetObjAclRsp::add_acls() {
  // @@protoc_insertion_point(field_add:ClientCos.GetObjAclRsp.acls)
  return _internal_add_acls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCos::AclInfo >&
GetObjAclRsp::acls() const {
  // @@protoc_insertion_point(field_list:ClientCos.GetObjAclRsp.acls)
  return acls_;
}

// optional .ClientCos.OwnerInfo owner = 2;
inline bool GetObjAclRsp::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_ != nullptr);
  return value;
}
inline bool GetObjAclRsp::has_owner() const {
  return _internal_has_owner();
}
inline void GetObjAclRsp::clear_owner() {
  if (owner_ != nullptr) owner_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::OwnerInfo& GetObjAclRsp::_internal_owner() const {
  const ::ClientCos::OwnerInfo* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& GetObjAclRsp::owner() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetObjAclRsp.owner)
  return _internal_owner();
}
inline void GetObjAclRsp::unsafe_arena_set_allocated_owner(
    ::ClientCos::OwnerInfo* owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.GetObjAclRsp.owner)
}
inline ::ClientCos::OwnerInfo* GetObjAclRsp::release_owner() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* GetObjAclRsp::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:ClientCos.GetObjAclRsp.owner)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::OwnerInfo* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* GetObjAclRsp::_internal_mutable_owner() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    owner_ = p;
  }
  return owner_;
}
inline ::ClientCos::OwnerInfo* GetObjAclRsp::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetObjAclRsp.owner)
  return _internal_mutable_owner();
}
inline void GetObjAclRsp::set_allocated_owner(::ClientCos::OwnerInfo* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetObjAclRsp.owner)
}

// -------------------------------------------------------------------

// SetBucketUinReq

// required bytes path = 1;
inline bool SetBucketUinReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBucketUinReq::has_path() const {
  return _internal_has_path();
}
inline void SetBucketUinReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetBucketUinReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketUinReq.path)
  return _internal_path();
}
inline void SetBucketUinReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketUinReq.path)
}
inline std::string* SetBucketUinReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketUinReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetBucketUinReq::_internal_path() const {
  return path_.Get();
}
inline void SetBucketUinReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBucketUinReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetBucketUinReq.path)
}
inline void SetBucketUinReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetBucketUinReq.path)
}
inline void SetBucketUinReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetBucketUinReq.path)
}
inline std::string* SetBucketUinReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBucketUinReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketUinReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBucketUinReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketUinReq.path)
}

// optional .ClientCos.OwnerInfo bucketOwner = 2;
inline bool SetBucketUinReq::_internal_has_bucketowner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bucketowner_ != nullptr);
  return value;
}
inline bool SetBucketUinReq::has_bucketowner() const {
  return _internal_has_bucketowner();
}
inline void SetBucketUinReq::clear_bucketowner() {
  if (bucketowner_ != nullptr) bucketowner_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::OwnerInfo& SetBucketUinReq::_internal_bucketowner() const {
  const ::ClientCos::OwnerInfo* p = bucketowner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& SetBucketUinReq::bucketowner() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketUinReq.bucketOwner)
  return _internal_bucketowner();
}
inline void SetBucketUinReq::unsafe_arena_set_allocated_bucketowner(
    ::ClientCos::OwnerInfo* bucketowner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketowner_);
  }
  bucketowner_ = bucketowner;
  if (bucketowner) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SetBucketUinReq.bucketOwner)
}
inline ::ClientCos::OwnerInfo* SetBucketUinReq::release_bucketowner() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* SetBucketUinReq::unsafe_arena_release_bucketowner() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketUinReq.bucketOwner)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* SetBucketUinReq::_internal_mutable_bucketowner() {
  _has_bits_[0] |= 0x00000002u;
  if (bucketowner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    bucketowner_ = p;
  }
  return bucketowner_;
}
inline ::ClientCos::OwnerInfo* SetBucketUinReq::mutable_bucketowner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketUinReq.bucketOwner)
  return _internal_mutable_bucketowner();
}
inline void SetBucketUinReq::set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketowner_;
  }
  if (bucketowner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketowner);
    if (message_arena != submessage_arena) {
      bucketowner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketowner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bucketowner_ = bucketowner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketUinReq.bucketOwner)
}

// -------------------------------------------------------------------

// SetBucketUinRsp

// -------------------------------------------------------------------

// GetBucketUinReq

// required bytes path = 1;
inline bool GetBucketUinReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBucketUinReq::has_path() const {
  return _internal_has_path();
}
inline void GetBucketUinReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBucketUinReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetBucketUinReq.path)
  return _internal_path();
}
inline void GetBucketUinReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.GetBucketUinReq.path)
}
inline std::string* GetBucketUinReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetBucketUinReq.path)
  return _internal_mutable_path();
}
inline const std::string& GetBucketUinReq::_internal_path() const {
  return path_.Get();
}
inline void GetBucketUinReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetBucketUinReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.GetBucketUinReq.path)
}
inline void GetBucketUinReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.GetBucketUinReq.path)
}
inline void GetBucketUinReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.GetBucketUinReq.path)
}
inline std::string* GetBucketUinReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetBucketUinReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.GetBucketUinReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBucketUinReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetBucketUinReq.path)
}

// -------------------------------------------------------------------

// GetBucketUinRsp

// optional .ClientCos.OwnerInfo bucketOwner = 2;
inline bool GetBucketUinRsp::_internal_has_bucketowner() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bucketowner_ != nullptr);
  return value;
}
inline bool GetBucketUinRsp::has_bucketowner() const {
  return _internal_has_bucketowner();
}
inline void GetBucketUinRsp::clear_bucketowner() {
  if (bucketowner_ != nullptr) bucketowner_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::OwnerInfo& GetBucketUinRsp::_internal_bucketowner() const {
  const ::ClientCos::OwnerInfo* p = bucketowner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::OwnerInfo&>(
      ::ClientCos::_OwnerInfo_default_instance_);
}
inline const ::ClientCos::OwnerInfo& GetBucketUinRsp::bucketowner() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetBucketUinRsp.bucketOwner)
  return _internal_bucketowner();
}
inline void GetBucketUinRsp::unsafe_arena_set_allocated_bucketowner(
    ::ClientCos::OwnerInfo* bucketowner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketowner_);
  }
  bucketowner_ = bucketowner;
  if (bucketowner) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.GetBucketUinRsp.bucketOwner)
}
inline ::ClientCos::OwnerInfo* GetBucketUinRsp::release_bucketowner() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::OwnerInfo* GetBucketUinRsp::unsafe_arena_release_bucketowner() {
  // @@protoc_insertion_point(field_release:ClientCos.GetBucketUinRsp.bucketOwner)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::OwnerInfo* temp = bucketowner_;
  bucketowner_ = nullptr;
  return temp;
}
inline ::ClientCos::OwnerInfo* GetBucketUinRsp::_internal_mutable_bucketowner() {
  _has_bits_[0] |= 0x00000001u;
  if (bucketowner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::OwnerInfo>(GetArena());
    bucketowner_ = p;
  }
  return bucketowner_;
}
inline ::ClientCos::OwnerInfo* GetBucketUinRsp::mutable_bucketowner() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetBucketUinRsp.bucketOwner)
  return _internal_mutable_bucketowner();
}
inline void GetBucketUinRsp::set_allocated_bucketowner(::ClientCos::OwnerInfo* bucketowner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bucketowner_;
  }
  if (bucketowner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bucketowner);
    if (message_arena != submessage_arena) {
      bucketowner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketowner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bucketowner_ = bucketowner;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetBucketUinRsp.bucketOwner)
}

// -------------------------------------------------------------------

// SetBucketLockReq

// required bytes path = 1;
inline bool SetBucketLockReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBucketLockReq::has_path() const {
  return _internal_has_path();
}
inline void SetBucketLockReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetBucketLockReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketLockReq.path)
  return _internal_path();
}
inline void SetBucketLockReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketLockReq.path)
}
inline std::string* SetBucketLockReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketLockReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetBucketLockReq::_internal_path() const {
  return path_.Get();
}
inline void SetBucketLockReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBucketLockReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetBucketLockReq.path)
}
inline void SetBucketLockReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetBucketLockReq.path)
}
inline void SetBucketLockReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetBucketLockReq.path)
}
inline std::string* SetBucketLockReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBucketLockReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketLockReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBucketLockReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketLockReq.path)
}

// optional .ClientCos.LockInfo lockinfo = 2;
inline bool SetBucketLockReq::_internal_has_lockinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lockinfo_ != nullptr);
  return value;
}
inline bool SetBucketLockReq::has_lockinfo() const {
  return _internal_has_lockinfo();
}
inline void SetBucketLockReq::clear_lockinfo() {
  if (lockinfo_ != nullptr) lockinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientCos::LockInfo& SetBucketLockReq::_internal_lockinfo() const {
  const ::ClientCos::LockInfo* p = lockinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::LockInfo&>(
      ::ClientCos::_LockInfo_default_instance_);
}
inline const ::ClientCos::LockInfo& SetBucketLockReq::lockinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketLockReq.lockinfo)
  return _internal_lockinfo();
}
inline void SetBucketLockReq::unsafe_arena_set_allocated_lockinfo(
    ::ClientCos::LockInfo* lockinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockinfo_);
  }
  lockinfo_ = lockinfo;
  if (lockinfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.SetBucketLockReq.lockinfo)
}
inline ::ClientCos::LockInfo* SetBucketLockReq::release_lockinfo() {
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::LockInfo* SetBucketLockReq::unsafe_arena_release_lockinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketLockReq.lockinfo)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::LockInfo* SetBucketLockReq::_internal_mutable_lockinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (lockinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::LockInfo>(GetArena());
    lockinfo_ = p;
  }
  return lockinfo_;
}
inline ::ClientCos::LockInfo* SetBucketLockReq::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketLockReq.lockinfo)
  return _internal_mutable_lockinfo();
}
inline void SetBucketLockReq::set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lockinfo_;
  }
  if (lockinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lockinfo);
    if (message_arena != submessage_arena) {
      lockinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lockinfo_ = lockinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketLockReq.lockinfo)
}

// -------------------------------------------------------------------

// SetBucketLockRsp

// -------------------------------------------------------------------

// GetBucketLockReq

// required bytes path = 1;
inline bool GetBucketLockReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBucketLockReq::has_path() const {
  return _internal_has_path();
}
inline void GetBucketLockReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBucketLockReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetBucketLockReq.path)
  return _internal_path();
}
inline void GetBucketLockReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.GetBucketLockReq.path)
}
inline std::string* GetBucketLockReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetBucketLockReq.path)
  return _internal_mutable_path();
}
inline const std::string& GetBucketLockReq::_internal_path() const {
  return path_.Get();
}
inline void GetBucketLockReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetBucketLockReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.GetBucketLockReq.path)
}
inline void GetBucketLockReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.GetBucketLockReq.path)
}
inline void GetBucketLockReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.GetBucketLockReq.path)
}
inline std::string* GetBucketLockReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetBucketLockReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.GetBucketLockReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBucketLockReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetBucketLockReq.path)
}

// -------------------------------------------------------------------

// GetBucketLockRsp

// optional .ClientCos.LockInfo lockinfo = 1;
inline bool GetBucketLockRsp::_internal_has_lockinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lockinfo_ != nullptr);
  return value;
}
inline bool GetBucketLockRsp::has_lockinfo() const {
  return _internal_has_lockinfo();
}
inline void GetBucketLockRsp::clear_lockinfo() {
  if (lockinfo_ != nullptr) lockinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientCos::LockInfo& GetBucketLockRsp::_internal_lockinfo() const {
  const ::ClientCos::LockInfo* p = lockinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientCos::LockInfo&>(
      ::ClientCos::_LockInfo_default_instance_);
}
inline const ::ClientCos::LockInfo& GetBucketLockRsp::lockinfo() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetBucketLockRsp.lockinfo)
  return _internal_lockinfo();
}
inline void GetBucketLockRsp::unsafe_arena_set_allocated_lockinfo(
    ::ClientCos::LockInfo* lockinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockinfo_);
  }
  lockinfo_ = lockinfo;
  if (lockinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientCos.GetBucketLockRsp.lockinfo)
}
inline ::ClientCos::LockInfo* GetBucketLockRsp::release_lockinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ClientCos::LockInfo* GetBucketLockRsp::unsafe_arena_release_lockinfo() {
  // @@protoc_insertion_point(field_release:ClientCos.GetBucketLockRsp.lockinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientCos::LockInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  return temp;
}
inline ::ClientCos::LockInfo* GetBucketLockRsp::_internal_mutable_lockinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (lockinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientCos::LockInfo>(GetArena());
    lockinfo_ = p;
  }
  return lockinfo_;
}
inline ::ClientCos::LockInfo* GetBucketLockRsp::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetBucketLockRsp.lockinfo)
  return _internal_mutable_lockinfo();
}
inline void GetBucketLockRsp::set_allocated_lockinfo(::ClientCos::LockInfo* lockinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lockinfo_;
  }
  if (lockinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lockinfo);
    if (message_arena != submessage_arena) {
      lockinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lockinfo_ = lockinfo;
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetBucketLockRsp.lockinfo)
}

// -------------------------------------------------------------------

// SetBucketInventoryReq

// required bytes path = 1;
inline bool SetBucketInventoryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBucketInventoryReq::has_path() const {
  return _internal_has_path();
}
inline void SetBucketInventoryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetBucketInventoryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketInventoryReq.path)
  return _internal_path();
}
inline void SetBucketInventoryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketInventoryReq.path)
}
inline std::string* SetBucketInventoryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketInventoryReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetBucketInventoryReq::_internal_path() const {
  return path_.Get();
}
inline void SetBucketInventoryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBucketInventoryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetBucketInventoryReq.path)
}
inline void SetBucketInventoryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetBucketInventoryReq.path)
}
inline void SetBucketInventoryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetBucketInventoryReq.path)
}
inline std::string* SetBucketInventoryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBucketInventoryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketInventoryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBucketInventoryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketInventoryReq.path)
}

// optional bytes inventory = 2;
inline bool SetBucketInventoryReq::_internal_has_inventory() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetBucketInventoryReq::has_inventory() const {
  return _internal_has_inventory();
}
inline void SetBucketInventoryReq::clear_inventory() {
  inventory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetBucketInventoryReq::inventory() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetBucketInventoryReq.inventory)
  return _internal_inventory();
}
inline void SetBucketInventoryReq::set_inventory(const std::string& value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetBucketInventoryReq.inventory)
}
inline std::string* SetBucketInventoryReq::mutable_inventory() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetBucketInventoryReq.inventory)
  return _internal_mutable_inventory();
}
inline const std::string& SetBucketInventoryReq::_internal_inventory() const {
  return inventory_.Get();
}
inline void SetBucketInventoryReq::_internal_set_inventory(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBucketInventoryReq::set_inventory(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  inventory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetBucketInventoryReq.inventory)
}
inline void SetBucketInventoryReq::set_inventory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetBucketInventoryReq.inventory)
}
inline void SetBucketInventoryReq::set_inventory(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetBucketInventoryReq.inventory)
}
inline std::string* SetBucketInventoryReq::_internal_mutable_inventory() {
  _has_bits_[0] |= 0x00000002u;
  return inventory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBucketInventoryReq::release_inventory() {
  // @@protoc_insertion_point(field_release:ClientCos.SetBucketInventoryReq.inventory)
  if (!_internal_has_inventory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return inventory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBucketInventoryReq::set_allocated_inventory(std::string* inventory) {
  if (inventory != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inventory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetBucketInventoryReq.inventory)
}

// -------------------------------------------------------------------

// SetBucketInventoryRsp

// -------------------------------------------------------------------

// GetBucketInventoryReq

// required bytes path = 1;
inline bool GetBucketInventoryReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBucketInventoryReq::has_path() const {
  return _internal_has_path();
}
inline void GetBucketInventoryReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBucketInventoryReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetBucketInventoryReq.path)
  return _internal_path();
}
inline void GetBucketInventoryReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.GetBucketInventoryReq.path)
}
inline std::string* GetBucketInventoryReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetBucketInventoryReq.path)
  return _internal_mutable_path();
}
inline const std::string& GetBucketInventoryReq::_internal_path() const {
  return path_.Get();
}
inline void GetBucketInventoryReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetBucketInventoryReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.GetBucketInventoryReq.path)
}
inline void GetBucketInventoryReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.GetBucketInventoryReq.path)
}
inline void GetBucketInventoryReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.GetBucketInventoryReq.path)
}
inline std::string* GetBucketInventoryReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetBucketInventoryReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.GetBucketInventoryReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBucketInventoryReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetBucketInventoryReq.path)
}

// -------------------------------------------------------------------

// GetBucketInventoryRsp

// optional bytes inventory = 1;
inline bool GetBucketInventoryRsp::_internal_has_inventory() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBucketInventoryRsp::has_inventory() const {
  return _internal_has_inventory();
}
inline void GetBucketInventoryRsp::clear_inventory() {
  inventory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBucketInventoryRsp::inventory() const {
  // @@protoc_insertion_point(field_get:ClientCos.GetBucketInventoryRsp.inventory)
  return _internal_inventory();
}
inline void GetBucketInventoryRsp::set_inventory(const std::string& value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:ClientCos.GetBucketInventoryRsp.inventory)
}
inline std::string* GetBucketInventoryRsp::mutable_inventory() {
  // @@protoc_insertion_point(field_mutable:ClientCos.GetBucketInventoryRsp.inventory)
  return _internal_mutable_inventory();
}
inline const std::string& GetBucketInventoryRsp::_internal_inventory() const {
  return inventory_.Get();
}
inline void GetBucketInventoryRsp::_internal_set_inventory(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetBucketInventoryRsp::set_inventory(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  inventory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.GetBucketInventoryRsp.inventory)
}
inline void GetBucketInventoryRsp::set_inventory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.GetBucketInventoryRsp.inventory)
}
inline void GetBucketInventoryRsp::set_inventory(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  inventory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.GetBucketInventoryRsp.inventory)
}
inline std::string* GetBucketInventoryRsp::_internal_mutable_inventory() {
  _has_bits_[0] |= 0x00000001u;
  return inventory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetBucketInventoryRsp::release_inventory() {
  // @@protoc_insertion_point(field_release:ClientCos.GetBucketInventoryRsp.inventory)
  if (!_internal_has_inventory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return inventory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBucketInventoryRsp::set_allocated_inventory(std::string* inventory) {
  if (inventory != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inventory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.GetBucketInventoryRsp.inventory)
}

// -------------------------------------------------------------------

// COSTransToCASReq

// required bytes path = 1;
inline bool COSTransToCASReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool COSTransToCASReq::has_path() const {
  return _internal_has_path();
}
inline void COSTransToCASReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& COSTransToCASReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.COSTransToCASReq.path)
  return _internal_path();
}
inline void COSTransToCASReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.COSTransToCASReq.path)
}
inline std::string* COSTransToCASReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.COSTransToCASReq.path)
  return _internal_mutable_path();
}
inline const std::string& COSTransToCASReq::_internal_path() const {
  return path_.Get();
}
inline void COSTransToCASReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void COSTransToCASReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.COSTransToCASReq.path)
}
inline void COSTransToCASReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.COSTransToCASReq.path)
}
inline void COSTransToCASReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.COSTransToCASReq.path)
}
inline std::string* COSTransToCASReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* COSTransToCASReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.COSTransToCASReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void COSTransToCASReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.COSTransToCASReq.path)
}

// optional bytes version = 2;
inline bool COSTransToCASReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool COSTransToCASReq::has_version() const {
  return _internal_has_version();
}
inline void COSTransToCASReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& COSTransToCASReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.COSTransToCASReq.version)
  return _internal_version();
}
inline void COSTransToCASReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.COSTransToCASReq.version)
}
inline std::string* COSTransToCASReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.COSTransToCASReq.version)
  return _internal_mutable_version();
}
inline const std::string& COSTransToCASReq::_internal_version() const {
  return version_.Get();
}
inline void COSTransToCASReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void COSTransToCASReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.COSTransToCASReq.version)
}
inline void COSTransToCASReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.COSTransToCASReq.version)
}
inline void COSTransToCASReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.COSTransToCASReq.version)
}
inline std::string* COSTransToCASReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* COSTransToCASReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.COSTransToCASReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void COSTransToCASReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.COSTransToCASReq.version)
}

// optional bool switch_flag = 3;
inline bool COSTransToCASReq::_internal_has_switch_flag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool COSTransToCASReq::has_switch_flag() const {
  return _internal_has_switch_flag();
}
inline void COSTransToCASReq::clear_switch_flag() {
  switch_flag_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool COSTransToCASReq::_internal_switch_flag() const {
  return switch_flag_;
}
inline bool COSTransToCASReq::switch_flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.COSTransToCASReq.switch_flag)
  return _internal_switch_flag();
}
inline void COSTransToCASReq::_internal_set_switch_flag(bool value) {
  _has_bits_[0] |= 0x00000008u;
  switch_flag_ = value;
}
inline void COSTransToCASReq::set_switch_flag(bool value) {
  _internal_set_switch_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.COSTransToCASReq.switch_flag)
}

// optional bytes sk = 4;
inline bool COSTransToCASReq::_internal_has_sk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool COSTransToCASReq::has_sk() const {
  return _internal_has_sk();
}
inline void COSTransToCASReq::clear_sk() {
  sk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& COSTransToCASReq::sk() const {
  // @@protoc_insertion_point(field_get:ClientCos.COSTransToCASReq.sk)
  return _internal_sk();
}
inline void COSTransToCASReq::set_sk(const std::string& value) {
  _internal_set_sk(value);
  // @@protoc_insertion_point(field_set:ClientCos.COSTransToCASReq.sk)
}
inline std::string* COSTransToCASReq::mutable_sk() {
  // @@protoc_insertion_point(field_mutable:ClientCos.COSTransToCASReq.sk)
  return _internal_mutable_sk();
}
inline const std::string& COSTransToCASReq::_internal_sk() const {
  return sk_.Get();
}
inline void COSTransToCASReq::_internal_set_sk(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void COSTransToCASReq::set_sk(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.COSTransToCASReq.sk)
}
inline void COSTransToCASReq::set_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.COSTransToCASReq.sk)
}
inline void COSTransToCASReq::set_sk(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.COSTransToCASReq.sk)
}
inline std::string* COSTransToCASReq::_internal_mutable_sk() {
  _has_bits_[0] |= 0x00000004u;
  return sk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* COSTransToCASReq::release_sk() {
  // @@protoc_insertion_point(field_release:ClientCos.COSTransToCASReq.sk)
  if (!_internal_has_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void COSTransToCASReq::set_allocated_sk(std::string* sk) {
  if (sk != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.COSTransToCASReq.sk)
}

// optional uint32 check_mtime = 5;
inline bool COSTransToCASReq::_internal_has_check_mtime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool COSTransToCASReq::has_check_mtime() const {
  return _internal_has_check_mtime();
}
inline void COSTransToCASReq::clear_check_mtime() {
  check_mtime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 COSTransToCASReq::_internal_check_mtime() const {
  return check_mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 COSTransToCASReq::check_mtime() const {
  // @@protoc_insertion_point(field_get:ClientCos.COSTransToCASReq.check_mtime)
  return _internal_check_mtime();
}
inline void COSTransToCASReq::_internal_set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  check_mtime_ = value;
}
inline void COSTransToCASReq::set_check_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_check_mtime(value);
  // @@protoc_insertion_point(field_set:ClientCos.COSTransToCASReq.check_mtime)
}

// -------------------------------------------------------------------

// COSTransToCASRsp

// -------------------------------------------------------------------

// ListDirectReq

// optional string prefix = 1;
inline bool ListDirectReq::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListDirectReq::has_prefix() const {
  return _internal_has_prefix();
}
inline void ListDirectReq::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListDirectReq::prefix() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.prefix)
  return _internal_prefix();
}
inline void ListDirectReq::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.prefix)
}
inline std::string* ListDirectReq::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListDirectReq.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& ListDirectReq::_internal_prefix() const {
  return prefix_.Get();
}
inline void ListDirectReq::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDirectReq::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListDirectReq.prefix)
}
inline void ListDirectReq::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListDirectReq.prefix)
}
inline void ListDirectReq::set_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListDirectReq.prefix)
}
inline std::string* ListDirectReq::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDirectReq::release_prefix() {
  // @@protoc_insertion_point(field_release:ClientCos.ListDirectReq.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDirectReq::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListDirectReq.prefix)
}

// optional string marker = 2 [default = ""];
inline bool ListDirectReq::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListDirectReq::has_marker() const {
  return _internal_has_marker();
}
inline void ListDirectReq::clear_marker() {
  marker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListDirectReq::marker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.marker)
  return _internal_marker();
}
inline void ListDirectReq::set_marker(const std::string& value) {
  _internal_set_marker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.marker)
}
inline std::string* ListDirectReq::mutable_marker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListDirectReq.marker)
  return _internal_mutable_marker();
}
inline const std::string& ListDirectReq::_internal_marker() const {
  return marker_.Get();
}
inline void ListDirectReq::_internal_set_marker(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDirectReq::set_marker(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  marker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListDirectReq.marker)
}
inline void ListDirectReq::set_marker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  marker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListDirectReq.marker)
}
inline void ListDirectReq::set_marker(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  marker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListDirectReq.marker)
}
inline std::string* ListDirectReq::_internal_mutable_marker() {
  _has_bits_[0] |= 0x00000002u;
  return marker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDirectReq::release_marker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListDirectReq.marker)
  if (!_internal_has_marker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return marker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDirectReq::set_allocated_marker(std::string* marker) {
  if (marker != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  marker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListDirectReq.marker)
}

// optional string submarker = 3 [default = ""];
inline bool ListDirectReq::_internal_has_submarker() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListDirectReq::has_submarker() const {
  return _internal_has_submarker();
}
inline void ListDirectReq::clear_submarker() {
  submarker_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ListDirectReq::submarker() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.submarker)
  return _internal_submarker();
}
inline void ListDirectReq::set_submarker(const std::string& value) {
  _internal_set_submarker(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.submarker)
}
inline std::string* ListDirectReq::mutable_submarker() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListDirectReq.submarker)
  return _internal_mutable_submarker();
}
inline const std::string& ListDirectReq::_internal_submarker() const {
  return submarker_.Get();
}
inline void ListDirectReq::_internal_set_submarker(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  submarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDirectReq::set_submarker(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  submarker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListDirectReq.submarker)
}
inline void ListDirectReq::set_submarker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  submarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListDirectReq.submarker)
}
inline void ListDirectReq::set_submarker(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  submarker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListDirectReq.submarker)
}
inline std::string* ListDirectReq::_internal_mutable_submarker() {
  _has_bits_[0] |= 0x00000004u;
  return submarker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDirectReq::release_submarker() {
  // @@protoc_insertion_point(field_release:ClientCos.ListDirectReq.submarker)
  if (!_internal_has_submarker()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return submarker_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDirectReq::set_allocated_submarker(std::string* submarker) {
  if (submarker != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  submarker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submarker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListDirectReq.submarker)
}

// optional string delimiter = 4 [default = ""];
inline bool ListDirectReq::_internal_has_delimiter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ListDirectReq::has_delimiter() const {
  return _internal_has_delimiter();
}
inline void ListDirectReq::clear_delimiter() {
  delimiter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ListDirectReq::delimiter() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.delimiter)
  return _internal_delimiter();
}
inline void ListDirectReq::set_delimiter(const std::string& value) {
  _internal_set_delimiter(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.delimiter)
}
inline std::string* ListDirectReq::mutable_delimiter() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListDirectReq.delimiter)
  return _internal_mutable_delimiter();
}
inline const std::string& ListDirectReq::_internal_delimiter() const {
  return delimiter_.Get();
}
inline void ListDirectReq::_internal_set_delimiter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDirectReq::set_delimiter(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListDirectReq.delimiter)
}
inline void ListDirectReq::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListDirectReq.delimiter)
}
inline void ListDirectReq::set_delimiter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListDirectReq.delimiter)
}
inline std::string* ListDirectReq::_internal_mutable_delimiter() {
  _has_bits_[0] |= 0x00000008u;
  return delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDirectReq::release_delimiter() {
  // @@protoc_insertion_point(field_release:ClientCos.ListDirectReq.delimiter)
  if (!_internal_has_delimiter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return delimiter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDirectReq::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListDirectReq.delimiter)
}

// optional uint32 count = 5 [default = 200];
inline bool ListDirectReq::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ListDirectReq::has_count() const {
  return _internal_has_count();
}
inline void ListDirectReq::clear_count() {
  count_ = 200u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDirectReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDirectReq::count() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.count)
  return _internal_count();
}
inline void ListDirectReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  count_ = value;
}
inline void ListDirectReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.count)
}

// optional bool flag = 6 [default = false];
inline bool ListDirectReq::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ListDirectReq::has_flag() const {
  return _internal_has_flag();
}
inline void ListDirectReq::clear_flag() {
  flag_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ListDirectReq::_internal_flag() const {
  return flag_;
}
inline bool ListDirectReq::flag() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.flag)
  return _internal_flag();
}
inline void ListDirectReq::_internal_set_flag(bool value) {
  _has_bits_[0] |= 0x00000020u;
  flag_ = value;
}
inline void ListDirectReq::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.flag)
}

// optional .ClientCos.ListDirectReq.ListType type = 7 [default = LIST];
inline bool ListDirectReq::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ListDirectReq::has_type() const {
  return _internal_has_type();
}
inline void ListDirectReq::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ClientCos::ListDirectReq_ListType ListDirectReq::_internal_type() const {
  return static_cast< ::ClientCos::ListDirectReq_ListType >(type_);
}
inline ::ClientCos::ListDirectReq_ListType ListDirectReq::type() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.type)
  return _internal_type();
}
inline void ListDirectReq::_internal_set_type(::ClientCos::ListDirectReq_ListType value) {
  assert(::ClientCos::ListDirectReq_ListType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void ListDirectReq::set_type(::ClientCos::ListDirectReq_ListType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.type)
}

// optional string bad_ip = 10;
inline bool ListDirectReq::_internal_has_bad_ip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ListDirectReq::has_bad_ip() const {
  return _internal_has_bad_ip();
}
inline void ListDirectReq::clear_bad_ip() {
  bad_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ListDirectReq::bad_ip() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.bad_ip)
  return _internal_bad_ip();
}
inline void ListDirectReq::set_bad_ip(const std::string& value) {
  _internal_set_bad_ip(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.bad_ip)
}
inline std::string* ListDirectReq::mutable_bad_ip() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListDirectReq.bad_ip)
  return _internal_mutable_bad_ip();
}
inline const std::string& ListDirectReq::_internal_bad_ip() const {
  return bad_ip_.Get();
}
inline void ListDirectReq::_internal_set_bad_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bad_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDirectReq::set_bad_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  bad_ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListDirectReq.bad_ip)
}
inline void ListDirectReq::set_bad_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  bad_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListDirectReq.bad_ip)
}
inline void ListDirectReq::set_bad_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  bad_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListDirectReq.bad_ip)
}
inline std::string* ListDirectReq::_internal_mutable_bad_ip() {
  _has_bits_[0] |= 0x00000010u;
  return bad_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDirectReq::release_bad_ip() {
  // @@protoc_insertion_point(field_release:ClientCos.ListDirectReq.bad_ip)
  if (!_internal_has_bad_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return bad_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDirectReq::set_allocated_bad_ip(std::string* bad_ip) {
  if (bad_ip != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bad_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bad_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListDirectReq.bad_ip)
}

// optional uint32 bad_port = 11;
inline bool ListDirectReq::_internal_has_bad_port() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ListDirectReq::has_bad_port() const {
  return _internal_has_bad_port();
}
inline void ListDirectReq::clear_bad_port() {
  bad_port_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDirectReq::_internal_bad_port() const {
  return bad_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDirectReq::bad_port() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectReq.bad_port)
  return _internal_bad_port();
}
inline void ListDirectReq::_internal_set_bad_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  bad_port_ = value;
}
inline void ListDirectReq::set_bad_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bad_port(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectReq.bad_port)
}

// -------------------------------------------------------------------

// ListDirectRsp

// required string ip = 1;
inline bool ListDirectRsp::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListDirectRsp::has_ip() const {
  return _internal_has_ip();
}
inline void ListDirectRsp::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListDirectRsp::ip() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectRsp.ip)
  return _internal_ip();
}
inline void ListDirectRsp::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectRsp.ip)
}
inline std::string* ListDirectRsp::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:ClientCos.ListDirectRsp.ip)
  return _internal_mutable_ip();
}
inline const std::string& ListDirectRsp::_internal_ip() const {
  return ip_.Get();
}
inline void ListDirectRsp::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDirectRsp::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.ListDirectRsp.ip)
}
inline void ListDirectRsp::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.ListDirectRsp.ip)
}
inline void ListDirectRsp::set_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.ListDirectRsp.ip)
}
inline std::string* ListDirectRsp::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDirectRsp::release_ip() {
  // @@protoc_insertion_point(field_release:ClientCos.ListDirectRsp.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDirectRsp::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.ListDirectRsp.ip)
}

// optional uint32 port = 2;
inline bool ListDirectRsp::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListDirectRsp::has_port() const {
  return _internal_has_port();
}
inline void ListDirectRsp::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDirectRsp::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDirectRsp::port() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectRsp.port)
  return _internal_port();
}
inline void ListDirectRsp::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void ListDirectRsp::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectRsp.port)
}

// optional int32 term = 3;
inline bool ListDirectRsp::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListDirectRsp::has_term() const {
  return _internal_has_term();
}
inline void ListDirectRsp::clear_term() {
  term_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDirectRsp::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDirectRsp::term() const {
  // @@protoc_insertion_point(field_get:ClientCos.ListDirectRsp.term)
  return _internal_term();
}
inline void ListDirectRsp::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  term_ = value;
}
inline void ListDirectRsp::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:ClientCos.ListDirectRsp.term)
}

// -------------------------------------------------------------------

// MigrateFinFileReq

// required bytes path = 1;
inline bool MigrateFinFileReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MigrateFinFileReq::has_path() const {
  return _internal_has_path();
}
inline void MigrateFinFileReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MigrateFinFileReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.MigrateFinFileReq.path)
  return _internal_path();
}
inline void MigrateFinFileReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.MigrateFinFileReq.path)
}
inline std::string* MigrateFinFileReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MigrateFinFileReq.path)
  return _internal_mutable_path();
}
inline const std::string& MigrateFinFileReq::_internal_path() const {
  return path_.Get();
}
inline void MigrateFinFileReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MigrateFinFileReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MigrateFinFileReq.path)
}
inline void MigrateFinFileReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MigrateFinFileReq.path)
}
inline void MigrateFinFileReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MigrateFinFileReq.path)
}
inline std::string* MigrateFinFileReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MigrateFinFileReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.MigrateFinFileReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateFinFileReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MigrateFinFileReq.path)
}

// optional bytes version = 2;
inline bool MigrateFinFileReq::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MigrateFinFileReq::has_version() const {
  return _internal_has_version();
}
inline void MigrateFinFileReq::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MigrateFinFileReq::version() const {
  // @@protoc_insertion_point(field_get:ClientCos.MigrateFinFileReq.version)
  return _internal_version();
}
inline void MigrateFinFileReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ClientCos.MigrateFinFileReq.version)
}
inline std::string* MigrateFinFileReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MigrateFinFileReq.version)
  return _internal_mutable_version();
}
inline const std::string& MigrateFinFileReq::_internal_version() const {
  return version_.Get();
}
inline void MigrateFinFileReq::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MigrateFinFileReq::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MigrateFinFileReq.version)
}
inline void MigrateFinFileReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MigrateFinFileReq.version)
}
inline void MigrateFinFileReq::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MigrateFinFileReq.version)
}
inline std::string* MigrateFinFileReq::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MigrateFinFileReq::release_version() {
  // @@protoc_insertion_point(field_release:ClientCos.MigrateFinFileReq.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateFinFileReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MigrateFinFileReq.version)
}

// -------------------------------------------------------------------

// MigrateFinFileRsp

// optional bytes filekey = 1;
inline bool MigrateFinFileRsp::_internal_has_filekey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MigrateFinFileRsp::has_filekey() const {
  return _internal_has_filekey();
}
inline void MigrateFinFileRsp::clear_filekey() {
  filekey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MigrateFinFileRsp::filekey() const {
  // @@protoc_insertion_point(field_get:ClientCos.MigrateFinFileRsp.filekey)
  return _internal_filekey();
}
inline void MigrateFinFileRsp::set_filekey(const std::string& value) {
  _internal_set_filekey(value);
  // @@protoc_insertion_point(field_set:ClientCos.MigrateFinFileRsp.filekey)
}
inline std::string* MigrateFinFileRsp::mutable_filekey() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MigrateFinFileRsp.filekey)
  return _internal_mutable_filekey();
}
inline const std::string& MigrateFinFileRsp::_internal_filekey() const {
  return filekey_.Get();
}
inline void MigrateFinFileRsp::_internal_set_filekey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MigrateFinFileRsp::set_filekey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filekey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MigrateFinFileRsp.filekey)
}
inline void MigrateFinFileRsp::set_filekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MigrateFinFileRsp.filekey)
}
inline void MigrateFinFileRsp::set_filekey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MigrateFinFileRsp.filekey)
}
inline std::string* MigrateFinFileRsp::_internal_mutable_filekey() {
  _has_bits_[0] |= 0x00000001u;
  return filekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MigrateFinFileRsp::release_filekey() {
  // @@protoc_insertion_point(field_release:ClientCos.MigrateFinFileRsp.filekey)
  if (!_internal_has_filekey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filekey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateFinFileRsp::set_allocated_filekey(std::string* filekey) {
  if (filekey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MigrateFinFileRsp.filekey)
}

// optional bytes uuid = 2;
inline bool MigrateFinFileRsp::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MigrateFinFileRsp::has_uuid() const {
  return _internal_has_uuid();
}
inline void MigrateFinFileRsp::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MigrateFinFileRsp::uuid() const {
  // @@protoc_insertion_point(field_get:ClientCos.MigrateFinFileRsp.uuid)
  return _internal_uuid();
}
inline void MigrateFinFileRsp::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ClientCos.MigrateFinFileRsp.uuid)
}
inline std::string* MigrateFinFileRsp::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MigrateFinFileRsp.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& MigrateFinFileRsp::_internal_uuid() const {
  return uuid_.Get();
}
inline void MigrateFinFileRsp::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MigrateFinFileRsp::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MigrateFinFileRsp.uuid)
}
inline void MigrateFinFileRsp::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MigrateFinFileRsp.uuid)
}
inline void MigrateFinFileRsp::set_uuid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MigrateFinFileRsp.uuid)
}
inline std::string* MigrateFinFileRsp::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000002u;
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MigrateFinFileRsp::release_uuid() {
  // @@protoc_insertion_point(field_release:ClientCos.MigrateFinFileRsp.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateFinFileRsp::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MigrateFinFileRsp.uuid)
}

// optional uint32 filetype = 3;
inline bool MigrateFinFileRsp::_internal_has_filetype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MigrateFinFileRsp::has_filetype() const {
  return _internal_has_filetype();
}
inline void MigrateFinFileRsp::clear_filetype() {
  filetype_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MigrateFinFileRsp::_internal_filetype() const {
  return filetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MigrateFinFileRsp::filetype() const {
  // @@protoc_insertion_point(field_get:ClientCos.MigrateFinFileRsp.filetype)
  return _internal_filetype();
}
inline void MigrateFinFileRsp::_internal_set_filetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  filetype_ = value;
}
inline void MigrateFinFileRsp::set_filetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:ClientCos.MigrateFinFileRsp.filetype)
}

// -------------------------------------------------------------------

// MigrateUnFinFileReq

// required bytes path = 1;
inline bool MigrateUnFinFileReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MigrateUnFinFileReq::has_path() const {
  return _internal_has_path();
}
inline void MigrateUnFinFileReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MigrateUnFinFileReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.MigrateUnFinFileReq.path)
  return _internal_path();
}
inline void MigrateUnFinFileReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.MigrateUnFinFileReq.path)
}
inline std::string* MigrateUnFinFileReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MigrateUnFinFileReq.path)
  return _internal_mutable_path();
}
inline const std::string& MigrateUnFinFileReq::_internal_path() const {
  return path_.Get();
}
inline void MigrateUnFinFileReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MigrateUnFinFileReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MigrateUnFinFileReq.path)
}
inline void MigrateUnFinFileReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MigrateUnFinFileReq.path)
}
inline void MigrateUnFinFileReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MigrateUnFinFileReq.path)
}
inline std::string* MigrateUnFinFileReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MigrateUnFinFileReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.MigrateUnFinFileReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateUnFinFileReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MigrateUnFinFileReq.path)
}

// optional bytes uploadid = 2;
inline bool MigrateUnFinFileReq::_internal_has_uploadid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MigrateUnFinFileReq::has_uploadid() const {
  return _internal_has_uploadid();
}
inline void MigrateUnFinFileReq::clear_uploadid() {
  uploadid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MigrateUnFinFileReq::uploadid() const {
  // @@protoc_insertion_point(field_get:ClientCos.MigrateUnFinFileReq.uploadid)
  return _internal_uploadid();
}
inline void MigrateUnFinFileReq::set_uploadid(const std::string& value) {
  _internal_set_uploadid(value);
  // @@protoc_insertion_point(field_set:ClientCos.MigrateUnFinFileReq.uploadid)
}
inline std::string* MigrateUnFinFileReq::mutable_uploadid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.MigrateUnFinFileReq.uploadid)
  return _internal_mutable_uploadid();
}
inline const std::string& MigrateUnFinFileReq::_internal_uploadid() const {
  return uploadid_.Get();
}
inline void MigrateUnFinFileReq::_internal_set_uploadid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MigrateUnFinFileReq::set_uploadid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.MigrateUnFinFileReq.uploadid)
}
inline void MigrateUnFinFileReq::set_uploadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.MigrateUnFinFileReq.uploadid)
}
inline void MigrateUnFinFileReq::set_uploadid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uploadid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.MigrateUnFinFileReq.uploadid)
}
inline std::string* MigrateUnFinFileReq::_internal_mutable_uploadid() {
  _has_bits_[0] |= 0x00000002u;
  return uploadid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MigrateUnFinFileReq::release_uploadid() {
  // @@protoc_insertion_point(field_release:ClientCos.MigrateUnFinFileReq.uploadid)
  if (!_internal_has_uploadid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uploadid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateUnFinFileReq::set_allocated_uploadid(std::string* uploadid) {
  if (uploadid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uploadid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.MigrateUnFinFileReq.uploadid)
}

// -------------------------------------------------------------------

// MigrateUnFinFileRsp

// -------------------------------------------------------------------

// SetMigrateReq

// optional bytes path = 1;
inline bool SetMigrateReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetMigrateReq::has_path() const {
  return _internal_has_path();
}
inline void SetMigrateReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetMigrateReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetMigrateReq.path)
  return _internal_path();
}
inline void SetMigrateReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetMigrateReq.path)
}
inline std::string* SetMigrateReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.SetMigrateReq.path)
  return _internal_mutable_path();
}
inline const std::string& SetMigrateReq::_internal_path() const {
  return path_.Get();
}
inline void SetMigrateReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetMigrateReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.SetMigrateReq.path)
}
inline void SetMigrateReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.SetMigrateReq.path)
}
inline void SetMigrateReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.SetMigrateReq.path)
}
inline std::string* SetMigrateReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetMigrateReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.SetMigrateReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetMigrateReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.SetMigrateReq.path)
}

// optional .ClientCos.MigrateStatus status = 2;
inline bool SetMigrateReq::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetMigrateReq::has_status() const {
  return _internal_has_status();
}
inline void SetMigrateReq::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ClientCos::MigrateStatus SetMigrateReq::_internal_status() const {
  return static_cast< ::ClientCos::MigrateStatus >(status_);
}
inline ::ClientCos::MigrateStatus SetMigrateReq::status() const {
  // @@protoc_insertion_point(field_get:ClientCos.SetMigrateReq.status)
  return _internal_status();
}
inline void SetMigrateReq::_internal_set_status(::ClientCos::MigrateStatus value) {
  assert(::ClientCos::MigrateStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void SetMigrateReq::set_status(::ClientCos::MigrateStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ClientCos.SetMigrateReq.status)
}

// -------------------------------------------------------------------

// SetMigrateRsp

// -------------------------------------------------------------------

// DelNoHashFileReq

// required bytes path = 1;
inline bool DelNoHashFileReq::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelNoHashFileReq::has_path() const {
  return _internal_has_path();
}
inline void DelNoHashFileReq::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DelNoHashFileReq::path() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelNoHashFileReq.path)
  return _internal_path();
}
inline void DelNoHashFileReq::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelNoHashFileReq.path)
}
inline std::string* DelNoHashFileReq::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DelNoHashFileReq.path)
  return _internal_mutable_path();
}
inline const std::string& DelNoHashFileReq::_internal_path() const {
  return path_.Get();
}
inline void DelNoHashFileReq::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelNoHashFileReq::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.DelNoHashFileReq.path)
}
inline void DelNoHashFileReq::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.DelNoHashFileReq.path)
}
inline void DelNoHashFileReq::set_path(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.DelNoHashFileReq.path)
}
inline std::string* DelNoHashFileReq::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelNoHashFileReq::release_path() {
  // @@protoc_insertion_point(field_release:ClientCos.DelNoHashFileReq.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelNoHashFileReq::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DelNoHashFileReq.path)
}

// optional bytes uuid = 2;
inline bool DelNoHashFileReq::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelNoHashFileReq::has_uuid() const {
  return _internal_has_uuid();
}
inline void DelNoHashFileReq::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DelNoHashFileReq::uuid() const {
  // @@protoc_insertion_point(field_get:ClientCos.DelNoHashFileReq.uuid)
  return _internal_uuid();
}
inline void DelNoHashFileReq::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ClientCos.DelNoHashFileReq.uuid)
}
inline std::string* DelNoHashFileReq::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ClientCos.DelNoHashFileReq.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& DelNoHashFileReq::_internal_uuid() const {
  return uuid_.Get();
}
inline void DelNoHashFileReq::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DelNoHashFileReq::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCos.DelNoHashFileReq.uuid)
}
inline void DelNoHashFileReq::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCos.DelNoHashFileReq.uuid)
}
inline void DelNoHashFileReq::set_uuid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCos.DelNoHashFileReq.uuid)
}
inline std::string* DelNoHashFileReq::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000002u;
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DelNoHashFileReq::release_uuid() {
  // @@protoc_insertion_point(field_release:ClientCos.DelNoHashFileReq.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelNoHashFileReq::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCos.DelNoHashFileReq.uuid)
}

// -------------------------------------------------------------------

// DelNoHashFileRsp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientCos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientCos::AppMsg_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::AppMsg_Type>() {
  return ::ClientCos::AppMsg_Type_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::CosReqMsg_SubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::CosReqMsg_SubType>() {
  return ::ClientCos::CosReqMsg_SubType_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::CosRspMsg_SubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::CosRspMsg_SubType>() {
  return ::ClientCos::CosRspMsg_SubType_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::ListDirectReq_ListType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::ListDirectReq_ListType>() {
  return ::ClientCos::ListDirectReq_ListType_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::MigrateStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::MigrateStatus>() {
  return ::ClientCos::MigrateStatus_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::CASRestoreTier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::CASRestoreTier>() {
  return ::ClientCos::CASRestoreTier_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::Action>() {
  return ::ClientCos::Action_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::Authority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::Authority>() {
  return ::ClientCos::Authority_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::ReservedAttrKey> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::ReservedAttrKey>() {
  return ::ClientCos::ReservedAttrKey_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::NSlot> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::NSlot>() {
  return ::ClientCos::NSlot_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::SseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::SseType>() {
  return ::ClientCos::SseType_descriptor();
}
template <> struct is_proto_enum< ::ClientCos::CamAuth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientCos::CamAuth>() {
  return ::ClientCos::CamAuth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cosv4_5fclient_2eproto
