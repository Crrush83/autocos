// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cos_comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cos_5fcomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cos_5fcomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cos_5fcomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cos_5fcomm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cos_5fcomm_2eproto;
class CasKeyRecord;
class CasKeyRecordDefaultTypeInternal;
extern CasKeyRecordDefaultTypeInternal _CasKeyRecord_default_instance_;
class CheckLavaDBinfo;
class CheckLavaDBinfoDefaultTypeInternal;
extern CheckLavaDBinfoDefaultTypeInternal _CheckLavaDBinfo_default_instance_;
class CheckTfsinfo;
class CheckTfsinfoDefaultTypeInternal;
extern CheckTfsinfoDefaultTypeInternal _CheckTfsinfo_default_instance_;
class CosDataIndex;
class CosDataIndexDefaultTypeInternal;
extern CosDataIndexDefaultTypeInternal _CosDataIndex_default_instance_;
class CosDataIndexRsp;
class CosDataIndexRspDefaultTypeInternal;
extern CosDataIndexRspDefaultTypeInternal _CosDataIndexRsp_default_instance_;
class CosLavaDBIndex;
class CosLavaDBIndexDefaultTypeInternal;
extern CosLavaDBIndexDefaultTypeInternal _CosLavaDBIndex_default_instance_;
class CosPartItem;
class CosPartItemDefaultTypeInternal;
extern CosPartItemDefaultTypeInternal _CosPartItem_default_instance_;
class CosPartdeleteItem;
class CosPartdeleteItemDefaultTypeInternal;
extern CosPartdeleteItemDefaultTypeInternal _CosPartdeleteItem_default_instance_;
class CosTfsIndex;
class CosTfsIndexDefaultTypeInternal;
extern CosTfsIndexDefaultTypeInternal _CosTfsIndex_default_instance_;
class CosUploadCacheData;
class CosUploadCacheDataDefaultTypeInternal;
extern CosUploadCacheDataDefaultTypeInternal _CosUploadCacheData_default_instance_;
class PartRecord;
class PartRecordDefaultTypeInternal;
extern PartRecordDefaultTypeInternal _PartRecord_default_instance_;
class ShaMainRecord;
class ShaMainRecordDefaultTypeInternal;
extern ShaMainRecordDefaultTypeInternal _ShaMainRecord_default_instance_;
class cacheinfo;
class cacheinfoDefaultTypeInternal;
extern cacheinfoDefaultTypeInternal _cacheinfo_default_instance_;
class delstorinfo;
class delstorinfoDefaultTypeInternal;
extern delstorinfoDefaultTypeInternal _delstorinfo_default_instance_;
class idcitem;
class idcitemDefaultTypeInternal;
extern idcitemDefaultTypeInternal _idcitem_default_instance_;
class sha1storeinfo;
class sha1storeinfoDefaultTypeInternal;
extern sha1storeinfoDefaultTypeInternal _sha1storeinfo_default_instance_;
class storeinfo;
class storeinfoDefaultTypeInternal;
extern storeinfoDefaultTypeInternal _storeinfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CasKeyRecord* Arena::CreateMaybeMessage<::CasKeyRecord>(Arena*);
template<> ::CheckLavaDBinfo* Arena::CreateMaybeMessage<::CheckLavaDBinfo>(Arena*);
template<> ::CheckTfsinfo* Arena::CreateMaybeMessage<::CheckTfsinfo>(Arena*);
template<> ::CosDataIndex* Arena::CreateMaybeMessage<::CosDataIndex>(Arena*);
template<> ::CosDataIndexRsp* Arena::CreateMaybeMessage<::CosDataIndexRsp>(Arena*);
template<> ::CosLavaDBIndex* Arena::CreateMaybeMessage<::CosLavaDBIndex>(Arena*);
template<> ::CosPartItem* Arena::CreateMaybeMessage<::CosPartItem>(Arena*);
template<> ::CosPartdeleteItem* Arena::CreateMaybeMessage<::CosPartdeleteItem>(Arena*);
template<> ::CosTfsIndex* Arena::CreateMaybeMessage<::CosTfsIndex>(Arena*);
template<> ::CosUploadCacheData* Arena::CreateMaybeMessage<::CosUploadCacheData>(Arena*);
template<> ::PartRecord* Arena::CreateMaybeMessage<::PartRecord>(Arena*);
template<> ::ShaMainRecord* Arena::CreateMaybeMessage<::ShaMainRecord>(Arena*);
template<> ::cacheinfo* Arena::CreateMaybeMessage<::cacheinfo>(Arena*);
template<> ::delstorinfo* Arena::CreateMaybeMessage<::delstorinfo>(Arena*);
template<> ::idcitem* Arena::CreateMaybeMessage<::idcitem>(Arena*);
template<> ::sha1storeinfo* Arena::CreateMaybeMessage<::sha1storeinfo>(Arena*);
template<> ::storeinfo* Arena::CreateMaybeMessage<::storeinfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum cos_store_type : int {
  Standard = 0,
  Standard_IA = 1
};
bool cos_store_type_IsValid(int value);
constexpr cos_store_type cos_store_type_MIN = Standard;
constexpr cos_store_type cos_store_type_MAX = Standard_IA;
constexpr int cos_store_type_ARRAYSIZE = cos_store_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cos_store_type_descriptor();
template<typename T>
inline const std::string& cos_store_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, cos_store_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function cos_store_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    cos_store_type_descriptor(), enum_t_value);
}
inline bool cos_store_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, cos_store_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<cos_store_type>(
    cos_store_type_descriptor(), name, value);
}
// ===================================================================

class ShaMainRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShaMainRecord) */ {
 public:
  inline ShaMainRecord() : ShaMainRecord(nullptr) {}
  virtual ~ShaMainRecord();

  ShaMainRecord(const ShaMainRecord& from);
  ShaMainRecord(ShaMainRecord&& from) noexcept
    : ShaMainRecord() {
    *this = ::std::move(from);
  }

  inline ShaMainRecord& operator=(const ShaMainRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShaMainRecord& operator=(ShaMainRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShaMainRecord& default_instance();

  static inline const ShaMainRecord* internal_default_instance() {
    return reinterpret_cast<const ShaMainRecord*>(
               &_ShaMainRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShaMainRecord& a, ShaMainRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ShaMainRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShaMainRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShaMainRecord* New() const final {
    return CreateMaybeMessage<ShaMainRecord>(nullptr);
  }

  ShaMainRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShaMainRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShaMainRecord& from);
  void MergeFrom(const ShaMainRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShaMainRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShaMainRecord";
  }
  protected:
  explicit ShaMainRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdclistFieldNumber = 8,
    kRefFieldNumber = 1,
    kCtimeFieldNumber = 2,
    kFsizeFieldNumber = 4,
    kMtimeFieldNumber = 3,
    kTypeFieldNumber = 7,
    kHitflagFieldNumber = 5,
    kIsChunkFieldNumber = 9,
  };
  // repeated .idcitem idclist = 8;
  int idclist_size() const;
  private:
  int _internal_idclist_size() const;
  public:
  void clear_idclist();
  ::idcitem* mutable_idclist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idcitem >*
      mutable_idclist();
  private:
  const ::idcitem& _internal_idclist(int index) const;
  ::idcitem* _internal_add_idclist();
  public:
  const ::idcitem& idclist(int index) const;
  ::idcitem* add_idclist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idcitem >&
      idclist() const;

  // required uint32 ref = 1;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  ::PROTOBUF_NAMESPACE_ID::uint32 ref() const;
  void set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ref() const;
  void _internal_set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ctime = 2;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 fsize = 4;
  bool has_fsize() const;
  private:
  bool _internal_has_fsize() const;
  public:
  void clear_fsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize() const;
  void set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fsize() const;
  void _internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 mtime = 3;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool hitflag = 5;
  bool has_hitflag() const;
  private:
  bool _internal_has_hitflag() const;
  public:
  void clear_hitflag();
  bool hitflag() const;
  void set_hitflag(bool value);
  private:
  bool _internal_hitflag() const;
  void _internal_set_hitflag(bool value);
  public:

  // optional bool is_chunk = 9;
  bool has_is_chunk() const;
  private:
  bool _internal_has_is_chunk() const;
  public:
  void clear_is_chunk();
  bool is_chunk() const;
  void set_is_chunk(bool value);
  private:
  bool _internal_is_chunk() const;
  void _internal_set_is_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ShaMainRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idcitem > idclist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  bool hitflag_;
  bool is_chunk_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CasKeyRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CasKeyRecord) */ {
 public:
  inline CasKeyRecord() : CasKeyRecord(nullptr) {}
  virtual ~CasKeyRecord();

  CasKeyRecord(const CasKeyRecord& from);
  CasKeyRecord(CasKeyRecord&& from) noexcept
    : CasKeyRecord() {
    *this = ::std::move(from);
  }

  inline CasKeyRecord& operator=(const CasKeyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasKeyRecord& operator=(CasKeyRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasKeyRecord& default_instance();

  static inline const CasKeyRecord* internal_default_instance() {
    return reinterpret_cast<const CasKeyRecord*>(
               &_CasKeyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CasKeyRecord& a, CasKeyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CasKeyRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasKeyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasKeyRecord* New() const final {
    return CreateMaybeMessage<CasKeyRecord>(nullptr);
  }

  CasKeyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasKeyRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasKeyRecord& from);
  void MergeFrom(const CasKeyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasKeyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CasKeyRecord";
  }
  protected:
  explicit CasKeyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchiveIdFieldNumber = 5,
    kRefFieldNumber = 1,
    kCtimeFieldNumber = 2,
    kFsizeFieldNumber = 4,
    kMtimeFieldNumber = 3,
    kTypeFieldNumber = 6,
  };
  // required bytes archive_id = 5;
  bool has_archive_id() const;
  private:
  bool _internal_has_archive_id() const;
  public:
  void clear_archive_id();
  const std::string& archive_id() const;
  void set_archive_id(const std::string& value);
  void set_archive_id(std::string&& value);
  void set_archive_id(const char* value);
  void set_archive_id(const void* value, size_t size);
  std::string* mutable_archive_id();
  std::string* release_archive_id();
  void set_allocated_archive_id(std::string* archive_id);
  private:
  const std::string& _internal_archive_id() const;
  void _internal_set_archive_id(const std::string& value);
  std::string* _internal_mutable_archive_id();
  public:

  // required uint32 ref = 1;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  ::PROTOBUF_NAMESPACE_ID::uint32 ref() const;
  void set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ref() const;
  void _internal_set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ctime = 2;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 fsize = 4;
  bool has_fsize() const;
  private:
  bool _internal_has_fsize() const;
  public:
  void clear_fsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize() const;
  void set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fsize() const;
  void _internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 mtime = 3;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CasKeyRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class PartRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PartRecord) */ {
 public:
  inline PartRecord() : PartRecord(nullptr) {}
  virtual ~PartRecord();

  PartRecord(const PartRecord& from);
  PartRecord(PartRecord&& from) noexcept
    : PartRecord() {
    *this = ::std::move(from);
  }

  inline PartRecord& operator=(const PartRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartRecord& operator=(PartRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartRecord& default_instance();

  static inline const PartRecord* internal_default_instance() {
    return reinterpret_cast<const PartRecord*>(
               &_PartRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PartRecord& a, PartRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PartRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartRecord* New() const final {
    return CreateMaybeMessage<PartRecord>(nullptr);
  }

  PartRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartRecord& from);
  void MergeFrom(const PartRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartRecord";
  }
  protected:
  explicit PartRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 1,
    kRealShaFieldNumber = 9,
    kFsizeFieldNumber = 2,
    kIsfinishedFieldNumber = 3,
    kCtimeFieldNumber = 4,
    kOffsetFieldNumber = 5,
    kIdFieldNumber = 6,
    kMtimeFieldNumber = 7,
    kSlicesizeFieldNumber = 8,
  };
  // required bytes sha = 1;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes real_sha = 9;
  bool has_real_sha() const;
  private:
  bool _internal_has_real_sha() const;
  public:
  void clear_real_sha();
  const std::string& real_sha() const;
  void set_real_sha(const std::string& value);
  void set_real_sha(std::string&& value);
  void set_real_sha(const char* value);
  void set_real_sha(const void* value, size_t size);
  std::string* mutable_real_sha();
  std::string* release_real_sha();
  void set_allocated_real_sha(std::string* real_sha);
  private:
  const std::string& _internal_real_sha() const;
  void _internal_set_real_sha(const std::string& value);
  std::string* _internal_mutable_real_sha();
  public:

  // required uint64 fsize = 2;
  bool has_fsize() const;
  private:
  bool _internal_has_fsize() const;
  public:
  void clear_fsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize() const;
  void set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fsize() const;
  void _internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool isfinished = 3;
  bool has_isfinished() const;
  private:
  bool _internal_has_isfinished() const;
  public:
  void clear_isfinished();
  bool isfinished() const;
  void set_isfinished(bool value);
  private:
  bool _internal_isfinished() const;
  void _internal_set_isfinished(bool value);
  public:

  // required uint32 ctime = 4;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 offset = 5 [default = 0];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 id = 6 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mtime = 7;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slicesize = 8;
  bool has_slicesize() const;
  private:
  bool _internal_has_slicesize() const;
  public:
  void clear_slicesize();
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize() const;
  void set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slicesize() const;
  void _internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PartRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_sha_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fsize_;
  bool isfinished_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CosDataIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosDataIndex) */ {
 public:
  inline CosDataIndex() : CosDataIndex(nullptr) {}
  virtual ~CosDataIndex();

  CosDataIndex(const CosDataIndex& from);
  CosDataIndex(CosDataIndex&& from) noexcept
    : CosDataIndex() {
    *this = ::std::move(from);
  }

  inline CosDataIndex& operator=(const CosDataIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosDataIndex& operator=(CosDataIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosDataIndex& default_instance();

  static inline const CosDataIndex* internal_default_instance() {
    return reinterpret_cast<const CosDataIndex*>(
               &_CosDataIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CosDataIndex& a, CosDataIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(CosDataIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosDataIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosDataIndex* New() const final {
    return CreateMaybeMessage<CosDataIndex>(nullptr);
  }

  CosDataIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosDataIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosDataIndex& from);
  void MergeFrom(const CosDataIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosDataIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosDataIndex";
  }
  protected:
  explicit CosDataIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataflagFieldNumber = 6,
    kCachekeyFieldNumber = 8,
    kChidFieldNumber = 1,
    kFidFieldNumber = 2,
    kOffsetFieldNumber = 4,
    kDatasizeFieldNumber = 3,
    kCtimeFieldNumber = 5,
    kCrcNumFieldNumber = 7,
  };
  // optional string dataflag = 6;
  bool has_dataflag() const;
  private:
  bool _internal_has_dataflag() const;
  public:
  void clear_dataflag();
  const std::string& dataflag() const;
  void set_dataflag(const std::string& value);
  void set_dataflag(std::string&& value);
  void set_dataflag(const char* value);
  void set_dataflag(const char* value, size_t size);
  std::string* mutable_dataflag();
  std::string* release_dataflag();
  void set_allocated_dataflag(std::string* dataflag);
  private:
  const std::string& _internal_dataflag() const;
  void _internal_set_dataflag(const std::string& value);
  std::string* _internal_mutable_dataflag();
  public:

  // optional bytes cachekey = 8;
  bool has_cachekey() const;
  private:
  bool _internal_has_cachekey() const;
  public:
  void clear_cachekey();
  const std::string& cachekey() const;
  void set_cachekey(const std::string& value);
  void set_cachekey(std::string&& value);
  void set_cachekey(const char* value);
  void set_cachekey(const void* value, size_t size);
  std::string* mutable_cachekey();
  std::string* release_cachekey();
  void set_allocated_cachekey(std::string* cachekey);
  private:
  const std::string& _internal_cachekey() const;
  void _internal_set_cachekey(const std::string& value);
  std::string* _internal_mutable_cachekey();
  public:

  // optional uint32 chid = 1;
  bool has_chid() const;
  private:
  bool _internal_has_chid() const;
  public:
  void clear_chid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chid() const;
  void set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chid() const;
  void _internal_set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fid = 2;
  bool has_fid() const;
  private:
  bool _internal_has_fid() const;
  public:
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 datasize = 3;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ctime = 5;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crc_num = 7;
  bool has_crc_num() const;
  private:
  bool _internal_has_crc_num() const;
  public:
  void clear_crc_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_num() const;
  void set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc_num() const;
  void _internal_set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CosDataIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataflag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cachekey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_num_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CosDataIndexRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosDataIndexRsp) */ {
 public:
  inline CosDataIndexRsp() : CosDataIndexRsp(nullptr) {}
  virtual ~CosDataIndexRsp();

  CosDataIndexRsp(const CosDataIndexRsp& from);
  CosDataIndexRsp(CosDataIndexRsp&& from) noexcept
    : CosDataIndexRsp() {
    *this = ::std::move(from);
  }

  inline CosDataIndexRsp& operator=(const CosDataIndexRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosDataIndexRsp& operator=(CosDataIndexRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosDataIndexRsp& default_instance();

  static inline const CosDataIndexRsp* internal_default_instance() {
    return reinterpret_cast<const CosDataIndexRsp*>(
               &_CosDataIndexRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CosDataIndexRsp& a, CosDataIndexRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CosDataIndexRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosDataIndexRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosDataIndexRsp* New() const final {
    return CreateMaybeMessage<CosDataIndexRsp>(nullptr);
  }

  CosDataIndexRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosDataIndexRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosDataIndexRsp& from);
  void MergeFrom(const CosDataIndexRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosDataIndexRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosDataIndexRsp";
  }
  protected:
  explicit CosDataIndexRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatakeyFieldNumber = 1,
    kVersionFieldNumber = 2,
    kCachekeyFieldNumber = 10,
    kChidFieldNumber = 3,
    kFidFieldNumber = 4,
    kStoreidFieldNumber = 7,
    kDatasizeFieldNumber = 8,
    kCrcNumFieldNumber = 9,
  };
  // optional bytes datakey = 1;
  bool has_datakey() const;
  private:
  bool _internal_has_datakey() const;
  public:
  void clear_datakey();
  const std::string& datakey() const;
  void set_datakey(const std::string& value);
  void set_datakey(std::string&& value);
  void set_datakey(const char* value);
  void set_datakey(const void* value, size_t size);
  std::string* mutable_datakey();
  std::string* release_datakey();
  void set_allocated_datakey(std::string* datakey);
  private:
  const std::string& _internal_datakey() const;
  void _internal_set_datakey(const std::string& value);
  std::string* _internal_mutable_datakey();
  public:

  // optional bytes version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes cachekey = 10;
  bool has_cachekey() const;
  private:
  bool _internal_has_cachekey() const;
  public:
  void clear_cachekey();
  const std::string& cachekey() const;
  void set_cachekey(const std::string& value);
  void set_cachekey(std::string&& value);
  void set_cachekey(const char* value);
  void set_cachekey(const void* value, size_t size);
  std::string* mutable_cachekey();
  std::string* release_cachekey();
  void set_allocated_cachekey(std::string* cachekey);
  private:
  const std::string& _internal_cachekey() const;
  void _internal_set_cachekey(const std::string& value);
  std::string* _internal_mutable_cachekey();
  public:

  // optional uint32 chid = 3;
  bool has_chid() const;
  private:
  bool _internal_has_chid() const;
  public:
  void clear_chid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chid() const;
  void set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chid() const;
  void _internal_set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fid = 4;
  bool has_fid() const;
  private:
  bool _internal_has_fid() const;
  public:
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 storeid = 7;
  bool has_storeid() const;
  private:
  bool _internal_has_storeid() const;
  public:
  void clear_storeid();
  ::PROTOBUF_NAMESPACE_ID::uint32 storeid() const;
  void set_storeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storeid() const;
  void _internal_set_storeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 datasize = 8;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crc_num = 9;
  bool has_crc_num() const;
  private:
  bool _internal_has_crc_num() const;
  public:
  void clear_crc_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_num() const;
  void set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc_num() const;
  void _internal_set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CosDataIndexRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datakey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cachekey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storeid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_num_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CosPartItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosPartItem) */ {
 public:
  inline CosPartItem() : CosPartItem(nullptr) {}
  virtual ~CosPartItem();

  CosPartItem(const CosPartItem& from);
  CosPartItem(CosPartItem&& from) noexcept
    : CosPartItem() {
    *this = ::std::move(from);
  }

  inline CosPartItem& operator=(const CosPartItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosPartItem& operator=(CosPartItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosPartItem& default_instance();

  static inline const CosPartItem* internal_default_instance() {
    return reinterpret_cast<const CosPartItem*>(
               &_CosPartItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CosPartItem& a, CosPartItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CosPartItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosPartItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosPartItem* New() const final {
    return CreateMaybeMessage<CosPartItem>(nullptr);
  }

  CosPartItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosPartItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosPartItem& from);
  void MergeFrom(const CosPartItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosPartItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosPartItem";
  }
  protected:
  explicit CosPartItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 2,
    kPartnumFieldNumber = 1,
  };
  // required bytes sha = 2;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // required uint32 partnum = 1;
  bool has_partnum() const;
  private:
  bool _internal_has_partnum() const;
  public:
  void clear_partnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 partnum() const;
  void set_partnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_partnum() const;
  void _internal_set_partnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CosPartItem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::uint32 partnum_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CosPartdeleteItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosPartdeleteItem) */ {
 public:
  inline CosPartdeleteItem() : CosPartdeleteItem(nullptr) {}
  virtual ~CosPartdeleteItem();

  CosPartdeleteItem(const CosPartdeleteItem& from);
  CosPartdeleteItem(CosPartdeleteItem&& from) noexcept
    : CosPartdeleteItem() {
    *this = ::std::move(from);
  }

  inline CosPartdeleteItem& operator=(const CosPartdeleteItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosPartdeleteItem& operator=(CosPartdeleteItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosPartdeleteItem& default_instance();

  static inline const CosPartdeleteItem* internal_default_instance() {
    return reinterpret_cast<const CosPartdeleteItem*>(
               &_CosPartdeleteItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CosPartdeleteItem& a, CosPartdeleteItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CosPartdeleteItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosPartdeleteItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosPartdeleteItem* New() const final {
    return CreateMaybeMessage<CosPartdeleteItem>(nullptr);
  }

  CosPartdeleteItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosPartdeleteItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosPartdeleteItem& from);
  void MergeFrom(const CosPartdeleteItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosPartdeleteItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosPartdeleteItem";
  }
  protected:
  explicit CosPartdeleteItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 2,
    kIsfinishFieldNumber = 1,
  };
  // required bytes sha = 2;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // required bool isfinish = 1;
  bool has_isfinish() const;
  private:
  bool _internal_has_isfinish() const;
  public:
  void clear_isfinish();
  bool isfinish() const;
  void set_isfinish(bool value);
  private:
  bool _internal_isfinish() const;
  void _internal_set_isfinish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CosPartdeleteItem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  bool isfinish_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class delstorinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delstorinfo) */ {
 public:
  inline delstorinfo() : delstorinfo(nullptr) {}
  virtual ~delstorinfo();

  delstorinfo(const delstorinfo& from);
  delstorinfo(delstorinfo&& from) noexcept
    : delstorinfo() {
    *this = ::std::move(from);
  }

  inline delstorinfo& operator=(const delstorinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline delstorinfo& operator=(delstorinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delstorinfo& default_instance();

  static inline const delstorinfo* internal_default_instance() {
    return reinterpret_cast<const delstorinfo*>(
               &_delstorinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(delstorinfo& a, delstorinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(delstorinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(delstorinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delstorinfo* New() const final {
    return CreateMaybeMessage<delstorinfo>(nullptr);
  }

  delstorinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delstorinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delstorinfo& from);
  void MergeFrom(const delstorinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delstorinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delstorinfo";
  }
  protected:
  explicit delstorinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional .storeinfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::storeinfo& info() const;
  ::storeinfo* release_info();
  ::storeinfo* mutable_info();
  void set_allocated_info(::storeinfo* info);
  private:
  const ::storeinfo& _internal_info() const;
  ::storeinfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::storeinfo* info);
  ::storeinfo* unsafe_arena_release_info();

  // optional uint32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:delstorinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::storeinfo* info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class storeinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storeinfo) */ {
 public:
  inline storeinfo() : storeinfo(nullptr) {}
  virtual ~storeinfo();

  storeinfo(const storeinfo& from);
  storeinfo(storeinfo&& from) noexcept
    : storeinfo() {
    *this = ::std::move(from);
  }

  inline storeinfo& operator=(const storeinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline storeinfo& operator=(storeinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const storeinfo& default_instance();

  static inline const storeinfo* internal_default_instance() {
    return reinterpret_cast<const storeinfo*>(
               &_storeinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(storeinfo& a, storeinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(storeinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(storeinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline storeinfo* New() const final {
    return CreateMaybeMessage<storeinfo>(nullptr);
  }

  storeinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<storeinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const storeinfo& from);
  void MergeFrom(const storeinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storeinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storeinfo";
  }
  protected:
  explicit storeinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 11,
    kTfsCl5ModidFieldNumber = 1,
    kTfsCl5CmidFieldNumber = 2,
    kLavadbCl5ModidFieldNumber = 3,
    kLavadbCl5CmidFieldNumber = 4,
    kLavadbTidFieldNumber = 5,
    kLavadbCidFieldNumber = 6,
    kIdcnumFieldNumber = 7,
    kIsusetfscl5FieldNumber = 9,
    kIsprefixFieldNumber = 8,
    kUseLocalTfsproxyFieldNumber = 10,
    kUseCacheFieldNumber = 12,
    kCacheCl5ModidFieldNumber = 13,
    kCacheCl5CmdidFieldNumber = 14,
  };
  // optional bytes name = 11;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 tfs_cl5_modid = 1;
  bool has_tfs_cl5_modid() const;
  private:
  bool _internal_has_tfs_cl5_modid() const;
  public:
  void clear_tfs_cl5_modid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_modid() const;
  void set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tfs_cl5_modid() const;
  void _internal_set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tfs_cl5_cmid = 2;
  bool has_tfs_cl5_cmid() const;
  private:
  bool _internal_has_tfs_cl5_cmid() const;
  public:
  void clear_tfs_cl5_cmid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_cmid() const;
  void set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tfs_cl5_cmid() const;
  void _internal_set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_cl5_modid = 3;
  bool has_lavadb_cl5_modid() const;
  private:
  bool _internal_has_lavadb_cl5_modid() const;
  public:
  void clear_lavadb_cl5_modid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_modid() const;
  void set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cl5_modid() const;
  void _internal_set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_cl5_cmid = 4;
  bool has_lavadb_cl5_cmid() const;
  private:
  bool _internal_has_lavadb_cl5_cmid() const;
  public:
  void clear_lavadb_cl5_cmid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_cmid() const;
  void set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cl5_cmid() const;
  void _internal_set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_tid = 5;
  bool has_lavadb_tid() const;
  private:
  bool _internal_has_lavadb_tid() const;
  public:
  void clear_lavadb_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_tid() const;
  void set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_tid() const;
  void _internal_set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_cid = 6;
  bool has_lavadb_cid() const;
  private:
  bool _internal_has_lavadb_cid() const;
  public:
  void clear_lavadb_cid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cid() const;
  void set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cid() const;
  void _internal_set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 idcnum = 7;
  bool has_idcnum() const;
  private:
  bool _internal_has_idcnum() const;
  public:
  void clear_idcnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum() const;
  void set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idcnum() const;
  void _internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 isusetfscl5 = 9;
  bool has_isusetfscl5() const;
  private:
  bool _internal_has_isusetfscl5() const;
  public:
  void clear_isusetfscl5();
  ::PROTOBUF_NAMESPACE_ID::uint32 isusetfscl5() const;
  void set_isusetfscl5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_isusetfscl5() const;
  void _internal_set_isusetfscl5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isprefix = 8;
  bool has_isprefix() const;
  private:
  bool _internal_has_isprefix() const;
  public:
  void clear_isprefix();
  bool isprefix() const;
  void set_isprefix(bool value);
  private:
  bool _internal_isprefix() const;
  void _internal_set_isprefix(bool value);
  public:

  // optional bool use_local_tfsproxy = 10;
  bool has_use_local_tfsproxy() const;
  private:
  bool _internal_has_use_local_tfsproxy() const;
  public:
  void clear_use_local_tfsproxy();
  bool use_local_tfsproxy() const;
  void set_use_local_tfsproxy(bool value);
  private:
  bool _internal_use_local_tfsproxy() const;
  void _internal_set_use_local_tfsproxy(bool value);
  public:

  // optional bool use_cache = 12;
  bool has_use_cache() const;
  private:
  bool _internal_has_use_cache() const;
  public:
  void clear_use_cache();
  bool use_cache() const;
  void set_use_cache(bool value);
  private:
  bool _internal_use_cache() const;
  void _internal_set_use_cache(bool value);
  public:

  // optional uint32 cache_cl5_modid = 13;
  bool has_cache_cl5_modid() const;
  private:
  bool _internal_has_cache_cl5_modid() const;
  public:
  void clear_cache_cl5_modid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cache_cl5_modid() const;
  void set_cache_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cache_cl5_modid() const;
  void _internal_set_cache_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cache_cl5_cmdid = 14;
  bool has_cache_cl5_cmdid() const;
  private:
  bool _internal_has_cache_cl5_cmdid() const;
  public:
  void clear_cache_cl5_cmdid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cache_cl5_cmdid() const;
  void set_cache_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cache_cl5_cmdid() const;
  void _internal_set_cache_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:storeinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_modid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_cmid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_modid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_cmid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_tid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 isusetfscl5_;
  bool isprefix_;
  bool use_local_tfsproxy_;
  bool use_cache_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cache_cl5_modid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cache_cl5_cmdid_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class cacheinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cacheinfo) */ {
 public:
  inline cacheinfo() : cacheinfo(nullptr) {}
  virtual ~cacheinfo();

  cacheinfo(const cacheinfo& from);
  cacheinfo(cacheinfo&& from) noexcept
    : cacheinfo() {
    *this = ::std::move(from);
  }

  inline cacheinfo& operator=(const cacheinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline cacheinfo& operator=(cacheinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cacheinfo& default_instance();

  static inline const cacheinfo* internal_default_instance() {
    return reinterpret_cast<const cacheinfo*>(
               &_cacheinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(cacheinfo& a, cacheinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(cacheinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cacheinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cacheinfo* New() const final {
    return CreateMaybeMessage<cacheinfo>(nullptr);
  }

  cacheinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cacheinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cacheinfo& from);
  void MergeFrom(const cacheinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cacheinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cacheinfo";
  }
  protected:
  explicit cacheinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLavadbCl5ModidFieldNumber = 1,
    kLavadbCl5CmdidFieldNumber = 2,
    kLavadbTidFieldNumber = 3,
    kLavadbCidFieldNumber = 4,
    kIdcnumFieldNumber = 5,
  };
  // optional uint32 lavadb_cl5_modid = 1;
  bool has_lavadb_cl5_modid() const;
  private:
  bool _internal_has_lavadb_cl5_modid() const;
  public:
  void clear_lavadb_cl5_modid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_modid() const;
  void set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cl5_modid() const;
  void _internal_set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_cl5_cmdid = 2;
  bool has_lavadb_cl5_cmdid() const;
  private:
  bool _internal_has_lavadb_cl5_cmdid() const;
  public:
  void clear_lavadb_cl5_cmdid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_cmdid() const;
  void set_lavadb_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cl5_cmdid() const;
  void _internal_set_lavadb_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_tid = 3;
  bool has_lavadb_tid() const;
  private:
  bool _internal_has_lavadb_tid() const;
  public:
  void clear_lavadb_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_tid() const;
  void set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_tid() const;
  void _internal_set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_cid = 4;
  bool has_lavadb_cid() const;
  private:
  bool _internal_has_lavadb_cid() const;
  public:
  void clear_lavadb_cid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cid() const;
  void set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cid() const;
  void _internal_set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 idcnum = 5;
  bool has_idcnum() const;
  private:
  bool _internal_has_idcnum() const;
  public:
  void clear_idcnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum() const;
  void set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idcnum() const;
  void _internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:cacheinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_modid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_cmdid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_tid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class idcitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idcitem) */ {
 public:
  inline idcitem() : idcitem(nullptr) {}
  virtual ~idcitem();

  idcitem(const idcitem& from);
  idcitem(idcitem&& from) noexcept
    : idcitem() {
    *this = ::std::move(from);
  }

  inline idcitem& operator=(const idcitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline idcitem& operator=(idcitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const idcitem& default_instance();

  static inline const idcitem* internal_default_instance() {
    return reinterpret_cast<const idcitem*>(
               &_idcitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(idcitem& a, idcitem& b) {
    a.Swap(&b);
  }
  inline void Swap(idcitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(idcitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline idcitem* New() const final {
    return CreateMaybeMessage<idcitem>(nullptr);
  }

  idcitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<idcitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const idcitem& from);
  void MergeFrom(const idcitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(idcitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idcitem";
  }
  protected:
  explicit idcitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdcFieldNumber = 1,
    kCtimeFieldNumber = 2,
    kUploadstateFieldNumber = 3,
  };
  // required uint32 idc = 1;
  bool has_idc() const;
  private:
  bool _internal_has_idc() const;
  public:
  void clear_idc();
  ::PROTOBUF_NAMESPACE_ID::uint32 idc() const;
  void set_idc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idc() const;
  void _internal_set_idc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ctime = 2;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 uploadstate = 3;
  bool has_uploadstate() const;
  private:
  bool _internal_has_uploadstate() const;
  public:
  void clear_uploadstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 uploadstate() const;
  void set_uploadstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uploadstate() const;
  void _internal_set_uploadstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:idcitem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uploadstate_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class sha1storeinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sha1storeinfo) */ {
 public:
  inline sha1storeinfo() : sha1storeinfo(nullptr) {}
  virtual ~sha1storeinfo();

  sha1storeinfo(const sha1storeinfo& from);
  sha1storeinfo(sha1storeinfo&& from) noexcept
    : sha1storeinfo() {
    *this = ::std::move(from);
  }

  inline sha1storeinfo& operator=(const sha1storeinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline sha1storeinfo& operator=(sha1storeinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sha1storeinfo& default_instance();

  static inline const sha1storeinfo* internal_default_instance() {
    return reinterpret_cast<const sha1storeinfo*>(
               &_sha1storeinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(sha1storeinfo& a, sha1storeinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(sha1storeinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sha1storeinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sha1storeinfo* New() const final {
    return CreateMaybeMessage<sha1storeinfo>(nullptr);
  }

  sha1storeinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sha1storeinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sha1storeinfo& from);
  void MergeFrom(const sha1storeinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sha1storeinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sha1storeinfo";
  }
  protected:
  explicit sha1storeinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 1,
    kInfoFieldNumber = 2,
    kCacheInfoFieldNumber = 3,
  };
  // optional bytes sha = 1;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  void set_sha(const std::string& value);
  void set_sha(std::string&& value);
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  std::string* mutable_sha();
  std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional .storeinfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::storeinfo& info() const;
  ::storeinfo* release_info();
  ::storeinfo* mutable_info();
  void set_allocated_info(::storeinfo* info);
  private:
  const ::storeinfo& _internal_info() const;
  ::storeinfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::storeinfo* info);
  ::storeinfo* unsafe_arena_release_info();

  // optional .cacheinfo cache_info = 3;
  bool has_cache_info() const;
  private:
  bool _internal_has_cache_info() const;
  public:
  void clear_cache_info();
  const ::cacheinfo& cache_info() const;
  ::cacheinfo* release_cache_info();
  ::cacheinfo* mutable_cache_info();
  void set_allocated_cache_info(::cacheinfo* cache_info);
  private:
  const ::cacheinfo& _internal_cache_info() const;
  ::cacheinfo* _internal_mutable_cache_info();
  public:
  void unsafe_arena_set_allocated_cache_info(
      ::cacheinfo* cache_info);
  ::cacheinfo* unsafe_arena_release_cache_info();

  // @@protoc_insertion_point(class_scope:sha1storeinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::storeinfo* info_;
  ::cacheinfo* cache_info_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CosUploadCacheData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosUploadCacheData) */ {
 public:
  inline CosUploadCacheData() : CosUploadCacheData(nullptr) {}
  virtual ~CosUploadCacheData();

  CosUploadCacheData(const CosUploadCacheData& from);
  CosUploadCacheData(CosUploadCacheData&& from) noexcept
    : CosUploadCacheData() {
    *this = ::std::move(from);
  }

  inline CosUploadCacheData& operator=(const CosUploadCacheData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosUploadCacheData& operator=(CosUploadCacheData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosUploadCacheData& default_instance();

  static inline const CosUploadCacheData* internal_default_instance() {
    return reinterpret_cast<const CosUploadCacheData*>(
               &_CosUploadCacheData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CosUploadCacheData& a, CosUploadCacheData& b) {
    a.Swap(&b);
  }
  inline void Swap(CosUploadCacheData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosUploadCacheData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosUploadCacheData* New() const final {
    return CreateMaybeMessage<CosUploadCacheData>(nullptr);
  }

  CosUploadCacheData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosUploadCacheData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosUploadCacheData& from);
  void MergeFrom(const CosUploadCacheData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosUploadCacheData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosUploadCacheData";
  }
  protected:
  explicit CosUploadCacheData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 4,
    kOffsetFieldNumber = 2,
    kDatasizeFieldNumber = 1,
    kCtimeFieldNumber = 3,
  };
  // optional bytes value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional uint64 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 datasize = 1;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ctime = 3;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CosUploadCacheData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CosTfsIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosTfsIndex) */ {
 public:
  inline CosTfsIndex() : CosTfsIndex(nullptr) {}
  virtual ~CosTfsIndex();

  CosTfsIndex(const CosTfsIndex& from);
  CosTfsIndex(CosTfsIndex&& from) noexcept
    : CosTfsIndex() {
    *this = ::std::move(from);
  }

  inline CosTfsIndex& operator=(const CosTfsIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosTfsIndex& operator=(CosTfsIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosTfsIndex& default_instance();

  static inline const CosTfsIndex* internal_default_instance() {
    return reinterpret_cast<const CosTfsIndex*>(
               &_CosTfsIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CosTfsIndex& a, CosTfsIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(CosTfsIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosTfsIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosTfsIndex* New() const final {
    return CreateMaybeMessage<CosTfsIndex>(nullptr);
  }

  CosTfsIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosTfsIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosTfsIndex& from);
  void MergeFrom(const CosTfsIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosTfsIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosTfsIndex";
  }
  protected:
  explicit CosTfsIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChidFieldNumber = 1,
    kFidFieldNumber = 2,
    kOffsetFieldNumber = 4,
    kDatasizeFieldNumber = 3,
    kCtimeFieldNumber = 5,
  };
  // optional uint32 chid = 1;
  bool has_chid() const;
  private:
  bool _internal_has_chid() const;
  public:
  void clear_chid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chid() const;
  void set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chid() const;
  void _internal_set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fid = 2;
  bool has_fid() const;
  private:
  bool _internal_has_fid() const;
  public:
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 datasize = 3;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ctime = 5;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CosTfsIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CheckTfsinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckTfsinfo) */ {
 public:
  inline CheckTfsinfo() : CheckTfsinfo(nullptr) {}
  virtual ~CheckTfsinfo();

  CheckTfsinfo(const CheckTfsinfo& from);
  CheckTfsinfo(CheckTfsinfo&& from) noexcept
    : CheckTfsinfo() {
    *this = ::std::move(from);
  }

  inline CheckTfsinfo& operator=(const CheckTfsinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckTfsinfo& operator=(CheckTfsinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckTfsinfo& default_instance();

  static inline const CheckTfsinfo* internal_default_instance() {
    return reinterpret_cast<const CheckTfsinfo*>(
               &_CheckTfsinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CheckTfsinfo& a, CheckTfsinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckTfsinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckTfsinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckTfsinfo* New() const final {
    return CreateMaybeMessage<CheckTfsinfo>(nullptr);
  }

  CheckTfsinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckTfsinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckTfsinfo& from);
  void MergeFrom(const CheckTfsinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckTfsinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckTfsinfo";
  }
  protected:
  explicit CheckTfsinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatalistFieldNumber = 5,
    kTfsCl5ModidFieldNumber = 1,
    kTfsCl5CmidFieldNumber = 2,
    kIdcnumFieldNumber = 3,
    kIsprefixFieldNumber = 4,
  };
  // repeated .CosTfsIndex datalist = 5;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::CosTfsIndex* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosTfsIndex >*
      mutable_datalist();
  private:
  const ::CosTfsIndex& _internal_datalist(int index) const;
  ::CosTfsIndex* _internal_add_datalist();
  public:
  const ::CosTfsIndex& datalist(int index) const;
  ::CosTfsIndex* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosTfsIndex >&
      datalist() const;

  // optional uint32 tfs_cl5_modid = 1;
  bool has_tfs_cl5_modid() const;
  private:
  bool _internal_has_tfs_cl5_modid() const;
  public:
  void clear_tfs_cl5_modid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_modid() const;
  void set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tfs_cl5_modid() const;
  void _internal_set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tfs_cl5_cmid = 2;
  bool has_tfs_cl5_cmid() const;
  private:
  bool _internal_has_tfs_cl5_cmid() const;
  public:
  void clear_tfs_cl5_cmid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_cmid() const;
  void set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tfs_cl5_cmid() const;
  void _internal_set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 idcnum = 3;
  bool has_idcnum() const;
  private:
  bool _internal_has_idcnum() const;
  public:
  void clear_idcnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum() const;
  void set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idcnum() const;
  void _internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isprefix = 4;
  bool has_isprefix() const;
  private:
  bool _internal_has_isprefix() const;
  public:
  void clear_isprefix();
  bool isprefix() const;
  void set_isprefix(bool value);
  private:
  bool _internal_isprefix() const;
  void _internal_set_isprefix(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CheckTfsinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosTfsIndex > datalist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_modid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tfs_cl5_cmid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idcnum_;
  bool isprefix_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CosLavaDBIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosLavaDBIndex) */ {
 public:
  inline CosLavaDBIndex() : CosLavaDBIndex(nullptr) {}
  virtual ~CosLavaDBIndex();

  CosLavaDBIndex(const CosLavaDBIndex& from);
  CosLavaDBIndex(CosLavaDBIndex&& from) noexcept
    : CosLavaDBIndex() {
    *this = ::std::move(from);
  }

  inline CosLavaDBIndex& operator=(const CosLavaDBIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosLavaDBIndex& operator=(CosLavaDBIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosLavaDBIndex& default_instance();

  static inline const CosLavaDBIndex* internal_default_instance() {
    return reinterpret_cast<const CosLavaDBIndex*>(
               &_CosLavaDBIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CosLavaDBIndex& a, CosLavaDBIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(CosLavaDBIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosLavaDBIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosLavaDBIndex* New() const final {
    return CreateMaybeMessage<CosLavaDBIndex>(nullptr);
  }

  CosLavaDBIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosLavaDBIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosLavaDBIndex& from);
  void MergeFrom(const CosLavaDBIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosLavaDBIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosLavaDBIndex";
  }
  protected:
  explicit CosLavaDBIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyhashFieldNumber = 1,
    kKeyrangeFieldNumber = 2,
    kOffsetFieldNumber = 4,
    kDatasizeFieldNumber = 3,
    kCtimeFieldNumber = 5,
  };
  // optional bytes keyhash = 1;
  bool has_keyhash() const;
  private:
  bool _internal_has_keyhash() const;
  public:
  void clear_keyhash();
  const std::string& keyhash() const;
  void set_keyhash(const std::string& value);
  void set_keyhash(std::string&& value);
  void set_keyhash(const char* value);
  void set_keyhash(const void* value, size_t size);
  std::string* mutable_keyhash();
  std::string* release_keyhash();
  void set_allocated_keyhash(std::string* keyhash);
  private:
  const std::string& _internal_keyhash() const;
  void _internal_set_keyhash(const std::string& value);
  std::string* _internal_mutable_keyhash();
  public:

  // optional bytes keyrange = 2;
  bool has_keyrange() const;
  private:
  bool _internal_has_keyrange() const;
  public:
  void clear_keyrange();
  const std::string& keyrange() const;
  void set_keyrange(const std::string& value);
  void set_keyrange(std::string&& value);
  void set_keyrange(const char* value);
  void set_keyrange(const void* value, size_t size);
  std::string* mutable_keyrange();
  std::string* release_keyrange();
  void set_allocated_keyrange(std::string* keyrange);
  private:
  const std::string& _internal_keyrange() const;
  void _internal_set_keyrange(const std::string& value);
  std::string* _internal_mutable_keyrange();
  public:

  // optional uint64 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 datasize = 3;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ctime = 5;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CosLavaDBIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyrange_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class CheckLavaDBinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckLavaDBinfo) */ {
 public:
  inline CheckLavaDBinfo() : CheckLavaDBinfo(nullptr) {}
  virtual ~CheckLavaDBinfo();

  CheckLavaDBinfo(const CheckLavaDBinfo& from);
  CheckLavaDBinfo(CheckLavaDBinfo&& from) noexcept
    : CheckLavaDBinfo() {
    *this = ::std::move(from);
  }

  inline CheckLavaDBinfo& operator=(const CheckLavaDBinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckLavaDBinfo& operator=(CheckLavaDBinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckLavaDBinfo& default_instance();

  static inline const CheckLavaDBinfo* internal_default_instance() {
    return reinterpret_cast<const CheckLavaDBinfo*>(
               &_CheckLavaDBinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CheckLavaDBinfo& a, CheckLavaDBinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckLavaDBinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckLavaDBinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckLavaDBinfo* New() const final {
    return CreateMaybeMessage<CheckLavaDBinfo>(nullptr);
  }

  CheckLavaDBinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckLavaDBinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckLavaDBinfo& from);
  void MergeFrom(const CheckLavaDBinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckLavaDBinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckLavaDBinfo";
  }
  protected:
  explicit CheckLavaDBinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cos_5fcomm_2eproto);
    return ::descriptor_table_cos_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatalistFieldNumber = 5,
    kLavadbCl5ModidFieldNumber = 1,
    kLavadbCl5CmidFieldNumber = 2,
    kLavadbTidFieldNumber = 3,
    kLavadbCidFieldNumber = 4,
  };
  // repeated .CosLavaDBIndex datalist = 5;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::CosLavaDBIndex* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosLavaDBIndex >*
      mutable_datalist();
  private:
  const ::CosLavaDBIndex& _internal_datalist(int index) const;
  ::CosLavaDBIndex* _internal_add_datalist();
  public:
  const ::CosLavaDBIndex& datalist(int index) const;
  ::CosLavaDBIndex* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosLavaDBIndex >&
      datalist() const;

  // optional uint32 lavadb_cl5_modid = 1;
  bool has_lavadb_cl5_modid() const;
  private:
  bool _internal_has_lavadb_cl5_modid() const;
  public:
  void clear_lavadb_cl5_modid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_modid() const;
  void set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cl5_modid() const;
  void _internal_set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_cl5_cmid = 2;
  bool has_lavadb_cl5_cmid() const;
  private:
  bool _internal_has_lavadb_cl5_cmid() const;
  public:
  void clear_lavadb_cl5_cmid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_cmid() const;
  void set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cl5_cmid() const;
  void _internal_set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_tid = 3;
  bool has_lavadb_tid() const;
  private:
  bool _internal_has_lavadb_tid() const;
  public:
  void clear_lavadb_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_tid() const;
  void set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_tid() const;
  void _internal_set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lavadb_cid = 4;
  bool has_lavadb_cid() const;
  private:
  bool _internal_has_lavadb_cid() const;
  public:
  void clear_lavadb_cid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cid() const;
  void set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lavadb_cid() const;
  void _internal_set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CheckLavaDBinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosLavaDBIndex > datalist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_modid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cl5_cmid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_tid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lavadb_cid_;
  friend struct ::TableStruct_cos_5fcomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShaMainRecord

// required uint32 ref = 1;
inline bool ShaMainRecord::_internal_has_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShaMainRecord::has_ref() const {
  return _internal_has_ref();
}
inline void ShaMainRecord::clear_ref() {
  ref_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::_internal_ref() const {
  return ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::ref() const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.ref)
  return _internal_ref();
}
inline void ShaMainRecord::_internal_set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ref_ = value;
}
inline void ShaMainRecord::set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:ShaMainRecord.ref)
}

// required uint32 ctime = 2;
inline bool ShaMainRecord::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShaMainRecord::has_ctime() const {
  return _internal_has_ctime();
}
inline void ShaMainRecord::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::ctime() const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.ctime)
  return _internal_ctime();
}
inline void ShaMainRecord::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ctime_ = value;
}
inline void ShaMainRecord::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:ShaMainRecord.ctime)
}

// required uint32 mtime = 3;
inline bool ShaMainRecord::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShaMainRecord::has_mtime() const {
  return _internal_has_mtime();
}
inline void ShaMainRecord::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::mtime() const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.mtime)
  return _internal_mtime();
}
inline void ShaMainRecord::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  mtime_ = value;
}
inline void ShaMainRecord::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:ShaMainRecord.mtime)
}

// required uint64 fsize = 4;
inline bool ShaMainRecord::_internal_has_fsize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShaMainRecord::has_fsize() const {
  return _internal_has_fsize();
}
inline void ShaMainRecord::clear_fsize() {
  fsize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShaMainRecord::_internal_fsize() const {
  return fsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShaMainRecord::fsize() const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.fsize)
  return _internal_fsize();
}
inline void ShaMainRecord::_internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  fsize_ = value;
}
inline void ShaMainRecord::set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fsize(value);
  // @@protoc_insertion_point(field_set:ShaMainRecord.fsize)
}

// required bool hitflag = 5;
inline bool ShaMainRecord::_internal_has_hitflag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShaMainRecord::has_hitflag() const {
  return _internal_has_hitflag();
}
inline void ShaMainRecord::clear_hitflag() {
  hitflag_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ShaMainRecord::_internal_hitflag() const {
  return hitflag_;
}
inline bool ShaMainRecord::hitflag() const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.hitflag)
  return _internal_hitflag();
}
inline void ShaMainRecord::_internal_set_hitflag(bool value) {
  _has_bits_[0] |= 0x00000020u;
  hitflag_ = value;
}
inline void ShaMainRecord::set_hitflag(bool value) {
  _internal_set_hitflag(value);
  // @@protoc_insertion_point(field_set:ShaMainRecord.hitflag)
}

// optional uint32 type = 7;
inline bool ShaMainRecord::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShaMainRecord::has_type() const {
  return _internal_has_type();
}
inline void ShaMainRecord::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShaMainRecord::type() const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.type)
  return _internal_type();
}
inline void ShaMainRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void ShaMainRecord::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShaMainRecord.type)
}

// repeated .idcitem idclist = 8;
inline int ShaMainRecord::_internal_idclist_size() const {
  return idclist_.size();
}
inline int ShaMainRecord::idclist_size() const {
  return _internal_idclist_size();
}
inline void ShaMainRecord::clear_idclist() {
  idclist_.Clear();
}
inline ::idcitem* ShaMainRecord::mutable_idclist(int index) {
  // @@protoc_insertion_point(field_mutable:ShaMainRecord.idclist)
  return idclist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idcitem >*
ShaMainRecord::mutable_idclist() {
  // @@protoc_insertion_point(field_mutable_list:ShaMainRecord.idclist)
  return &idclist_;
}
inline const ::idcitem& ShaMainRecord::_internal_idclist(int index) const {
  return idclist_.Get(index);
}
inline const ::idcitem& ShaMainRecord::idclist(int index) const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.idclist)
  return _internal_idclist(index);
}
inline ::idcitem* ShaMainRecord::_internal_add_idclist() {
  return idclist_.Add();
}
inline ::idcitem* ShaMainRecord::add_idclist() {
  // @@protoc_insertion_point(field_add:ShaMainRecord.idclist)
  return _internal_add_idclist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idcitem >&
ShaMainRecord::idclist() const {
  // @@protoc_insertion_point(field_list:ShaMainRecord.idclist)
  return idclist_;
}

// optional bool is_chunk = 9;
inline bool ShaMainRecord::_internal_has_is_chunk() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShaMainRecord::has_is_chunk() const {
  return _internal_has_is_chunk();
}
inline void ShaMainRecord::clear_is_chunk() {
  is_chunk_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ShaMainRecord::_internal_is_chunk() const {
  return is_chunk_;
}
inline bool ShaMainRecord::is_chunk() const {
  // @@protoc_insertion_point(field_get:ShaMainRecord.is_chunk)
  return _internal_is_chunk();
}
inline void ShaMainRecord::_internal_set_is_chunk(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_chunk_ = value;
}
inline void ShaMainRecord::set_is_chunk(bool value) {
  _internal_set_is_chunk(value);
  // @@protoc_insertion_point(field_set:ShaMainRecord.is_chunk)
}

// -------------------------------------------------------------------

// CasKeyRecord

// required uint32 ref = 1;
inline bool CasKeyRecord::_internal_has_ref() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CasKeyRecord::has_ref() const {
  return _internal_has_ref();
}
inline void CasKeyRecord::clear_ref() {
  ref_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::_internal_ref() const {
  return ref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::ref() const {
  // @@protoc_insertion_point(field_get:CasKeyRecord.ref)
  return _internal_ref();
}
inline void CasKeyRecord::_internal_set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ref_ = value;
}
inline void CasKeyRecord::set_ref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:CasKeyRecord.ref)
}

// required uint32 ctime = 2;
inline bool CasKeyRecord::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CasKeyRecord::has_ctime() const {
  return _internal_has_ctime();
}
inline void CasKeyRecord::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::ctime() const {
  // @@protoc_insertion_point(field_get:CasKeyRecord.ctime)
  return _internal_ctime();
}
inline void CasKeyRecord::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ctime_ = value;
}
inline void CasKeyRecord::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:CasKeyRecord.ctime)
}

// required uint32 mtime = 3;
inline bool CasKeyRecord::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CasKeyRecord::has_mtime() const {
  return _internal_has_mtime();
}
inline void CasKeyRecord::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::mtime() const {
  // @@protoc_insertion_point(field_get:CasKeyRecord.mtime)
  return _internal_mtime();
}
inline void CasKeyRecord::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mtime_ = value;
}
inline void CasKeyRecord::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:CasKeyRecord.mtime)
}

// required uint64 fsize = 4;
inline bool CasKeyRecord::_internal_has_fsize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CasKeyRecord::has_fsize() const {
  return _internal_has_fsize();
}
inline void CasKeyRecord::clear_fsize() {
  fsize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasKeyRecord::_internal_fsize() const {
  return fsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasKeyRecord::fsize() const {
  // @@protoc_insertion_point(field_get:CasKeyRecord.fsize)
  return _internal_fsize();
}
inline void CasKeyRecord::_internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  fsize_ = value;
}
inline void CasKeyRecord::set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fsize(value);
  // @@protoc_insertion_point(field_set:CasKeyRecord.fsize)
}

// required bytes archive_id = 5;
inline bool CasKeyRecord::_internal_has_archive_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CasKeyRecord::has_archive_id() const {
  return _internal_has_archive_id();
}
inline void CasKeyRecord::clear_archive_id() {
  archive_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CasKeyRecord::archive_id() const {
  // @@protoc_insertion_point(field_get:CasKeyRecord.archive_id)
  return _internal_archive_id();
}
inline void CasKeyRecord::set_archive_id(const std::string& value) {
  _internal_set_archive_id(value);
  // @@protoc_insertion_point(field_set:CasKeyRecord.archive_id)
}
inline std::string* CasKeyRecord::mutable_archive_id() {
  // @@protoc_insertion_point(field_mutable:CasKeyRecord.archive_id)
  return _internal_mutable_archive_id();
}
inline const std::string& CasKeyRecord::_internal_archive_id() const {
  return archive_id_.Get();
}
inline void CasKeyRecord::_internal_set_archive_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CasKeyRecord::set_archive_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  archive_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CasKeyRecord.archive_id)
}
inline void CasKeyRecord::set_archive_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CasKeyRecord.archive_id)
}
inline void CasKeyRecord::set_archive_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  archive_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CasKeyRecord.archive_id)
}
inline std::string* CasKeyRecord::_internal_mutable_archive_id() {
  _has_bits_[0] |= 0x00000001u;
  return archive_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CasKeyRecord::release_archive_id() {
  // @@protoc_insertion_point(field_release:CasKeyRecord.archive_id)
  if (!_internal_has_archive_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return archive_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasKeyRecord::set_allocated_archive_id(std::string* archive_id) {
  if (archive_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  archive_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CasKeyRecord.archive_id)
}

// optional uint32 type = 6;
inline bool CasKeyRecord::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CasKeyRecord::has_type() const {
  return _internal_has_type();
}
inline void CasKeyRecord::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CasKeyRecord::type() const {
  // @@protoc_insertion_point(field_get:CasKeyRecord.type)
  return _internal_type();
}
inline void CasKeyRecord::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void CasKeyRecord::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CasKeyRecord.type)
}

// -------------------------------------------------------------------

// PartRecord

// required bytes sha = 1;
inline bool PartRecord::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartRecord::has_sha() const {
  return _internal_has_sha();
}
inline void PartRecord::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartRecord::sha() const {
  // @@protoc_insertion_point(field_get:PartRecord.sha)
  return _internal_sha();
}
inline void PartRecord::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:PartRecord.sha)
}
inline std::string* PartRecord::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:PartRecord.sha)
  return _internal_mutable_sha();
}
inline const std::string& PartRecord::_internal_sha() const {
  return sha_.Get();
}
inline void PartRecord::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartRecord::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PartRecord.sha)
}
inline void PartRecord::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PartRecord.sha)
}
inline void PartRecord::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PartRecord.sha)
}
inline std::string* PartRecord::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartRecord::release_sha() {
  // @@protoc_insertion_point(field_release:PartRecord.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartRecord::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PartRecord.sha)
}

// required uint64 fsize = 2;
inline bool PartRecord::_internal_has_fsize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PartRecord::has_fsize() const {
  return _internal_has_fsize();
}
inline void PartRecord::clear_fsize() {
  fsize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartRecord::_internal_fsize() const {
  return fsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartRecord::fsize() const {
  // @@protoc_insertion_point(field_get:PartRecord.fsize)
  return _internal_fsize();
}
inline void PartRecord::_internal_set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  fsize_ = value;
}
inline void PartRecord::set_fsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fsize(value);
  // @@protoc_insertion_point(field_set:PartRecord.fsize)
}

// required bool isfinished = 3;
inline bool PartRecord::_internal_has_isfinished() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PartRecord::has_isfinished() const {
  return _internal_has_isfinished();
}
inline void PartRecord::clear_isfinished() {
  isfinished_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PartRecord::_internal_isfinished() const {
  return isfinished_;
}
inline bool PartRecord::isfinished() const {
  // @@protoc_insertion_point(field_get:PartRecord.isfinished)
  return _internal_isfinished();
}
inline void PartRecord::_internal_set_isfinished(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isfinished_ = value;
}
inline void PartRecord::set_isfinished(bool value) {
  _internal_set_isfinished(value);
  // @@protoc_insertion_point(field_set:PartRecord.isfinished)
}

// required uint32 ctime = 4;
inline bool PartRecord::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PartRecord::has_ctime() const {
  return _internal_has_ctime();
}
inline void PartRecord::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::ctime() const {
  // @@protoc_insertion_point(field_get:PartRecord.ctime)
  return _internal_ctime();
}
inline void PartRecord::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ctime_ = value;
}
inline void PartRecord::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:PartRecord.ctime)
}

// optional uint64 offset = 5 [default = 0];
inline bool PartRecord::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PartRecord::has_offset() const {
  return _internal_has_offset();
}
inline void PartRecord::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartRecord::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartRecord::offset() const {
  // @@protoc_insertion_point(field_get:PartRecord.offset)
  return _internal_offset();
}
inline void PartRecord::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  offset_ = value;
}
inline void PartRecord::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:PartRecord.offset)
}

// optional uint32 id = 6 [default = 0];
inline bool PartRecord::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PartRecord::has_id() const {
  return _internal_has_id();
}
inline void PartRecord::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::id() const {
  // @@protoc_insertion_point(field_get:PartRecord.id)
  return _internal_id();
}
inline void PartRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
}
inline void PartRecord::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PartRecord.id)
}

// optional uint32 mtime = 7;
inline bool PartRecord::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PartRecord::has_mtime() const {
  return _internal_has_mtime();
}
inline void PartRecord::clear_mtime() {
  mtime_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::mtime() const {
  // @@protoc_insertion_point(field_get:PartRecord.mtime)
  return _internal_mtime();
}
inline void PartRecord::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  mtime_ = value;
}
inline void PartRecord::set_mtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:PartRecord.mtime)
}

// optional uint32 slicesize = 8;
inline bool PartRecord::_internal_has_slicesize() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PartRecord::has_slicesize() const {
  return _internal_has_slicesize();
}
inline void PartRecord::clear_slicesize() {
  slicesize_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::_internal_slicesize() const {
  return slicesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartRecord::slicesize() const {
  // @@protoc_insertion_point(field_get:PartRecord.slicesize)
  return _internal_slicesize();
}
inline void PartRecord::_internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  slicesize_ = value;
}
inline void PartRecord::set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slicesize(value);
  // @@protoc_insertion_point(field_set:PartRecord.slicesize)
}

// optional bytes real_sha = 9;
inline bool PartRecord::_internal_has_real_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PartRecord::has_real_sha() const {
  return _internal_has_real_sha();
}
inline void PartRecord::clear_real_sha() {
  real_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PartRecord::real_sha() const {
  // @@protoc_insertion_point(field_get:PartRecord.real_sha)
  return _internal_real_sha();
}
inline void PartRecord::set_real_sha(const std::string& value) {
  _internal_set_real_sha(value);
  // @@protoc_insertion_point(field_set:PartRecord.real_sha)
}
inline std::string* PartRecord::mutable_real_sha() {
  // @@protoc_insertion_point(field_mutable:PartRecord.real_sha)
  return _internal_mutable_real_sha();
}
inline const std::string& PartRecord::_internal_real_sha() const {
  return real_sha_.Get();
}
inline void PartRecord::_internal_set_real_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartRecord::set_real_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  real_sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PartRecord.real_sha)
}
inline void PartRecord::set_real_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PartRecord.real_sha)
}
inline void PartRecord::set_real_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  real_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PartRecord.real_sha)
}
inline std::string* PartRecord::_internal_mutable_real_sha() {
  _has_bits_[0] |= 0x00000002u;
  return real_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartRecord::release_real_sha() {
  // @@protoc_insertion_point(field_release:PartRecord.real_sha)
  if (!_internal_has_real_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return real_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartRecord::set_allocated_real_sha(std::string* real_sha) {
  if (real_sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  real_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PartRecord.real_sha)
}

// -------------------------------------------------------------------

// CosDataIndex

// optional uint32 chid = 1;
inline bool CosDataIndex::_internal_has_chid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CosDataIndex::has_chid() const {
  return _internal_has_chid();
}
inline void CosDataIndex::clear_chid() {
  chid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::_internal_chid() const {
  return chid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::chid() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.chid)
  return _internal_chid();
}
inline void CosDataIndex::_internal_set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  chid_ = value;
}
inline void CosDataIndex::set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chid(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.chid)
}

// optional uint32 fid = 2;
inline bool CosDataIndex::_internal_has_fid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CosDataIndex::has_fid() const {
  return _internal_has_fid();
}
inline void CosDataIndex::clear_fid() {
  fid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::fid() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.fid)
  return _internal_fid();
}
inline void CosDataIndex::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  fid_ = value;
}
inline void CosDataIndex::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.fid)
}

// optional uint32 datasize = 3;
inline bool CosDataIndex::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CosDataIndex::has_datasize() const {
  return _internal_has_datasize();
}
inline void CosDataIndex::clear_datasize() {
  datasize_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::datasize() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.datasize)
  return _internal_datasize();
}
inline void CosDataIndex::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  datasize_ = value;
}
inline void CosDataIndex::set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.datasize)
}

// optional uint64 offset = 4;
inline bool CosDataIndex::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CosDataIndex::has_offset() const {
  return _internal_has_offset();
}
inline void CosDataIndex::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosDataIndex::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosDataIndex::offset() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.offset)
  return _internal_offset();
}
inline void CosDataIndex::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  offset_ = value;
}
inline void CosDataIndex::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.offset)
}

// optional uint32 ctime = 5;
inline bool CosDataIndex::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CosDataIndex::has_ctime() const {
  return _internal_has_ctime();
}
inline void CosDataIndex::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::ctime() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.ctime)
  return _internal_ctime();
}
inline void CosDataIndex::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ctime_ = value;
}
inline void CosDataIndex::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.ctime)
}

// optional string dataflag = 6;
inline bool CosDataIndex::_internal_has_dataflag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosDataIndex::has_dataflag() const {
  return _internal_has_dataflag();
}
inline void CosDataIndex::clear_dataflag() {
  dataflag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosDataIndex::dataflag() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.dataflag)
  return _internal_dataflag();
}
inline void CosDataIndex::set_dataflag(const std::string& value) {
  _internal_set_dataflag(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.dataflag)
}
inline std::string* CosDataIndex::mutable_dataflag() {
  // @@protoc_insertion_point(field_mutable:CosDataIndex.dataflag)
  return _internal_mutable_dataflag();
}
inline const std::string& CosDataIndex::_internal_dataflag() const {
  return dataflag_.Get();
}
inline void CosDataIndex::_internal_set_dataflag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dataflag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosDataIndex::set_dataflag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dataflag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosDataIndex.dataflag)
}
inline void CosDataIndex::set_dataflag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dataflag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosDataIndex.dataflag)
}
inline void CosDataIndex::set_dataflag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dataflag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosDataIndex.dataflag)
}
inline std::string* CosDataIndex::_internal_mutable_dataflag() {
  _has_bits_[0] |= 0x00000001u;
  return dataflag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosDataIndex::release_dataflag() {
  // @@protoc_insertion_point(field_release:CosDataIndex.dataflag)
  if (!_internal_has_dataflag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dataflag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosDataIndex::set_allocated_dataflag(std::string* dataflag) {
  if (dataflag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dataflag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataflag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosDataIndex.dataflag)
}

// optional uint32 crc_num = 7;
inline bool CosDataIndex::_internal_has_crc_num() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CosDataIndex::has_crc_num() const {
  return _internal_has_crc_num();
}
inline void CosDataIndex::clear_crc_num() {
  crc_num_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::_internal_crc_num() const {
  return crc_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndex::crc_num() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.crc_num)
  return _internal_crc_num();
}
inline void CosDataIndex::_internal_set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  crc_num_ = value;
}
inline void CosDataIndex::set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc_num(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.crc_num)
}

// optional bytes cachekey = 8;
inline bool CosDataIndex::_internal_has_cachekey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosDataIndex::has_cachekey() const {
  return _internal_has_cachekey();
}
inline void CosDataIndex::clear_cachekey() {
  cachekey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CosDataIndex::cachekey() const {
  // @@protoc_insertion_point(field_get:CosDataIndex.cachekey)
  return _internal_cachekey();
}
inline void CosDataIndex::set_cachekey(const std::string& value) {
  _internal_set_cachekey(value);
  // @@protoc_insertion_point(field_set:CosDataIndex.cachekey)
}
inline std::string* CosDataIndex::mutable_cachekey() {
  // @@protoc_insertion_point(field_mutable:CosDataIndex.cachekey)
  return _internal_mutable_cachekey();
}
inline const std::string& CosDataIndex::_internal_cachekey() const {
  return cachekey_.Get();
}
inline void CosDataIndex::_internal_set_cachekey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cachekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosDataIndex::set_cachekey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cachekey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosDataIndex.cachekey)
}
inline void CosDataIndex::set_cachekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cachekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosDataIndex.cachekey)
}
inline void CosDataIndex::set_cachekey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cachekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosDataIndex.cachekey)
}
inline std::string* CosDataIndex::_internal_mutable_cachekey() {
  _has_bits_[0] |= 0x00000002u;
  return cachekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosDataIndex::release_cachekey() {
  // @@protoc_insertion_point(field_release:CosDataIndex.cachekey)
  if (!_internal_has_cachekey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cachekey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosDataIndex::set_allocated_cachekey(std::string* cachekey) {
  if (cachekey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cachekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cachekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosDataIndex.cachekey)
}

// -------------------------------------------------------------------

// CosDataIndexRsp

// optional bytes datakey = 1;
inline bool CosDataIndexRsp::_internal_has_datakey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_datakey() const {
  return _internal_has_datakey();
}
inline void CosDataIndexRsp::clear_datakey() {
  datakey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosDataIndexRsp::datakey() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.datakey)
  return _internal_datakey();
}
inline void CosDataIndexRsp::set_datakey(const std::string& value) {
  _internal_set_datakey(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.datakey)
}
inline std::string* CosDataIndexRsp::mutable_datakey() {
  // @@protoc_insertion_point(field_mutable:CosDataIndexRsp.datakey)
  return _internal_mutable_datakey();
}
inline const std::string& CosDataIndexRsp::_internal_datakey() const {
  return datakey_.Get();
}
inline void CosDataIndexRsp::_internal_set_datakey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosDataIndexRsp::set_datakey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  datakey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosDataIndexRsp.datakey)
}
inline void CosDataIndexRsp::set_datakey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosDataIndexRsp.datakey)
}
inline void CosDataIndexRsp::set_datakey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  datakey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosDataIndexRsp.datakey)
}
inline std::string* CosDataIndexRsp::_internal_mutable_datakey() {
  _has_bits_[0] |= 0x00000001u;
  return datakey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosDataIndexRsp::release_datakey() {
  // @@protoc_insertion_point(field_release:CosDataIndexRsp.datakey)
  if (!_internal_has_datakey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return datakey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosDataIndexRsp::set_allocated_datakey(std::string* datakey) {
  if (datakey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datakey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datakey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosDataIndexRsp.datakey)
}

// optional bytes version = 2;
inline bool CosDataIndexRsp::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_version() const {
  return _internal_has_version();
}
inline void CosDataIndexRsp::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CosDataIndexRsp::version() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.version)
  return _internal_version();
}
inline void CosDataIndexRsp::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.version)
}
inline std::string* CosDataIndexRsp::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CosDataIndexRsp.version)
  return _internal_mutable_version();
}
inline const std::string& CosDataIndexRsp::_internal_version() const {
  return version_.Get();
}
inline void CosDataIndexRsp::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosDataIndexRsp::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosDataIndexRsp.version)
}
inline void CosDataIndexRsp::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosDataIndexRsp.version)
}
inline void CosDataIndexRsp::set_version(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosDataIndexRsp.version)
}
inline std::string* CosDataIndexRsp::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosDataIndexRsp::release_version() {
  // @@protoc_insertion_point(field_release:CosDataIndexRsp.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosDataIndexRsp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosDataIndexRsp.version)
}

// optional uint32 chid = 3;
inline bool CosDataIndexRsp::_internal_has_chid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_chid() const {
  return _internal_has_chid();
}
inline void CosDataIndexRsp::clear_chid() {
  chid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::_internal_chid() const {
  return chid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::chid() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.chid)
  return _internal_chid();
}
inline void CosDataIndexRsp::_internal_set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  chid_ = value;
}
inline void CosDataIndexRsp::set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chid(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.chid)
}

// optional uint32 fid = 4;
inline bool CosDataIndexRsp::_internal_has_fid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_fid() const {
  return _internal_has_fid();
}
inline void CosDataIndexRsp::clear_fid() {
  fid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::fid() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.fid)
  return _internal_fid();
}
inline void CosDataIndexRsp::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  fid_ = value;
}
inline void CosDataIndexRsp::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.fid)
}

// optional uint32 storeid = 7;
inline bool CosDataIndexRsp::_internal_has_storeid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_storeid() const {
  return _internal_has_storeid();
}
inline void CosDataIndexRsp::clear_storeid() {
  storeid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::_internal_storeid() const {
  return storeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::storeid() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.storeid)
  return _internal_storeid();
}
inline void CosDataIndexRsp::_internal_set_storeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  storeid_ = value;
}
inline void CosDataIndexRsp::set_storeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storeid(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.storeid)
}

// optional uint32 datasize = 8;
inline bool CosDataIndexRsp::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_datasize() const {
  return _internal_has_datasize();
}
inline void CosDataIndexRsp::clear_datasize() {
  datasize_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::datasize() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.datasize)
  return _internal_datasize();
}
inline void CosDataIndexRsp::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  datasize_ = value;
}
inline void CosDataIndexRsp::set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.datasize)
}

// optional uint32 crc_num = 9;
inline bool CosDataIndexRsp::_internal_has_crc_num() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_crc_num() const {
  return _internal_has_crc_num();
}
inline void CosDataIndexRsp::clear_crc_num() {
  crc_num_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::_internal_crc_num() const {
  return crc_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosDataIndexRsp::crc_num() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.crc_num)
  return _internal_crc_num();
}
inline void CosDataIndexRsp::_internal_set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  crc_num_ = value;
}
inline void CosDataIndexRsp::set_crc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc_num(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.crc_num)
}

// optional bytes cachekey = 10;
inline bool CosDataIndexRsp::_internal_has_cachekey() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CosDataIndexRsp::has_cachekey() const {
  return _internal_has_cachekey();
}
inline void CosDataIndexRsp::clear_cachekey() {
  cachekey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CosDataIndexRsp::cachekey() const {
  // @@protoc_insertion_point(field_get:CosDataIndexRsp.cachekey)
  return _internal_cachekey();
}
inline void CosDataIndexRsp::set_cachekey(const std::string& value) {
  _internal_set_cachekey(value);
  // @@protoc_insertion_point(field_set:CosDataIndexRsp.cachekey)
}
inline std::string* CosDataIndexRsp::mutable_cachekey() {
  // @@protoc_insertion_point(field_mutable:CosDataIndexRsp.cachekey)
  return _internal_mutable_cachekey();
}
inline const std::string& CosDataIndexRsp::_internal_cachekey() const {
  return cachekey_.Get();
}
inline void CosDataIndexRsp::_internal_set_cachekey(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cachekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosDataIndexRsp::set_cachekey(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cachekey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosDataIndexRsp.cachekey)
}
inline void CosDataIndexRsp::set_cachekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cachekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosDataIndexRsp.cachekey)
}
inline void CosDataIndexRsp::set_cachekey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cachekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosDataIndexRsp.cachekey)
}
inline std::string* CosDataIndexRsp::_internal_mutable_cachekey() {
  _has_bits_[0] |= 0x00000004u;
  return cachekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosDataIndexRsp::release_cachekey() {
  // @@protoc_insertion_point(field_release:CosDataIndexRsp.cachekey)
  if (!_internal_has_cachekey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cachekey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosDataIndexRsp::set_allocated_cachekey(std::string* cachekey) {
  if (cachekey != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cachekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cachekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosDataIndexRsp.cachekey)
}

// -------------------------------------------------------------------

// CosPartItem

// required uint32 partnum = 1;
inline bool CosPartItem::_internal_has_partnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosPartItem::has_partnum() const {
  return _internal_has_partnum();
}
inline void CosPartItem::clear_partnum() {
  partnum_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosPartItem::_internal_partnum() const {
  return partnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosPartItem::partnum() const {
  // @@protoc_insertion_point(field_get:CosPartItem.partnum)
  return _internal_partnum();
}
inline void CosPartItem::_internal_set_partnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  partnum_ = value;
}
inline void CosPartItem::set_partnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_partnum(value);
  // @@protoc_insertion_point(field_set:CosPartItem.partnum)
}

// required bytes sha = 2;
inline bool CosPartItem::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosPartItem::has_sha() const {
  return _internal_has_sha();
}
inline void CosPartItem::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosPartItem::sha() const {
  // @@protoc_insertion_point(field_get:CosPartItem.sha)
  return _internal_sha();
}
inline void CosPartItem::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:CosPartItem.sha)
}
inline std::string* CosPartItem::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:CosPartItem.sha)
  return _internal_mutable_sha();
}
inline const std::string& CosPartItem::_internal_sha() const {
  return sha_.Get();
}
inline void CosPartItem::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosPartItem::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosPartItem.sha)
}
inline void CosPartItem::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosPartItem.sha)
}
inline void CosPartItem::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosPartItem.sha)
}
inline std::string* CosPartItem::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosPartItem::release_sha() {
  // @@protoc_insertion_point(field_release:CosPartItem.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosPartItem::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosPartItem.sha)
}

// -------------------------------------------------------------------

// CosPartdeleteItem

// required bool isfinish = 1;
inline bool CosPartdeleteItem::_internal_has_isfinish() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosPartdeleteItem::has_isfinish() const {
  return _internal_has_isfinish();
}
inline void CosPartdeleteItem::clear_isfinish() {
  isfinish_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CosPartdeleteItem::_internal_isfinish() const {
  return isfinish_;
}
inline bool CosPartdeleteItem::isfinish() const {
  // @@protoc_insertion_point(field_get:CosPartdeleteItem.isfinish)
  return _internal_isfinish();
}
inline void CosPartdeleteItem::_internal_set_isfinish(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isfinish_ = value;
}
inline void CosPartdeleteItem::set_isfinish(bool value) {
  _internal_set_isfinish(value);
  // @@protoc_insertion_point(field_set:CosPartdeleteItem.isfinish)
}

// required bytes sha = 2;
inline bool CosPartdeleteItem::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosPartdeleteItem::has_sha() const {
  return _internal_has_sha();
}
inline void CosPartdeleteItem::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosPartdeleteItem::sha() const {
  // @@protoc_insertion_point(field_get:CosPartdeleteItem.sha)
  return _internal_sha();
}
inline void CosPartdeleteItem::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:CosPartdeleteItem.sha)
}
inline std::string* CosPartdeleteItem::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:CosPartdeleteItem.sha)
  return _internal_mutable_sha();
}
inline const std::string& CosPartdeleteItem::_internal_sha() const {
  return sha_.Get();
}
inline void CosPartdeleteItem::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosPartdeleteItem::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosPartdeleteItem.sha)
}
inline void CosPartdeleteItem::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosPartdeleteItem.sha)
}
inline void CosPartdeleteItem::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosPartdeleteItem.sha)
}
inline std::string* CosPartdeleteItem::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosPartdeleteItem::release_sha() {
  // @@protoc_insertion_point(field_release:CosPartdeleteItem.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosPartdeleteItem::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosPartdeleteItem.sha)
}

// -------------------------------------------------------------------

// delstorinfo

// optional .storeinfo info = 1;
inline bool delstorinfo::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool delstorinfo::has_info() const {
  return _internal_has_info();
}
inline void delstorinfo::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::storeinfo& delstorinfo::_internal_info() const {
  const ::storeinfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::storeinfo&>(
      ::_storeinfo_default_instance_);
}
inline const ::storeinfo& delstorinfo::info() const {
  // @@protoc_insertion_point(field_get:delstorinfo.info)
  return _internal_info();
}
inline void delstorinfo::unsafe_arena_set_allocated_info(
    ::storeinfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delstorinfo.info)
}
inline ::storeinfo* delstorinfo::release_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::storeinfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::storeinfo* delstorinfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:delstorinfo.info)
  _has_bits_[0] &= ~0x00000001u;
  ::storeinfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::storeinfo* delstorinfo::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::storeinfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::storeinfo* delstorinfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:delstorinfo.info)
  return _internal_mutable_info();
}
inline void delstorinfo::set_allocated_info(::storeinfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:delstorinfo.info)
}

// optional uint32 id = 2;
inline bool delstorinfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool delstorinfo::has_id() const {
  return _internal_has_id();
}
inline void delstorinfo::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 delstorinfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 delstorinfo::id() const {
  // @@protoc_insertion_point(field_get:delstorinfo.id)
  return _internal_id();
}
inline void delstorinfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void delstorinfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:delstorinfo.id)
}

// -------------------------------------------------------------------

// storeinfo

// optional uint32 tfs_cl5_modid = 1;
inline bool storeinfo::_internal_has_tfs_cl5_modid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool storeinfo::has_tfs_cl5_modid() const {
  return _internal_has_tfs_cl5_modid();
}
inline void storeinfo::clear_tfs_cl5_modid() {
  tfs_cl5_modid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_tfs_cl5_modid() const {
  return tfs_cl5_modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::tfs_cl5_modid() const {
  // @@protoc_insertion_point(field_get:storeinfo.tfs_cl5_modid)
  return _internal_tfs_cl5_modid();
}
inline void storeinfo::_internal_set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tfs_cl5_modid_ = value;
}
inline void storeinfo::set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tfs_cl5_modid(value);
  // @@protoc_insertion_point(field_set:storeinfo.tfs_cl5_modid)
}

// optional uint32 tfs_cl5_cmid = 2;
inline bool storeinfo::_internal_has_tfs_cl5_cmid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool storeinfo::has_tfs_cl5_cmid() const {
  return _internal_has_tfs_cl5_cmid();
}
inline void storeinfo::clear_tfs_cl5_cmid() {
  tfs_cl5_cmid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_tfs_cl5_cmid() const {
  return tfs_cl5_cmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::tfs_cl5_cmid() const {
  // @@protoc_insertion_point(field_get:storeinfo.tfs_cl5_cmid)
  return _internal_tfs_cl5_cmid();
}
inline void storeinfo::_internal_set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tfs_cl5_cmid_ = value;
}
inline void storeinfo::set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tfs_cl5_cmid(value);
  // @@protoc_insertion_point(field_set:storeinfo.tfs_cl5_cmid)
}

// optional uint32 lavadb_cl5_modid = 3;
inline bool storeinfo::_internal_has_lavadb_cl5_modid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool storeinfo::has_lavadb_cl5_modid() const {
  return _internal_has_lavadb_cl5_modid();
}
inline void storeinfo::clear_lavadb_cl5_modid() {
  lavadb_cl5_modid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_lavadb_cl5_modid() const {
  return lavadb_cl5_modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::lavadb_cl5_modid() const {
  // @@protoc_insertion_point(field_get:storeinfo.lavadb_cl5_modid)
  return _internal_lavadb_cl5_modid();
}
inline void storeinfo::_internal_set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lavadb_cl5_modid_ = value;
}
inline void storeinfo::set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cl5_modid(value);
  // @@protoc_insertion_point(field_set:storeinfo.lavadb_cl5_modid)
}

// optional uint32 lavadb_cl5_cmid = 4;
inline bool storeinfo::_internal_has_lavadb_cl5_cmid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool storeinfo::has_lavadb_cl5_cmid() const {
  return _internal_has_lavadb_cl5_cmid();
}
inline void storeinfo::clear_lavadb_cl5_cmid() {
  lavadb_cl5_cmid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_lavadb_cl5_cmid() const {
  return lavadb_cl5_cmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::lavadb_cl5_cmid() const {
  // @@protoc_insertion_point(field_get:storeinfo.lavadb_cl5_cmid)
  return _internal_lavadb_cl5_cmid();
}
inline void storeinfo::_internal_set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  lavadb_cl5_cmid_ = value;
}
inline void storeinfo::set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cl5_cmid(value);
  // @@protoc_insertion_point(field_set:storeinfo.lavadb_cl5_cmid)
}

// optional uint32 lavadb_tid = 5;
inline bool storeinfo::_internal_has_lavadb_tid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool storeinfo::has_lavadb_tid() const {
  return _internal_has_lavadb_tid();
}
inline void storeinfo::clear_lavadb_tid() {
  lavadb_tid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_lavadb_tid() const {
  return lavadb_tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::lavadb_tid() const {
  // @@protoc_insertion_point(field_get:storeinfo.lavadb_tid)
  return _internal_lavadb_tid();
}
inline void storeinfo::_internal_set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  lavadb_tid_ = value;
}
inline void storeinfo::set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_tid(value);
  // @@protoc_insertion_point(field_set:storeinfo.lavadb_tid)
}

// optional uint32 lavadb_cid = 6;
inline bool storeinfo::_internal_has_lavadb_cid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool storeinfo::has_lavadb_cid() const {
  return _internal_has_lavadb_cid();
}
inline void storeinfo::clear_lavadb_cid() {
  lavadb_cid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_lavadb_cid() const {
  return lavadb_cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::lavadb_cid() const {
  // @@protoc_insertion_point(field_get:storeinfo.lavadb_cid)
  return _internal_lavadb_cid();
}
inline void storeinfo::_internal_set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  lavadb_cid_ = value;
}
inline void storeinfo::set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cid(value);
  // @@protoc_insertion_point(field_set:storeinfo.lavadb_cid)
}

// optional uint32 idcnum = 7;
inline bool storeinfo::_internal_has_idcnum() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool storeinfo::has_idcnum() const {
  return _internal_has_idcnum();
}
inline void storeinfo::clear_idcnum() {
  idcnum_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_idcnum() const {
  return idcnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::idcnum() const {
  // @@protoc_insertion_point(field_get:storeinfo.idcnum)
  return _internal_idcnum();
}
inline void storeinfo::_internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  idcnum_ = value;
}
inline void storeinfo::set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idcnum(value);
  // @@protoc_insertion_point(field_set:storeinfo.idcnum)
}

// optional bool isprefix = 8;
inline bool storeinfo::_internal_has_isprefix() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool storeinfo::has_isprefix() const {
  return _internal_has_isprefix();
}
inline void storeinfo::clear_isprefix() {
  isprefix_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool storeinfo::_internal_isprefix() const {
  return isprefix_;
}
inline bool storeinfo::isprefix() const {
  // @@protoc_insertion_point(field_get:storeinfo.isprefix)
  return _internal_isprefix();
}
inline void storeinfo::_internal_set_isprefix(bool value) {
  _has_bits_[0] |= 0x00000200u;
  isprefix_ = value;
}
inline void storeinfo::set_isprefix(bool value) {
  _internal_set_isprefix(value);
  // @@protoc_insertion_point(field_set:storeinfo.isprefix)
}

// optional uint32 isusetfscl5 = 9;
inline bool storeinfo::_internal_has_isusetfscl5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool storeinfo::has_isusetfscl5() const {
  return _internal_has_isusetfscl5();
}
inline void storeinfo::clear_isusetfscl5() {
  isusetfscl5_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_isusetfscl5() const {
  return isusetfscl5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::isusetfscl5() const {
  // @@protoc_insertion_point(field_get:storeinfo.isusetfscl5)
  return _internal_isusetfscl5();
}
inline void storeinfo::_internal_set_isusetfscl5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  isusetfscl5_ = value;
}
inline void storeinfo::set_isusetfscl5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_isusetfscl5(value);
  // @@protoc_insertion_point(field_set:storeinfo.isusetfscl5)
}

// optional bool use_local_tfsproxy = 10;
inline bool storeinfo::_internal_has_use_local_tfsproxy() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool storeinfo::has_use_local_tfsproxy() const {
  return _internal_has_use_local_tfsproxy();
}
inline void storeinfo::clear_use_local_tfsproxy() {
  use_local_tfsproxy_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool storeinfo::_internal_use_local_tfsproxy() const {
  return use_local_tfsproxy_;
}
inline bool storeinfo::use_local_tfsproxy() const {
  // @@protoc_insertion_point(field_get:storeinfo.use_local_tfsproxy)
  return _internal_use_local_tfsproxy();
}
inline void storeinfo::_internal_set_use_local_tfsproxy(bool value) {
  _has_bits_[0] |= 0x00000400u;
  use_local_tfsproxy_ = value;
}
inline void storeinfo::set_use_local_tfsproxy(bool value) {
  _internal_set_use_local_tfsproxy(value);
  // @@protoc_insertion_point(field_set:storeinfo.use_local_tfsproxy)
}

// optional bytes name = 11;
inline bool storeinfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool storeinfo::has_name() const {
  return _internal_has_name();
}
inline void storeinfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& storeinfo::name() const {
  // @@protoc_insertion_point(field_get:storeinfo.name)
  return _internal_name();
}
inline void storeinfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:storeinfo.name)
}
inline std::string* storeinfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:storeinfo.name)
  return _internal_mutable_name();
}
inline const std::string& storeinfo::_internal_name() const {
  return name_.Get();
}
inline void storeinfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void storeinfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:storeinfo.name)
}
inline void storeinfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:storeinfo.name)
}
inline void storeinfo::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:storeinfo.name)
}
inline std::string* storeinfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* storeinfo::release_name() {
  // @@protoc_insertion_point(field_release:storeinfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void storeinfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:storeinfo.name)
}

// optional bool use_cache = 12;
inline bool storeinfo::_internal_has_use_cache() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool storeinfo::has_use_cache() const {
  return _internal_has_use_cache();
}
inline void storeinfo::clear_use_cache() {
  use_cache_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool storeinfo::_internal_use_cache() const {
  return use_cache_;
}
inline bool storeinfo::use_cache() const {
  // @@protoc_insertion_point(field_get:storeinfo.use_cache)
  return _internal_use_cache();
}
inline void storeinfo::_internal_set_use_cache(bool value) {
  _has_bits_[0] |= 0x00000800u;
  use_cache_ = value;
}
inline void storeinfo::set_use_cache(bool value) {
  _internal_set_use_cache(value);
  // @@protoc_insertion_point(field_set:storeinfo.use_cache)
}

// optional uint32 cache_cl5_modid = 13;
inline bool storeinfo::_internal_has_cache_cl5_modid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool storeinfo::has_cache_cl5_modid() const {
  return _internal_has_cache_cl5_modid();
}
inline void storeinfo::clear_cache_cl5_modid() {
  cache_cl5_modid_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_cache_cl5_modid() const {
  return cache_cl5_modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::cache_cl5_modid() const {
  // @@protoc_insertion_point(field_get:storeinfo.cache_cl5_modid)
  return _internal_cache_cl5_modid();
}
inline void storeinfo::_internal_set_cache_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  cache_cl5_modid_ = value;
}
inline void storeinfo::set_cache_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cache_cl5_modid(value);
  // @@protoc_insertion_point(field_set:storeinfo.cache_cl5_modid)
}

// optional uint32 cache_cl5_cmdid = 14;
inline bool storeinfo::_internal_has_cache_cl5_cmdid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool storeinfo::has_cache_cl5_cmdid() const {
  return _internal_has_cache_cl5_cmdid();
}
inline void storeinfo::clear_cache_cl5_cmdid() {
  cache_cl5_cmdid_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::_internal_cache_cl5_cmdid() const {
  return cache_cl5_cmdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 storeinfo::cache_cl5_cmdid() const {
  // @@protoc_insertion_point(field_get:storeinfo.cache_cl5_cmdid)
  return _internal_cache_cl5_cmdid();
}
inline void storeinfo::_internal_set_cache_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  cache_cl5_cmdid_ = value;
}
inline void storeinfo::set_cache_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cache_cl5_cmdid(value);
  // @@protoc_insertion_point(field_set:storeinfo.cache_cl5_cmdid)
}

// -------------------------------------------------------------------

// cacheinfo

// optional uint32 lavadb_cl5_modid = 1;
inline bool cacheinfo::_internal_has_lavadb_cl5_modid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cacheinfo::has_lavadb_cl5_modid() const {
  return _internal_has_lavadb_cl5_modid();
}
inline void cacheinfo::clear_lavadb_cl5_modid() {
  lavadb_cl5_modid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::_internal_lavadb_cl5_modid() const {
  return lavadb_cl5_modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::lavadb_cl5_modid() const {
  // @@protoc_insertion_point(field_get:cacheinfo.lavadb_cl5_modid)
  return _internal_lavadb_cl5_modid();
}
inline void cacheinfo::_internal_set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lavadb_cl5_modid_ = value;
}
inline void cacheinfo::set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cl5_modid(value);
  // @@protoc_insertion_point(field_set:cacheinfo.lavadb_cl5_modid)
}

// optional uint32 lavadb_cl5_cmdid = 2;
inline bool cacheinfo::_internal_has_lavadb_cl5_cmdid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool cacheinfo::has_lavadb_cl5_cmdid() const {
  return _internal_has_lavadb_cl5_cmdid();
}
inline void cacheinfo::clear_lavadb_cl5_cmdid() {
  lavadb_cl5_cmdid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::_internal_lavadb_cl5_cmdid() const {
  return lavadb_cl5_cmdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::lavadb_cl5_cmdid() const {
  // @@protoc_insertion_point(field_get:cacheinfo.lavadb_cl5_cmdid)
  return _internal_lavadb_cl5_cmdid();
}
inline void cacheinfo::_internal_set_lavadb_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lavadb_cl5_cmdid_ = value;
}
inline void cacheinfo::set_lavadb_cl5_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cl5_cmdid(value);
  // @@protoc_insertion_point(field_set:cacheinfo.lavadb_cl5_cmdid)
}

// optional uint32 lavadb_tid = 3;
inline bool cacheinfo::_internal_has_lavadb_tid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool cacheinfo::has_lavadb_tid() const {
  return _internal_has_lavadb_tid();
}
inline void cacheinfo::clear_lavadb_tid() {
  lavadb_tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::_internal_lavadb_tid() const {
  return lavadb_tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::lavadb_tid() const {
  // @@protoc_insertion_point(field_get:cacheinfo.lavadb_tid)
  return _internal_lavadb_tid();
}
inline void cacheinfo::_internal_set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lavadb_tid_ = value;
}
inline void cacheinfo::set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_tid(value);
  // @@protoc_insertion_point(field_set:cacheinfo.lavadb_tid)
}

// optional uint32 lavadb_cid = 4;
inline bool cacheinfo::_internal_has_lavadb_cid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool cacheinfo::has_lavadb_cid() const {
  return _internal_has_lavadb_cid();
}
inline void cacheinfo::clear_lavadb_cid() {
  lavadb_cid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::_internal_lavadb_cid() const {
  return lavadb_cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::lavadb_cid() const {
  // @@protoc_insertion_point(field_get:cacheinfo.lavadb_cid)
  return _internal_lavadb_cid();
}
inline void cacheinfo::_internal_set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lavadb_cid_ = value;
}
inline void cacheinfo::set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cid(value);
  // @@protoc_insertion_point(field_set:cacheinfo.lavadb_cid)
}

// optional uint32 idcnum = 5;
inline bool cacheinfo::_internal_has_idcnum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool cacheinfo::has_idcnum() const {
  return _internal_has_idcnum();
}
inline void cacheinfo::clear_idcnum() {
  idcnum_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::_internal_idcnum() const {
  return idcnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 cacheinfo::idcnum() const {
  // @@protoc_insertion_point(field_get:cacheinfo.idcnum)
  return _internal_idcnum();
}
inline void cacheinfo::_internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  idcnum_ = value;
}
inline void cacheinfo::set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idcnum(value);
  // @@protoc_insertion_point(field_set:cacheinfo.idcnum)
}

// -------------------------------------------------------------------

// idcitem

// required uint32 idc = 1;
inline bool idcitem::_internal_has_idc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool idcitem::has_idc() const {
  return _internal_has_idc();
}
inline void idcitem::clear_idc() {
  idc_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 idcitem::_internal_idc() const {
  return idc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 idcitem::idc() const {
  // @@protoc_insertion_point(field_get:idcitem.idc)
  return _internal_idc();
}
inline void idcitem::_internal_set_idc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  idc_ = value;
}
inline void idcitem::set_idc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idc(value);
  // @@protoc_insertion_point(field_set:idcitem.idc)
}

// required uint32 ctime = 2;
inline bool idcitem::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool idcitem::has_ctime() const {
  return _internal_has_ctime();
}
inline void idcitem::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 idcitem::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 idcitem::ctime() const {
  // @@protoc_insertion_point(field_get:idcitem.ctime)
  return _internal_ctime();
}
inline void idcitem::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ctime_ = value;
}
inline void idcitem::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:idcitem.ctime)
}

// required uint32 uploadstate = 3;
inline bool idcitem::_internal_has_uploadstate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool idcitem::has_uploadstate() const {
  return _internal_has_uploadstate();
}
inline void idcitem::clear_uploadstate() {
  uploadstate_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 idcitem::_internal_uploadstate() const {
  return uploadstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 idcitem::uploadstate() const {
  // @@protoc_insertion_point(field_get:idcitem.uploadstate)
  return _internal_uploadstate();
}
inline void idcitem::_internal_set_uploadstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  uploadstate_ = value;
}
inline void idcitem::set_uploadstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uploadstate(value);
  // @@protoc_insertion_point(field_set:idcitem.uploadstate)
}

// -------------------------------------------------------------------

// sha1storeinfo

// optional bytes sha = 1;
inline bool sha1storeinfo::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool sha1storeinfo::has_sha() const {
  return _internal_has_sha();
}
inline void sha1storeinfo::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& sha1storeinfo::sha() const {
  // @@protoc_insertion_point(field_get:sha1storeinfo.sha)
  return _internal_sha();
}
inline void sha1storeinfo::set_sha(const std::string& value) {
  _internal_set_sha(value);
  // @@protoc_insertion_point(field_set:sha1storeinfo.sha)
}
inline std::string* sha1storeinfo::mutable_sha() {
  // @@protoc_insertion_point(field_mutable:sha1storeinfo.sha)
  return _internal_mutable_sha();
}
inline const std::string& sha1storeinfo::_internal_sha() const {
  return sha_.Get();
}
inline void sha1storeinfo::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void sha1storeinfo::set_sha(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sha1storeinfo.sha)
}
inline void sha1storeinfo::set_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sha1storeinfo.sha)
}
inline void sha1storeinfo::set_sha(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sha1storeinfo.sha)
}
inline std::string* sha1storeinfo::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* sha1storeinfo::release_sha() {
  // @@protoc_insertion_point(field_release:sha1storeinfo.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sha1storeinfo::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sha1storeinfo.sha)
}

// optional .storeinfo info = 2;
inline bool sha1storeinfo::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool sha1storeinfo::has_info() const {
  return _internal_has_info();
}
inline void sha1storeinfo::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::storeinfo& sha1storeinfo::_internal_info() const {
  const ::storeinfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::storeinfo&>(
      ::_storeinfo_default_instance_);
}
inline const ::storeinfo& sha1storeinfo::info() const {
  // @@protoc_insertion_point(field_get:sha1storeinfo.info)
  return _internal_info();
}
inline void sha1storeinfo::unsafe_arena_set_allocated_info(
    ::storeinfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sha1storeinfo.info)
}
inline ::storeinfo* sha1storeinfo::release_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::storeinfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::storeinfo* sha1storeinfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:sha1storeinfo.info)
  _has_bits_[0] &= ~0x00000002u;
  ::storeinfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::storeinfo* sha1storeinfo::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::storeinfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::storeinfo* sha1storeinfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:sha1storeinfo.info)
  return _internal_mutable_info();
}
inline void sha1storeinfo::set_allocated_info(::storeinfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:sha1storeinfo.info)
}

// optional .cacheinfo cache_info = 3;
inline bool sha1storeinfo::_internal_has_cache_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cache_info_ != nullptr);
  return value;
}
inline bool sha1storeinfo::has_cache_info() const {
  return _internal_has_cache_info();
}
inline void sha1storeinfo::clear_cache_info() {
  if (cache_info_ != nullptr) cache_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::cacheinfo& sha1storeinfo::_internal_cache_info() const {
  const ::cacheinfo* p = cache_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cacheinfo&>(
      ::_cacheinfo_default_instance_);
}
inline const ::cacheinfo& sha1storeinfo::cache_info() const {
  // @@protoc_insertion_point(field_get:sha1storeinfo.cache_info)
  return _internal_cache_info();
}
inline void sha1storeinfo::unsafe_arena_set_allocated_cache_info(
    ::cacheinfo* cache_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cache_info_);
  }
  cache_info_ = cache_info;
  if (cache_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sha1storeinfo.cache_info)
}
inline ::cacheinfo* sha1storeinfo::release_cache_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::cacheinfo* temp = cache_info_;
  cache_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cacheinfo* sha1storeinfo::unsafe_arena_release_cache_info() {
  // @@protoc_insertion_point(field_release:sha1storeinfo.cache_info)
  _has_bits_[0] &= ~0x00000004u;
  ::cacheinfo* temp = cache_info_;
  cache_info_ = nullptr;
  return temp;
}
inline ::cacheinfo* sha1storeinfo::_internal_mutable_cache_info() {
  _has_bits_[0] |= 0x00000004u;
  if (cache_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cacheinfo>(GetArena());
    cache_info_ = p;
  }
  return cache_info_;
}
inline ::cacheinfo* sha1storeinfo::mutable_cache_info() {
  // @@protoc_insertion_point(field_mutable:sha1storeinfo.cache_info)
  return _internal_mutable_cache_info();
}
inline void sha1storeinfo::set_allocated_cache_info(::cacheinfo* cache_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cache_info_;
  }
  if (cache_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cache_info);
    if (message_arena != submessage_arena) {
      cache_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cache_info_ = cache_info;
  // @@protoc_insertion_point(field_set_allocated:sha1storeinfo.cache_info)
}

// -------------------------------------------------------------------

// CosUploadCacheData

// optional uint32 datasize = 1;
inline bool CosUploadCacheData::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CosUploadCacheData::has_datasize() const {
  return _internal_has_datasize();
}
inline void CosUploadCacheData::clear_datasize() {
  datasize_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosUploadCacheData::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosUploadCacheData::datasize() const {
  // @@protoc_insertion_point(field_get:CosUploadCacheData.datasize)
  return _internal_datasize();
}
inline void CosUploadCacheData::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  datasize_ = value;
}
inline void CosUploadCacheData::set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:CosUploadCacheData.datasize)
}

// optional uint64 offset = 2;
inline bool CosUploadCacheData::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosUploadCacheData::has_offset() const {
  return _internal_has_offset();
}
inline void CosUploadCacheData::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosUploadCacheData::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosUploadCacheData::offset() const {
  // @@protoc_insertion_point(field_get:CosUploadCacheData.offset)
  return _internal_offset();
}
inline void CosUploadCacheData::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void CosUploadCacheData::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:CosUploadCacheData.offset)
}

// optional uint32 ctime = 3;
inline bool CosUploadCacheData::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CosUploadCacheData::has_ctime() const {
  return _internal_has_ctime();
}
inline void CosUploadCacheData::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosUploadCacheData::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosUploadCacheData::ctime() const {
  // @@protoc_insertion_point(field_get:CosUploadCacheData.ctime)
  return _internal_ctime();
}
inline void CosUploadCacheData::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ctime_ = value;
}
inline void CosUploadCacheData::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:CosUploadCacheData.ctime)
}

// optional bytes value = 4;
inline bool CosUploadCacheData::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosUploadCacheData::has_value() const {
  return _internal_has_value();
}
inline void CosUploadCacheData::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosUploadCacheData::value() const {
  // @@protoc_insertion_point(field_get:CosUploadCacheData.value)
  return _internal_value();
}
inline void CosUploadCacheData::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CosUploadCacheData.value)
}
inline std::string* CosUploadCacheData::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CosUploadCacheData.value)
  return _internal_mutable_value();
}
inline const std::string& CosUploadCacheData::_internal_value() const {
  return value_.Get();
}
inline void CosUploadCacheData::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosUploadCacheData::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosUploadCacheData.value)
}
inline void CosUploadCacheData::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosUploadCacheData.value)
}
inline void CosUploadCacheData::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosUploadCacheData.value)
}
inline std::string* CosUploadCacheData::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosUploadCacheData::release_value() {
  // @@protoc_insertion_point(field_release:CosUploadCacheData.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosUploadCacheData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosUploadCacheData.value)
}

// -------------------------------------------------------------------

// CosTfsIndex

// optional uint32 chid = 1;
inline bool CosTfsIndex::_internal_has_chid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosTfsIndex::has_chid() const {
  return _internal_has_chid();
}
inline void CosTfsIndex::clear_chid() {
  chid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::_internal_chid() const {
  return chid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::chid() const {
  // @@protoc_insertion_point(field_get:CosTfsIndex.chid)
  return _internal_chid();
}
inline void CosTfsIndex::_internal_set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  chid_ = value;
}
inline void CosTfsIndex::set_chid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chid(value);
  // @@protoc_insertion_point(field_set:CosTfsIndex.chid)
}

// optional uint32 fid = 2;
inline bool CosTfsIndex::_internal_has_fid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosTfsIndex::has_fid() const {
  return _internal_has_fid();
}
inline void CosTfsIndex::clear_fid() {
  fid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::fid() const {
  // @@protoc_insertion_point(field_get:CosTfsIndex.fid)
  return _internal_fid();
}
inline void CosTfsIndex::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fid_ = value;
}
inline void CosTfsIndex::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:CosTfsIndex.fid)
}

// optional uint32 datasize = 3;
inline bool CosTfsIndex::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CosTfsIndex::has_datasize() const {
  return _internal_has_datasize();
}
inline void CosTfsIndex::clear_datasize() {
  datasize_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::datasize() const {
  // @@protoc_insertion_point(field_get:CosTfsIndex.datasize)
  return _internal_datasize();
}
inline void CosTfsIndex::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  datasize_ = value;
}
inline void CosTfsIndex::set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:CosTfsIndex.datasize)
}

// optional uint64 offset = 4;
inline bool CosTfsIndex::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CosTfsIndex::has_offset() const {
  return _internal_has_offset();
}
inline void CosTfsIndex::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosTfsIndex::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosTfsIndex::offset() const {
  // @@protoc_insertion_point(field_get:CosTfsIndex.offset)
  return _internal_offset();
}
inline void CosTfsIndex::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
}
inline void CosTfsIndex::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:CosTfsIndex.offset)
}

// optional uint32 ctime = 5;
inline bool CosTfsIndex::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CosTfsIndex::has_ctime() const {
  return _internal_has_ctime();
}
inline void CosTfsIndex::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosTfsIndex::ctime() const {
  // @@protoc_insertion_point(field_get:CosTfsIndex.ctime)
  return _internal_ctime();
}
inline void CosTfsIndex::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ctime_ = value;
}
inline void CosTfsIndex::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:CosTfsIndex.ctime)
}

// -------------------------------------------------------------------

// CheckTfsinfo

// optional uint32 tfs_cl5_modid = 1;
inline bool CheckTfsinfo::_internal_has_tfs_cl5_modid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckTfsinfo::has_tfs_cl5_modid() const {
  return _internal_has_tfs_cl5_modid();
}
inline void CheckTfsinfo::clear_tfs_cl5_modid() {
  tfs_cl5_modid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckTfsinfo::_internal_tfs_cl5_modid() const {
  return tfs_cl5_modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckTfsinfo::tfs_cl5_modid() const {
  // @@protoc_insertion_point(field_get:CheckTfsinfo.tfs_cl5_modid)
  return _internal_tfs_cl5_modid();
}
inline void CheckTfsinfo::_internal_set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tfs_cl5_modid_ = value;
}
inline void CheckTfsinfo::set_tfs_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tfs_cl5_modid(value);
  // @@protoc_insertion_point(field_set:CheckTfsinfo.tfs_cl5_modid)
}

// optional uint32 tfs_cl5_cmid = 2;
inline bool CheckTfsinfo::_internal_has_tfs_cl5_cmid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CheckTfsinfo::has_tfs_cl5_cmid() const {
  return _internal_has_tfs_cl5_cmid();
}
inline void CheckTfsinfo::clear_tfs_cl5_cmid() {
  tfs_cl5_cmid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckTfsinfo::_internal_tfs_cl5_cmid() const {
  return tfs_cl5_cmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckTfsinfo::tfs_cl5_cmid() const {
  // @@protoc_insertion_point(field_get:CheckTfsinfo.tfs_cl5_cmid)
  return _internal_tfs_cl5_cmid();
}
inline void CheckTfsinfo::_internal_set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tfs_cl5_cmid_ = value;
}
inline void CheckTfsinfo::set_tfs_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tfs_cl5_cmid(value);
  // @@protoc_insertion_point(field_set:CheckTfsinfo.tfs_cl5_cmid)
}

// optional uint32 idcnum = 3;
inline bool CheckTfsinfo::_internal_has_idcnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CheckTfsinfo::has_idcnum() const {
  return _internal_has_idcnum();
}
inline void CheckTfsinfo::clear_idcnum() {
  idcnum_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckTfsinfo::_internal_idcnum() const {
  return idcnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckTfsinfo::idcnum() const {
  // @@protoc_insertion_point(field_get:CheckTfsinfo.idcnum)
  return _internal_idcnum();
}
inline void CheckTfsinfo::_internal_set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  idcnum_ = value;
}
inline void CheckTfsinfo::set_idcnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idcnum(value);
  // @@protoc_insertion_point(field_set:CheckTfsinfo.idcnum)
}

// optional bool isprefix = 4;
inline bool CheckTfsinfo::_internal_has_isprefix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CheckTfsinfo::has_isprefix() const {
  return _internal_has_isprefix();
}
inline void CheckTfsinfo::clear_isprefix() {
  isprefix_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CheckTfsinfo::_internal_isprefix() const {
  return isprefix_;
}
inline bool CheckTfsinfo::isprefix() const {
  // @@protoc_insertion_point(field_get:CheckTfsinfo.isprefix)
  return _internal_isprefix();
}
inline void CheckTfsinfo::_internal_set_isprefix(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isprefix_ = value;
}
inline void CheckTfsinfo::set_isprefix(bool value) {
  _internal_set_isprefix(value);
  // @@protoc_insertion_point(field_set:CheckTfsinfo.isprefix)
}

// repeated .CosTfsIndex datalist = 5;
inline int CheckTfsinfo::_internal_datalist_size() const {
  return datalist_.size();
}
inline int CheckTfsinfo::datalist_size() const {
  return _internal_datalist_size();
}
inline void CheckTfsinfo::clear_datalist() {
  datalist_.Clear();
}
inline ::CosTfsIndex* CheckTfsinfo::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:CheckTfsinfo.datalist)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosTfsIndex >*
CheckTfsinfo::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:CheckTfsinfo.datalist)
  return &datalist_;
}
inline const ::CosTfsIndex& CheckTfsinfo::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::CosTfsIndex& CheckTfsinfo::datalist(int index) const {
  // @@protoc_insertion_point(field_get:CheckTfsinfo.datalist)
  return _internal_datalist(index);
}
inline ::CosTfsIndex* CheckTfsinfo::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::CosTfsIndex* CheckTfsinfo::add_datalist() {
  // @@protoc_insertion_point(field_add:CheckTfsinfo.datalist)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosTfsIndex >&
CheckTfsinfo::datalist() const {
  // @@protoc_insertion_point(field_list:CheckTfsinfo.datalist)
  return datalist_;
}

// -------------------------------------------------------------------

// CosLavaDBIndex

// optional bytes keyhash = 1;
inline bool CosLavaDBIndex::_internal_has_keyhash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CosLavaDBIndex::has_keyhash() const {
  return _internal_has_keyhash();
}
inline void CosLavaDBIndex::clear_keyhash() {
  keyhash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CosLavaDBIndex::keyhash() const {
  // @@protoc_insertion_point(field_get:CosLavaDBIndex.keyhash)
  return _internal_keyhash();
}
inline void CosLavaDBIndex::set_keyhash(const std::string& value) {
  _internal_set_keyhash(value);
  // @@protoc_insertion_point(field_set:CosLavaDBIndex.keyhash)
}
inline std::string* CosLavaDBIndex::mutable_keyhash() {
  // @@protoc_insertion_point(field_mutable:CosLavaDBIndex.keyhash)
  return _internal_mutable_keyhash();
}
inline const std::string& CosLavaDBIndex::_internal_keyhash() const {
  return keyhash_.Get();
}
inline void CosLavaDBIndex::_internal_set_keyhash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  keyhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosLavaDBIndex::set_keyhash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  keyhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosLavaDBIndex.keyhash)
}
inline void CosLavaDBIndex::set_keyhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  keyhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosLavaDBIndex.keyhash)
}
inline void CosLavaDBIndex::set_keyhash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  keyhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosLavaDBIndex.keyhash)
}
inline std::string* CosLavaDBIndex::_internal_mutable_keyhash() {
  _has_bits_[0] |= 0x00000001u;
  return keyhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosLavaDBIndex::release_keyhash() {
  // @@protoc_insertion_point(field_release:CosLavaDBIndex.keyhash)
  if (!_internal_has_keyhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return keyhash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosLavaDBIndex::set_allocated_keyhash(std::string* keyhash) {
  if (keyhash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keyhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosLavaDBIndex.keyhash)
}

// optional bytes keyrange = 2;
inline bool CosLavaDBIndex::_internal_has_keyrange() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CosLavaDBIndex::has_keyrange() const {
  return _internal_has_keyrange();
}
inline void CosLavaDBIndex::clear_keyrange() {
  keyrange_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CosLavaDBIndex::keyrange() const {
  // @@protoc_insertion_point(field_get:CosLavaDBIndex.keyrange)
  return _internal_keyrange();
}
inline void CosLavaDBIndex::set_keyrange(const std::string& value) {
  _internal_set_keyrange(value);
  // @@protoc_insertion_point(field_set:CosLavaDBIndex.keyrange)
}
inline std::string* CosLavaDBIndex::mutable_keyrange() {
  // @@protoc_insertion_point(field_mutable:CosLavaDBIndex.keyrange)
  return _internal_mutable_keyrange();
}
inline const std::string& CosLavaDBIndex::_internal_keyrange() const {
  return keyrange_.Get();
}
inline void CosLavaDBIndex::_internal_set_keyrange(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  keyrange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CosLavaDBIndex::set_keyrange(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  keyrange_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CosLavaDBIndex.keyrange)
}
inline void CosLavaDBIndex::set_keyrange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  keyrange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CosLavaDBIndex.keyrange)
}
inline void CosLavaDBIndex::set_keyrange(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  keyrange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CosLavaDBIndex.keyrange)
}
inline std::string* CosLavaDBIndex::_internal_mutable_keyrange() {
  _has_bits_[0] |= 0x00000002u;
  return keyrange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CosLavaDBIndex::release_keyrange() {
  // @@protoc_insertion_point(field_release:CosLavaDBIndex.keyrange)
  if (!_internal_has_keyrange()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return keyrange_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CosLavaDBIndex::set_allocated_keyrange(std::string* keyrange) {
  if (keyrange != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  keyrange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyrange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CosLavaDBIndex.keyrange)
}

// optional uint32 datasize = 3;
inline bool CosLavaDBIndex::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CosLavaDBIndex::has_datasize() const {
  return _internal_has_datasize();
}
inline void CosLavaDBIndex::clear_datasize() {
  datasize_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosLavaDBIndex::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosLavaDBIndex::datasize() const {
  // @@protoc_insertion_point(field_get:CosLavaDBIndex.datasize)
  return _internal_datasize();
}
inline void CosLavaDBIndex::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  datasize_ = value;
}
inline void CosLavaDBIndex::set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:CosLavaDBIndex.datasize)
}

// optional uint64 offset = 4;
inline bool CosLavaDBIndex::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CosLavaDBIndex::has_offset() const {
  return _internal_has_offset();
}
inline void CosLavaDBIndex::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosLavaDBIndex::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CosLavaDBIndex::offset() const {
  // @@protoc_insertion_point(field_get:CosLavaDBIndex.offset)
  return _internal_offset();
}
inline void CosLavaDBIndex::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
}
inline void CosLavaDBIndex::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:CosLavaDBIndex.offset)
}

// optional uint32 ctime = 5;
inline bool CosLavaDBIndex::_internal_has_ctime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CosLavaDBIndex::has_ctime() const {
  return _internal_has_ctime();
}
inline void CosLavaDBIndex::clear_ctime() {
  ctime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosLavaDBIndex::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CosLavaDBIndex::ctime() const {
  // @@protoc_insertion_point(field_get:CosLavaDBIndex.ctime)
  return _internal_ctime();
}
inline void CosLavaDBIndex::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ctime_ = value;
}
inline void CosLavaDBIndex::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:CosLavaDBIndex.ctime)
}

// -------------------------------------------------------------------

// CheckLavaDBinfo

// optional uint32 lavadb_cl5_modid = 1;
inline bool CheckLavaDBinfo::_internal_has_lavadb_cl5_modid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckLavaDBinfo::has_lavadb_cl5_modid() const {
  return _internal_has_lavadb_cl5_modid();
}
inline void CheckLavaDBinfo::clear_lavadb_cl5_modid() {
  lavadb_cl5_modid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::_internal_lavadb_cl5_modid() const {
  return lavadb_cl5_modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::lavadb_cl5_modid() const {
  // @@protoc_insertion_point(field_get:CheckLavaDBinfo.lavadb_cl5_modid)
  return _internal_lavadb_cl5_modid();
}
inline void CheckLavaDBinfo::_internal_set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lavadb_cl5_modid_ = value;
}
inline void CheckLavaDBinfo::set_lavadb_cl5_modid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cl5_modid(value);
  // @@protoc_insertion_point(field_set:CheckLavaDBinfo.lavadb_cl5_modid)
}

// optional uint32 lavadb_cl5_cmid = 2;
inline bool CheckLavaDBinfo::_internal_has_lavadb_cl5_cmid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CheckLavaDBinfo::has_lavadb_cl5_cmid() const {
  return _internal_has_lavadb_cl5_cmid();
}
inline void CheckLavaDBinfo::clear_lavadb_cl5_cmid() {
  lavadb_cl5_cmid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::_internal_lavadb_cl5_cmid() const {
  return lavadb_cl5_cmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::lavadb_cl5_cmid() const {
  // @@protoc_insertion_point(field_get:CheckLavaDBinfo.lavadb_cl5_cmid)
  return _internal_lavadb_cl5_cmid();
}
inline void CheckLavaDBinfo::_internal_set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lavadb_cl5_cmid_ = value;
}
inline void CheckLavaDBinfo::set_lavadb_cl5_cmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cl5_cmid(value);
  // @@protoc_insertion_point(field_set:CheckLavaDBinfo.lavadb_cl5_cmid)
}

// optional uint32 lavadb_tid = 3;
inline bool CheckLavaDBinfo::_internal_has_lavadb_tid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CheckLavaDBinfo::has_lavadb_tid() const {
  return _internal_has_lavadb_tid();
}
inline void CheckLavaDBinfo::clear_lavadb_tid() {
  lavadb_tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::_internal_lavadb_tid() const {
  return lavadb_tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::lavadb_tid() const {
  // @@protoc_insertion_point(field_get:CheckLavaDBinfo.lavadb_tid)
  return _internal_lavadb_tid();
}
inline void CheckLavaDBinfo::_internal_set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lavadb_tid_ = value;
}
inline void CheckLavaDBinfo::set_lavadb_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_tid(value);
  // @@protoc_insertion_point(field_set:CheckLavaDBinfo.lavadb_tid)
}

// optional uint32 lavadb_cid = 4;
inline bool CheckLavaDBinfo::_internal_has_lavadb_cid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CheckLavaDBinfo::has_lavadb_cid() const {
  return _internal_has_lavadb_cid();
}
inline void CheckLavaDBinfo::clear_lavadb_cid() {
  lavadb_cid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::_internal_lavadb_cid() const {
  return lavadb_cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CheckLavaDBinfo::lavadb_cid() const {
  // @@protoc_insertion_point(field_get:CheckLavaDBinfo.lavadb_cid)
  return _internal_lavadb_cid();
}
inline void CheckLavaDBinfo::_internal_set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lavadb_cid_ = value;
}
inline void CheckLavaDBinfo::set_lavadb_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lavadb_cid(value);
  // @@protoc_insertion_point(field_set:CheckLavaDBinfo.lavadb_cid)
}

// repeated .CosLavaDBIndex datalist = 5;
inline int CheckLavaDBinfo::_internal_datalist_size() const {
  return datalist_.size();
}
inline int CheckLavaDBinfo::datalist_size() const {
  return _internal_datalist_size();
}
inline void CheckLavaDBinfo::clear_datalist() {
  datalist_.Clear();
}
inline ::CosLavaDBIndex* CheckLavaDBinfo::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:CheckLavaDBinfo.datalist)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosLavaDBIndex >*
CheckLavaDBinfo::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:CheckLavaDBinfo.datalist)
  return &datalist_;
}
inline const ::CosLavaDBIndex& CheckLavaDBinfo::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::CosLavaDBIndex& CheckLavaDBinfo::datalist(int index) const {
  // @@protoc_insertion_point(field_get:CheckLavaDBinfo.datalist)
  return _internal_datalist(index);
}
inline ::CosLavaDBIndex* CheckLavaDBinfo::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::CosLavaDBIndex* CheckLavaDBinfo::add_datalist() {
  // @@protoc_insertion_point(field_add:CheckLavaDBinfo.datalist)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CosLavaDBIndex >&
CheckLavaDBinfo::datalist() const {
  // @@protoc_insertion_point(field_list:CheckLavaDBinfo.datalist)
  return datalist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cos_store_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cos_store_type>() {
  return ::cos_store_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cos_5fcomm_2eproto
