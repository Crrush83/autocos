// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftncomm.proto

#include "ftncomm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_ftncomm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_ftncomm_2eproto;
namespace FTN {
class StorageAppMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageAppMsg> _instance;
} _StorageAppMsg_default_instance_;
class AppMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg> _instance;
} _AppMsg_default_instance_;
}  // namespace FTN
static void InitDefaultsscc_info_AppMsg_ftncomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_AppMsg_default_instance_;
    new (ptr) ::FTN::AppMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_ftncomm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppMsg_ftncomm_2eproto}, {}};

static void InitDefaultsscc_info_StorageAppMsg_ftncomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FTN::_StorageAppMsg_default_instance_;
    new (ptr) ::FTN::StorageAppMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageAppMsg_ftncomm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StorageAppMsg_ftncomm_2eproto}, {
      &scc_info_AppMsg_ftncomm_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ftncomm_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ftncomm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ftncomm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ftncomm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::FTN::StorageAppMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::StorageAppMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::StorageAppMsg, seq_),
  PROTOBUF_FIELD_OFFSET(::FTN::StorageAppMsg, body_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::FTN::AppMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FTN::AppMsg, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::FTN::AppMsg, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FTN::AppMsg, type_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::FTN::StorageAppMsg)},
  { 9, 15, sizeof(::FTN::AppMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_StorageAppMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FTN::_AppMsg_default_instance_),
};

const char descriptor_table_protodef_ftncomm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rftncomm.proto\022\003FTN\"7\n\rStorageAppMsg\022\013\n"
  "\003seq\030\001 \002(\r\022\031\n\004body\030\002 \002(\0132\013.FTN.AppMsg\"\256\003"
  "\n\006AppMsg\022\036\n\004type\030\001 \002(\0162\020.FTN.AppMsg.Type"
  "\"\374\002\n\004Type\022\021\n\rFtnNugcReqMsg\020\005\022\021\n\rFtnNugcR"
  "spMsg\020\006\022\035\n\031photo_album_FtnNugcReqMsg\020\007\022\035"
  "\n\031photo_album_FtnNugcRspMsg\020\010\022\023\n\017FtnAcce"
  "ssReqMsg\020\n\022\023\n\017FtnAccessRspMsg\020\013\022\027\n\023FtnAc"
  "cessHttpReqMsg\020\014\022\027\n\023FtnAccessHttpRspMsg\020"
  "\r\022\023\n\017FtnDeleteReqMsg\020\016\022\023\n\017FtnDeleteRspMs"
  "g\020\017\022\026\n\022CosQuartzsvrReqMsg\020\020\022\026\n\022CosQuartz"
  "svrRspMsg\020\021\022\025\n\021CosTransferReqMsg\020\022\022\025\n\021Co"
  "sTransferRspMsg\020\023\022\025\n\021CosTegProxyReqMsg\020\024"
  "\022\025\n\021CosTegProxyRspMsg\020\025*\005\010d\020\221N"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ftncomm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ftncomm_2eproto_sccs[2] = {
  &scc_info_AppMsg_ftncomm_2eproto.base,
  &scc_info_StorageAppMsg_ftncomm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ftncomm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ftncomm_2eproto = {
  false, false, descriptor_table_protodef_ftncomm_2eproto, "ftncomm.proto", 510,
  &descriptor_table_ftncomm_2eproto_once, descriptor_table_ftncomm_2eproto_sccs, descriptor_table_ftncomm_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ftncomm_2eproto::offsets,
  file_level_metadata_ftncomm_2eproto, 2, file_level_enum_descriptors_ftncomm_2eproto, file_level_service_descriptors_ftncomm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ftncomm_2eproto(&descriptor_table_ftncomm_2eproto);
namespace FTN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppMsg_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ftncomm_2eproto);
  return file_level_enum_descriptors_ftncomm_2eproto[0];
}
bool AppMsg_Type_IsValid(int value) {
  switch (value) {
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppMsg_Type AppMsg::FtnNugcReqMsg;
constexpr AppMsg_Type AppMsg::FtnNugcRspMsg;
constexpr AppMsg_Type AppMsg::photo_album_FtnNugcReqMsg;
constexpr AppMsg_Type AppMsg::photo_album_FtnNugcRspMsg;
constexpr AppMsg_Type AppMsg::FtnAccessReqMsg;
constexpr AppMsg_Type AppMsg::FtnAccessRspMsg;
constexpr AppMsg_Type AppMsg::FtnAccessHttpReqMsg;
constexpr AppMsg_Type AppMsg::FtnAccessHttpRspMsg;
constexpr AppMsg_Type AppMsg::FtnDeleteReqMsg;
constexpr AppMsg_Type AppMsg::FtnDeleteRspMsg;
constexpr AppMsg_Type AppMsg::CosQuartzsvrReqMsg;
constexpr AppMsg_Type AppMsg::CosQuartzsvrRspMsg;
constexpr AppMsg_Type AppMsg::CosTransferReqMsg;
constexpr AppMsg_Type AppMsg::CosTransferRspMsg;
constexpr AppMsg_Type AppMsg::CosTegProxyReqMsg;
constexpr AppMsg_Type AppMsg::CosTegProxyRspMsg;
constexpr AppMsg_Type AppMsg::Type_MIN;
constexpr AppMsg_Type AppMsg::Type_MAX;
constexpr int AppMsg::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class StorageAppMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageAppMsg>()._has_bits_);
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::FTN::AppMsg& body(const StorageAppMsg* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::FTN::AppMsg&
StorageAppMsg::_Internal::body(const StorageAppMsg* msg) {
  return *msg->body_;
}
StorageAppMsg::StorageAppMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.StorageAppMsg)
}
StorageAppMsg::StorageAppMsg(const StorageAppMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body()) {
    body_ = new ::FTN::AppMsg(*from.body_);
  } else {
    body_ = nullptr;
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:FTN.StorageAppMsg)
}

void StorageAppMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageAppMsg_ftncomm_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&body_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&body_)) + sizeof(seq_));
}

StorageAppMsg::~StorageAppMsg() {
  // @@protoc_insertion_point(destructor:FTN.StorageAppMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageAppMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete body_;
}

void StorageAppMsg::ArenaDtor(void* object) {
  StorageAppMsg* _this = reinterpret_cast< StorageAppMsg* >(object);
  (void)_this;
}
void StorageAppMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageAppMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageAppMsg& StorageAppMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageAppMsg_ftncomm_2eproto.base);
  return *internal_default_instance();
}


void StorageAppMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.StorageAppMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(body_ != nullptr);
    body_->Clear();
  }
  seq_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageAppMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .FTN.AppMsg body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageAppMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.StorageAppMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 seq = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // required .FTN.AppMsg body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.StorageAppMsg)
  return target;
}

size_t StorageAppMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTN.StorageAppMsg)
  size_t total_size = 0;

  if (_internal_has_body()) {
    // required .FTN.AppMsg body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (_internal_has_seq()) {
    // required uint32 seq = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  return total_size;
}
size_t StorageAppMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.StorageAppMsg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .FTN.AppMsg body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);

    // required uint32 seq = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageAppMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.StorageAppMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageAppMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageAppMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.StorageAppMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.StorageAppMsg)
    MergeFrom(*source);
  }
}

void StorageAppMsg::MergeFrom(const StorageAppMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.StorageAppMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_body()->::FTN::AppMsg::MergeFrom(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StorageAppMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.StorageAppMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageAppMsg::CopyFrom(const StorageAppMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.StorageAppMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageAppMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_body()) {
    if (!body_->IsInitialized()) return false;
  }
  return true;
}

void StorageAppMsg::InternalSwap(StorageAppMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorageAppMsg, seq_)
      + sizeof(StorageAppMsg::seq_)
      - PROTOBUF_FIELD_OFFSET(StorageAppMsg, body_)>(
          reinterpret_cast<char*>(&body_),
          reinterpret_cast<char*>(&other->body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageAppMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMsg>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppMsg::AppMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FTN.AppMsg)
}
AppMsg::AppMsg(const AppMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:FTN.AppMsg)
}

void AppMsg::SharedCtor() {
  type_ = 5;
}

AppMsg::~AppMsg() {
  // @@protoc_insertion_point(destructor:FTN.AppMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppMsg::ArenaDtor(void* object) {
  AppMsg* _this = reinterpret_cast< AppMsg* >(object);
  (void)_this;
}
void AppMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg& AppMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_ftncomm_2eproto.base);
  return *internal_default_instance();
}


void AppMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FTN.AppMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  type_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .FTN.AppMsg.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FTN::AppMsg_Type_IsValid(val))) {
            _internal_set_type(static_cast<::FTN::AppMsg_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 80008u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTN.AppMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .FTN.AppMsg.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // Extension range [100, 10001)
  target = _extensions_._InternalSerialize(
      100, 10001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTN.AppMsg)
  return target;
}

size_t AppMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTN.AppMsg)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .FTN.AppMsg.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTN.AppMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTN.AppMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTN.AppMsg)
    MergeFrom(*source);
  }
}

void AppMsg::MergeFrom(const AppMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTN.AppMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void AppMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTN.AppMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg::CopyFrom(const AppMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTN.AppMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppMsg::InternalSwap(AppMsg* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FTN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FTN::StorageAppMsg* Arena::CreateMaybeMessage< ::FTN::StorageAppMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::StorageAppMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::FTN::AppMsg* Arena::CreateMaybeMessage< ::FTN::AppMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTN::AppMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
